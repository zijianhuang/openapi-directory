//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateIpGroupsRequest
	{
		
		/// <summary>
		/// Max length: 65
		/// Min length: 10
		/// Pattern: ^d-[0-9a-f]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65, MinimumLength=10)]
		public string DirectoryId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IpGroupId[] GroupIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizeIpRulesRequest
	{
		
		/// <summary>
		/// Pattern: wsipg-[0-9a-z]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IpRuleItem[] UserRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyWorkspaceImageResult
	{
		
		/// <summary>
		/// Pattern: wsi-[0-9a-z]{9,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyWorkspaceImageRequest
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_./()\\-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_./() -]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Pattern: wsi-[0-9a-z]{9,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceImageId { get; set; }
		
		/// <summary>
		/// Max length: 31
		/// Min length: 1
		/// Pattern: ^[-0-9a-z]{1,31}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(31, MinimumLength=1)]
		public string SourceRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateIpGroupResult
	{
		
		/// <summary>
		/// Pattern: wsipg-[0-9a-z]{8,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateIpGroupRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupDesc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpRuleItem[] UserRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTagsRequest
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateWorkspacesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailedCreateWorkspaceRequest[] FailedRequests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Workspace[] PendingRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateWorkspacesRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public WorkspaceRequest[] Workspaces { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteIpGroupRequest
	{
		
		/// <summary>
		/// Pattern: wsipg-[0-9a-z]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTagsRequest
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NonEmptyString[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteWorkspaceImageRequest
	{
		
		/// <summary>
		/// Pattern: wsi-[0-9a-z]{9,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterWorkspaceDirectoryRequest
	{
		
		/// <summary>
		/// Max length: 65
		/// Min length: 10
		/// Pattern: ^d-[0-9a-f]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65, MinimumLength=10)]
		public string DirectoryId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAccountResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeAccountResultDedicatedTenancySupport DedicatedTenancySupport { get; set; }
		
		/// <summary>
		/// Pattern: (^([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.0\.0)(\/(16$))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DedicatedTenancyManagementCidrRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeAccountResultDedicatedTenancySupport
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAccountModificationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountModification[] AccountModifications { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAccountModificationsRequest
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClientPropertiesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ClientPropertiesResult[] ClientPropertiesList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClientPropertiesRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public NonEmptyString[] ResourceIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIpGroupsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspacesIpGroup[] Result { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIpGroupsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IpGroupId[] GroupIds { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTagsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTagsRequest
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeWorkspaceBundlesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceBundle[] Bundles { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeWorkspaceBundlesRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public BundleId[] BundleIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Owner { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeWorkspaceDirectoriesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceDirectory[] Directories { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeWorkspaceDirectoriesRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public DirectoryId[] DirectoryIds { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeWorkspaceImagesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceImage[] Images { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeWorkspaceImagesRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public WorkspaceImageId[] ImageIds { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeWorkspaceSnapshotsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Snapshot[] RebuildSnapshots { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Snapshot[] RestoreSnapshots { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeWorkspaceSnapshotsRequest
	{
		
		/// <summary>
		/// Pattern: ^ws-[0-9a-z]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkspaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeWorkspacesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Workspace[] Workspaces { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeWorkspacesRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public WorkspaceId[] WorkspaceIds { get; set; }
		
		/// <summary>
		/// Max length: 65
		/// Min length: 10
		/// Pattern: ^d-[0-9a-f]{8,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65, MinimumLength=10)]
		public string DirectoryId { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string UserName { get; set; }
		
		/// <summary>
		/// Pattern: ^wsb-[0-9a-z]{8,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BundleId { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeWorkspacesConnectionStatusResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceConnectionStatus[] WorkspacesConnectionStatus { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeWorkspacesConnectionStatusRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public WorkspaceId[] WorkspaceIds { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateIpGroupsRequest
	{
		
		/// <summary>
		/// Max length: 65
		/// Min length: 10
		/// Pattern: ^d-[0-9a-f]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65, MinimumLength=10)]
		public string DirectoryId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IpGroupId[] GroupIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportWorkspaceImageResult
	{
		
		/// <summary>
		/// Pattern: wsi-[0-9a-z]{9,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportWorkspaceImageRequest
	{
		
		/// <summary>
		/// Pattern: ^ami\-([a-f0-9]{8}|[a-f0-9]{17})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Ec2ImageId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ImportWorkspaceImageRequestIngestionProcess IngestionProcess { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_./()\\-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ImageName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_./() -]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ImageDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ImportWorkspaceImageRequestIngestionProcess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYOL_REGULAR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYOL_GRAPHICS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYOL_GRAPHICSPRO = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAvailableManagementCidrRangesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DedicatedTenancyManagementCidrRange[] ManagementCidrRanges { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAvailableManagementCidrRangesRequest
	{
		
		/// <summary>
		/// Pattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ManagementCidrRangeConstraint { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 5)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MigrateWorkspaceResult
	{
		
		/// <summary>
		/// Pattern: ^ws-[0-9a-z]{8,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceWorkspaceId { get; set; }
		
		/// <summary>
		/// Pattern: ^ws-[0-9a-z]{8,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TargetWorkspaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MigrateWorkspaceRequest
	{
		
		/// <summary>
		/// Pattern: ^ws-[0-9a-z]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceWorkspaceId { get; set; }
		
		/// <summary>
		/// Pattern: ^wsb-[0-9a-z]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BundleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyAccountRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ModifyAccountRequestDedicatedTenancySupport DedicatedTenancySupport { get; set; }
		
		/// <summary>
		/// Pattern: (^([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.0\.0)(\/(16$))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DedicatedTenancyManagementCidrRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ModifyAccountRequestDedicatedTenancySupport
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClientPropertiesRequest
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Describes an Amazon WorkSpaces client.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ClientProperties ClientProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifySelfservicePermissionsRequest
	{
		
		/// <summary>
		/// Max length: 65
		/// Min length: 10
		/// Pattern: ^d-[0-9a-f]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65, MinimumLength=10)]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Describes the self-service permissions for a directory. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/enable-user-self-service-workspace-management.html">Enable Self-Service WorkSpace Management Capabilities for Your Users</a>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SelfservicePermissions SelfservicePermissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyWorkspaceAccessPropertiesRequest
	{
		
		/// <summary>
		/// Max length: 65
		/// Min length: 10
		/// Pattern: ^d-[0-9a-f]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65, MinimumLength=10)]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// The device types and operating systems that can be used to access a WorkSpace. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-network-requirements.html">Amazon WorkSpaces Client Network Requirements</a>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceAccessProperties WorkspaceAccessProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyWorkspaceCreationPropertiesRequest
	{
		
		/// <summary>
		/// Max length: 65
		/// Min length: 10
		/// Pattern: ^d-[0-9a-f]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65, MinimumLength=10)]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Describes the default properties that are used for creating WorkSpaces. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/update-directory-details.html">Update Directory Details for Your WorkSpaces</a>. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceCreationProperties WorkspaceCreationProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyWorkspacePropertiesRequest
	{
		
		/// <summary>
		/// Pattern: ^ws-[0-9a-z]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkspaceId { get; set; }
		
		/// <summary>
		/// Describes a WorkSpace.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceProperties WorkspaceProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyWorkspaceStateRequest
	{
		
		/// <summary>
		/// Pattern: ^ws-[0-9a-z]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkspaceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModifyWorkspaceStateRequestWorkspaceState WorkspaceState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ModifyWorkspaceStateRequestWorkspaceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_MAINTENANCE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebootWorkspacesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailedWorkspaceChangeRequest[] FailedRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebootWorkspacesRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public RebootRequest[] RebootWorkspaceRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebuildWorkspacesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailedWorkspaceChangeRequest[] FailedRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebuildWorkspacesRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public RebuildRequest[] RebuildWorkspaceRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterWorkspaceDirectoryRequest
	{
		
		/// <summary>
		/// Max length: 65
		/// Min length: 10
		/// Pattern: ^d-[0-9a-f]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65, MinimumLength=10)]
		public string DirectoryId { get; set; }
		
		/// <summary>
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public SubnetId[] SubnetIds { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool EnableWorkDocs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableSelfService { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RegisterWorkspaceDirectoryRequestTenancy Tenancy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegisterWorkspaceDirectoryRequestTenancy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEDICATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHARED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreWorkspaceRequest
	{
		
		/// <summary>
		/// Pattern: ^ws-[0-9a-z]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkspaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RevokeIpRulesRequest
	{
		
		/// <summary>
		/// Pattern: wsipg-[0-9a-z]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IpRule[] UserRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartWorkspacesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailedWorkspaceChangeRequest[] FailedRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartWorkspacesRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public StartRequest[] StartWorkspaceRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopWorkspacesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailedWorkspaceChangeRequest[] FailedRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopWorkspacesRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public StopRequest[] StopWorkspaceRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TerminateWorkspacesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailedWorkspaceChangeRequest[] FailedRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TerminateWorkspacesRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public TerminateRequest[] TerminateWorkspaceRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRulesOfIpGroupRequest
	{
		
		/// <summary>
		/// Pattern: wsipg-[0-9a-z]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IpRuleItem[] UserRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccessPropertyValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DedicatedTenancyModificationStateEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DedicatedTenancySupportResultEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Describes a modification to the configuration of Bring Your Own License (BYOL) for the specified account. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountModification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountModificationModificationState ModificationState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccountModificationDedicatedTenancySupport DedicatedTenancySupport { get; set; }
		
		/// <summary>
		/// Pattern: (^([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.0\.0)(\/(16$))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DedicatedTenancyManagementCidrRange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountModificationModificationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountModificationDedicatedTenancySupport
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Describes a WorkSpace bundle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkspaceBundle
	{
		
		/// <summary>
		/// Pattern: ^wsb-[0-9a-z]{8,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BundleId { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Pattern: wsi-[0-9a-z]{9,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		/// <summary>
		/// Describes the root volume for a WorkSpace bundle.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RootStorage RootStorage { get; set; }
		
		/// <summary>
		/// Describes the user storage for a WorkSpace bundle.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserStorage UserStorage { get; set; }
		
		/// <summary>
		/// Describes the compute type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComputeType ComputeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReconnectEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Describes an Amazon WorkSpaces client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ClientPropertiesReconnectEnabled ReconnectEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClientPropertiesReconnectEnabled
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Information about the Amazon WorkSpaces client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientPropertiesResult
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Describes an Amazon WorkSpaces client.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientProperties ClientProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Compute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POWER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRAPHICS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POWERPRO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRAPHICSPRO = 6,
	}
	
	/// <summary>
	/// Describes the compute type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ComputeType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComputeTypeName Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComputeTypeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POWER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRAPHICS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POWERPRO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRAPHICSPRO = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConnectionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCONNECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DedicatedTenancySupportEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
	}
	
	/// <summary>
	/// Describes the default values that are used to create WorkSpaces. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/update-directory-details.html">Update Directory Details for Your WorkSpaces</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DefaultWorkspaceCreationProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableWorkDocs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableInternetAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultOu { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// Min length: 11
		/// Pattern: ^(sg-([0-9a-f]{8}|[0-9a-f]{17}))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=11)]
		public string CustomSecurityGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UserEnabledAsLocalAdministrator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableMaintenanceMode { get; set; }
	}
	
	/// <summary>
	/// Describes a directory that is used with Amazon WorkSpaces.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkspaceDirectory
	{
		
		/// <summary>
		/// Max length: 65
		/// Min length: 10
		/// Pattern: ^d-[0-9a-f]{8,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65, MinimumLength=10)]
		public string DirectoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryName { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=1)]
		public string RegistrationCode { get; set; }
		
		/// <summary>
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public SubnetId[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpAddress[] DnsIpAddresses { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string CustomerUserName { get; set; }
		
		/// <summary>
		/// Pattern: ^arn:aws:[A-Za-z0-9][A-za-z0-9_/.-]{0,62}:[A-za-z0-9_/.-]{0,63}:[A-za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-za-z0-9_/.-]{0,127}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceDirectoryDirectoryType DirectoryType { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// Min length: 11
		/// Pattern: ^(sg-([0-9a-f]{8}|[0-9a-f]{17}))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=11)]
		public string WorkspaceSecurityGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceDirectoryState State { get; set; }
		
		/// <summary>
		/// Describes the default values that are used to create WorkSpaces. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/update-directory-details.html">Update Directory Details for Your WorkSpaces</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DefaultWorkspaceCreationProperties WorkspaceCreationProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpGroupId[] IpGroupIds { get; set; }
		
		/// <summary>
		/// The device types and operating systems that can be used to access a WorkSpace. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-network-requirements.html">Amazon WorkSpaces Client Network Requirements</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceAccessProperties WorkspaceAccessProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceDirectoryTenancy Tenancy { get; set; }
		
		/// <summary>
		/// Describes the self-service permissions for a directory. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/enable-user-self-service-workspace-management.html">Enable Self-Service WorkSpace Management Capabilities for Your Users</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SelfservicePermissions SelfservicePermissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceDirectoryDirectoryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIMPLE_AD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_CONNECTOR = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceDirectoryState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEREGISTERING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEREGISTERED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceDirectoryTenancy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEDICATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHARED = 1,
	}
	
	/// <summary>
	/// Describes the information used to create a WorkSpace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkspaceRequest
	{
		
		/// <summary>
		/// Max length: 65
		/// Min length: 10
		/// Pattern: ^d-[0-9a-f]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65, MinimumLength=10)]
		public string DirectoryId { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string UserName { get; set; }
		
		/// <summary>
		/// Pattern: ^wsb-[0-9a-z]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeEncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UserVolumeEncryptionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RootVolumeEncryptionEnabled { get; set; }
		
		/// <summary>
		/// Describes a WorkSpace.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceProperties WorkspaceProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes a WorkSpace that cannot be created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FailedCreateWorkspaceRequest
	{
		
		/// <summary>
		/// Describes the information used to create a WorkSpace.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceRequest WorkspaceRequest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// Describes a WorkSpace that could not be rebooted. (<a>RebootWorkspaces</a>), rebuilt (<a>RebuildWorkspaces</a>), restored (<a>RestoreWorkspace</a>), terminated (<a>TerminateWorkspaces</a>), started (<a>StartWorkspaces</a>), or stopped (<a>StopWorkspaces</a>).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FailedWorkspaceChangeRequest
	{
		
		/// <summary>
		/// Pattern: ^ws-[0-9a-z]{8,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WorkspaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceImageIngestionProcess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYOL_REGULAR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYOL_GRAPHICS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYOL_GRAPHICSPRO = 2,
	}
	
	/// <summary>
	/// Describes a rule for an IP access control group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IpRuleItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IpRule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RuleDesc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ModificationResourceEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROOT_VOLUME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_VOLUME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPUTE_TYPE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ModificationStateEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_INITIATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 1,
	}
	
	/// <summary>
	/// Describes a WorkSpace modification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModificationState
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ModificationStateResource Resource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModificationStateState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ModificationStateResource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROOT_VOLUME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_VOLUME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPUTE_TYPE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ModificationStateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_INITIATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 1,
	}
	
	/// <summary>
	/// Describes the self-service permissions for a directory. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/enable-user-self-service-workspace-management.html">Enable Self-Service WorkSpace Management Capabilities for Your Users</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SelfservicePermissions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SelfservicePermissionsRestartWorkspace RestartWorkspace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelfservicePermissionsIncreaseVolumeSize IncreaseVolumeSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelfservicePermissionsChangeComputeType ChangeComputeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelfservicePermissionsSwitchRunningMode SwitchRunningMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SelfservicePermissionsRebuildWorkspace RebuildWorkspace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SelfservicePermissionsRestartWorkspace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SelfservicePermissionsIncreaseVolumeSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SelfservicePermissionsChangeComputeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SelfservicePermissionsSwitchRunningMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SelfservicePermissionsRebuildWorkspace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// The device types and operating systems that can be used to access a WorkSpace. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-network-requirements.html">Amazon WorkSpaces Client Network Requirements</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkspaceAccessProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceAccessPropertiesDeviceTypeWindows DeviceTypeWindows { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceAccessPropertiesDeviceTypeOsx DeviceTypeOsx { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceAccessPropertiesDeviceTypeWeb DeviceTypeWeb { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceAccessPropertiesDeviceTypeIos DeviceTypeIos { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceAccessPropertiesDeviceTypeAndroid DeviceTypeAndroid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceAccessPropertiesDeviceTypeChromeOs DeviceTypeChromeOs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceAccessPropertiesDeviceTypeZeroClient DeviceTypeZeroClient { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceAccessPropertiesDeviceTypeWindows
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceAccessPropertiesDeviceTypeOsx
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceAccessPropertiesDeviceTypeWeb
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceAccessPropertiesDeviceTypeIos
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceAccessPropertiesDeviceTypeAndroid
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceAccessPropertiesDeviceTypeChromeOs
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceAccessPropertiesDeviceTypeZeroClient
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	/// <summary>
	/// Describes the default properties that are used for creating WorkSpaces. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/update-directory-details.html">Update Directory Details for Your WorkSpaces</a>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkspaceCreationProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableInternetAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultOu { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// Min length: 11
		/// Pattern: ^(sg-([0-9a-f]{8}|[0-9a-f]{17}))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=11)]
		public string CustomSecurityGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UserEnabledAsLocalAdministrator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableMaintenanceMode { get; set; }
	}
	
	/// <summary>
	/// Describes a WorkSpace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkspaceProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspacePropertiesRunningMode RunningMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RunningModeAutoStopTimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RootVolumeSizeGib { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserVolumeSizeGib { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspacePropertiesComputeTypeName ComputeTypeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspacePropertiesRunningMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO_STOP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALWAYS_ON = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspacePropertiesComputeTypeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POWER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRAPHICS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POWERPRO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRAPHICSPRO = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TargetWorkspaceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_MAINTENANCE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OperatingSystemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX = 1,
	}
	
	/// <summary>
	/// The operating system that the image is running.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OperatingSystem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OperatingSystemType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OperatingSystemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX = 1,
	}
	
	/// <summary>
	/// Describes the information used to reboot a WorkSpace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebootRequest
	{
		
		/// <summary>
		/// Pattern: ^ws-[0-9a-z]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkspaceId { get; set; }
	}
	
	/// <summary>
	/// Describes the information used to rebuild a WorkSpace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebuildRequest
	{
		
		/// <summary>
		/// Pattern: ^ws-[0-9a-z]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkspaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Tenancy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEDICATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHARED = 1,
	}
	
	/// <summary>
	/// Describes the root volume for a WorkSpace bundle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RootStorage
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Capacity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RunningMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO_STOP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALWAYS_ON = 1,
	}
	
	/// <summary>
	/// Describes a snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Snapshot
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SnapshotTime { get; set; }
	}
	
	/// <summary>
	/// Information used to start a WorkSpace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartRequest
	{
		
		/// <summary>
		/// Pattern: ^ws-[0-9a-z]{8,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WorkspaceId { get; set; }
	}
	
	/// <summary>
	/// Describes the information used to stop a WorkSpace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopRequest
	{
		
		/// <summary>
		/// Pattern: ^ws-[0-9a-z]{8,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WorkspaceId { get; set; }
	}
	
	/// <summary>
	/// Describes a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 127
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(127, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Describes the information used to terminate a WorkSpace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TerminateRequest
	{
		
		/// <summary>
		/// Pattern: ^ws-[0-9a-z]{8,63}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkspaceId { get; set; }
	}
	
	/// <summary>
	/// Describes the user storage for a WorkSpace bundle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserStorage
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Capacity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPAIRED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHEALTHY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REBOOTING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REBUILDING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTORING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAINTENANCE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_MAINTENANCE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATING = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 16,
	}
	
	/// <summary>
	/// Describes a WorkSpace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Workspace
	{
		
		/// <summary>
		/// Pattern: ^ws-[0-9a-z]{8,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WorkspaceId { get; set; }
		
		/// <summary>
		/// Max length: 65
		/// Min length: 10
		/// Pattern: ^d-[0-9a-f]{8,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65, MinimumLength=10)]
		public string DirectoryId { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceState State { get; set; }
		
		/// <summary>
		/// Pattern: ^wsb-[0-9a-z]{8,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BundleId { get; set; }
		
		/// <summary>
		/// Max length: 24
		/// Min length: 15
		/// Pattern: ^(subnet-([0-9a-f]{8}|[0-9a-f]{17}))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(24, MinimumLength=15)]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ComputerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeEncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UserVolumeEncryptionEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RootVolumeEncryptionEnabled { get; set; }
		
		/// <summary>
		/// Describes a WorkSpace.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceProperties WorkspaceProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModificationState[] ModificationStates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPAIRED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHEALTHY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REBOOTING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REBUILDING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTORING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAINTENANCE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_MAINTENANCE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATING = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 16,
	}
	
	/// <summary>
	/// Describes the connection status of a WorkSpace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkspaceConnectionStatus
	{
		
		/// <summary>
		/// Pattern: ^ws-[0-9a-z]{8,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WorkspaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceConnectionStatusConnectionState ConnectionState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ConnectionStateCheckTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastKnownUserConnectionTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceConnectionStatusConnectionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCONNECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceDirectoryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIMPLE_AD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_CONNECTOR = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceDirectoryState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEREGISTERING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEREGISTERED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceImageState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceImageRequiredTenancy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEDICATED = 1,
	}
	
	/// <summary>
	/// Describes a WorkSpace image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkspaceImage
	{
		
		/// <summary>
		/// Pattern: wsi-[0-9a-z]{9,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_./()\\-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_./() -]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// The operating system that the image is running.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OperatingSystem OperatingSystem { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceImageState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkspaceImageRequiredTenancy RequiredTenancy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceImageState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkspaceImageRequiredTenancy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEDICATED = 1,
	}
	
	/// <summary>
	/// Describes an IP access control group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkspacesIpGroup
	{
		
		/// <summary>
		/// Pattern: wsipg-[0-9a-z]{8,63}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupDesc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpRuleItem[] UserRules { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Associates the specified IP access control group with the specified directory.
		/// AssociateIpGroups /#X-Amz-Target=WorkspacesService.AssociateIpGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateIpGroupsResult> AssociateIpGroupsAsync(AssociateIpGroupsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.AssociateIpGroups";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AssociateIpGroupsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Adds one or more rules to the specified IP access control group.</p> <p>This action gives users permission to access their WorkSpaces from the CIDR address ranges specified in the rules.</p>
		/// AuthorizeIpRules /#X-Amz-Target=WorkspacesService.AuthorizeIpRules
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AuthorizeIpRulesResult> AuthorizeIpRulesAsync(AuthorizeIpRulesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.AuthorizeIpRules";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AuthorizeIpRulesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Copies the specified image from the specified Region to the current Region.
		/// CopyWorkspaceImage /#X-Amz-Target=WorkspacesService.CopyWorkspaceImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CopyWorkspaceImageResult> CopyWorkspaceImageAsync(CopyWorkspaceImageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.CopyWorkspaceImage";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CopyWorkspaceImageResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an IP access control group.</p> <p>An IP access control group provides you with the ability to control the IP addresses from which users are allowed to access their WorkSpaces. To specify the CIDR address ranges, add rules to your IP access control group and then associate the group with your directory. You can add rules when you create the group or at any time using <a>AuthorizeIpRules</a>.</p> <p>There is a default IP access control group associated with your directory. If you don't associate an IP access control group with your directory, the default group is used. The default group includes a default rule that allows users to access their WorkSpaces from anywhere. You cannot modify the default IP access control group for your directory.</p>
		/// CreateIpGroup /#X-Amz-Target=WorkspacesService.CreateIpGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateIpGroupResult> CreateIpGroupAsync(CreateIpGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.CreateIpGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateIpGroupResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates the specified tags for the specified WorkSpaces resource.
		/// CreateTags /#X-Amz-Target=WorkspacesService.CreateTags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTagsResult> CreateTagsAsync(CreateTagsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.CreateTags";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateTagsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates one or more WorkSpaces.</p> <p>This operation is asynchronous and returns before the WorkSpaces are created.</p>
		/// CreateWorkspaces /#X-Amz-Target=WorkspacesService.CreateWorkspaces
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateWorkspacesResult> CreateWorkspacesAsync(CreateWorkspacesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.CreateWorkspaces";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateWorkspacesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified IP access control group.</p> <p>You cannot delete an IP access control group that is associated with a directory.</p>
		/// DeleteIpGroup /#X-Amz-Target=WorkspacesService.DeleteIpGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteIpGroupResult> DeleteIpGroupAsync(DeleteIpGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.DeleteIpGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteIpGroupResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified tags from the specified WorkSpaces resource.
		/// DeleteTags /#X-Amz-Target=WorkspacesService.DeleteTags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteTagsResult> DeleteTagsAsync(DeleteTagsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.DeleteTags";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteTagsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified image from your account. To delete an image, you must first delete any bundles that are associated with the image and un-share the image if it is shared with other accounts.
		/// DeleteWorkspaceImage /#X-Amz-Target=WorkspacesService.DeleteWorkspaceImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteWorkspaceImageResult> DeleteWorkspaceImageAsync(DeleteWorkspaceImageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.DeleteWorkspaceImage";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteWorkspaceImageResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deregisters the specified directory. This operation is asynchronous and returns before the WorkSpace directory is deregistered. If any WorkSpaces are registered to this directory, you must remove them before you can deregister the directory.
		/// DeregisterWorkspaceDirectory /#X-Amz-Target=WorkspacesService.DeregisterWorkspaceDirectory
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeregisterWorkspaceDirectoryResult> DeregisterWorkspaceDirectoryAsync(DeregisterWorkspaceDirectoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.DeregisterWorkspaceDirectory";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeregisterWorkspaceDirectoryResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list that describes the configuration of Bring Your Own License (BYOL) for the specified account.
		/// DescribeAccount /#X-Amz-Target=WorkspacesService.DescribeAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAccountResult> DescribeAccountAsync(DescribeAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.DescribeAccount";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAccountResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list that describes modifications to the configuration of Bring Your Own License (BYOL) for the specified account.
		/// DescribeAccountModifications /#X-Amz-Target=WorkspacesService.DescribeAccountModifications
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAccountModificationsResult> DescribeAccountModificationsAsync(DescribeAccountModificationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.DescribeAccountModifications";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAccountModificationsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list that describes one or more specified Amazon WorkSpaces clients.
		/// DescribeClientProperties /#X-Amz-Target=WorkspacesService.DescribeClientProperties
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeClientPropertiesResult> DescribeClientPropertiesAsync(DescribeClientPropertiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.DescribeClientProperties";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeClientPropertiesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your IP access control groups.
		/// DescribeIpGroups /#X-Amz-Target=WorkspacesService.DescribeIpGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeIpGroupsResult> DescribeIpGroupsAsync(DescribeIpGroupsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.DescribeIpGroups";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeIpGroupsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the specified tags for the specified WorkSpaces resource.
		/// DescribeTags /#X-Amz-Target=WorkspacesService.DescribeTags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeTagsResult> DescribeTagsAsync(DescribeTagsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.DescribeTags";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeTagsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves a list that describes the available WorkSpace bundles.</p> <p>You can filter the results using either bundle ID or owner, but not both.</p>
		/// DescribeWorkspaceBundles /#X-Amz-Target=WorkspacesService.DescribeWorkspaceBundles
		/// </summary>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeWorkspaceBundlesResult> DescribeWorkspaceBundlesAsync(string NextToken, DescribeWorkspaceBundlesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.DescribeWorkspaceBundles?NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeWorkspaceBundlesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the available directories that are registered with Amazon WorkSpaces.
		/// DescribeWorkspaceDirectories /#X-Amz-Target=WorkspacesService.DescribeWorkspaceDirectories
		/// </summary>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeWorkspaceDirectoriesResult> DescribeWorkspaceDirectoriesAsync(string NextToken, DescribeWorkspaceDirectoriesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.DescribeWorkspaceDirectories?NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeWorkspaceDirectoriesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list that describes one or more specified images, if the image identifiers are provided. Otherwise, all images in the account are described.
		/// DescribeWorkspaceImages /#X-Amz-Target=WorkspacesService.DescribeWorkspaceImages
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeWorkspaceImagesResult> DescribeWorkspaceImagesAsync(DescribeWorkspaceImagesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.DescribeWorkspaceImages";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeWorkspaceImagesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the snapshots for the specified WorkSpace.
		/// DescribeWorkspaceSnapshots /#X-Amz-Target=WorkspacesService.DescribeWorkspaceSnapshots
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeWorkspaceSnapshotsResult> DescribeWorkspaceSnapshotsAsync(DescribeWorkspaceSnapshotsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.DescribeWorkspaceSnapshots";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeWorkspaceSnapshotsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified WorkSpaces.</p> <p>You can filter the results by using the bundle identifier, directory identifier, or owner, but you can specify only one filter at a time.</p>
		/// DescribeWorkspaces /#X-Amz-Target=WorkspacesService.DescribeWorkspaces
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeWorkspacesResult> DescribeWorkspacesAsync(string Limit, string NextToken, DescribeWorkspacesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.DescribeWorkspaces?Limit=" + (Limit==null? "" : Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeWorkspacesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the connection status of the specified WorkSpaces.
		/// DescribeWorkspacesConnectionStatus /#X-Amz-Target=WorkspacesService.DescribeWorkspacesConnectionStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeWorkspacesConnectionStatusResult> DescribeWorkspacesConnectionStatusAsync(DescribeWorkspacesConnectionStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.DescribeWorkspacesConnectionStatus";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeWorkspacesConnectionStatusResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates the specified IP access control group from the specified directory.
		/// DisassociateIpGroups /#X-Amz-Target=WorkspacesService.DisassociateIpGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateIpGroupsResult> DisassociateIpGroupsAsync(DisassociateIpGroupsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.DisassociateIpGroups";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisassociateIpGroupsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Imports the specified Windows 7 or Windows 10 Bring Your Own License (BYOL) image into Amazon WorkSpaces. The image must be an already licensed EC2 image that is in your AWS account, and you must own the image.
		/// ImportWorkspaceImage /#X-Amz-Target=WorkspacesService.ImportWorkspaceImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ImportWorkspaceImageResult> ImportWorkspaceImageAsync(ImportWorkspaceImageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.ImportWorkspaceImage";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ImportWorkspaceImageResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves a list of IP address ranges, specified as IPv4 CIDR blocks, that you can use for the network management interface when you enable Bring Your Own License (BYOL). </p> <p>The management network interface is connected to a secure Amazon WorkSpaces management network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces clients, and to allow Amazon WorkSpaces to manage the WorkSpace.</p>
		/// ListAvailableManagementCidrRanges /#X-Amz-Target=WorkspacesService.ListAvailableManagementCidrRanges
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListAvailableManagementCidrRangesResult> ListAvailableManagementCidrRangesAsync(ListAvailableManagementCidrRangesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.ListAvailableManagementCidrRanges";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListAvailableManagementCidrRangesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Migrates a WorkSpace from one operating system or bundle type to another, while retaining the data on the user volume.</p> <p>The migration process recreates the WorkSpace by using a new root volume from the target bundle image and the user volume from the last available snapshot of the original WorkSpace. During migration, the original <code>D:\Users\%USERNAME%</code> user profile folder is renamed to <code>D:\Users\%USERNAME%MMddyyTHHmmss%.NotMigrated</code>. A new <code>D:\Users\%USERNAME%\</code> folder is generated by the new OS. Certain files in the old user profile are moved to the new user profile.</p> <p>For available migration scenarios, details about what happens during migration, and best practices, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/migrate-workspaces.html">Migrate a WorkSpace</a>.</p>
		/// MigrateWorkspace /#X-Amz-Target=WorkspacesService.MigrateWorkspace
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MigrateWorkspaceResult> MigrateWorkspaceAsync(MigrateWorkspaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.MigrateWorkspace";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MigrateWorkspaceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the configuration of Bring Your Own License (BYOL) for the specified account.
		/// ModifyAccount /#X-Amz-Target=WorkspacesService.ModifyAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ModifyAccountResult> ModifyAccountAsync(ModifyAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.ModifyAccount";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ModifyAccountResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the properties of the specified Amazon WorkSpaces clients.
		/// ModifyClientProperties /#X-Amz-Target=WorkspacesService.ModifyClientProperties
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ModifyClientPropertiesResult> ModifyClientPropertiesAsync(ModifyClientPropertiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.ModifyClientProperties";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ModifyClientPropertiesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the self-service WorkSpace management capabilities for your users. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/enable-user-self-service-workspace-management.html">Enable Self-Service WorkSpace Management Capabilities for Your Users</a>.
		/// ModifySelfservicePermissions /#X-Amz-Target=WorkspacesService.ModifySelfservicePermissions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ModifySelfservicePermissionsResult> ModifySelfservicePermissionsAsync(ModifySelfservicePermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.ModifySelfservicePermissions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ModifySelfservicePermissionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Specifies which devices and operating systems users can use to access their WorkSpaces. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/update-directory-details.html#control-device-access"> Control Device Access</a>.
		/// ModifyWorkspaceAccessProperties /#X-Amz-Target=WorkspacesService.ModifyWorkspaceAccessProperties
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ModifyWorkspaceAccessPropertiesResult> ModifyWorkspaceAccessPropertiesAsync(ModifyWorkspaceAccessPropertiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.ModifyWorkspaceAccessProperties";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ModifyWorkspaceAccessPropertiesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modify the default properties used to create WorkSpaces.
		/// ModifyWorkspaceCreationProperties /#X-Amz-Target=WorkspacesService.ModifyWorkspaceCreationProperties
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ModifyWorkspaceCreationPropertiesResult> ModifyWorkspaceCreationPropertiesAsync(ModifyWorkspaceCreationPropertiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.ModifyWorkspaceCreationProperties";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ModifyWorkspaceCreationPropertiesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified WorkSpace properties.
		/// ModifyWorkspaceProperties /#X-Amz-Target=WorkspacesService.ModifyWorkspaceProperties
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ModifyWorkspacePropertiesResult> ModifyWorkspacePropertiesAsync(ModifyWorkspacePropertiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.ModifyWorkspaceProperties";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ModifyWorkspacePropertiesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the state of the specified WorkSpace.</p> <p>To maintain a WorkSpace without being interrupted, set the WorkSpace state to <code>ADMIN_MAINTENANCE</code>. WorkSpaces in this state do not respond to requests to reboot, stop, start, rebuild, or restore. An AutoStop WorkSpace in this state is not stopped. Users cannot log into a WorkSpace in the <code>ADMIN_MAINTENANCE</code> state.</p>
		/// ModifyWorkspaceState /#X-Amz-Target=WorkspacesService.ModifyWorkspaceState
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ModifyWorkspaceStateResult> ModifyWorkspaceStateAsync(ModifyWorkspaceStateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.ModifyWorkspaceState";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ModifyWorkspaceStateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Reboots the specified WorkSpaces.</p> <p>You cannot reboot a WorkSpace unless its state is <code>AVAILABLE</code> or <code>UNHEALTHY</code>.</p> <p>This operation is asynchronous and returns before the WorkSpaces have rebooted.</p>
		/// RebootWorkspaces /#X-Amz-Target=WorkspacesService.RebootWorkspaces
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RebootWorkspacesResult> RebootWorkspacesAsync(RebootWorkspacesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.RebootWorkspaces";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RebootWorkspacesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Rebuilds the specified WorkSpace.</p> <p>You cannot rebuild a WorkSpace unless its state is <code>AVAILABLE</code>, <code>ERROR</code>, <code>UNHEALTHY</code>, or <code>STOPPED</code>.</p> <p>Rebuilding a WorkSpace is a potentially destructive action that can result in the loss of data. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/reset-workspace.html">Rebuild a WorkSpace</a>.</p> <p>This operation is asynchronous and returns before the WorkSpaces have been completely rebuilt.</p>
		/// RebuildWorkspaces /#X-Amz-Target=WorkspacesService.RebuildWorkspaces
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RebuildWorkspacesResult> RebuildWorkspacesAsync(RebuildWorkspacesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.RebuildWorkspaces";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RebuildWorkspacesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Registers the specified directory. This operation is asynchronous and returns before the WorkSpace directory is registered. If this is the first time you are registering a directory, you will need to create the workspaces_DefaultRole role before you can register a directory. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-access-control.html#create-default-role"> Creating the workspaces_DefaultRole Role</a>.
		/// RegisterWorkspaceDirectory /#X-Amz-Target=WorkspacesService.RegisterWorkspaceDirectory
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterWorkspaceDirectoryResult> RegisterWorkspaceDirectoryAsync(RegisterWorkspaceDirectoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.RegisterWorkspaceDirectory";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RegisterWorkspaceDirectoryResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Restores the specified WorkSpace to its last known healthy state.</p> <p>You cannot restore a WorkSpace unless its state is <code> AVAILABLE</code>, <code>ERROR</code>, <code>UNHEALTHY</code>, or <code>STOPPED</code>.</p> <p>Restoring a WorkSpace is a potentially destructive action that can result in the loss of data. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/restore-workspace.html">Restore a WorkSpace</a>.</p> <p>This operation is asynchronous and returns before the WorkSpace is completely restored.</p>
		/// RestoreWorkspace /#X-Amz-Target=WorkspacesService.RestoreWorkspace
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RestoreWorkspaceResult> RestoreWorkspaceAsync(RestoreWorkspaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.RestoreWorkspace";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RestoreWorkspaceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes one or more rules from the specified IP access control group.
		/// RevokeIpRules /#X-Amz-Target=WorkspacesService.RevokeIpRules
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RevokeIpRulesResult> RevokeIpRulesAsync(RevokeIpRulesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.RevokeIpRules";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RevokeIpRulesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts the specified WorkSpaces.</p> <p>You cannot start a WorkSpace unless it has a running mode of <code>AutoStop</code> and a state of <code>STOPPED</code>.</p>
		/// StartWorkspaces /#X-Amz-Target=WorkspacesService.StartWorkspaces
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartWorkspacesResult> StartWorkspacesAsync(StartWorkspacesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.StartWorkspaces";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartWorkspacesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Stops the specified WorkSpaces.</p> <p>You cannot stop a WorkSpace unless it has a running mode of <code>AutoStop</code> and a state of <code>AVAILABLE</code>, <code>IMPAIRED</code>, <code>UNHEALTHY</code>, or <code>ERROR</code>.</p>
		/// StopWorkspaces /#X-Amz-Target=WorkspacesService.StopWorkspaces
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopWorkspacesResult> StopWorkspacesAsync(StopWorkspacesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.StopWorkspaces";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopWorkspacesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Terminates the specified WorkSpaces.</p> <p>Terminating a WorkSpace is a permanent action and cannot be undone. The user's data is destroyed. If you need to archive any user data, contact Amazon Web Services before terminating the WorkSpace.</p> <p>You can terminate a WorkSpace that is in any state except <code>SUSPENDED</code>.</p> <p>This operation is asynchronous and returns before the WorkSpaces have been completely terminated.</p>
		/// TerminateWorkspaces /#X-Amz-Target=WorkspacesService.TerminateWorkspaces
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TerminateWorkspacesResult> TerminateWorkspacesAsync(TerminateWorkspacesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.TerminateWorkspaces";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TerminateWorkspacesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replaces the current rules of the specified IP access control group with the specified rules.
		/// UpdateRulesOfIpGroup /#X-Amz-Target=WorkspacesService.UpdateRulesOfIpGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateRulesOfIpGroupResult> UpdateRulesOfIpGroupAsync(UpdateRulesOfIpGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=WorkspacesService.UpdateRulesOfIpGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateRulesOfIpGroupResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
