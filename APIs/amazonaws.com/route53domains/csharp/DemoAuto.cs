//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The AcceptDomainTransferFromAnotherAwsAccount response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptDomainTransferFromAnotherAwsAccountResponse
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The AcceptDomainTransferFromAnotherAwsAccount request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptDomainTransferFromAnotherAwsAccountRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// The <code>CancelDomainTransferToAnotherAwsAccount</code> response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelDomainTransferToAnotherAwsAccountResponse
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The CancelDomainTransferToAnotherAwsAccount request includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelDomainTransferToAnotherAwsAccountRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// The CheckDomainAvailability response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CheckDomainAvailabilityResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CheckDomainAvailabilityResponseAvailability Availability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CheckDomainAvailabilityResponseAvailability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE_RESERVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE_PREORDER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE_PREMIUM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE_RESTRICTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONT_KNOW = 7,
	}
	
	/// <summary>
	/// The CheckDomainAvailability request contains the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CheckDomainAvailabilityRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3)]
		public string IdnLangCode { get; set; }
	}
	
	/// <summary>
	/// The CheckDomainTransferability response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CheckDomainTransferabilityResponse
	{
		
		/// <summary>
		/// A complex type that contains information about whether the specified domain can be transferred to Route 53.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainTransferability Transferability { get; set; }
	}
	
	/// <summary>
	/// The CheckDomainTransferability request contains the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CheckDomainTransferabilityRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024)]
		public string AuthCode { get; set; }
	}
	
	/// <summary>
	/// The DeleteTagsForDomainRequest includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTagsForDomainRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagKey[] TagsToDelete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableDomainAutoRenewRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// The DisableDomainTransferLock response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableDomainTransferLockResponse
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The DisableDomainTransferLock request includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableDomainTransferLockRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableDomainAutoRenewRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// The EnableDomainTransferLock response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableDomainTransferLockResponse
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// A request to set the transfer lock for the specified domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableDomainTransferLockRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetContactReachabilityStatusResponse
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetContactReachabilityStatusResponseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetContactReachabilityStatusResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetContactReachabilityStatusRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// The GetDomainDetail response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDomainDetailResponse
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Nameserver[] Nameservers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoRenew { get; set; }
		
		/// <summary>
		/// ContactDetail includes the following elements.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail AdminContact { get; set; }
		
		/// <summary>
		/// ContactDetail includes the following elements.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail RegistrantContact { get; set; }
		
		/// <summary>
		/// ContactDetail includes the following elements.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail TechContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AdminPrivacy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RegistrantPrivacy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TechPrivacy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegistrarName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WhoIsServer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegistrarUrl { get; set; }
		
		/// <summary>
		/// Max length: 254
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(254)]
		public string AbuseContactEmail { get; set; }
		
		/// <summary>
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(30)]
		public string AbuseContactPhone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegistryDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Reseller { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DnsSec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainStatus[] StatusList { get; set; }
	}
	
	/// <summary>
	/// The GetDomainDetail request includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDomainDetailRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDomainSuggestionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DomainSuggestion[] SuggestionsList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDomainSuggestionsRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int SuggestionCount { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool OnlyAvailable { get; set; }
	}
	
	/// <summary>
	/// The GetOperationDetail response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOperationDetailResponse
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string OperationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetOperationDetailResponseStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetOperationDetailResponseType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SubmittedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetOperationDetailResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetOperationDetailResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTER_DOMAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_DOMAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFER_IN_DOMAIN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_DOMAIN_CONTACT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_NAMESERVER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANGE_PRIVACY_PROTECTION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_LOCK = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLE_AUTORENEW = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLE_AUTORENEW = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD_DNSSEC = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE_DNSSEC = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRE_DOMAIN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFER_OUT_DOMAIN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANGE_DOMAIN_OWNER = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RENEW_DOMAIN = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUSH_DOMAIN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_TRANSFER_OUT_DOMAIN = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_TRANSFER_IN_DOMAIN = 17,
	}
	
	/// <summary>
	/// The <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> request includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOperationDetailRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The ListDomains response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDomainsResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainSummary[] Domains { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096)]
		public string NextPageMarker { get; set; }
	}
	
	/// <summary>
	/// The ListDomains request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDomainsRequest
	{
		
		/// <summary>
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096)]
		public string Marker { get; set; }
		
		/// <summary>
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(System.Int32.MinValue, 100)]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	/// <summary>
	/// The ListOperations response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListOperationsResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OperationSummary[] Operations { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096)]
		public string NextPageMarker { get; set; }
	}
	
	/// <summary>
	/// The ListOperations request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListOperationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SubmittedSince { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096)]
		public string Marker { get; set; }
		
		/// <summary>
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(System.Int32.MinValue, 100)]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	/// <summary>
	/// The ListTagsForDomain response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForDomainResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagList { get; set; }
	}
	
	/// <summary>
	/// The ListTagsForDomainRequest includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForDomainRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// The RegisterDomain response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterDomainResponse
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The RegisterDomain request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterDomainRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3)]
		public string IdnLangCode { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public int DurationInYears { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoRenew { get; set; }
		
		/// <summary>
		/// ContactDetail includes the following elements.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail AdminContact { get; set; }
		
		/// <summary>
		/// ContactDetail includes the following elements.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail RegistrantContact { get; set; }
		
		/// <summary>
		/// ContactDetail includes the following elements.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail TechContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivacyProtectAdminContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivacyProtectRegistrantContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivacyProtectTechContact { get; set; }
	}
	
	/// <summary>
	/// The RejectDomainTransferFromAnotherAwsAccount response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RejectDomainTransferFromAnotherAwsAccountResponse
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The RejectDomainTransferFromAnotherAwsAccount request includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RejectDomainTransferFromAnotherAwsAccountRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RenewDomainResponse
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// A <code>RenewDomain</code> request includes the number of years that you want to renew for and the current expiration year.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RenewDomainRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> DurationInYears { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int CurrentExpiryYear { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResendContactReachabilityEmailResponse
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Max length: 254
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(254)]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsAlreadyVerified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResendContactReachabilityEmailRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// The RetrieveDomainAuthCode response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RetrieveDomainAuthCodeResponse
	{
		
		/// <summary>
		/// Max length: 1024
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024)]
		public string AuthCode { get; set; }
	}
	
	/// <summary>
	/// A request for the authorization code for the specified domain. To transfer a domain to another registrar, you provide this value to the new registrar.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RetrieveDomainAuthCodeRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// The TransferDomain response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferDomainResponse
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The TransferDomain request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferDomainRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3)]
		public string IdnLangCode { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public int DurationInYears { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Nameserver[] Nameservers { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024)]
		public string AuthCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoRenew { get; set; }
		
		/// <summary>
		/// ContactDetail includes the following elements.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail AdminContact { get; set; }
		
		/// <summary>
		/// ContactDetail includes the following elements.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail RegistrantContact { get; set; }
		
		/// <summary>
		/// ContactDetail includes the following elements.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail TechContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivacyProtectAdminContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivacyProtectRegistrantContact { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivacyProtectTechContact { get; set; }
	}
	
	/// <summary>
	/// The <code>TransferDomainToAnotherAwsAccount</code> response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferDomainToAnotherAwsAccountResponse
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string OperationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// The TransferDomainToAnotherAwsAccount request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferDomainToAnotherAwsAccountRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Pattern: ^(\d{12})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
	}
	
	/// <summary>
	/// The UpdateDomainContact response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainContactResponse
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The UpdateDomainContact request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainContactRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// ContactDetail includes the following elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail AdminContact { get; set; }
		
		/// <summary>
		/// ContactDetail includes the following elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail RegistrantContact { get; set; }
		
		/// <summary>
		/// ContactDetail includes the following elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContactDetail TechContact { get; set; }
	}
	
	/// <summary>
	/// The UpdateDomainContactPrivacy response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainContactPrivacyResponse
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// The UpdateDomainContactPrivacy request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainContactPrivacyRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AdminPrivacy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RegistrantPrivacy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TechPrivacy { get; set; }
	}
	
	/// <summary>
	/// The UpdateDomainNameservers response includes the following element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainNameserversResponse
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// <p>Replaces the current set of name servers for the domain with the specified set of name servers. If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.</p> <p>If successful, this operation returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainNameserversRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FIAuthKey { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Nameserver[] Nameservers { get; set; }
	}
	
	/// <summary>
	/// The UpdateTagsForDomainRequest includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTagsForDomainRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagsToUpdate { get; set; }
	}
	
	/// <summary>
	/// The ViewBilling response includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ViewBillingResponse
	{
		
		/// <summary>
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096)]
		public string NextPageMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BillingRecord[] BillingRecords { get; set; }
	}
	
	/// <summary>
	/// The ViewBilling request includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ViewBillingRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096)]
		public string Marker { get; set; }
		
		/// <summary>
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(System.Int32.MinValue, 100)]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTER_DOMAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_DOMAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFER_IN_DOMAIN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_DOMAIN_CONTACT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_NAMESERVER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANGE_PRIVACY_PROTECTION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_LOCK = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLE_AUTORENEW = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLE_AUTORENEW = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD_DNSSEC = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE_DNSSEC = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRE_DOMAIN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFER_OUT_DOMAIN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANGE_DOMAIN_OWNER = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RENEW_DOMAIN = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUSH_DOMAIN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_TRANSFER_OUT_DOMAIN = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_TRANSFER_IN_DOMAIN = 17,
	}
	
	/// <summary>
	/// Information for one billing record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingRecord
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BillingRecordOperation Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> BillDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BillingRecordOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTER_DOMAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_DOMAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFER_IN_DOMAIN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_DOMAIN_CONTACT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_NAMESERVER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANGE_PRIVACY_PROTECTION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_LOCK = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLE_AUTORENEW = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLE_AUTORENEW = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD_DNSSEC = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE_DNSSEC = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRE_DOMAIN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFER_OUT_DOMAIN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANGE_DOMAIN_OWNER = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RENEW_DOMAIN = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUSH_DOMAIN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_TRANSFER_OUT_DOMAIN = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_TRANSFER_IN_DOMAIN = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainAvailability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE_RESERVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE_PREORDER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE_PREMIUM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE_RESTRICTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONT_KNOW = 7,
	}
	
	/// <summary>
	/// A complex type that contains information about whether the specified domain can be transferred to Route 53.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainTransferability
	{
		
		/// <summary>
		/// <p>Whether the domain name can be transferred to Route 53.</p> <note> <p>You can transfer only domains that have a value of <code>TRANSFERABLE</code> for <code>Transferable</code>.</p> </note> <p>Valid values:</p> <dl> <dt>TRANSFERABLE</dt> <dd> <p>The domain name can be transferred to Route 53.</p> </dd> <dt>UNTRANSFERRABLE</dt> <dd> <p>The domain name can't be transferred to Route 53.</p> </dd> <dt>DONT_KNOW</dt> <dd> <p>Reserved for future use.</p> </dd> </dl>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DomainTransferabilityTransferable Transferable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainTransferabilityTransferable
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFERABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNTRANSFERABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONT_KNOW = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContactType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSOCIATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC_BODY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESELLER = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CountryCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AI = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AM = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AQ = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AW = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZ = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BA = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BB = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BD = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BF = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BG = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BH = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BI = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BJ = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BL = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BM = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BN = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BO = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BR = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BS = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BT = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BW = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BY = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BZ = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CC = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CD = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CF = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CG = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CH = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CI = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CK = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CL = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CM = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CR = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CU = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CV = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CX = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CY = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CZ = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DE = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DJ = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DK = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DM = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DO = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DZ = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EE = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EG = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ER = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ES = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ET = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FJ = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FK = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FM = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FO = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FR = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GA = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GB = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GD = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GE = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GH = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GI = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GL = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GM = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GN = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GQ = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GR = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GT = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GU = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GW = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GY = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HK = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HN = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HR = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HT = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HU = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IE = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IL = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IM = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IQ = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IR = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IT = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JM = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JO = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JP = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KE = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KG = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KH = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KI = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KM = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KN = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KP = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KR = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KW = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KY = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KZ = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LA = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LB = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LC = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LI = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LK = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LR = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LS = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LU = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LV = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LY = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MA = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MC = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MD = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ME = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MF = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MG = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MH = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MK = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ML = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MM = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MN = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MO = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MR = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MT = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MU = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MV = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MW = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MX = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MY = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MZ = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NA = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NC = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NE = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NG = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NI = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NL = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NP = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NR = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NU = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NZ = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OM = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PA = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PE = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PF = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PG = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PH = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PK = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PL = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PM = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PN = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PR = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PT = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PW = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PY = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QA = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RO = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RS = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RW = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SA = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SB = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SC = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SD = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SE = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SG = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SH = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SI = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SK = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SL = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SM = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SN = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SO = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SR = 190,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ST = 191,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SV = 192,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SY = 193,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SZ = 194,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TC = 195,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TD = 196,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TG = 197,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TH = 198,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TJ = 199,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TK = 200,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TL = 201,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TM = 202,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TN = 203,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TO = 204,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TR = 205,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TT = 206,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TV = 207,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TW = 208,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TZ = 209,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UA = 210,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UG = 211,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US = 212,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UY = 213,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UZ = 214,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VA = 215,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VC = 216,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VE = 217,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VG = 218,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VI = 219,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VN = 220,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VU = 221,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WF = 222,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WS = 223,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YE = 224,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YT = 225,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZA = 226,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZM = 227,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZW = 228,
	}
	
	/// <summary>
	/// ContactDetail includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContactDetail
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactDetailContactType ContactType { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string OrganizationName { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string AddressLine1 { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string AddressLine2 { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string City { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactDetailCountryCode CountryCode { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string ZipCode { get; set; }
		
		/// <summary>
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(30)]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Max length: 254
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(254)]
		public string Email { get; set; }
		
		/// <summary>
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(30)]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExtraParam[] ExtraParams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContactDetailContactType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSOCIATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC_BODY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESELLER = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContactDetailCountryCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AI = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AM = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AO = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AQ = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AW = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZ = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BA = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BB = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BD = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BF = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BG = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BH = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BI = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BJ = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BL = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BM = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BN = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BO = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BR = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BS = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BT = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BW = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BY = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BZ = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CC = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CD = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CF = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CG = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CH = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CI = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CK = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CL = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CM = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CR = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CU = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CV = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CX = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CY = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CZ = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DE = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DJ = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DK = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DM = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DO = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DZ = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EE = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EG = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ER = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ES = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ET = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FJ = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FK = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FM = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FO = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FR = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GA = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GB = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GD = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GE = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GH = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GI = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GL = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GM = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GN = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GQ = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GR = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GT = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GU = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GW = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GY = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HK = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HN = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HR = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HT = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HU = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IE = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IL = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IM = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IQ = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IR = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IT = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JM = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JO = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JP = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KE = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KG = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KH = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KI = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KM = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KN = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KP = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KR = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KW = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KY = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KZ = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LA = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LB = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LC = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LI = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LK = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LR = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LS = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LU = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LV = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LY = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MA = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MC = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MD = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ME = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MF = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MG = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MH = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MK = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ML = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MM = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MN = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MO = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MR = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MT = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MU = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MV = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MW = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MX = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MY = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MZ = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NA = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NC = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NE = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NG = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NI = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NL = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NP = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NR = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NU = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NZ = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OM = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PA = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PE = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PF = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PG = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PH = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PK = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PL = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PM = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PN = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PR = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PT = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PW = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PY = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QA = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RO = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RS = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RW = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SA = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SB = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SC = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SD = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SE = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SG = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SH = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SI = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SK = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SL = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SM = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SN = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SO = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SR = 190,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ST = 191,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SV = 192,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SY = 193,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SZ = 194,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TC = 195,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TD = 196,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TG = 197,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TH = 198,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TJ = 199,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TK = 200,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TL = 201,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TM = 202,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TN = 203,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TO = 204,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TR = 205,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TT = 206,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TV = 207,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TW = 208,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TZ = 209,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UA = 210,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UG = 211,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US = 212,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UY = 213,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UZ = 214,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VA = 215,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VC = 216,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VE = 217,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VG = 218,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VI = 219,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VN = 220,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VU = 221,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WF = 222,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WS = 223,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YE = 224,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YT = 225,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZA = 226,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZM = 227,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZW = 228,
	}
	
	/// <summary>
	/// Information about one suggested domain name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainSuggestion
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Availability { get; set; }
	}
	
	/// <summary>
	/// Summary information about one domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainSummary
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoRenew { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TransferLock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Expiry { get; set; }
	}
	
	/// <summary>
	/// <p>Whether the domain name can be transferred to Route 53.</p> <note> <p>You can transfer only domains that have a value of <code>TRANSFERABLE</code> for <code>Transferable</code>.</p> </note> <p>Valid values:</p> <dl> <dt>TRANSFERABLE</dt> <dd> <p>The domain name can be transferred to Route 53.</p> </dd> <dt>UNTRANSFERRABLE</dt> <dd> <p>The domain name can't be transferred to Route 53.</p> </dd> <dt>DONT_KNOW</dt> <dd> <p>Reserved for future use.</p> </dd> </dl>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Transferable
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFERABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNTRANSFERABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONT_KNOW = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExtraParamName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUNS_NUMBER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRAND_NUMBER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIRTH_DEPARTMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIRTH_DATE_IN_YYYY_MM_DD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIRTH_COUNTRY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIRTH_CITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT_NUMBER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU_ID_NUMBER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU_ID_TYPE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_LEGAL_TYPE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_BUSINESS_ENTITY_TYPE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_LEGAL_REPRESENTATIVE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_LEGAL_REPRESENTATIVE_CAPACITY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ES_IDENTIFICATION = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ES_IDENTIFICATION_TYPE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ES_LEGAL_FORM = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI_BUSINESS_NUMBER = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI_ID_NUMBER = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI_NATIONALITY = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI_ORGANIZATION_TYPE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IT_NATIONALITY = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IT_PIN = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IT_REGISTRANT_ENTITY_TYPE = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU_PASSPORT_DATA = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SE_ID_NUMBER = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SG_ID_NUMBER = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VAT_NUMBER = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UK_CONTACT_TYPE = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UK_COMPANY_NUMBER = 28,
	}
	
	/// <summary>
	/// ExtraParam includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExtraParam
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExtraParamName Name { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExtraParamName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUNS_NUMBER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRAND_NUMBER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIRTH_DEPARTMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIRTH_DATE_IN_YYYY_MM_DD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIRTH_COUNTRY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIRTH_CITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT_NUMBER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU_ID_NUMBER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU_ID_TYPE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_LEGAL_TYPE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_BUSINESS_ENTITY_TYPE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_LEGAL_REPRESENTATIVE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_LEGAL_REPRESENTATIVE_CAPACITY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ES_IDENTIFICATION = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ES_IDENTIFICATION_TYPE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ES_LEGAL_FORM = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI_BUSINESS_NUMBER = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI_ID_NUMBER = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI_NATIONALITY = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI_ORGANIZATION_TYPE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IT_NATIONALITY = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IT_PIN = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IT_REGISTRANT_ENTITY_TYPE = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU_PASSPORT_DATA = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SE_ID_NUMBER = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SG_ID_NUMBER = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VAT_NUMBER = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UK_CONTACT_TYPE = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UK_COMPANY_NUMBER = 28,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReachabilityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OperationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	/// <summary>
	/// Nameserver includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Nameserver
	{
		
		/// <summary>
		/// Max length: 255
		/// Pattern: [a-zA-Z0-9_\-.]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GlueIp[] GlueIps { get; set; }
	}
	
	/// <summary>
	/// OperationSummary includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OperationSummary
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string OperationId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OperationSummaryStatus Status { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OperationSummaryType Type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmittedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OperationSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OperationSummaryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTER_DOMAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_DOMAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFER_IN_DOMAIN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_DOMAIN_CONTACT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_NAMESERVER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANGE_PRIVACY_PROTECTION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_LOCK = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLE_AUTORENEW = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLE_AUTORENEW = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD_DNSSEC = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE_DNSSEC = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRE_DOMAIN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFER_OUT_DOMAIN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANGE_DOMAIN_OWNER = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RENEW_DOMAIN = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUSH_DOMAIN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_TRANSFER_OUT_DOMAIN = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_TRANSFER_IN_DOMAIN = 17,
	}
	
	/// <summary>
	/// Each tag includes the following elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Accepts the transfer of a domain from another AWS account to the current AWS account. You initiate a transfer between AWS accounts using <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>. </p> <p>Use either <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> to determine whether the operation succeeded. <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>. </p>
		/// AcceptDomainTransferFromAnotherAwsAccount /#X-Amz-Target=Route53Domains_v20140515.AcceptDomainTransferFromAnotherAwsAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AcceptDomainTransferFromAnotherAwsAccountResponse> AcceptDomainTransferFromAnotherAwsAccountAsync(AcceptDomainTransferFromAnotherAwsAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.AcceptDomainTransferFromAnotherAwsAccount";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AcceptDomainTransferFromAnotherAwsAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels the transfer of a domain from the current AWS account to another AWS account. You initiate a transfer between AWS accounts using <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>. </p> <important> <p>You must cancel the transfer before the other AWS account accepts the transfer using <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html">AcceptDomainTransferFromAnotherAwsAccount</a>.</p> </important> <p>Use either <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> to determine whether the operation succeeded. <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>. </p>
		/// CancelDomainTransferToAnotherAwsAccount /#X-Amz-Target=Route53Domains_v20140515.CancelDomainTransferToAnotherAwsAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CancelDomainTransferToAnotherAwsAccountResponse> CancelDomainTransferToAnotherAwsAccountAsync(CancelDomainTransferToAnotherAwsAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.CancelDomainTransferToAnotherAwsAccount";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CancelDomainTransferToAnotherAwsAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation checks the availability of one domain name. Note that if the availability status of a domain is pending, you must submit another request to determine the availability of the domain name.
		/// CheckDomainAvailability /#X-Amz-Target=Route53Domains_v20140515.CheckDomainAvailability
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CheckDomainAvailabilityResponse> CheckDomainAvailabilityAsync(CheckDomainAvailabilityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.CheckDomainAvailability";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckDomainAvailabilityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Checks whether a domain name can be transferred to Amazon Route 53.
		/// CheckDomainTransferability /#X-Amz-Target=Route53Domains_v20140515.CheckDomainTransferability
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CheckDomainTransferabilityResponse> CheckDomainTransferabilityAsync(CheckDomainTransferabilityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.CheckDomainTransferability";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CheckDomainTransferabilityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation deletes the specified tags for a domain.</p> <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
		/// DeleteTagsForDomain /#X-Amz-Target=Route53Domains_v20140515.DeleteTagsForDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteTagsForDomainResponse> DeleteTagsForDomainAsync(DeleteTagsForDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.DeleteTagsForDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteTagsForDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation disables automatic renewal of domain registration for the specified domain.
		/// DisableDomainAutoRenew /#X-Amz-Target=Route53Domains_v20140515.DisableDomainAutoRenew
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisableDomainAutoRenewResponse> DisableDomainAutoRenewAsync(DisableDomainAutoRenewRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.DisableDomainAutoRenew";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisableDomainAutoRenewResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation removes the transfer lock on the domain (specifically the <code>clientTransferProhibited</code> status) to allow domain transfers. We recommend you refrain from performing this action unless you intend to transfer the domain to a different registrar. Successful submission returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.
		/// DisableDomainTransferLock /#X-Amz-Target=Route53Domains_v20140515.DisableDomainTransferLock
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisableDomainTransferLockResponse> DisableDomainTransferLockAsync(DisableDomainTransferLockRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.DisableDomainTransferLock";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisableDomainTransferLockResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation configures Amazon Route 53 to automatically renew the specified domain before the domain registration expires. The cost of renewing your domain registration is billed to your AWS account.</p> <p>The period during which you can renew a domain name varies by TLD. For a list of TLDs and their renewal policies, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html">Domains That You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>. Route 53 requires that you renew before the end of the renewal period so we can complete processing before the deadline.</p>
		/// EnableDomainAutoRenew /#X-Amz-Target=Route53Domains_v20140515.EnableDomainAutoRenew
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EnableDomainAutoRenewResponse> EnableDomainAutoRenewAsync(EnableDomainAutoRenewRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.EnableDomainAutoRenew";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EnableDomainAutoRenewResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation sets the transfer lock on the domain (specifically the <code>clientTransferProhibited</code> status) to prevent domain transfers. Successful submission returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.
		/// EnableDomainTransferLock /#X-Amz-Target=Route53Domains_v20140515.EnableDomainTransferLock
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EnableDomainTransferLockResponse> EnableDomainTransferLockAsync(EnableDomainTransferLockRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.EnableDomainTransferLock";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EnableDomainTransferLockResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>For operations that require confirmation that the email address for the registrant contact is valid, such as registering a new domain, this operation returns information about whether the registrant contact has responded.</p> <p>If you want us to resend the email, use the <code>ResendContactReachabilityEmail</code> operation.</p>
		/// GetContactReachabilityStatus /#X-Amz-Target=Route53Domains_v20140515.GetContactReachabilityStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetContactReachabilityStatusResponse> GetContactReachabilityStatusAsync(GetContactReachabilityStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.GetContactReachabilityStatus";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetContactReachabilityStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation returns detailed information about a specified domain that is associated with the current AWS account. Contact information for the domain is also returned as part of the output.
		/// GetDomainDetail /#X-Amz-Target=Route53Domains_v20140515.GetDomainDetail
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDomainDetailResponse> GetDomainDetailAsync(GetDomainDetailRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.GetDomainDetail";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDomainDetailResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The GetDomainSuggestions operation returns a list of suggested domain names.
		/// GetDomainSuggestions /#X-Amz-Target=Route53Domains_v20140515.GetDomainSuggestions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDomainSuggestionsResponse> GetDomainSuggestionsAsync(GetDomainSuggestionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.GetDomainSuggestions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDomainSuggestionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation returns the current status of an operation that is not completed.
		/// GetOperationDetail /#X-Amz-Target=Route53Domains_v20140515.GetOperationDetail
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOperationDetailResponse> GetOperationDetailAsync(GetOperationDetailRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.GetOperationDetail";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetOperationDetailResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation returns all the domain names registered with Amazon Route 53 for the current AWS account.
		/// ListDomains /#X-Amz-Target=Route53Domains_v20140515.ListDomains
		/// </summary>
		/// <param name="MaxItems">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDomainsResponse> ListDomainsAsync(string MaxItems, string Marker, ListDomainsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.ListDomains?MaxItems=" + (MaxItems==null? "" : Uri.EscapeDataString(MaxItems))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDomainsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all of the operations that return an operation ID and that have ever been performed on domains that were registered by the current account.
		/// ListOperations /#X-Amz-Target=Route53Domains_v20140515.ListOperations
		/// </summary>
		/// <param name="MaxItems">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListOperationsResponse> ListOperationsAsync(string MaxItems, string Marker, ListOperationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.ListOperations?MaxItems=" + (MaxItems==null? "" : Uri.EscapeDataString(MaxItems))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation returns all of the tags that are associated with the specified domain.</p> <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
		/// ListTagsForDomain /#X-Amz-Target=Route53Domains_v20140515.ListTagsForDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForDomainResponse> ListTagsForDomainAsync(ListTagsForDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.ListTagsForDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation registers a domain. Domains are registered either by Amazon Registrar (for .com, .net, and .org domains) or by our registrar associate, Gandi (for all other domains). For some top-level domains (TLDs), this operation requires extra parameters.</p> <p>When you register a domain, Amazon Route 53 does the following:</p> <ul> <li> <p>Creates a Route 53 hosted zone that has the same name as the domain. Route 53 assigns four name servers to your hosted zone and automatically updates your domain registration with the names of these name servers.</p> </li> <li> <p>Enables autorenew, so your domain registration will renew automatically each year. We'll notify you in advance of the renewal date so you can choose whether to renew the registration.</p> </li> <li> <p>Optionally enables privacy protection, so WHOIS queries return contact information either for Amazon Registrar (for .com, .net, and .org domains) or for our registrar associate, Gandi (for all other TLDs). If you don't enable privacy protection, WHOIS queries return the information that you entered for the registrant, admin, and tech contacts.</p> </li> <li> <p>If registration is successful, returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant is notified by email.</p> </li> <li> <p>Charges your AWS account an amount based on the top-level domain. For more information, see <a href="http://aws.amazon.com/route53/pricing/">Amazon Route 53 Pricing</a>.</p> </li> </ul>
		/// RegisterDomain /#X-Amz-Target=Route53Domains_v20140515.RegisterDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterDomainResponse> RegisterDomainAsync(RegisterDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.RegisterDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RegisterDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Rejects the transfer of a domain from another AWS account to the current AWS account. You initiate a transfer between AWS accounts using <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>. </p> <p>Use either <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> to determine whether the operation succeeded. <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>. </p>
		/// RejectDomainTransferFromAnotherAwsAccount /#X-Amz-Target=Route53Domains_v20140515.RejectDomainTransferFromAnotherAwsAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RejectDomainTransferFromAnotherAwsAccountResponse> RejectDomainTransferFromAnotherAwsAccountAsync(RejectDomainTransferFromAnotherAwsAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.RejectDomainTransferFromAnotherAwsAccount";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RejectDomainTransferFromAnotherAwsAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation renews a domain for the specified number of years. The cost of renewing your domain is billed to your AWS account.</p> <p>We recommend that you renew your domain several weeks before the expiration date. Some TLD registries delete domains before the expiration date if you haven't renewed far enough in advance. For more information about renewing domain registration, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-renew.html">Renewing Registration for a Domain</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
		/// RenewDomain /#X-Amz-Target=Route53Domains_v20140515.RenewDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RenewDomainResponse> RenewDomainAsync(RenewDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.RenewDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RenewDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// For operations that require confirmation that the email address for the registrant contact is valid, such as registering a new domain, this operation resends the confirmation email to the current email address for the registrant contact.
		/// ResendContactReachabilityEmail /#X-Amz-Target=Route53Domains_v20140515.ResendContactReachabilityEmail
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ResendContactReachabilityEmailResponse> ResendContactReachabilityEmailAsync(ResendContactReachabilityEmailRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.ResendContactReachabilityEmail";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ResendContactReachabilityEmailResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation returns the AuthCode for the domain. To transfer a domain to another registrar, you provide this value to the new registrar.
		/// RetrieveDomainAuthCode /#X-Amz-Target=Route53Domains_v20140515.RetrieveDomainAuthCode
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RetrieveDomainAuthCodeResponse> RetrieveDomainAuthCodeAsync(RetrieveDomainAuthCodeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.RetrieveDomainAuthCode";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RetrieveDomainAuthCodeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Transfers a domain from another registrar to Amazon Route 53. When the transfer is complete, the domain is registered either with Amazon Registrar (for .com, .net, and .org domains) or with our registrar associate, Gandi (for all other TLDs).</p> <p>For more information about transferring domains, see the following topics:</p> <ul> <li> <p>For transfer requirements, a detailed procedure, and information about viewing the status of a domain that you're transferring to Route 53, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-to-route-53.html">Transferring Registration for a Domain to Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> </li> <li> <p>For information about how to transfer a domain from one AWS account to another, see <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html">TransferDomainToAnotherAwsAccount</a>. </p> </li> <li> <p>For information about how to transfer a domain to another domain registrar, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-from-route-53.html">Transferring a Domain from Amazon Route 53 to Another Registrar</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> </li> </ul> <p>If the registrar for your domain is also the DNS service provider for the domain, we highly recommend that you transfer your DNS service to Route 53 or to another DNS service provider before you transfer your registration. Some registrars provide free DNS service when you purchase a domain registration. When you transfer the registration, the previous registrar will not renew your domain registration and could end your DNS service at any time.</p> <important> <p>If the registrar for your domain is also the DNS service provider for the domain and you don't transfer DNS service to another provider, your website, email, and the web applications associated with the domain might become unavailable.</p> </important> <p>If the transfer is successful, this method returns an operation ID that you can use to track the progress and completion of the action. If the transfer doesn't complete successfully, the domain registrant will be notified by email.</p>
		/// TransferDomain /#X-Amz-Target=Route53Domains_v20140515.TransferDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TransferDomainResponse> TransferDomainAsync(TransferDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.TransferDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TransferDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Transfers a domain from the current AWS account to another AWS account. Note the following:</p> <ul> <li> <p>The AWS account that you're transferring the domain to must accept the transfer. If the other account doesn't accept the transfer within 3 days, we cancel the transfer. See <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html">AcceptDomainTransferFromAnotherAwsAccount</a>. </p> </li> <li> <p>You can cancel the transfer before the other account accepts it. See <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_CancelDomainTransferToAnotherAwsAccount.html">CancelDomainTransferToAnotherAwsAccount</a>. </p> </li> <li> <p>The other account can reject the transfer. See <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_RejectDomainTransferFromAnotherAwsAccount.html">RejectDomainTransferFromAnotherAwsAccount</a>. </p> </li> </ul> <important> <p>When you transfer a domain from one AWS account to another, Route 53 doesn't transfer the hosted zone that is associated with the domain. DNS resolution isn't affected if the domain and the hosted zone are owned by separate accounts, so transferring the hosted zone is optional. For information about transferring the hosted zone to another AWS account, see <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-migrating.html">Migrating a Hosted Zone to a Different AWS Account</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> </important> <p>Use either <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html">ListOperations</a> or <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> to determine whether the operation succeeded. <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>. </p>
		/// TransferDomainToAnotherAwsAccount /#X-Amz-Target=Route53Domains_v20140515.TransferDomainToAnotherAwsAccount
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TransferDomainToAnotherAwsAccountResponse> TransferDomainToAnotherAwsAccountAsync(TransferDomainToAnotherAwsAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.TransferDomainToAnotherAwsAccount";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TransferDomainToAnotherAwsAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation updates the contact information for a particular domain. You must specify information for at least one contact: registrant, administrator, or technical.</p> <p>If the update is successful, this method returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.</p>
		/// UpdateDomainContact /#X-Amz-Target=Route53Domains_v20140515.UpdateDomainContact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDomainContactResponse> UpdateDomainContactAsync(UpdateDomainContactRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.UpdateDomainContact";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDomainContactResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation updates the specified domain contact's privacy setting. When privacy protection is enabled, contact information such as email address is replaced either with contact information for Amazon Registrar (for .com, .net, and .org domains) or with contact information for our registrar associate, Gandi.</p> <p>This operation affects only the contact information for the specified contact type (registrant, administrator, or tech). If the request succeeds, Amazon Route 53 returns an operation ID that you can use with <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html">GetOperationDetail</a> to track the progress and completion of the action. If the request doesn't complete successfully, the domain registrant will be notified by email.</p> <important> <p>By disabling the privacy service via API, you consent to the publication of the contact information provided for this domain via the public WHOIS database. You certify that you are the registrant of this domain name and have the authority to make this decision. You may withdraw your consent at any time by enabling privacy protection using either <code>UpdateDomainContactPrivacy</code> or the Route 53 console. Enabling privacy protection removes the contact information provided for this domain from the WHOIS database. For more information on our privacy practices, see <a href="https://aws.amazon.com/privacy/">https://aws.amazon.com/privacy/</a>.</p> </important>
		/// UpdateDomainContactPrivacy /#X-Amz-Target=Route53Domains_v20140515.UpdateDomainContactPrivacy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDomainContactPrivacyResponse> UpdateDomainContactPrivacyAsync(UpdateDomainContactPrivacyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.UpdateDomainContactPrivacy";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDomainContactPrivacyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation replaces the current set of name servers for the domain with the specified set of name servers. If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.</p> <p>If successful, this operation returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.</p>
		/// UpdateDomainNameservers /#X-Amz-Target=Route53Domains_v20140515.UpdateDomainNameservers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDomainNameserversResponse> UpdateDomainNameserversAsync(UpdateDomainNameserversRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.UpdateDomainNameservers";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDomainNameserversResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This operation adds or updates tags for a specified domain.</p> <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
		/// UpdateTagsForDomain /#X-Amz-Target=Route53Domains_v20140515.UpdateTagsForDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateTagsForDomainResponse> UpdateTagsForDomainAsync(UpdateTagsForDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.UpdateTagsForDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateTagsForDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns all the domain-related billing records for the current AWS account for a specified period
		/// ViewBilling /#X-Amz-Target=Route53Domains_v20140515.ViewBilling
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ViewBillingResponse> ViewBillingAsync(ViewBillingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Route53Domains_v20140515.ViewBilling";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ViewBillingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
