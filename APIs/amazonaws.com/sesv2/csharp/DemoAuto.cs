//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TlsPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONAL = 1,
	}
	
	/// <summary>
	/// <p>An object that defines the tags that are associated with a resource. A <i>tag</i> is a label that you optionally define and associate with a resource. Tags can help you categorize and manage resources in different ways, such as by purpose, owner, environment, or other criteria. A resource can have as many as 50 tags.</p> <p>Each tag consists of a required <i>tag key</i> and an associated <i>tag value</i>, both of which you define. A tag key is a general label that acts as a category for a more specific tag value. A tag value acts as a descriptor within a tag key. A tag key can contain as many as 128 characters. A tag value can contain as many as 256 characters. The characters can be Unicode letters, digits, white space, or one of the following symbols: _ . : / = + -. The following additional restrictions apply to tags:</p> <ul> <li> <p>Tag keys and values are case sensitive.</p> </li> <li> <p>For each associated resource, each tag key must be unique and it can have only one value.</p> </li> <li> <p>The <code>aws:</code> prefix is reserved for use by AWS; you can’t use it in any tag keys or values that you define. In addition, you can't edit or remove tag keys or values that use this prefix. Tags that use this prefix don’t count against the limit of 50 tags per resource.</p> </li> <li> <p>You can associate tags with public or shared resources, but the tags are available only for your AWS account, not any other accounts that share the resource. In addition, the tags are available only for resources that are located in the specified AWS Region for your AWS account.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KinesisFirehoseDestination
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryStreamArn { get; set; }
	}
	
	/// <summary>
	/// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudWatchDestination
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchDimensionConfiguration[] DimensionConfigurations { get; set; }
	}
	
	/// <summary>
	/// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notification when certain email events occur.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SnsDestination
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
	}
	
	/// <summary>
	/// An object that defines an Amazon Pinpoint project destination for email events. You can send email event data to a Amazon Pinpoint project to view metrics using the Transactional Messaging dashboards that are built in to Amazon Pinpoint. For more information, see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/analytics-transactional-messages.html">Transactional Messaging Charts</a> in the <i>Amazon Pinpoint User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PinpointDestination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApplicationArn { get; set; }
	}
	
	/// <summary>
	/// Information about the predictive inbox placement test that you created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeliverabilityTestReportResponse
	{
		
		/// <summary>
		/// A unique string that identifies a Deliverability dashboard report.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReportId { get; set; }
		
		/// <summary>
		/// The status of a predictive inbox placement test. If the status is <code>IN_PROGRESS</code>, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is <code>COMPLETE</code>, then the test is finished, and you can use the <code>GetDeliverabilityTestReport</code> operation to view the results of the test.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateDeliverabilityTestReportResponseDeliverabilityTestStatus DeliverabilityTestStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDeliverabilityTestReportResponseDeliverabilityTestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
	}
	
	/// <summary>
	/// Represents the email message that you're sending. The <code>Message</code> object consists of a subject line and a message body.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Message
	{
		
		/// <summary>
		/// An object that represents the content of the email, and optionally a character set specification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Content Subject { get; set; }
		
		/// <summary>
		/// Represents the body of the email message.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Body Body { get; set; }
	}
	
	/// <summary>
	/// Represents the raw content of an email message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RawMessage
	{
		
		/// <summary>
		/// <p>The raw email message. The message has to meet the following criteria:</p> <ul> <li> <p>The message has to contain a header and a body, separated by one blank line.</p> </li> <li> <p>All of the required header fields must be present in the message.</p> </li> <li> <p>Each part of a multipart MIME message must be formatted properly.</p> </li> <li> <p>Attachments must be in a file format that the Amazon SES API v2 supports. </p> </li> <li> <p>The entire message must be Base64 encoded.</p> </li> <li> <p>If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, you should encode that content to ensure that recipients' email clients render the message properly.</p> </li> <li> <p>The length of any single line of text in the message can't exceed 1,000 characters. This restriction is defined in <a href="https://tools.ietf.org/html/rfc5321">RFC 5321</a>.</p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Data { get; set; }
	}
	
	/// <summary>
	/// An object that defines the email template to use for an email message, and the values to use for any message variables in that template. An <i>email template</i> is a type of message template that contains content that you want to define, save, and reuse in email messages that you send.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Template
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateArn { get; set; }
		
		/// <summary>
		/// Max length: 262144
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(262144)]
		public string TemplateData { get; set; }
	}
	
	/// <summary>
	/// <p>If the email identity is a domain, this object contains information about the DKIM verification status for the domain.</p> <p>If the email identity is an email address, this object is empty. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateEmailIdentityResponse
	{
		
		/// <summary>
		/// <p>The email identity type. The identity type can be one of the following:</p> <ul> <li> <p> <code>EMAIL_ADDRESS</code> – The identity is an email address.</p> </li> <li> <p> <code>DOMAIN</code> – The identity is a domain.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateEmailIdentityResponseIdentityType IdentityType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> VerifiedForSendingStatus { get; set; }
		
		/// <summary>
		/// <p>An object that contains information about the DKIM authentication status for an email identity.</p> <p>Amazon SES determines the authentication status by searching for specific records in the DNS configuration for the domain. If you used <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a> to set up DKIM authentication, Amazon SES tries to find three unique CNAME records in the DNS configuration for your domain. If you provided a public key to perform DKIM authentication, Amazon SES tries to find a TXT record that uses the selector that you specified. The value of the TXT record must be a public key that's paired with the private key that you specified in the process of creating the identity</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DkimAttributes DkimAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateEmailIdentityResponseIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL_ADDRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANAGED_DOMAIN = 2,
	}
	
	/// <summary>
	/// A list of details about the email-sending capabilities of your Amazon SES account in the current AWS Region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DedicatedIpAutoWarmupEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnforcementStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ProductionAccessEnabled { get; set; }
		
		/// <summary>
		/// An object that contains information about the per-day and per-second sending limits for your Amazon SES account in the current AWS Region.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SendQuota SendQuota { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SendingEnabled { get; set; }
		
		/// <summary>
		/// An object that contains information about the email address suppression preferences for your account in the current AWS Region.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SuppressionAttributes SuppressionAttributes { get; set; }
	}
	
	/// <summary>
	/// An object that contains information about blacklist events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBlacklistReportsResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BlacklistReport BlacklistReport { get; set; }
	}
	
	/// <summary>
	/// Information about a configuration set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetConfigurationSetResponse
	{
		
		/// <summary>
		/// <p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		/// <summary>
		/// <p>An object that defines the tracking options for a configuration set. When you use the Amazon SES API v2 to send an email, it contains an invisible image that's used to track when recipients open your email. If your email contains links, those links are changed slightly in order to track when recipients click them.</p> <p>These images and links include references to a domain operated by AWS. You can optionally configure the Amazon SES to use a domain that you operate for these images and links.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrackingOptions TrackingOptions { get; set; }
		
		/// <summary>
		/// Used to associate a configuration set with a dedicated IP pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeliveryOptions DeliveryOptions { get; set; }
		
		/// <summary>
		/// Enable or disable collection of reputation metrics for emails that you send using this configuration set in the current AWS Region. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReputationOptions ReputationOptions { get; set; }
		
		/// <summary>
		/// Used to enable or disable email sending for messages that use this configuration set in the current AWS Region.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SendingOptions SendingOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// An object that contains information about the suppression list preferences for your account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SuppressionOptions SuppressionOptions { get; set; }
	}
	
	/// <summary>
	/// Information about an event destination for a configuration set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetConfigurationSetEventDestinationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventDestination[] EventDestinations { get; set; }
	}
	
	/// <summary>
	/// Information about a dedicated IP address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDedicatedIpResponse
	{
		
		/// <summary>
		/// <p>Contains information about a dedicated IP address that is associated with your Amazon SES account.</p> <p>To learn more about requesting dedicated IP addresses, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/dedicated-ip-case.html">Requesting and Relinquishing Dedicated IP Addresses</a> in the <i>Amazon SES Developer Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DedicatedIp DedicatedIp { get; set; }
	}
	
	/// <summary>
	/// Information about the dedicated IP addresses that are associated with your AWS account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDedicatedIpsResponse
	{
		
		/// <summary>
		/// A list of dedicated IP addresses that are associated with your AWS account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DedicatedIp[] DedicatedIps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An object that shows the status of the Deliverability dashboard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeliverabilityDashboardOptionsResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool DashboardEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SubscriptionExpiryDate { get; set; }
		
		/// <summary>
		/// The current status of your Deliverability dashboard subscription. If this value is <code>PENDING_EXPIRATION</code>, your subscription is scheduled to expire at the end of the current calendar month.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GetDeliverabilityDashboardOptionsResponseAccountStatus AccountStatus { get; set; }
		
		/// <summary>
		/// An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DomainDeliverabilityTrackingOption[] ActiveSubscribedDomains { get; set; }
		
		/// <summary>
		/// An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DomainDeliverabilityTrackingOption[] PendingExpirationSubscribedDomains { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetDeliverabilityDashboardOptionsResponseAccountStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_EXPIRATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	/// <summary>
	/// The results of the predictive inbox placement test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeliverabilityTestReportResponse
	{
		
		/// <summary>
		/// An object that contains metadata related to a predictive inbox placement test.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeliverabilityTestReport DeliverabilityTestReport { get; set; }
		
		/// <summary>
		/// An object that contains inbox placement data for an email provider.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PlacementStatistics OverallPlacement { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IspPlacement[] IspPlacements { get; set; }
		
		/// <summary>
		/// The body of an email message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// An object that contains all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDomainDeliverabilityCampaignResponse
	{
		
		/// <summary>
		/// An object that contains the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code> operation).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainDeliverabilityCampaign DomainDeliverabilityCampaign { get; set; }
	}
	
	/// <summary>
	/// An object that includes statistics that are related to the domain that you specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDomainStatisticsReportResponse
	{
		
		/// <summary>
		/// An object that contains information about email that was sent from the selected domain.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OverallVolume OverallVolume { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DailyVolume[] DailyVolumes { get; set; }
	}
	
	/// <summary>
	/// Details about an email identity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetEmailIdentityResponse
	{
		
		/// <summary>
		/// <p>The email identity type. The identity type can be one of the following:</p> <ul> <li> <p> <code>EMAIL_ADDRESS</code> – The identity is an email address.</p> </li> <li> <p> <code>DOMAIN</code> – The identity is a domain.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GetEmailIdentityResponseIdentityType IdentityType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FeedbackForwardingStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> VerifiedForSendingStatus { get; set; }
		
		/// <summary>
		/// <p>An object that contains information about the DKIM authentication status for an email identity.</p> <p>Amazon SES determines the authentication status by searching for specific records in the DNS configuration for the domain. If you used <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a> to set up DKIM authentication, Amazon SES tries to find three unique CNAME records in the DNS configuration for your domain. If you provided a public key to perform DKIM authentication, Amazon SES tries to find a TXT record that uses the selector that you specified. The value of the TXT record must be a public key that's paired with the private key that you specified in the process of creating the identity</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DkimAttributes DkimAttributes { get; set; }
		
		/// <summary>
		/// A list of attributes that are associated with a MAIL FROM domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MailFromAttributes MailFromAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetEmailIdentityResponseIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL_ADDRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANAGED_DOMAIN = 2,
	}
	
	/// <summary>
	/// Information about the suppressed email address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSuppressedDestinationResponse
	{
		
		/// <summary>
		/// An object that contains information about an email address that is on the suppression list for your account.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SuppressedDestination SuppressedDestination { get; set; }
	}
	
	/// <summary>
	/// A list of configuration sets in your Amazon SES account in the current AWS Region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListConfigurationSetsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationSetName[] ConfigurationSets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A list of dedicated IP pools.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDedicatedIpPoolsResponse
	{
		
		/// <summary>
		/// A list of dedicated IP pools that are associated with your AWS account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PoolName[] DedicatedIpPools { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A list of the predictive inbox placement test reports that are available for your account, regardless of whether or not those tests are complete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDeliverabilityTestReportsResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeliverabilityTestReport[] DeliverabilityTestReports { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An array of objects that provide deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard for the domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDomainDeliverabilityCampaignsResponse
	{
		
		/// <summary>
		/// <p/>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainDeliverabilityCampaign[] DomainDeliverabilityCampaigns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A list of all of the identities that you've attempted to verify, regardless of whether or not those identities were successfully verified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListEmailIdentitiesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityInfo[] EmailIdentities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A list of suppressed email addresses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSuppressedDestinationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SuppressedDestinationSummary[] SuppressedDestinationSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p>The reason that the address was added to the suppression list for your account. The value can be one of the following:</p> <ul> <li> <p> <code>COMPLAINT</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a complaint.</p> </li> <li> <p> <code>BOUNCE</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a hard bounce.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SuppressionListReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOUNCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLAINT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainDeliverabilityTrackingOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SubscriptionStartDate { get; set; }
		
		/// <summary>
		/// An object that contains information about the inbox placement data settings for a verified domain that’s associated with your AWS account. This data is available only if you enabled the Deliverability dashboard for the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InboxPlacementTrackingOption InboxPlacementTrackingOption { get; set; }
	}
	
	/// <summary>
	/// <p>If the action is successful, the service sends back an HTTP 200 response.</p> <p>The following data is returned in JSON format by the service.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutEmailIdentityDkimSigningAttributesResponse
	{
		
		/// <summary>
		/// <p>The DKIM authentication status of the identity. The status can be one of the following:</p> <ul> <li> <p> <code>PENDING</code> – The verification process was initiated, but Amazon SES hasn't yet detected the DKIM records in the DNS configuration for the domain.</p> </li> <li> <p> <code>SUCCESS</code> – The verification process completed successfully.</p> </li> <li> <p> <code>FAILED</code> – The verification process failed. This typically occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the domain.</p> </li> <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES from determining the DKIM authentication status of the domain.</p> </li> <li> <p> <code>NOT_STARTED</code> – The DKIM verification process hasn't been initiated for the domain.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PutEmailIdentityDkimSigningAttributesResponseDkimStatus DkimStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DnsToken[] DkimTokens { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutEmailIdentityDkimSigningAttributesResponseDkimStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORARY_FAILURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 4,
	}
	
	/// <summary>
	/// A unique message ID that you receive when an email is accepted for sending.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SendEmailResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageId { get; set; }
	}
	
	/// <summary>
	/// Contains the name and value of a tag that you apply to an email. You can use message tags when you publish email sending events. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MessageTag
	{
		
		/// <summary>
		/// <p>The name of the message tag. The message tag name has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// <p>The value of the message tag. The message tag value has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// <p>The action that you want to take if the required MX record can't be found when you send an email. When you set this value to <code>UseDefaultValue</code>, the mail is sent using <i>amazonses.com</i> as the MAIL FROM domain. When you set this value to <code>RejectMessage</code>, the Amazon SES API v2 returns a <code>MailFromDomainNotVerified</code> error, and doesn't attempt to deliver the email.</p> <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BehaviorOnMxFailure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_DEFAULT_VALUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT_MESSAGE = 1,
	}
	
	/// <summary>
	/// An object that contains information about a blacklisting event that impacts one of the dedicated IP addresses that is associated with your account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BlacklistEntry
	{
		
		/// <summary>
		/// The name of a blacklist that an IP address was found on.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RblName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ListingTime { get; set; }
		
		/// <summary>
		/// A description of the blacklisting event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// An object that represents the content of the email, and optionally a character set specification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Content
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Charset { get; set; }
	}
	
	/// <summary>
	/// Represents the body of the email message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Body
	{
		
		/// <summary>
		/// An object that represents the content of the email, and optionally a character set specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Content Text { get; set; }
		
		/// <summary>
		/// An object that represents the content of the email, and optionally a character set specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Content Html { get; set; }
	}
	
	/// <summary>
	/// The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. If you want to use the message tags that you specify using an <code>X-SES-MESSAGE-TAGS</code> header or a parameter to the <code>SendEmail</code> or <code>SendRawEmail</code> API, choose <code>messageTag</code>. If you want to use your own email headers, choose <code>emailHeader</code>. If you want to use link tags, choose <code>linkTags</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DimensionValueSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MESSAGE_TAG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL_HEADER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINK_TAG = 2,
	}
	
	/// <summary>
	/// An object that defines the dimension configuration to use when you send email events to Amazon CloudWatch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudWatchDimensionConfiguration
	{
		
		/// <summary>
		/// <p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DimensionName { get; set; }
		
		/// <summary>
		/// The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. If you want to use the message tags that you specify using an <code>X-SES-MESSAGE-TAGS</code> header or a parameter to the <code>SendEmail</code> or <code>SendRawEmail</code> API, choose <code>messageTag</code>. If you want to use your own email headers, choose <code>emailHeader</code>. If you want to use link tags, choose <code>linkTags</code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchDimensionConfigurationDimensionValueSource DimensionValueSource { get; set; }
		
		/// <summary>
		/// <p>The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email. This value has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DefaultDimensionValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CloudWatchDimensionConfigurationDimensionValueSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MESSAGE_TAG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL_HEADER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINK_TAG = 2,
	}
	
	/// <summary>
	/// An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventDestinationDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventType[] MatchingEventTypes { get; set; }
		
		/// <summary>
		/// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KinesisFirehoseDestination KinesisFirehoseDestination { get; set; }
		
		/// <summary>
		/// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchDestination CloudWatchDestination { get; set; }
		
		/// <summary>
		/// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notification when certain email events occur.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SnsDestination SnsDestination { get; set; }
		
		/// <summary>
		/// An object that defines an Amazon Pinpoint project destination for email events. You can send email event data to a Amazon Pinpoint project to view metrics using the Transactional Messaging dashboards that are built in to Amazon Pinpoint. For more information, see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/analytics-transactional-messages.html">Transactional Messaging Charts</a> in the <i>Amazon Pinpoint User Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PinpointDestination PinpointDestination { get; set; }
	}
	
	/// <summary>
	/// A request to add an event destination to a configuration set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateConfigurationSetEventDestinationRequest
	{
		
		/// <summary>
		/// <p>The name of an event destination.</p> <p> <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventDestinationName { get; set; }
		
		/// <summary>
		/// An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EventDestinationDefinition EventDestination { get; set; }
	}
	
	/// <summary>
	/// <p>An object that defines the tracking options for a configuration set. When you use the Amazon SES API v2 to send an email, it contains an invisible image that's used to track when recipients open your email. If your email contains links, those links are changed slightly in order to track when recipients click them.</p> <p>These images and links include references to a domain operated by AWS. You can optionally configure the Amazon SES to use a domain that you operate for these images and links.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TrackingOptions
	{
		
		/// <summary>
		/// The domain that you want to use for tracking open and click events.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CustomRedirectDomain { get; set; }
	}
	
	/// <summary>
	/// Used to associate a configuration set with a dedicated IP pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeliveryOptions
	{
		
		/// <summary>
		/// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeliveryOptionsTlsPolicy TlsPolicy { get; set; }
		
		/// <summary>
		/// The name of a dedicated IP pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SendingPoolName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeliveryOptionsTlsPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONAL = 1,
	}
	
	/// <summary>
	/// Enable or disable collection of reputation metrics for emails that you send using this configuration set in the current AWS Region. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReputationOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReputationMetricsEnabled { get; set; }
		
		/// <summary>
		/// The date and time (in Unix time) when the reputation metrics were last given a fresh start. When your account is given a fresh start, your reputation metrics are calculated starting from the date of the fresh start.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastFreshStart { get; set; }
	}
	
	/// <summary>
	/// Used to enable or disable email sending for messages that use this configuration set in the current AWS Region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SendingOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SendingEnabled { get; set; }
	}
	
	/// <summary>
	/// An object that contains information about the suppression list preferences for your account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SuppressionOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SuppressionListReason[] SuppressedReasons { get; set; }
	}
	
	/// <summary>
	/// A request to create a configuration set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateConfigurationSetRequest
	{
		
		/// <summary>
		/// <p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		/// <summary>
		/// <p>An object that defines the tracking options for a configuration set. When you use the Amazon SES API v2 to send an email, it contains an invisible image that's used to track when recipients open your email. If your email contains links, those links are changed slightly in order to track when recipients click them.</p> <p>These images and links include references to a domain operated by AWS. You can optionally configure the Amazon SES to use a domain that you operate for these images and links.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrackingOptions TrackingOptions { get; set; }
		
		/// <summary>
		/// Used to associate a configuration set with a dedicated IP pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeliveryOptions DeliveryOptions { get; set; }
		
		/// <summary>
		/// Enable or disable collection of reputation metrics for emails that you send using this configuration set in the current AWS Region. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReputationOptions ReputationOptions { get; set; }
		
		/// <summary>
		/// Used to enable or disable email sending for messages that use this configuration set in the current AWS Region.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SendingOptions SendingOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// An object that contains information about the suppression list preferences for your account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SuppressionOptions SuppressionOptions { get; set; }
	}
	
	/// <summary>
	/// A request to create a new dedicated IP pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDedicatedIpPoolRequest
	{
		
		/// <summary>
		/// The name of a dedicated IP pool.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PoolName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EmailContent
	{
		
		/// <summary>
		/// Represents the email message that you're sending. The <code>Message</code> object consists of a subject line and a message body.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Message Simple { get; set; }
		
		/// <summary>
		/// Represents the raw content of an email message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RawMessage Raw { get; set; }
		
		/// <summary>
		/// An object that defines the email template to use for an email message, and the values to use for any message variables in that template. An <i>email template</i> is a type of message template that contains content that you want to define, save, and reuse in email messages that you send.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Template Template { get; set; }
	}
	
	/// <summary>
	/// A request to perform a predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled by various email providers around the world. When you perform a predictive inbox placement test, you provide a sample message that contains the content that you plan to send to your customers. We send that message to special email addresses spread across several major email providers around the world. The test takes about 24 hours to complete. When the test is complete, you can use the <code>GetDeliverabilityTestReport</code> operation to view the results of the test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeliverabilityTestReportRequest
	{
		
		/// <summary>
		/// A name that helps you identify a report generated by the Deliverability dashboard.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FromEmailAddress { get; set; }
		
		/// <summary>
		/// An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EmailContent Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The status of a predictive inbox placement test. If the status is <code>IN_PROGRESS</code>, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is <code>COMPLETE</code>, then the test is finished, and you can use the <code>GetDeliverabilityTestReport</code> operation to view the results of the test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeliverabilityTestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
	}
	
	/// <summary>
	/// An object that contains information about the tokens used for setting up Bring Your Own DKIM (BYODKIM).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DkimSigningAttributes
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string DomainSigningSelector { get; set; }
		
		/// <summary>
		/// Max length: 20480
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9+\/]+={0,2}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20480, MinimumLength=1)]
		public string DomainSigningPrivateKey { get; set; }
	}
	
	/// <summary>
	/// A request to begin the verification process for an email identity (an email address or domain).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateEmailIdentityRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EmailIdentity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// An object that contains information about the tokens used for setting up Bring Your Own DKIM (BYODKIM).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DkimSigningAttributes DkimSigningAttributes { get; set; }
	}
	
	/// <summary>
	/// <p>The email identity type. The identity type can be one of the following:</p> <ul> <li> <p> <code>EMAIL_ADDRESS</code> – The identity is an email address.</p> </li> <li> <p> <code>DOMAIN</code> – The identity is a domain.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL_ADDRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANAGED_DOMAIN = 2,
	}
	
	/// <summary>
	/// <p>An object that contains information about the DKIM authentication status for an email identity.</p> <p>Amazon SES determines the authentication status by searching for specific records in the DNS configuration for the domain. If you used <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a> to set up DKIM authentication, Amazon SES tries to find three unique CNAME records in the DNS configuration for your domain. If you provided a public key to perform DKIM authentication, Amazon SES tries to find a TXT record that uses the selector that you specified. The value of the TXT record must be a public key that's paired with the private key that you specified in the process of creating the identity</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DkimAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SigningEnabled { get; set; }
		
		/// <summary>
		/// <p>The DKIM authentication status of the identity. The status can be one of the following:</p> <ul> <li> <p> <code>PENDING</code> – The verification process was initiated, but Amazon SES hasn't yet detected the DKIM records in the DNS configuration for the domain.</p> </li> <li> <p> <code>SUCCESS</code> – The verification process completed successfully.</p> </li> <li> <p> <code>FAILED</code> – The verification process failed. This typically occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the domain.</p> </li> <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES from determining the DKIM authentication status of the domain.</p> </li> <li> <p> <code>NOT_STARTED</code> – The DKIM verification process hasn't been initiated for the domain.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DkimAttributesStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DnsToken[] Tokens { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DkimAttributesSigningAttributesOrigin SigningAttributesOrigin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DkimAttributesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORARY_FAILURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DkimAttributesSigningAttributesOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_SES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL = 1,
	}
	
	/// <summary>
	/// An object that contains information about the amount of email that was delivered to recipients.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VolumeStatistics
	{
		
		/// <summary>
		/// An object that contains information about inbox placement volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InboxRawCount { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SpamRawCount { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectedInbox { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectedSpam { get; set; }
	}
	
	/// <summary>
	/// An object that contains information about the volume of email sent on each day of the analysis period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DailyVolume
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// An object that contains information about the amount of email that was delivered to recipients.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VolumeStatistics VolumeStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainIspPlacement[] DomainIspPlacements { get; set; }
	}
	
	/// <summary>
	/// The warmup status of a dedicated IP.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WarmupStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONE = 1,
	}
	
	/// <summary>
	/// <p>Contains information about a dedicated IP address that is associated with your Amazon SES account.</p> <p>To learn more about requesting dedicated IP addresses, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/dedicated-ip-case.html">Requesting and Relinquishing Dedicated IP Addresses</a> in the <i>Amazon SES Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DedicatedIp
	{
		
		/// <summary>
		/// An IPv4 address.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Ip { get; set; }
		
		/// <summary>
		/// The warmup status of a dedicated IP.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DedicatedIpWarmupStatus WarmupStatus { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int WarmupPercentage { get; set; }
		
		/// <summary>
		/// The name of a dedicated IP pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PoolName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DedicatedIpWarmupStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONE = 1,
	}
	
	/// <summary>
	/// The current status of your Deliverability dashboard subscription. If this value is <code>PENDING_EXPIRATION</code>, your subscription is scheduled to expire at the end of the current calendar month.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeliverabilityDashboardAccountStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_EXPIRATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	/// <summary>
	/// An object that contains metadata related to a predictive inbox placement test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeliverabilityTestReport
	{
		
		/// <summary>
		/// A unique string that identifies a Deliverability dashboard report.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportId { get; set; }
		
		/// <summary>
		/// A name that helps you identify a report generated by the Deliverability dashboard.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportName { get; set; }
		
		/// <summary>
		/// The subject line for an email that you submitted in a predictive inbox placement test.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FromEmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		/// <summary>
		/// The status of a predictive inbox placement test. If the status is <code>IN_PROGRESS</code>, then the predictive inbox placement test is currently running. Predictive inbox placement tests are usually complete within 24 hours of creating the test. If the status is <code>COMPLETE</code>, then the test is finished, and you can use the <code>GetDeliverabilityTestReport</code> operation to view the results of the test.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeliverabilityTestReportDeliverabilityTestStatus DeliverabilityTestStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeliverabilityTestReportDeliverabilityTestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
	}
	
	/// <summary>
	/// An object that describes the recipients for an email.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Destination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EmailAddress[] ToAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EmailAddress[] CcAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EmailAddress[] BccAddresses { get; set; }
	}
	
	/// <summary>
	/// <p>The DKIM authentication status of the identity. The status can be one of the following:</p> <ul> <li> <p> <code>PENDING</code> – The verification process was initiated, but Amazon SES hasn't yet detected the DKIM records in the DNS configuration for the domain.</p> </li> <li> <p> <code>SUCCESS</code> – The verification process completed successfully.</p> </li> <li> <p> <code>FAILED</code> – The verification process failed. This typically occurs when Amazon SES fails to find the DKIM records in the DNS configuration of the domain.</p> </li> <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue is preventing Amazon SES from determining the DKIM authentication status of the domain.</p> </li> <li> <p> <code>NOT_STARTED</code> – The DKIM verification process hasn't been initiated for the domain.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DkimStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORARY_FAILURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DkimSigningAttributesOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_SES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL = 1,
	}
	
	/// <summary>
	/// An object that contains the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for (<code>PutDeliverabilityDashboardOption</code> operation).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainDeliverabilityCampaign
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CampaignId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FromAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ip[] SendingIps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FirstSeenDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastSeenDateTime { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InboxCount { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SpamCount { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement percentages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ReadRate { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement percentages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DeleteRate { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement percentages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ReadDeleteRate { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectedVolume { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Esp[] Esps { get; set; }
	}
	
	/// <summary>
	/// An object that contains information about the inbox placement data settings for a verified domain that’s associated with your AWS account. This data is available only if you enabled the Deliverability dashboard for the domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InboxPlacementTrackingOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Global { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IspName[] TrackedIsps { get; set; }
	}
	
	/// <summary>
	/// An object that contains inbox placement data for email sent from one of your email domains to a specific email provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainIspPlacement
	{
		
		/// <summary>
		/// The name of an email provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IspName { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InboxRawCount { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SpamRawCount { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement percentages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> InboxPercentage { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement percentages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SpamPercentage { get; set; }
	}
	
	/// <summary>
	/// In the Amazon SES API v2, <i>events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventDestination
	{
		
		/// <summary>
		/// <p>The name of an event destination.</p> <p> <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EventType[] MatchingEventTypes { get; set; }
		
		/// <summary>
		/// An object that defines an Amazon Kinesis Data Firehose destination for email events. You can use Amazon Kinesis Data Firehose to stream data to other services, such as Amazon S3 and Amazon Redshift.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KinesisFirehoseDestination KinesisFirehoseDestination { get; set; }
		
		/// <summary>
		/// An object that defines an Amazon CloudWatch destination for email events. You can use Amazon CloudWatch to monitor and gain insights on your email sending metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchDestination CloudWatchDestination { get; set; }
		
		/// <summary>
		/// An object that defines an Amazon SNS destination for email events. You can use Amazon SNS to send notification when certain email events occur.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SnsDestination SnsDestination { get; set; }
		
		/// <summary>
		/// An object that defines an Amazon Pinpoint project destination for email events. You can send email event data to a Amazon Pinpoint project to view metrics using the Transactional Messaging dashboards that are built in to Amazon Pinpoint. For more information, see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/analytics-transactional-messages.html">Transactional Messaging Charts</a> in the <i>Amazon Pinpoint User Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PinpointDestination PinpointDestination { get; set; }
	}
	
	/// <summary>
	/// An email sending event type. For example, email sends, opens, and bounces are all email events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOUNCE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLAINT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIVERY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLICK = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RENDERING_FAILURE = 7,
	}
	
	/// <summary>
	/// An object that contains information about the per-day and per-second sending limits for your Amazon SES account in the current AWS Region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SendQuota
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Max24HourSend { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MaxSendRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SentLast24Hours { get; set; }
	}
	
	/// <summary>
	/// An object that contains information about the email address suppression preferences for your account in the current AWS Region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SuppressionAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SuppressionListReason[] SuppressedReasons { get; set; }
	}
	
	/// <summary>
	/// An object that contains inbox placement data for an email provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PlacementStatistics
	{
		
		/// <summary>
		/// An object that contains information about inbox placement percentages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> InboxPercentage { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement percentages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SpamPercentage { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement percentages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MissingPercentage { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement percentages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SpfPercentage { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement percentages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DkimPercentage { get; set; }
	}
	
	/// <summary>
	/// An object that contains information about email that was sent from the selected domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OverallVolume
	{
		
		/// <summary>
		/// An object that contains information about the amount of email that was delivered to recipients.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VolumeStatistics VolumeStatistics { get; set; }
		
		/// <summary>
		/// An object that contains information about inbox placement percentages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ReadRatePercent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainIspPlacement[] DomainIspPlacements { get; set; }
	}
	
	/// <summary>
	/// A list of attributes that are associated with a MAIL FROM domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MailFromAttributes
	{
		
		/// <summary>
		/// The domain that you want to use as a MAIL FROM domain.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MailFromDomain { get; set; }
		
		/// <summary>
		/// <p>The status of the MAIL FROM domain. This status can have the following values:</p> <ul> <li> <p> <code>PENDING</code> – Amazon SES hasn't started searching for the MX record yet.</p> </li> <li> <p> <code>SUCCESS</code> – Amazon SES detected the required MX record for the MAIL FROM domain.</p> </li> <li> <p> <code>FAILED</code> – Amazon SES can't find the required MX record, or the record no longer exists.</p> </li> <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue occurred, which prevented Amazon SES from determining the status of the MAIL FROM domain.</p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MailFromAttributesMailFromDomainStatus MailFromDomainStatus { get; set; }
		
		/// <summary>
		/// <p>The action that you want to take if the required MX record can't be found when you send an email. When you set this value to <code>UseDefaultValue</code>, the mail is sent using <i>amazonses.com</i> as the MAIL FROM domain. When you set this value to <code>RejectMessage</code>, the Amazon SES API v2 returns a <code>MailFromDomainNotVerified</code> error, and doesn't attempt to deliver the email.</p> <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MailFromAttributesBehaviorOnMxFailure BehaviorOnMxFailure { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MailFromAttributesMailFromDomainStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORARY_FAILURE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MailFromAttributesBehaviorOnMxFailure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_DEFAULT_VALUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT_MESSAGE = 1,
	}
	
	/// <summary>
	/// An object that contains information about an email address that is on the suppression list for your account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SuppressedDestination
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// <p>The reason that the address was added to the suppression list for your account. The value can be one of the following:</p> <ul> <li> <p> <code>COMPLAINT</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a complaint.</p> </li> <li> <p> <code>BOUNCE</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a hard bounce.</p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SuppressedDestinationReason Reason { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		/// <summary>
		/// An object that contains additional attributes that are related an email address that is on the suppression list for your account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SuppressedDestinationAttributes Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SuppressedDestinationReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOUNCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLAINT = 1,
	}
	
	/// <summary>
	/// Information about an email identity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IdentityInfo
	{
		
		/// <summary>
		/// <p>The email identity type. The identity type can be one of the following:</p> <ul> <li> <p> <code>EMAIL_ADDRESS</code> – The identity is an email address.</p> </li> <li> <p> <code>DOMAIN</code> – The identity is a domain.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IdentityInfoIdentityType IdentityType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SendingEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IdentityInfoIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL_ADDRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANAGED_DOMAIN = 2,
	}
	
	/// <summary>
	/// An object that describes how email sent during the predictive inbox placement test was handled by a certain email provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IspPlacement
	{
		
		/// <summary>
		/// The name of an email provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IspName { get; set; }
		
		/// <summary>
		/// An object that contains inbox placement data for an email provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PlacementStatistics PlacementStatistics { get; set; }
	}
	
	/// <summary>
	/// <p>The status of the MAIL FROM domain. This status can have the following values:</p> <ul> <li> <p> <code>PENDING</code> – Amazon SES hasn't started searching for the MX record yet.</p> </li> <li> <p> <code>SUCCESS</code> – Amazon SES detected the required MX record for the MAIL FROM domain.</p> </li> <li> <p> <code>FAILED</code> – Amazon SES can't find the required MX record, or the record no longer exists.</p> </li> <li> <p> <code>TEMPORARY_FAILURE</code> – A temporary issue occurred, which prevented Amazon SES from determining the status of the MAIL FROM domain.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MailFromDomainStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORARY_FAILURE = 3,
	}
	
	/// <summary>
	/// A request to enable or disable the automatic IP address warm-up feature.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutAccountDedicatedIpWarmupAttributesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoWarmupEnabled { get; set; }
	}
	
	/// <summary>
	/// A request to change the ability of your account to send email.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutAccountSendingAttributesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SendingEnabled { get; set; }
	}
	
	/// <summary>
	/// A request to change your account's suppression preferences.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutAccountSuppressionAttributesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SuppressionListReason[] SuppressedReasons { get; set; }
	}
	
	/// <summary>
	/// A request to associate a configuration set with a dedicated IP pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutConfigurationSetDeliveryOptionsRequest
	{
		
		/// <summary>
		/// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PutConfigurationSetDeliveryOptionsRequestTlsPolicy TlsPolicy { get; set; }
		
		/// <summary>
		/// The name of the dedicated IP pool that you want to associate with the configuration set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SendingPoolName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutConfigurationSetDeliveryOptionsRequestTlsPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONAL = 1,
	}
	
	/// <summary>
	/// A request to enable or disable tracking of reputation metrics for a configuration set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutConfigurationSetReputationOptionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReputationMetricsEnabled { get; set; }
	}
	
	/// <summary>
	/// A request to enable or disable the ability of Amazon SES to send emails that use a specific configuration set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutConfigurationSetSendingOptionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SendingEnabled { get; set; }
	}
	
	/// <summary>
	/// A request to change the account suppression list preferences for a specific configuration set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutConfigurationSetSuppressionOptionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SuppressionListReason[] SuppressedReasons { get; set; }
	}
	
	/// <summary>
	/// A request to add a custom domain for tracking open and click events to a configuration set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutConfigurationSetTrackingOptionsRequest
	{
		
		/// <summary>
		/// The domain that you want to use for tracking open and click events.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CustomRedirectDomain { get; set; }
	}
	
	/// <summary>
	/// A request to move a dedicated IP address to a dedicated IP pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutDedicatedIpInPoolRequest
	{
		
		/// <summary>
		/// The name of a dedicated IP pool.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationPoolName { get; set; }
	}
	
	/// <summary>
	/// A request to change the warm-up attributes for a dedicated IP address. This operation is useful when you want to resume the warm-up process for an existing IP address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutDedicatedIpWarmupAttributesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int WarmupPercentage { get; set; }
	}
	
	/// <summary>
	/// <p>Enable or disable the Deliverability dashboard. When you enable the Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email using Amazon SES API v2. You also gain the ability to perform predictive inbox placement tests.</p> <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon SES and other AWS services. For more information about the features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/pinpoint/pricing/">Amazon Pinpoint Pricing</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutDeliverabilityDashboardOptionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool DashboardEnabled { get; set; }
		
		/// <summary>
		/// An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DomainDeliverabilityTrackingOption[] SubscribedDomains { get; set; }
	}
	
	/// <summary>
	/// A request to enable or disable DKIM signing of email that you send from an email identity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutEmailIdentityDkimAttributesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SigningEnabled { get; set; }
	}
	
	/// <summary>
	/// A request to change the DKIM attributes for an email identity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutEmailIdentityDkimSigningAttributesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PutEmailIdentityDkimSigningAttributesRequestSigningAttributesOrigin SigningAttributesOrigin { get; set; }
		
		/// <summary>
		/// An object that contains information about the tokens used for setting up Bring Your Own DKIM (BYODKIM).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DkimSigningAttributes SigningAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutEmailIdentityDkimSigningAttributesRequestSigningAttributesOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_SES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL = 1,
	}
	
	/// <summary>
	/// A request to set the attributes that control how bounce and complaint events are processed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutEmailIdentityFeedbackAttributesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EmailForwardingEnabled { get; set; }
	}
	
	/// <summary>
	/// A request to configure the custom MAIL FROM domain for a verified identity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutEmailIdentityMailFromAttributesRequest
	{
		
		/// <summary>
		/// The domain that you want to use as a MAIL FROM domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MailFromDomain { get; set; }
		
		/// <summary>
		/// <p>The action that you want to take if the required MX record can't be found when you send an email. When you set this value to <code>UseDefaultValue</code>, the mail is sent using <i>amazonses.com</i> as the MAIL FROM domain. When you set this value to <code>RejectMessage</code>, the Amazon SES API v2 returns a <code>MailFromDomainNotVerified</code> error, and doesn't attempt to deliver the email.</p> <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PutEmailIdentityMailFromAttributesRequestBehaviorOnMxFailure BehaviorOnMxFailure { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutEmailIdentityMailFromAttributesRequestBehaviorOnMxFailure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_DEFAULT_VALUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT_MESSAGE = 1,
	}
	
	/// <summary>
	/// A request to add an email destination to the suppression list for your account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutSuppressedDestinationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// <p>The reason that the address was added to the suppression list for your account. The value can be one of the following:</p> <ul> <li> <p> <code>COMPLAINT</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a complaint.</p> </li> <li> <p> <code>BOUNCE</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a hard bounce.</p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PutSuppressedDestinationRequestReason Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutSuppressedDestinationRequestReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOUNCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLAINT = 1,
	}
	
	/// <summary>
	/// A request to send an email message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SendEmailRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FromEmailAddress { get; set; }
		
		/// <summary>
		/// An object that describes the recipients for an email.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Destination Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EmailAddress[] ReplyToAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FeedbackForwardingEmailAddress { get; set; }
		
		/// <summary>
		/// An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EmailContent Content { get; set; }
		
		/// <summary>
		/// A list of message tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MessageTag[] EmailTags { get; set; }
		
		/// <summary>
		/// <p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
	}
	
	/// <summary>
	/// An object that contains additional attributes that are related an email address that is on the suppression list for your account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SuppressedDestinationAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MessageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FeedbackId { get; set; }
	}
	
	/// <summary>
	/// A summary that describes the suppressed email address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SuppressedDestinationSummary
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// <p>The reason that the address was added to the suppression list for your account. The value can be one of the following:</p> <ul> <li> <p> <code>COMPLAINT</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a complaint.</p> </li> <li> <p> <code>BOUNCE</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a hard bounce.</p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SuppressedDestinationSummaryReason Reason { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SuppressedDestinationSummaryReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOUNCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLAINT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A request to change the settings for an event destination for a configuration set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateConfigurationSetEventDestinationRequest
	{
		
		/// <summary>
		/// An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EventDestinationDefinition EventDestination { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create a configuration set. <i>Configuration sets</i> are groups of rules that you can apply to the emails that you send. You apply a configuration set to an email by specifying the name of the configuration set when you call the Amazon SES API v2. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.
		/// CreateConfigurationSet /v2/email/configuration-sets
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateConfigurationSetResponse> CreateConfigurationSetAsync(CreateConfigurationSetBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/configuration-sets";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateConfigurationSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>List all of the configuration sets associated with your account in the current region.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
		/// ListConfigurationSets /v2/email/configuration-sets
		/// </summary>
		/// <param name="NextToken">A token returned from a previous call to <code>ListConfigurationSets</code> to indicate the position in the list of configuration sets.</param>
		/// <param name="PageSize">The number of results to show in a single call to <code>ListConfigurationSets</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListConfigurationSetsResponse> ListConfigurationSetsAsync(string NextToken, int PageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/configuration-sets?NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&PageSize="+PageSize;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListConfigurationSetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Create an event destination. <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p> <p>A single configuration set can include more than one event destination.</p>
		/// CreateConfigurationSetEventDestination /v2/email/configuration-sets/{ConfigurationSetName}/event-destinations
		/// </summary>
		/// <param name="ConfigurationSetName">The name of the configuration set that you want to add an event destination to.</param>
		/// <returns>Success</returns>
		public async Task<CreateConfigurationSetEventDestinationResponse> CreateConfigurationSetEventDestinationAsync(string ConfigurationSetName, CreateConfigurationSetEventDestinationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/configuration-sets/"+ (ConfigurationSetName==null? "" : Uri.EscapeDataString(ConfigurationSetName))+"/event-destinations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateConfigurationSetEventDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieve a list of event destinations that are associated with a configuration set.</p> <p> <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
		/// GetConfigurationSetEventDestinations /v2/email/configuration-sets/{ConfigurationSetName}/event-destinations
		/// </summary>
		/// <param name="ConfigurationSetName">The name of the configuration set that contains the event destination.</param>
		/// <returns>Success</returns>
		public async Task<GetConfigurationSetEventDestinationsResponse> GetConfigurationSetEventDestinationsAsync(string ConfigurationSetName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/configuration-sets/"+ (ConfigurationSetName==null? "" : Uri.EscapeDataString(ConfigurationSetName))+"/event-destinations";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetConfigurationSetEventDestinationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new pool of dedicated IP addresses. A pool can include one or more dedicated IP addresses that are associated with your AWS account. You can associate a pool with a configuration set. When you send an email that uses that configuration set, the message is sent from one of the addresses in the associated pool.
		/// CreateDedicatedIpPool /v2/email/dedicated-ip-pools
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDedicatedIpPoolResponse> CreateDedicatedIpPoolAsync(CreateDedicatedIpPoolBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/dedicated-ip-pools";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDedicatedIpPoolResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all of the dedicated IP pools that exist in your AWS account in the current Region.
		/// ListDedicatedIpPools /v2/email/dedicated-ip-pools
		/// </summary>
		/// <param name="NextToken">A token returned from a previous call to <code>ListDedicatedIpPools</code> to indicate the position in the list of dedicated IP pools.</param>
		/// <param name="PageSize">The number of results to show in a single call to <code>ListDedicatedIpPools</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListDedicatedIpPoolsResponse> ListDedicatedIpPoolsAsync(string NextToken, int PageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/dedicated-ip-pools?NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&PageSize="+PageSize;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDedicatedIpPoolsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new predictive inbox placement test. Predictive inbox placement tests can help you predict how your messages will be handled by various email providers around the world. When you perform a predictive inbox placement test, you provide a sample message that contains the content that you plan to send to your customers. Amazon SES then sends that message to special email addresses spread across several major email providers. After about 24 hours, the test is complete, and you can use the <code>GetDeliverabilityTestReport</code> operation to view the results of the test.
		/// CreateDeliverabilityTestReport /v2/email/deliverability-dashboard/test
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDeliverabilityTestReportResponse> CreateDeliverabilityTestReportAsync(CreateDeliverabilityTestReportBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/deliverability-dashboard/test";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDeliverabilityTestReportResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts the process of verifying an email identity. An <i>identity</i> is an email address or domain that you use when you send email. Before you can use an identity to send email, you first have to verify it. By verifying an identity, you demonstrate that you're the owner of the identity, and that you've given Amazon SES API v2 permission to send email from the identity.</p> <p>When you verify an email address, Amazon SES sends an email to the address. Your email address is verified as soon as you follow the link in the verification email. </p> <p>When you verify a domain without specifying the <code>DkimSigningAttributes</code> object, this operation provides a set of DKIM tokens. You can convert these tokens into CNAME records, which you then add to the DNS configuration for your domain. Your domain is verified when Amazon SES detects these records in the DNS configuration for your domain. This verification method is known as <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a>.</p> <p>Alternatively, you can perform the verification process by providing your own public-private key pair. This verification method is known as Bring Your Own DKIM (BYODKIM). To use BYODKIM, your call to the <code>CreateEmailIdentity</code> operation has to include the <code>DkimSigningAttributes</code> object. When you specify this object, you provide a selector (a component of the DNS record name that identifies the public key that you want to use for DKIM authentication) and a private key.</p>
		/// CreateEmailIdentity /v2/email/identities
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateEmailIdentityResponse> CreateEmailIdentityAsync(CreateEmailIdentityBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/identities";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateEmailIdentityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all of the email identities that are associated with your AWS account. An identity can be either an email address or a domain. This operation returns identities that are verified as well as those that aren't. This operation returns identities that are associated with Amazon SES and Amazon Pinpoint.
		/// ListEmailIdentities /v2/email/identities
		/// </summary>
		/// <param name="NextToken">A token returned from a previous call to <code>ListEmailIdentities</code> to indicate the position in the list of identities.</param>
		/// <param name="PageSize"><p>The number of results to show in a single call to <code>ListEmailIdentities</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</p> <p>The value you specify has to be at least 0, and can be no more than 1000.</p></param>
		/// <returns>Success</returns>
		public async Task<ListEmailIdentitiesResponse> ListEmailIdentitiesAsync(string NextToken, int PageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/identities?NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&PageSize="+PageSize;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListEmailIdentitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Delete an existing configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
		/// DeleteConfigurationSet /v2/email/configuration-sets/{ConfigurationSetName}
		/// </summary>
		/// <param name="ConfigurationSetName">The name of the configuration set that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteConfigurationSetResponse> DeleteConfigurationSetAsync(string ConfigurationSetName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/configuration-sets/"+ (ConfigurationSetName==null? "" : Uri.EscapeDataString(ConfigurationSetName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteConfigurationSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Get information about an existing configuration set, including the dedicated IP pool that it's associated with, whether or not it's enabled for sending email, and more.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
		/// GetConfigurationSet /v2/email/configuration-sets/{ConfigurationSetName}
		/// </summary>
		/// <param name="ConfigurationSetName">The name of the configuration set that you want to obtain more information about.</param>
		/// <returns>Success</returns>
		public async Task<GetConfigurationSetResponse> GetConfigurationSetAsync(string ConfigurationSetName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/configuration-sets/"+ (ConfigurationSetName==null? "" : Uri.EscapeDataString(ConfigurationSetName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetConfigurationSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Delete an event destination.</p> <p> <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
		/// DeleteConfigurationSetEventDestination /v2/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}
		/// </summary>
		/// <param name="ConfigurationSetName">The name of the configuration set that contains the event destination that you want to delete.</param>
		/// <param name="EventDestinationName">The name of the event destination that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteConfigurationSetEventDestinationResponse> DeleteConfigurationSetEventDestinationAsync(string ConfigurationSetName, string EventDestinationName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/configuration-sets/"+ (ConfigurationSetName==null? "" : Uri.EscapeDataString(ConfigurationSetName))+"/event-destinations/"+ (EventDestinationName==null? "" : Uri.EscapeDataString(EventDestinationName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteConfigurationSetEventDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Update the configuration of an event destination for a configuration set.</p> <p> <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
		/// UpdateConfigurationSetEventDestination /v2/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}
		/// </summary>
		/// <param name="ConfigurationSetName">The name of the configuration set that contains the event destination that you want to modify.</param>
		/// <param name="EventDestinationName">The name of the event destination that you want to modify.</param>
		/// <returns>Success</returns>
		public async Task<UpdateConfigurationSetEventDestinationResponse> UpdateConfigurationSetEventDestinationAsync(string ConfigurationSetName, string EventDestinationName, UpdateConfigurationSetEventDestinationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/configuration-sets/"+ (ConfigurationSetName==null? "" : Uri.EscapeDataString(ConfigurationSetName))+"/event-destinations/"+ (EventDestinationName==null? "" : Uri.EscapeDataString(EventDestinationName));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateConfigurationSetEventDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a dedicated IP pool.
		/// DeleteDedicatedIpPool /v2/email/dedicated-ip-pools/{PoolName}
		/// </summary>
		/// <param name="PoolName">The name of the dedicated IP pool that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteDedicatedIpPoolResponse> DeleteDedicatedIpPoolAsync(string PoolName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/dedicated-ip-pools/"+ (PoolName==null? "" : Uri.EscapeDataString(PoolName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDedicatedIpPoolResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an email identity. An identity can be either an email address or a domain name.
		/// DeleteEmailIdentity /v2/email/identities/{EmailIdentity}
		/// </summary>
		/// <param name="EmailIdentity">The identity (that is, the email address or domain) that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteEmailIdentityResponse> DeleteEmailIdentityAsync(string EmailIdentity, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/identities/"+ (EmailIdentity==null? "" : Uri.EscapeDataString(EmailIdentity));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteEmailIdentityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides information about a specific identity, including the identity's verification status, its DKIM authentication status, and its custom Mail-From settings.
		/// GetEmailIdentity /v2/email/identities/{EmailIdentity}
		/// </summary>
		/// <param name="EmailIdentity">The email identity that you want to retrieve details for.</param>
		/// <returns>Success</returns>
		public async Task<GetEmailIdentityResponse> GetEmailIdentityAsync(string EmailIdentity, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/identities/"+ (EmailIdentity==null? "" : Uri.EscapeDataString(EmailIdentity));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetEmailIdentityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an email address from the suppression list for your account.
		/// DeleteSuppressedDestination /v2/email/suppression/addresses/{EmailAddress}
		/// </summary>
		/// <param name="EmailAddress">The suppressed email destination to remove from the account suppression list.</param>
		/// <returns>Success</returns>
		public async Task<DeleteSuppressedDestinationResponse> DeleteSuppressedDestinationAsync(string EmailAddress, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/suppression/addresses/"+ (EmailAddress==null? "" : Uri.EscapeDataString(EmailAddress));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteSuppressedDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a specific email address that's on the suppression list for your account.
		/// GetSuppressedDestination /v2/email/suppression/addresses/{EmailAddress}
		/// </summary>
		/// <param name="EmailAddress">The email address that's on the account suppression list.</param>
		/// <returns>Success</returns>
		public async Task<GetSuppressedDestinationResponse> GetSuppressedDestinationAsync(string EmailAddress, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/suppression/addresses/"+ (EmailAddress==null? "" : Uri.EscapeDataString(EmailAddress));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetSuppressedDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Obtain information about the email-sending status and capabilities of your Amazon SES account in the current AWS Region.
		/// GetAccount /v2/email/account
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAccountResponse> GetAccountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/account";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of the blacklists that your dedicated IP addresses appear on.
		/// GetBlacklistReports /v2/email/deliverability-dashboard/blacklist-report#BlacklistItemNames
		/// </summary>
		/// <param name="BlacklistItemNames">A list of IP addresses that you want to retrieve blacklist information about. You can only specify the dedicated IP addresses that you use to send email using Amazon SES or Amazon Pinpoint.</param>
		/// <returns>Success</returns>
		public async Task<GetBlacklistReportsResponse> GetBlacklistReportsAsync(BlacklistItemName[] BlacklistItemNames, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/deliverability-dashboard/blacklist-report#BlacklistItemNames?"+String.Join("&", BlacklistItemNames.Select(z => $"BlacklistItemNames={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetBlacklistReportsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about a dedicated IP address, including the name of the dedicated IP pool that it's associated with, as well information about the automatic warm-up process for the address.
		/// GetDedicatedIp /v2/email/dedicated-ips/{IP}
		/// </summary>
		/// <param name="IP">The IP address that you want to obtain more information about. The value you specify has to be a dedicated IP address that's assocaited with your AWS account.</param>
		/// <returns>Success</returns>
		public async Task<GetDedicatedIpResponse> GetDedicatedIpAsync(string IP, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/dedicated-ips/"+ (IP==null? "" : Uri.EscapeDataString(IP));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDedicatedIpResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the dedicated IP addresses that are associated with your AWS account.
		/// GetDedicatedIps /v2/email/dedicated-ips
		/// </summary>
		/// <param name="PoolName">The name of the IP pool that the dedicated IP address is associated with.</param>
		/// <param name="NextToken">A token returned from a previous call to <code>GetDedicatedIps</code> to indicate the position of the dedicated IP pool in the list of IP pools.</param>
		/// <param name="PageSize">The number of results to show in a single call to <code>GetDedicatedIpsRequest</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</param>
		/// <returns>Success</returns>
		public async Task<GetDedicatedIpsResponse> GetDedicatedIpsAsync(string PoolName, string NextToken, int PageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/dedicated-ips?PoolName=" + (PoolName==null? "" : Uri.EscapeDataString(PoolName))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&PageSize="+PageSize;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDedicatedIpsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieve information about the status of the Deliverability dashboard for your account. When the Deliverability dashboard is enabled, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email. You also gain the ability to perform predictive inbox placement tests.</p> <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon SES and other AWS services. For more information about the features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/ses/pricing/">Amazon SES Pricing</a>.</p>
		/// GetDeliverabilityDashboardOptions /v2/email/deliverability-dashboard
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeliverabilityDashboardOptionsResponse> GetDeliverabilityDashboardOptionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/deliverability-dashboard";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDeliverabilityDashboardOptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Enable or disable the Deliverability dashboard. When you enable the Deliverability dashboard, you gain access to reputation, deliverability, and other metrics for the domains that you use to send email. You also gain the ability to perform predictive inbox placement tests.</p> <p>When you use the Deliverability dashboard, you pay a monthly subscription charge, in addition to any other fees that you accrue by using Amazon SES and other AWS services. For more information about the features and cost of a Deliverability dashboard subscription, see <a href="http://aws.amazon.com/ses/pricing/">Amazon SES Pricing</a>.</p>
		/// PutDeliverabilityDashboardOption /v2/email/deliverability-dashboard
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutDeliverabilityDashboardOptionResponse> PutDeliverabilityDashboardOptionAsync(PutDeliverabilityDashboardOptionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/deliverability-dashboard";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutDeliverabilityDashboardOptionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve the results of a predictive inbox placement test.
		/// GetDeliverabilityTestReport /v2/email/deliverability-dashboard/test-reports/{ReportId}
		/// </summary>
		/// <param name="ReportId">A unique string that identifies the predictive inbox placement test.</param>
		/// <returns>Success</returns>
		public async Task<GetDeliverabilityTestReportResponse> GetDeliverabilityTestReportAsync(string ReportId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/deliverability-dashboard/test-reports/"+ (ReportId==null? "" : Uri.EscapeDataString(ReportId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDeliverabilityTestReportResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all the deliverability data for a specific campaign. This data is available for a campaign only if the campaign sent email by using a domain that the Deliverability dashboard is enabled for.
		/// GetDomainDeliverabilityCampaign /v2/email/deliverability-dashboard/campaigns/{CampaignId}
		/// </summary>
		/// <param name="CampaignId">The unique identifier for the campaign. The Deliverability dashboard automatically generates and assigns this identifier to a campaign.</param>
		/// <returns>Success</returns>
		public async Task<GetDomainDeliverabilityCampaignResponse> GetDomainDeliverabilityCampaignAsync(string CampaignId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/deliverability-dashboard/campaigns/"+ (CampaignId==null? "" : Uri.EscapeDataString(CampaignId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDomainDeliverabilityCampaignResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve inbox placement and engagement rates for the domains that you use to send email.
		/// GetDomainStatisticsReport /v2/email/deliverability-dashboard/statistics-report/{Domain}#StartDate&EndDate
		/// </summary>
		/// <param name="Domain">The domain that you want to obtain deliverability metrics for.</param>
		/// <param name="StartDate">The first day (in Unix time) that you want to obtain domain deliverability metrics for.</param>
		/// <param name="EndDate">The last day (in Unix time) that you want to obtain domain deliverability metrics for. The <code>EndDate</code> that you specify has to be less than or equal to 30 days after the <code>StartDate</code>.</param>
		/// <returns>Success</returns>
		public async Task<GetDomainStatisticsReportResponse> GetDomainStatisticsReportAsync(string Domain, System.DateTimeOffset StartDate, System.DateTimeOffset EndDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/deliverability-dashboard/statistics-report/"+ (Domain==null? "" : Uri.EscapeDataString(Domain))+"#StartDate&EndDate&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDomainStatisticsReportResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show a list of the predictive inbox placement tests that you've performed, regardless of their statuses. For predictive inbox placement tests that are complete, you can use the <code>GetDeliverabilityTestReport</code> operation to view the results.
		/// ListDeliverabilityTestReports /v2/email/deliverability-dashboard/test-reports
		/// </summary>
		/// <param name="NextToken">A token returned from a previous call to <code>ListDeliverabilityTestReports</code> to indicate the position in the list of predictive inbox placement tests.</param>
		/// <param name="PageSize"><p>The number of results to show in a single call to <code>ListDeliverabilityTestReports</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</p> <p>The value you specify has to be at least 0, and can be no more than 1000.</p></param>
		/// <returns>Success</returns>
		public async Task<ListDeliverabilityTestReportsResponse> ListDeliverabilityTestReportsAsync(string NextToken, int PageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/deliverability-dashboard/test-reports?NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&PageSize="+PageSize;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDeliverabilityTestReportsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve deliverability data for all the campaigns that used a specific domain to send email during a specified time range. This data is available for a domain only if you enabled the Deliverability dashboard for the domain.
		/// ListDomainDeliverabilityCampaigns /v2/email/deliverability-dashboard/domains/{SubscribedDomain}/campaigns#StartDate&EndDate
		/// </summary>
		/// <param name="StartDate">The first day, in Unix time format, that you want to obtain deliverability data for.</param>
		/// <param name="EndDate">The last day, in Unix time format, that you want to obtain deliverability data for. This value has to be less than or equal to 30 days after the value of the <code>StartDate</code> parameter.</param>
		/// <param name="SubscribedDomain">The domain to obtain deliverability data for.</param>
		/// <param name="NextToken">A token that’s returned from a previous call to the <code>ListDomainDeliverabilityCampaigns</code> operation. This token indicates the position of a campaign in the list of campaigns.</param>
		/// <param name="PageSize">The maximum number of results to include in response to a single call to the <code>ListDomainDeliverabilityCampaigns</code> operation. If the number of results is larger than the number that you specify in this parameter, the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListDomainDeliverabilityCampaignsResponse> ListDomainDeliverabilityCampaignsAsync(System.DateTimeOffset StartDate, System.DateTimeOffset EndDate, string SubscribedDomain, string NextToken, int PageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/deliverability-dashboard/domains/"+ (SubscribedDomain==null? "" : Uri.EscapeDataString(SubscribedDomain))+"/campaigns#StartDate&EndDate?StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&PageSize="+PageSize;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDomainDeliverabilityCampaignsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of email addresses that are on the suppression list for your account.
		/// ListSuppressedDestinations /v2/email/suppression/addresses
		/// </summary>
		/// <param name="Reason">The factors that caused the email address to be added to .</param>
		/// <param name="StartDate">Used to filter the list of suppressed email destinations so that it only includes addresses that were added to the list after a specific date. The date that you specify should be in Unix time format.</param>
		/// <param name="EndDate">Used to filter the list of suppressed email destinations so that it only includes addresses that were added to the list before a specific date. The date that you specify should be in Unix time format.</param>
		/// <param name="NextToken">A token returned from a previous call to <code>ListSuppressedDestinations</code> to indicate the position in the list of suppressed email addresses.</param>
		/// <param name="PageSize">The number of results to show in a single call to <code>ListSuppressedDestinations</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</param>
		/// <returns>Success</returns>
		public async Task<ListSuppressedDestinationsResponse> ListSuppressedDestinationsAsync(SuppressionListReason[] Reason, System.DateTimeOffset StartDate, System.DateTimeOffset EndDate, string NextToken, int PageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/suppression/addresses?"+String.Join("&", Reason.Select(z => $"Reason={z}"))+"&StartDate=" + StartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&PageSize="+PageSize;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListSuppressedDestinationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds an email address to the suppression list for your account.
		/// PutSuppressedDestination /v2/email/suppression/addresses
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutSuppressedDestinationResponse> PutSuppressedDestinationAsync(PutSuppressedDestinationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/suppression/addresses";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutSuppressedDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of the tags (keys and values) that are associated with a specified resource. A <i>tag</i> is a label that you optionally define and associate with a resource. Each tag consists of a required <i>tag key</i> and an optional associated <i>tag value</i>. A tag key is a general label that acts as a category for more specific tag values. A tag value acts as a descriptor within a tag key.
		/// ListTagsForResource /v2/email/tags#ResourceArn
		/// </summary>
		/// <param name="ResourceArn">The Amazon Resource Name (ARN) of the resource that you want to retrieve tag information for.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string ResourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/tags#ResourceArn?ResourceArn=" + (ResourceArn==null? "" : Uri.EscapeDataString(ResourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable or disable the automatic warm-up feature for dedicated IP addresses.
		/// PutAccountDedicatedIpWarmupAttributes /v2/email/account/dedicated-ips/warmup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutAccountDedicatedIpWarmupAttributesResponse> PutAccountDedicatedIpWarmupAttributesAsync(PutAccountDedicatedIpWarmupAttributesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/account/dedicated-ips/warmup";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutAccountDedicatedIpWarmupAttributesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enable or disable the ability of your account to send email.
		/// PutAccountSendingAttributes /v2/email/account/sending
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutAccountSendingAttributesResponse> PutAccountSendingAttributesAsync(PutAccountSendingAttributesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/account/sending";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutAccountSendingAttributesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Change the settings for the account-level suppression list.
		/// PutAccountSuppressionAttributes /v2/email/account/suppression
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutAccountSuppressionAttributesResponse> PutAccountSuppressionAttributesAsync(PutAccountSuppressionAttributesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/account/suppression";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutAccountSuppressionAttributesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associate a configuration set with a dedicated IP pool. You can use dedicated IP pools to create groups of dedicated IP addresses for sending specific types of email.
		/// PutConfigurationSetDeliveryOptions /v2/email/configuration-sets/{ConfigurationSetName}/delivery-options
		/// </summary>
		/// <param name="ConfigurationSetName">The name of the configuration set that you want to associate with a dedicated IP pool.</param>
		/// <returns>Success</returns>
		public async Task<PutConfigurationSetDeliveryOptionsResponse> PutConfigurationSetDeliveryOptionsAsync(string ConfigurationSetName, PutConfigurationSetDeliveryOptionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/configuration-sets/"+ (ConfigurationSetName==null? "" : Uri.EscapeDataString(ConfigurationSetName))+"/delivery-options";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutConfigurationSetDeliveryOptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enable or disable collection of reputation metrics for emails that you send using a particular configuration set in a specific AWS Region.
		/// PutConfigurationSetReputationOptions /v2/email/configuration-sets/{ConfigurationSetName}/reputation-options
		/// </summary>
		/// <param name="ConfigurationSetName">The name of the configuration set that you want to enable or disable reputation metric tracking for.</param>
		/// <returns>Success</returns>
		public async Task<PutConfigurationSetReputationOptionsResponse> PutConfigurationSetReputationOptionsAsync(string ConfigurationSetName, PutConfigurationSetReputationOptionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/configuration-sets/"+ (ConfigurationSetName==null? "" : Uri.EscapeDataString(ConfigurationSetName))+"/reputation-options";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutConfigurationSetReputationOptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enable or disable email sending for messages that use a particular configuration set in a specific AWS Region.
		/// PutConfigurationSetSendingOptions /v2/email/configuration-sets/{ConfigurationSetName}/sending
		/// </summary>
		/// <param name="ConfigurationSetName">The name of the configuration set that you want to enable or disable email sending for.</param>
		/// <returns>Success</returns>
		public async Task<PutConfigurationSetSendingOptionsResponse> PutConfigurationSetSendingOptionsAsync(string ConfigurationSetName, PutConfigurationSetSendingOptionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/configuration-sets/"+ (ConfigurationSetName==null? "" : Uri.EscapeDataString(ConfigurationSetName))+"/sending";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutConfigurationSetSendingOptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Specify the account suppression list preferences for a configuration set.
		/// PutConfigurationSetSuppressionOptions /v2/email/configuration-sets/{ConfigurationSetName}/suppression-options
		/// </summary>
		/// <param name="ConfigurationSetName">The name of the configuration set that you want to change the suppression list preferences for.</param>
		/// <returns>Success</returns>
		public async Task<PutConfigurationSetSuppressionOptionsResponse> PutConfigurationSetSuppressionOptionsAsync(string ConfigurationSetName, PutConfigurationSetSuppressionOptionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/configuration-sets/"+ (ConfigurationSetName==null? "" : Uri.EscapeDataString(ConfigurationSetName))+"/suppression-options";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutConfigurationSetSuppressionOptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Specify a custom domain to use for open and click tracking elements in email that you send.
		/// PutConfigurationSetTrackingOptions /v2/email/configuration-sets/{ConfigurationSetName}/tracking-options
		/// </summary>
		/// <param name="ConfigurationSetName">The name of the configuration set that you want to add a custom tracking domain to.</param>
		/// <returns>Success</returns>
		public async Task<PutConfigurationSetTrackingOptionsResponse> PutConfigurationSetTrackingOptionsAsync(string ConfigurationSetName, PutConfigurationSetTrackingOptionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/configuration-sets/"+ (ConfigurationSetName==null? "" : Uri.EscapeDataString(ConfigurationSetName))+"/tracking-options";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutConfigurationSetTrackingOptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Move a dedicated IP address to an existing dedicated IP pool.</p> <note> <p>The dedicated IP address that you specify must already exist, and must be associated with your AWS account. </p> <p>The dedicated IP pool you specify must already exist. You can create a new pool by using the <code>CreateDedicatedIpPool</code> operation.</p> </note>
		/// PutDedicatedIpInPool /v2/email/dedicated-ips/{IP}/pool
		/// </summary>
		/// <param name="IP">The IP address that you want to move to the dedicated IP pool. The value you specify has to be a dedicated IP address that's associated with your AWS account.</param>
		/// <returns>Success</returns>
		public async Task<PutDedicatedIpInPoolResponse> PutDedicatedIpInPoolAsync(string IP, PutDedicatedIpInPoolBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/dedicated-ips/"+ (IP==null? "" : Uri.EscapeDataString(IP))+"/pool";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutDedicatedIpInPoolResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p/>
		/// PutDedicatedIpWarmupAttributes /v2/email/dedicated-ips/{IP}/warmup
		/// </summary>
		/// <param name="IP">The dedicated IP address that you want to update the warm-up attributes for.</param>
		/// <returns>Success</returns>
		public async Task<PutDedicatedIpWarmupAttributesResponse> PutDedicatedIpWarmupAttributesAsync(string IP, PutDedicatedIpWarmupAttributesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/dedicated-ips/"+ (IP==null? "" : Uri.EscapeDataString(IP))+"/warmup";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutDedicatedIpWarmupAttributesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Used to enable or disable DKIM authentication for an email identity.
		/// PutEmailIdentityDkimAttributes /v2/email/identities/{EmailIdentity}/dkim
		/// </summary>
		/// <param name="EmailIdentity">The email identity that you want to change the DKIM settings for.</param>
		/// <returns>Success</returns>
		public async Task<PutEmailIdentityDkimAttributesResponse> PutEmailIdentityDkimAttributesAsync(string EmailIdentity, PutEmailIdentityDkimAttributesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/identities/"+ (EmailIdentity==null? "" : Uri.EscapeDataString(EmailIdentity))+"/dkim";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutEmailIdentityDkimAttributesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Used to configure or change the DKIM authentication settings for an email domain identity. You can use this operation to do any of the following:</p> <ul> <li> <p>Update the signing attributes for an identity that uses Bring Your Own DKIM (BYODKIM).</p> </li> <li> <p>Change from using no DKIM authentication to using Easy DKIM.</p> </li> <li> <p>Change from using no DKIM authentication to using BYODKIM.</p> </li> <li> <p>Change from using Easy DKIM to using BYODKIM.</p> </li> <li> <p>Change from using BYODKIM to using Easy DKIM.</p> </li> </ul>
		/// PutEmailIdentityDkimSigningAttributes /v1/email/identities/{EmailIdentity}/dkim/signing
		/// </summary>
		/// <param name="EmailIdentity">The email identity that you want to configure DKIM for.</param>
		/// <returns>Success</returns>
		public async Task<PutEmailIdentityDkimSigningAttributesResponse> PutEmailIdentityDkimSigningAttributesAsync(string EmailIdentity, PutEmailIdentityDkimSigningAttributesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/email/identities/"+ (EmailIdentity==null? "" : Uri.EscapeDataString(EmailIdentity))+"/dkim/signing";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutEmailIdentityDkimSigningAttributesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Used to enable or disable feedback forwarding for an identity. This setting determines what happens when an identity is used to send an email that results in a bounce or complaint event.</p> <p>If the value is <code>true</code>, you receive email notifications when bounce or complaint events occur. These notifications are sent to the address that you specified in the <code>Return-Path</code> header of the original email.</p> <p>You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications (for example, by setting up an event destination), you receive an email notification when these events occur (even if this setting is disabled).</p>
		/// PutEmailIdentityFeedbackAttributes /v2/email/identities/{EmailIdentity}/feedback
		/// </summary>
		/// <param name="EmailIdentity">The email identity that you want to configure bounce and complaint feedback forwarding for.</param>
		/// <returns>Success</returns>
		public async Task<PutEmailIdentityFeedbackAttributesResponse> PutEmailIdentityFeedbackAttributesAsync(string EmailIdentity, PutEmailIdentityFeedbackAttributesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/identities/"+ (EmailIdentity==null? "" : Uri.EscapeDataString(EmailIdentity))+"/feedback";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutEmailIdentityFeedbackAttributesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Used to enable or disable the custom Mail-From domain configuration for an email identity.
		/// PutEmailIdentityMailFromAttributes /v2/email/identities/{EmailIdentity}/mail-from
		/// </summary>
		/// <param name="EmailIdentity">The verified email identity that you want to set up the custom MAIL FROM domain for.</param>
		/// <returns>Success</returns>
		public async Task<PutEmailIdentityMailFromAttributesResponse> PutEmailIdentityMailFromAttributesAsync(string EmailIdentity, PutEmailIdentityMailFromAttributesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/identities/"+ (EmailIdentity==null? "" : Uri.EscapeDataString(EmailIdentity))+"/mail-from";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutEmailIdentityMailFromAttributesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Sends an email message. You can use the Amazon SES API v2 to send two types of messages:</p> <ul> <li> <p> <b>Simple</b> – A standard email message. When you create this type of message, you specify the sender, the recipient, and the message body, and Amazon SES assembles the message for you.</p> </li> <li> <p> <b>Raw</b> – A raw, MIME-formatted email message. When you send this type of email, you have to specify all of the message headers, as well as the message body. You can use this message type to send messages that contain attachments. The message that you specify has to be a valid MIME message.</p> </li> </ul>
		/// SendEmail /v2/email/outbound-emails
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SendEmailResponse> SendEmailAsync(SendEmailBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/outbound-emails";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SendEmailResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Add one or more tags (keys and values) to a specified resource. A <i>tag</i> is a label that you optionally define and associate with a resource. Tags can help you categorize and manage resources in different ways, such as by purpose, owner, environment, or other criteria. A resource can have as many as 50 tags.</p> <p>Each tag consists of a required <i>tag key</i> and an associated <i>tag value</i>, both of which you define. A tag key is a general label that acts as a category for more specific tag values. A tag value acts as a descriptor within a tag key.</p>
		/// TagResource /v2/email/tags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/tags";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove one or more tags (keys and values) from a specified resource.
		/// UntagResource /v2/email/tags#ResourceArn&TagKeys
		/// </summary>
		/// <param name="ResourceArn">The Amazon Resource Name (ARN) of the resource that you want to remove one or more tags from.</param>
		/// <param name="TagKeys"><p>The tags (tag keys) that you want to remove from the resource. When you specify a tag key, the action removes both that key and its associated tag value.</p> <p>To remove more than one tag from the resource, append the <code>TagKeys</code> parameter and argument for each additional tag to remove, separated by an ampersand. For example: <code>/v2/email/tags?ResourceArn=ResourceArn&amp;TagKeys=Key1&amp;TagKeys=Key2</code> </p></param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string ResourceArn, TagKey[] TagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2/email/tags#ResourceArn&TagKeys?ResourceArn=" + (ResourceArn==null? "" : Uri.EscapeDataString(ResourceArn))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateConfigurationSetBody
	{
		
		/// <summary>
		/// <p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
		
		/// <summary>
		/// <p>An object that defines the tracking options for a configuration set. When you use the Amazon SES API v2 to send an email, it contains an invisible image that's used to track when recipients open your email. If your email contains links, those links are changed slightly in order to track when recipients click them.</p> <p>These images and links include references to a domain operated by AWS. You can optionally configure the Amazon SES to use a domain that you operate for these images and links.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TrackingOptions { get; set; }
		
		/// <summary>
		/// Used to associate a configuration set with a dedicated IP pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryOptions { get; set; }
		
		/// <summary>
		/// Enable or disable collection of reputation metrics for emails that you send using this configuration set in the current AWS Region. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReputationOptions { get; set; }
		
		/// <summary>
		/// Used to enable or disable email sending for messages that use this configuration set in the current AWS Region.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SendingOptions { get; set; }
		
		/// <summary>
		/// An array of objects that define the tags (keys and values) that you want to associate with the configuration set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// An object that contains information about the suppression list preferences for your account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SuppressionOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateConfigurationSetEventDestinationBody
	{
		
		/// <summary>
		/// <p>The name of an event destination.</p> <p> <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventDestinationName { get; set; }
		
		/// <summary>
		/// An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventDestination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDedicatedIpPoolBody
	{
		
		/// <summary>
		/// The name of a dedicated IP pool.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PoolName { get; set; }
		
		/// <summary>
		/// An object that defines the tags (keys and values) that you want to associate with the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeliverabilityTestReportBody
	{
		
		/// <summary>
		/// A name that helps you identify a report generated by the Deliverability dashboard.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportName { get; set; }
		
		/// <summary>
		/// The email address that the predictive inbox placement test email was sent from.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FromEmailAddress { get; set; }
		
		/// <summary>
		/// An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Content { get; set; }
		
		/// <summary>
		/// An array of objects that define the tags (keys and values) that you want to associate with the predictive inbox placement test.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateEmailIdentityBody
	{
		
		/// <summary>
		/// The email address or domain that you want to verify.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EmailIdentity { get; set; }
		
		/// <summary>
		/// An array of objects that define the tags (keys and values) that you want to associate with the email identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// An object that contains information about the tokens used for setting up Bring Your Own DKIM (BYODKIM).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DkimSigningAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateConfigurationSetEventDestinationBody
	{
		
		/// <summary>
		/// An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventDestination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutDeliverabilityDashboardOptionBody
	{
		
		/// <summary>
		/// Specifies whether to enable the Deliverability dashboard. To enable the dashboard, set this value to <code>true</code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool DashboardEnabled { get; set; }
		
		/// <summary>
		/// An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DomainDeliverabilityTrackingOption[] SubscribedDomains { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutSuppressedDestinationBody
	{
		
		/// <summary>
		/// The email address that should be added to the suppression list for your account.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// <p>The reason that the address was added to the suppression list for your account. The value can be one of the following:</p> <ul> <li> <p> <code>COMPLAINT</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a complaint.</p> </li> <li> <p> <code>BOUNCE</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a hard bounce.</p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PutSuppressedDestinationBodyReason Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutSuppressedDestinationBodyReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOUNCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLAINT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutAccountDedicatedIpWarmupAttributesBody
	{
		
		/// <summary>
		/// Enables or disables the automatic warm-up feature for dedicated IP addresses that are associated with your Amazon SES account in the current AWS Region. Set to <code>true</code> to enable the automatic warm-up feature, or set to <code>false</code> to disable it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoWarmupEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutAccountSendingAttributesBody
	{
		
		/// <summary>
		/// <p>Enables or disables your account's ability to send email. Set to <code>true</code> to enable email sending, or set to <code>false</code> to disable email sending.</p> <note> <p>If AWS paused your account's ability to send email, you can't use this operation to resume your account's ability to send email.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SendingEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutAccountSuppressionAttributesBody
	{
		
		/// <summary>
		/// <p>A list that contains the reasons that email addresses will be automatically added to the suppression list for your account. This list can contain any or all of the following:</p> <ul> <li> <p> <code>COMPLAINT</code> – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a complaint.</p> </li> <li> <p> <code>BOUNCE</code> – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a hard bounce.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SuppressionListReason[] SuppressedReasons { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutConfigurationSetDeliveryOptionsBody
	{
		
		/// <summary>
		/// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PutConfigurationSetDeliveryOptionsBodyTlsPolicy TlsPolicy { get; set; }
		
		/// <summary>
		/// The name of the dedicated IP pool that you want to associate with the configuration set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SendingPoolName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutConfigurationSetDeliveryOptionsBodyTlsPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutConfigurationSetReputationOptionsBody
	{
		
		/// <summary>
		/// If <code>true</code>, tracking of reputation metrics is enabled for the configuration set. If <code>false</code>, tracking of reputation metrics is disabled for the configuration set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReputationMetricsEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutConfigurationSetSendingOptionsBody
	{
		
		/// <summary>
		/// If <code>true</code>, email sending is enabled for the configuration set. If <code>false</code>, email sending is disabled for the configuration set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SendingEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutConfigurationSetSuppressionOptionsBody
	{
		
		/// <summary>
		/// <p>A list that contains the reasons that email addresses are automatically added to the suppression list for your account. This list can contain any or all of the following:</p> <ul> <li> <p> <code>COMPLAINT</code> – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a complaint.</p> </li> <li> <p> <code>BOUNCE</code> – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a hard bounce.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SuppressionListReason[] SuppressedReasons { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutConfigurationSetTrackingOptionsBody
	{
		
		/// <summary>
		/// The domain that you want to use for tracking open and click events.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CustomRedirectDomain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutDedicatedIpInPoolBody
	{
		
		/// <summary>
		/// The name of a dedicated IP pool.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationPoolName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutDedicatedIpWarmupAttributesBody
	{
		
		/// <summary>
		/// The warm-up percentage that you want to associate with the dedicated IP address.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int WarmupPercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutEmailIdentityDkimAttributesBody
	{
		
		/// <summary>
		/// <p>Sets the DKIM signing configuration for the identity.</p> <p>When you set this value <code>true</code>, then the messages that are sent from the identity are signed using DKIM. If you set this value to <code>false</code>, your messages are sent without DKIM signing.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SigningEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutEmailIdentityDkimSigningAttributesBody
	{
		
		/// <summary>
		/// <p>The method that you want to use to configure DKIM for the identity. There are two possible values:</p> <ul> <li> <p> <code>AWS_SES</code> – Configure DKIM for the identity by using <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a>.</p> </li> <li> <p> <code>EXTERNAL</code> – Configure DKIM for the identity by using Bring Your Own DKIM (BYODKIM).</p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PutEmailIdentityDkimSigningAttributesBodySigningAttributesOrigin SigningAttributesOrigin { get; set; }
		
		/// <summary>
		/// An object that contains information about the tokens used for setting up Bring Your Own DKIM (BYODKIM).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SigningAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutEmailIdentityDkimSigningAttributesBodySigningAttributesOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_SES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutEmailIdentityFeedbackAttributesBody
	{
		
		/// <summary>
		/// <p>Sets the feedback forwarding configuration for the identity.</p> <p>If the value is <code>true</code>, you receive email notifications when bounce or complaint events occur. These notifications are sent to the address that you specified in the <code>Return-Path</code> header of the original email.</p> <p>You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications (for example, by setting up an event destination), you receive an email notification when these events occur (even if this setting is disabled).</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EmailForwardingEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutEmailIdentityMailFromAttributesBody
	{
		
		/// <summary>
		/// The domain that you want to use as a MAIL FROM domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MailFromDomain { get; set; }
		
		/// <summary>
		/// <p>The action that you want to take if the required MX record can't be found when you send an email. When you set this value to <code>UseDefaultValue</code>, the mail is sent using <i>amazonses.com</i> as the MAIL FROM domain. When you set this value to <code>RejectMessage</code>, the Amazon SES API v2 returns a <code>MailFromDomainNotVerified</code> error, and doesn't attempt to deliver the email.</p> <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PutEmailIdentityMailFromAttributesBodyBehaviorOnMxFailure BehaviorOnMxFailure { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutEmailIdentityMailFromAttributesBodyBehaviorOnMxFailure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_DEFAULT_VALUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT_MESSAGE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SendEmailBody
	{
		
		/// <summary>
		/// The email address that you want to use as the "From" address for the email. The address that you specify has to be verified. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FromEmailAddress { get; set; }
		
		/// <summary>
		/// An object that describes the recipients for an email.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
		
		/// <summary>
		/// The "Reply-to" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmailAddress[] ReplyToAddresses { get; set; }
		
		/// <summary>
		/// The address that you want bounce and complaint notifications to be sent to.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FeedbackForwardingEmailAddress { get; set; }
		
		/// <summary>
		/// An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Content { get; set; }
		
		/// <summary>
		/// A list of message tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MessageTag[] EmailTags { get; set; }
		
		/// <summary>
		/// <p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationSetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the resource that you want to add one or more tags to.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// A list of the tags that you want to add to the resource. A tag consists of a required tag key (<code>Key</code>) and an associated tag value (<code>Value</code>). The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
