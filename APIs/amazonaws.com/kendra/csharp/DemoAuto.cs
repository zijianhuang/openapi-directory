//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchDeleteDocumentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchDeleteDocumentResponseFailedDocument[] FailedDocuments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchDeleteDocumentRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public DocumentId[] DocumentIdList { get; set; }
		
		/// <summary>
		/// Maps a particular data source sync job to a particular data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSourceSyncJobMetricTarget DataSourceSyncJobMetricTarget { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchPutDocumentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchPutDocumentResponseFailedDocument[] FailedDocuments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchPutDocumentRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
		
		/// <summary>
		/// Max length: 1284
		/// Min length: 1
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1284, MinimumLength=1)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Document[] Documents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDataSourceResponse
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDataSourceRequest
	{
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateDataSourceRequestType Type { get; set; }
		
		/// <summary>
		/// Configuration information for a Amazon Kendra data source.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataSourceConfiguration Configuration { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schedule { get; set; }
		
		/// <summary>
		/// Max length: 1284
		/// Min length: 1
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1284, MinimumLength=1)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDataSourceRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHAREPOINT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALESFORCE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONEDRIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICENOW = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateFaqResponse
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateFaqRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Information required to find a specific file in an Amazon S3 bucket.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3Path S3Path { get; set; }
		
		/// <summary>
		/// Max length: 1284
		/// Min length: 1
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1284, MinimumLength=1)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateIndexResponse
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateIndexRequest
	{
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateIndexRequestEdition Edition { get; set; }
		
		/// <summary>
		/// Max length: 1284
		/// Min length: 1
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1284, MinimumLength=1)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Provides the identifier of the AWS KMS customer master key (CMK) used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServerSideEncryptionConfiguration ServerSideEncryptionConfiguration { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateIndexRequestEdition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPER_EDITION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTERPRISE_EDITION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDataSourceRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteFaqRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteIndexRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDataSourceResponse
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeDataSourceResponseType Type { get; set; }
		
		/// <summary>
		/// Configuration information for a Amazon Kendra data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSourceConfiguration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeDataSourceResponseStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schedule { get; set; }
		
		/// <summary>
		/// Max length: 1284
		/// Min length: 1
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1284, MinimumLength=1)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeDataSourceResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHAREPOINT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALESFORCE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONEDRIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICENOW = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeDataSourceResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDataSourceRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFaqResponse
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// Information required to find a specific file in an Amazon S3 bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Path S3Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeFaqResponseStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 1284
		/// Min length: 1
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1284, MinimumLength=1)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeFaqResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFaqRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIndexResponse
	{
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeIndexResponseEdition Edition { get; set; }
		
		/// <summary>
		/// Max length: 1284
		/// Min length: 1
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1284, MinimumLength=1)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Provides the identifier of the AWS KMS customer master key (CMK) used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServerSideEncryptionConfiguration ServerSideEncryptionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeIndexResponseStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public DocumentMetadataConfiguration[] DocumentMetadataConfigurations { get; set; }
		
		/// <summary>
		/// Provides information about the number of documents and the number of questions and answers in an index.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IndexStatistics IndexStatistics { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Specifies capacity units configured for your index. You can add and remove capacity units to tune an index to your requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CapacityUnitsConfiguration CapacityUnits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeIndexResponseEdition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPER_EDITION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTERPRISE_EDITION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeIndexResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_UPDATING = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIndexRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDataSourceSyncJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceSyncJob[] History { get; set; }
		
		/// <summary>
		/// Max length: 800
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(800, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDataSourceSyncJobsRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
		
		/// <summary>
		/// Max length: 800
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(800, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Provides a range of time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimeRange StartTimeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListDataSourceSyncJobsRequestStatusFilter StatusFilter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListDataSourceSyncJobsRequestStatusFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPLETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABORTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCING_INDEXING = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDataSourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceSummary[] SummaryItems { get; set; }
		
		/// <summary>
		/// Max length: 800
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(800, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDataSourcesRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
		
		/// <summary>
		/// Max length: 800
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(800, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListFaqsResponse
	{
		
		/// <summary>
		/// Max length: 800
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(800, MinimumLength=1)]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FaqSummary[] FaqSummaryItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListFaqsRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
		
		/// <summary>
		/// Max length: 800
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(800, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListIndicesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IndexConfigurationSummary[] IndexConfigurationSummaryItems { get; set; }
		
		/// <summary>
		/// Max length: 800
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(800, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListIndicesRequest
	{
		
		/// <summary>
		/// Max length: 800
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(800, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=1)]
		public string ResourceARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class QueryResult
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=1)]
		public string QueryId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QueryResultItem[] ResultItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FacetResult[] FacetResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalNumberOfResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class QueryRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string QueryText { get; set; }
		
		/// <summary>
		/// <p>Provides filtering the query results based on document attributes.</p> <p>When you use the <code>AndAllFilters</code> or <code>OrAllFilters</code>, filters you can use 2 layers under the first attribute filter. For example, you can use:</p> <p> <code>&lt;AndAllFilters&gt;</code> </p> <ol> <li> <p> <code> &lt;OrAllFilters&gt;</code> </p> </li> <li> <p> <code> &lt;EqualTo&gt;</code> </p> </li> </ol> <p>If you use more than 2 layers, you receive a <code>ValidationException</code> exception with the message "<code>AttributeFilter</code> cannot have a depth of more than 2."</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeFilter AttributeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Facet[] Facets { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DocumentAttributeKey[] RequestedDocumentAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QueryRequestQueryResultTypeFilter QueryResultTypeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum QueryRequestQueryResultTypeFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUESTION_ANSWER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANSWER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartDataSourceSyncJobResponse
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ExecutionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartDataSourceSyncJobRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopDataSourceSyncJobRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SubmitFeedbackRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=1)]
		public string QueryId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClickFeedback[] ClickFeedbackItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RelevanceFeedback[] RelevanceFeedbackItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=1)]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=1)]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public TagKey[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDataSourceRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string IndexId { get; set; }
		
		/// <summary>
		/// Configuration information for a Amazon Kendra data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSourceConfiguration Configuration { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schedule { get; set; }
		
		/// <summary>
		/// Max length: 1284
		/// Min length: 1
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1284, MinimumLength=1)]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateIndexRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 1284
		/// Min length: 1
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1284, MinimumLength=1)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public DocumentMetadataConfiguration[] DocumentMetadataConfigurationUpdates { get; set; }
		
		/// <summary>
		/// Specifies capacity units configured for your index. You can add and remove capacity units to tune an index to your requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CapacityUnitsConfiguration CapacityUnits { get; set; }
	}
	
	/// <summary>
	/// Access Control List files for the documents in a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccessControlListConfiguration
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string KeyPath { get; set; }
	}
	
	/// <summary>
	/// Provides information about the column that should be used for filtering the query response by groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AclConfiguration
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string AllowedGroupsColumnName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdditionalResultAttributeValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_WITH_HIGHLIGHTS_VALUE = 0,
	}
	
	/// <summary>
	/// An attribute returned with a document from a search.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdditionalResultAttributeValue
	{
		
		/// <summary>
		/// Provides text and information about where to highlight the text.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TextWithHighlights TextWithHighlightsValue { get; set; }
	}
	
	/// <summary>
	/// An attribute returned from an index query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdditionalResultAttribute
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AdditionalResultAttributeValueType ValueType { get; set; }
		
		/// <summary>
		/// An attribute returned with a document from a search.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AdditionalResultAttributeValue Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdditionalResultAttributeValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_WITH_HIGHLIGHTS_VALUE = 0,
	}
	
	/// <summary>
	/// Provides text and information about where to highlight the text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TextWithHighlights
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Highlight[] Highlights { get; set; }
	}
	
	/// <summary>
	/// <p>Provides filtering the query results based on document attributes.</p> <p>When you use the <code>AndAllFilters</code> or <code>OrAllFilters</code>, filters you can use 2 layers under the first attribute filter. For example, you can use:</p> <p> <code>&lt;AndAllFilters&gt;</code> </p> <ol> <li> <p> <code> &lt;OrAllFilters&gt;</code> </p> </li> <li> <p> <code> &lt;EqualTo&gt;</code> </p> </li> </ol> <p>If you use more than 2 layers, you receive a <code>ValidationException</code> exception with the message "<code>AttributeFilter</code> cannot have a depth of more than 2."</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttributeFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeFilter[] AndAllFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeFilter[] OrAllFilters { get; set; }
		
		/// <summary>
		/// <p>Provides filtering the query results based on document attributes.</p> <p>When you use the <code>AndAllFilters</code> or <code>OrAllFilters</code>, filters you can use 2 layers under the first attribute filter. For example, you can use:</p> <p> <code>&lt;AndAllFilters&gt;</code> </p> <ol> <li> <p> <code> &lt;OrAllFilters&gt;</code> </p> </li> <li> <p> <code> &lt;EqualTo&gt;</code> </p> </li> </ol> <p>If you use more than 2 layers, you receive a <code>ValidationException</code> exception with the message "<code>AttributeFilter</code> cannot have a depth of more than 2."</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeFilter NotFilter { get; set; }
		
		/// <summary>
		/// A custom attribute value assigned to a document. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentAttribute EqualsTo { get; set; }
		
		/// <summary>
		/// A custom attribute value assigned to a document. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentAttribute ContainsAll { get; set; }
		
		/// <summary>
		/// A custom attribute value assigned to a document. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentAttribute ContainsAny { get; set; }
		
		/// <summary>
		/// A custom attribute value assigned to a document. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentAttribute GreaterThan { get; set; }
		
		/// <summary>
		/// A custom attribute value assigned to a document. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentAttribute GreaterThanOrEquals { get; set; }
		
		/// <summary>
		/// A custom attribute value assigned to a document. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentAttribute LessThan { get; set; }
		
		/// <summary>
		/// A custom attribute value assigned to a document. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentAttribute LessThanOrEquals { get; set; }
	}
	
	/// <summary>
	/// A custom attribute value assigned to a document. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentAttribute
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_][a-zA-Z0-9_-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// The value of a custom document attribute. You can only provide one value for a custom attribute.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DocumentAttributeValue Value { get; set; }
	}
	
	/// <summary>
	/// Maps a particular data source sync job to a particular data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSourceSyncJobMetricTarget
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DataSourceId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DataSourceSyncJobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalError = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidRequest = 1,
	}
	
	/// <summary>
	/// Provides information about documents that could not be removed from an index by the <a>BatchDeleteDocument</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchDeleteDocumentResponseFailedDocument
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchDeleteDocumentResponseFailedDocumentErrorCode ErrorCode { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BatchDeleteDocumentResponseFailedDocumentErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalError = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidRequest = 1,
	}
	
	/// <summary>
	/// Provides information about a document that could not be indexed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchPutDocumentResponseFailedDocument
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BatchPutDocumentResponseFailedDocumentErrorCode ErrorCode { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BatchPutDocumentResponseFailedDocumentErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalError = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidRequest = 1,
	}
	
	/// <summary>
	/// Specifies capacity units configured for your index. You can add and remove capacity units to tune an index to your requirements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CapacityUnitsConfiguration
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int StorageCapacityUnits { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int QueryCapacityUnits { get; set; }
	}
	
	/// <summary>
	/// Gathers information about when a particular result was clicked by a user. Your application uses the <a>SubmitFeedback</a> operation to provide click information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClickFeedback
	{
		
		/// <summary>
		/// Max length: 73
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(73, MinimumLength=1)]
		public string ResultId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ClickTime { get; set; }
	}
	
	/// <summary>
	/// Provides information about how Amazon Kendra should use the columns of a database in an index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ColumnConfiguration
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentIdColumnName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentDataColumnName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentTitleColumnName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceToIndexFieldMapping[] FieldMappings { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public ColumnName[] ChangeDetectingColumns { get; set; }
	}
	
	/// <summary>
	/// Provides the information necessary to connect to a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConnectionConfiguration
	{
		
		/// <summary>
		/// Max length: 253
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(253, MinimumLength=1)]
		public string DatabaseHost { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public int DatabasePort { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TableName { get; set; }
		
		/// <summary>
		/// Max length: 1284
		/// Min length: 1
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1284, MinimumLength=1)]
		public string SecretArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PDF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS_WORD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAIN_TEXT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PPT = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHAREPOINT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALESFORCE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONEDRIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICENOW = 5,
	}
	
	/// <summary>
	/// Configuration information for a Amazon Kendra data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSourceConfiguration
	{
		
		/// <summary>
		/// Provides configuration information for a data source to index documents in an Amazon S3 bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DataSourceConfiguration S3Configuration { get; set; }
		
		/// <summary>
		/// Provides configuration information for connecting to a Microsoft SharePoint data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SharePointConfiguration SharePointConfiguration { get; set; }
		
		/// <summary>
		/// Provides the information necessary to connect a database to an index. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DatabaseConfiguration DatabaseConfiguration { get; set; }
		
		/// <summary>
		/// Provides configuration information for connecting to a Salesforce data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SalesforceConfiguration SalesforceConfiguration { get; set; }
		
		/// <summary>
		/// Provides configuration information for data sources that connect to OneDrive.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OneDriveConfiguration OneDriveConfiguration { get; set; }
		
		/// <summary>
		/// Provides configuration information required to connect to a ServiceNow data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceNowConfiguration ServiceNowConfiguration { get; set; }
	}
	
	/// <summary>
	/// Information required to find a specific file in an Amazon S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3Path
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// Pattern: [a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IndexEdition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPER_EDITION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTERPRISE_EDITION = 1,
	}
	
	/// <summary>
	/// Provides the identifier of the AWS KMS customer master key (CMK) used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServerSideEncryptionConfiguration
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string KmsKeyId { get; set; }
	}
	
	/// <summary>
	/// Provides configuration information for a data source to index documents in an Amazon S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3DataSourceConfiguration
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// Pattern: [a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceInclusionsExclusionsStringsMember[] InclusionPrefixes { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceInclusionsExclusionsStringsMember[] ExclusionPatterns { get; set; }
		
		/// <summary>
		/// Document metadata files that contain information such as the document access control information, source URI, document author, and custom attributes. Each metadata file contains metadata about a single document.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentsMetadataConfiguration DocumentsMetadataConfiguration { get; set; }
		
		/// <summary>
		/// Access Control List files for the documents in a data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccessControlListConfiguration AccessControlListConfiguration { get; set; }
	}
	
	/// <summary>
	/// Provides configuration information for connecting to a Microsoft SharePoint data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SharePointConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SharePointConfigurationSharePointVersion SharePointVersion { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Url[] Urls { get; set; }
		
		/// <summary>
		/// Max length: 1284
		/// Min length: 1
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1284, MinimumLength=1)]
		public string SecretArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CrawlAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseChangeLog { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceInclusionsExclusionsStringsMember[] InclusionPatterns { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceInclusionsExclusionsStringsMember[] ExclusionPatterns { get; set; }
		
		/// <summary>
		/// Provides information for connecting to an Amazon VPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSourceVpcConfiguration VpcConfiguration { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceToIndexFieldMapping[] FieldMappings { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_.]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentTitleFieldName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SharePointConfigurationSharePointVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHAREPOINT_ONLINE = 0,
	}
	
	/// <summary>
	/// Provides the information necessary to connect a database to an index. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatabaseConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DatabaseConfigurationDatabaseEngineType DatabaseEngineType { get; set; }
		
		/// <summary>
		/// Provides the information necessary to connect to a database.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConnectionConfiguration ConnectionConfiguration { get; set; }
		
		/// <summary>
		/// Provides information for connecting to an Amazon VPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSourceVpcConfiguration VpcConfiguration { get; set; }
		
		/// <summary>
		/// Provides information about how Amazon Kendra should use the columns of a database in an index.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ColumnConfiguration ColumnConfiguration { get; set; }
		
		/// <summary>
		/// Provides information about the column that should be used for filtering the query response by groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AclConfiguration AclConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DatabaseConfigurationDatabaseEngineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDS_AURORA_MYSQL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDS_AURORA_POSTGRESQL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDS_MYSQL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDS_POSTGRESQL = 3,
	}
	
	/// <summary>
	/// Provides configuration information for connecting to a Salesforce data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SalesforceConfiguration
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^(https?|ftp|file):\/\/([^\s]*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ServerUrl { get; set; }
		
		/// <summary>
		/// Max length: 1284
		/// Min length: 1
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1284, MinimumLength=1)]
		public string SecretArn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 17
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public SalesforceStandardObjectConfiguration[] StandardObjectConfigurations { get; set; }
		
		/// <summary>
		/// Specifies configuration information for the knowlege article types that Amazon Kendra indexes. Amazon Kendra indexes standard knowledge articles and the standard fields of knowledge articles, or the custom fields of custom knowledge articles, but not both 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SalesforceKnowledgeArticleConfiguration KnowledgeArticleConfiguration { get; set; }
		
		/// <summary>
		/// Defines configuration for syncing a Salesforce chatter feed. The contents of the object comes from the Salesforce FeedItem table.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SalesforceChatterFeedConfiguration ChatterFeedConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CrawlAttachments { get; set; }
		
		/// <summary>
		/// Provides configuration information for processing attachments to Salesforce standard objects. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SalesforceStandardObjectAttachmentConfiguration StandardObjectAttachmentConfiguration { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceInclusionsExclusionsStringsMember[] IncludeAttachmentFilePatterns { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceInclusionsExclusionsStringsMember[] ExcludeAttachmentFilePatterns { get; set; }
	}
	
	/// <summary>
	/// Provides configuration information for data sources that connect to OneDrive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OneDriveConfiguration
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\.)+[a-z]{2,}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string TenantDomain { get; set; }
		
		/// <summary>
		/// Max length: 1284
		/// Min length: 1
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1284, MinimumLength=1)]
		public string SecretArn { get; set; }
		
		/// <summary>
		/// User accounts whose documents should be indexed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OneDriveUsers OneDriveUsers { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceInclusionsExclusionsStringsMember[] InclusionPatterns { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceInclusionsExclusionsStringsMember[] ExclusionPatterns { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceToIndexFieldMapping[] FieldMappings { get; set; }
	}
	
	/// <summary>
	/// Provides configuration information required to connect to a ServiceNow data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServiceNowConfiguration
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^(?!(^(https?|ftp|file):\/\/))[a-z0-9-]+(\.service-now\.com)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string HostUrl { get; set; }
		
		/// <summary>
		/// Max length: 1284
		/// Min length: 1
		/// Pattern: arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1284, MinimumLength=1)]
		public string SecretArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceNowConfigurationServiceNowBuildVersion ServiceNowBuildVersion { get; set; }
		
		/// <summary>
		/// Provides configuration information for crawling knowledge articles in the ServiceNow site.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceNowKnowledgeArticleConfiguration KnowledgeArticleConfiguration { get; set; }
		
		/// <summary>
		/// Provides configuration information for crawling service catalog items in the ServiceNow site
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceNowServiceCatalogConfiguration ServiceCatalogConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ServiceNowConfigurationServiceNowBuildVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONDON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHERS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSourceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 4,
	}
	
	/// <summary>
	/// Summary information for a Amazon Kendra data source. Returned in a call to .
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSourceSummary
	{
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceSummaryType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceSummaryStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSourceSummaryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHAREPOINT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALESFORCE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONEDRIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICENOW = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSourceSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSourceSyncJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPLETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABORTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCING_INDEXING = 6,
	}
	
	/// <summary>
	/// Maps a batch delete document request to a specific data source sync job. This is optional and should only be supplied when documents are deleted by a connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSourceSyncJobMetrics
	{
		
		/// <summary>
		/// Pattern: (([1-9][0-9]*)|0)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentsAdded { get; set; }
		
		/// <summary>
		/// Pattern: (([1-9][0-9]*)|0)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentsModified { get; set; }
		
		/// <summary>
		/// Pattern: (([1-9][0-9]*)|0)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentsDeleted { get; set; }
		
		/// <summary>
		/// Pattern: (([1-9][0-9]*)|0)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentsFailed { get; set; }
		
		/// <summary>
		/// Pattern: (([1-9][0-9]*)|0)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentsScanned { get; set; }
	}
	
	/// <summary>
	/// Provides information about a synchronization job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSourceSyncJob
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceSyncJobStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceSyncJobErrorCode ErrorCode { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string DataSourceErrorCode { get; set; }
		
		/// <summary>
		/// Maps a batch delete document request to a specific data source sync job. This is optional and should only be supplied when documents are deleted by a connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSourceSyncJobMetrics Metrics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSourceSyncJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPLETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABORTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCING_INDEXING = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSourceSyncJobErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalError = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidRequest = 1,
	}
	
	/// <summary>
	/// Maps a column or attribute in the data source to an index field. You must first create the fields in the index using the <a>UpdateIndex</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSourceToIndexFieldMapping
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_.]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DataSourceFieldName { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// Pattern: ^(?!\s).*(?<!\s)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string DateFieldFormat { get; set; }
		
		/// <summary>
		/// Max length: 30
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength=1)]
		public string IndexFieldName { get; set; }
	}
	
	/// <summary>
	/// Provides information for connecting to an Amazon VPC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSourceVpcConfiguration
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public SubnetId[] SubnetIds { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public VpcSecurityGroupId[] SecurityGroupIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DatabaseEngineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDS_AURORA_MYSQL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDS_AURORA_POSTGRESQL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDS_MYSQL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDS_POSTGRESQL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FaqStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IndexStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_UPDATING = 5,
	}
	
	/// <summary>
	/// Provides information about the number of documents and the number of questions and answers in an index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IndexStatistics
	{
		
		/// <summary>
		/// Provides statistical information about the FAQ questions and answers contained in an index.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FaqStatistics FaqStatistics { get; set; }
		
		/// <summary>
		/// Provides information about text documents indexed in an index.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TextDocumentStatistics TextDocumentStatistics { get; set; }
	}
	
	/// <summary>
	/// A document in an index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Document
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Blob { get; set; }
		
		/// <summary>
		/// Information required to find a specific file in an Amazon S3 bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Path S3Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentAttribute[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Principal[] AccessControlList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentContentType ContentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PDF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS_WORD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAIN_TEXT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PPT = 4,
	}
	
	/// <summary>
	/// The value of a custom document attribute. You can only provide one value for a custom attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentAttributeValue
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string StringValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] StringListValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LongValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateValue { get; set; }
	}
	
	/// <summary>
	/// Provides the count of documents that match a particular attribute when doing a faceted search.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentAttributeValueCountPair
	{
		
		/// <summary>
		/// The value of a custom document attribute. You can only provide one value for a custom attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentAttributeValue DocumentAttributeValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentAttributeValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING_VALUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING_LIST_VALUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONG_VALUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_VALUE = 3,
	}
	
	/// <summary>
	/// Provides information for manually tuning the relevance of a field in a search. When a query includes terms that match the field, the results are given a boost in the response based on these tuning parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Relevance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Freshness { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> Importance { get; set; }
		
		/// <summary>
		/// Max length: 10
		/// Min length: 1
		/// Pattern: [0-9]+[s]
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength=1)]
		public string Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RelevanceRankOrder RankOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ValueImportanceMap ValueImportanceMap { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RelevanceRankOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	/// <summary>
	/// Provides information about how a custom index field is used during a search.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Search
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Facetable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Searchable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Displayable { get; set; }
	}
	
	/// <summary>
	/// Specifies the properties of a custom index field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentMetadataConfiguration
	{
		
		/// <summary>
		/// Max length: 30
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DocumentMetadataConfigurationType Type { get; set; }
		
		/// <summary>
		/// Provides information for manually tuning the relevance of a field in a search. When a query includes terms that match the field, the results are given a boost in the response based on these tuning parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Relevance Relevance { get; set; }
		
		/// <summary>
		/// Provides information about how a custom index field is used during a search.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Search Search { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentMetadataConfigurationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING_VALUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING_LIST_VALUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONG_VALUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_VALUE = 3,
	}
	
	/// <summary>
	/// Document metadata files that contain information such as the document access control information, source URI, document author, and custom attributes. Each metadata file contains metadata about a single document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentsMetadataConfiguration
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string S3Prefix { get; set; }
	}
	
	/// <summary>
	/// Information about a document attribute
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Facet
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_][a-zA-Z0-9_-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string DocumentAttributeKey { get; set; }
	}
	
	/// <summary>
	/// The facet values for the documents in the response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FacetResult
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_][a-zA-Z0-9_-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string DocumentAttributeKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentAttributeValueCountPair[] DocumentAttributeValueCountPairs { get; set; }
	}
	
	/// <summary>
	/// Provides statistical information about the FAQ questions and answers contained in an index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FaqStatistics
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int IndexedQuestionAnswersCount { get; set; }
	}
	
	/// <summary>
	/// Provides information about a frequently asked questions and answer contained in an index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FaqSummary
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FaqSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FaqSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	/// <summary>
	/// Provides information that you can use to highlight a search result so that your users can quickly identify terms in the response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Highlight
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int BeginOffset { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EndOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TopAnswer { get; set; }
	}
	
	/// <summary>
	/// A summary of information about an index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IndexConfigurationSummary
	{
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9_-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-zA-Z0-9][a-zA-Z0-9-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IndexConfigurationSummaryEdition Edition { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedAt { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IndexConfigurationSummaryStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IndexConfigurationSummaryEdition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPER_EDITION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTERPRISE_EDITION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IndexConfigurationSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_UPDATING = 5,
	}
	
	/// <summary>
	/// Provides information about text documents indexed in an index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TextDocumentStatistics
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int IndexedTextDocumentsCount { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int IndexedTextBytes { get; set; }
	}
	
	/// <summary>
	/// Provides a range of time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimeRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
	}
	
	/// <summary>
	/// User accounts whose documents should be indexed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OneDriveUsers
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public OneDriveUser[] OneDriveUserList { get; set; }
		
		/// <summary>
		/// Information required to find a specific file in an Amazon S3 bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Path OneDriveUserS3Path { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Order
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PrincipalType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GROUP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReadAccessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	/// <summary>
	/// Provides user and group information for document access filtering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Principal
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^\P{C}*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PrincipalType Type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PrincipalAccess Access { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PrincipalType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GROUP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PrincipalAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum QueryResultType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUESTION_ANSWER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANSWER = 2,
	}
	
	/// <summary>
	/// <p>A single query result.</p> <p>A query result contains information about a document returned by the query. This includes the original location of the document, a list of attributes assigned to the document, and relevant text from the document that satisfies the query.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class QueryResultItem
	{
		
		/// <summary>
		/// Max length: 73
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(73, MinimumLength=1)]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QueryResultItemType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdditionalResultAttribute[] AdditionalAttributes { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string DocumentId { get; set; }
		
		/// <summary>
		/// Provides text and information about where to highlight the text.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TextWithHighlights DocumentTitle { get; set; }
		
		/// <summary>
		/// Provides text and information about where to highlight the text.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TextWithHighlights DocumentExcerpt { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^(https?|ftp|file):\/\/([^\s]*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string DocumentURI { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentAttribute[] DocumentAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum QueryResultItemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUESTION_ANSWER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANSWER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RelevanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELEVANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_RELEVANT = 1,
	}
	
	/// <summary>
	/// Provides feedback on how relevant a document is to a search. Your application uses the <a>SubmitFeedback</a> operation to provide relevance information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RelevanceFeedback
	{
		
		/// <summary>
		/// Max length: 73
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(73, MinimumLength=1)]
		public string ResultId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RelevanceFeedbackRelevanceValue RelevanceValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RelevanceFeedbackRelevanceValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELEVANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_RELEVANT = 1,
	}
	
	/// <summary>
	/// Defines configuration for syncing a Salesforce chatter feed. The contents of the object comes from the Salesforce FeedItem table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SalesforceChatterFeedConfiguration
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_.]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentDataFieldName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_.]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentTitleFieldName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceToIndexFieldMapping[] FieldMappings { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public SalesforceChatterFeedIncludeFilterType[] IncludeFilterTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SalesforceChatterFeedIncludeFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_USER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_USER = 1,
	}
	
	/// <summary>
	/// Specifies configuration information for the knowlege article types that Amazon Kendra indexes. Amazon Kendra indexes standard knowledge articles and the standard fields of knowledge articles, or the custom fields of custom knowledge articles, but not both 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SalesforceKnowledgeArticleConfiguration
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public SalesforceKnowledgeArticleState[] IncludedStates { get; set; }
		
		/// <summary>
		/// Provides configuration information for standard Salesforce knowledge articles.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SalesforceStandardKnowledgeArticleTypeConfiguration StandardKnowledgeArticleTypeConfiguration { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public SalesforceCustomKnowledgeArticleTypeConfiguration[] CustomKnowledgeArticleTypeConfigurations { get; set; }
	}
	
	/// <summary>
	/// Provides configuration information for processing attachments to Salesforce standard objects. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SalesforceStandardObjectAttachmentConfiguration
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_.]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentTitleFieldName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceToIndexFieldMapping[] FieldMappings { get; set; }
	}
	
	/// <summary>
	/// Provides configuration information for indexing Salesforce custom articles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SalesforceCustomKnowledgeArticleTypeConfiguration
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_.]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentDataFieldName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_.]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentTitleFieldName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceToIndexFieldMapping[] FieldMappings { get; set; }
	}
	
	/// <summary>
	/// Provides configuration information for standard Salesforce knowledge articles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SalesforceStandardKnowledgeArticleTypeConfiguration
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_.]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentDataFieldName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_.]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentTitleFieldName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceToIndexFieldMapping[] FieldMappings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SalesforceKnowledgeArticleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SalesforceStandardObjectName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAMPAIGN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CASE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTRACT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GROUP = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDEA = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEAD = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPPORTUNITY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICEBOOK = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFILE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOLUTION = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 16,
	}
	
	/// <summary>
	/// Specifies confguration information for indexing a single standard object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SalesforceStandardObjectConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SalesforceStandardObjectConfigurationName Name { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_.]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentDataFieldName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_.]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentTitleFieldName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceToIndexFieldMapping[] FieldMappings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SalesforceStandardObjectConfigurationName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAMPAIGN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CASE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTRACT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GROUP = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDEA = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEAD = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPPORTUNITY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRICEBOOK = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFILE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOLUTION = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ServiceNowBuildVersionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONDON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHERS = 1,
	}
	
	/// <summary>
	/// Provides configuration information for crawling knowledge articles in the ServiceNow site.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServiceNowKnowledgeArticleConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CrawlAttachments { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceInclusionsExclusionsStringsMember[] IncludeAttachmentFilePatterns { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceInclusionsExclusionsStringsMember[] ExcludeAttachmentFilePatterns { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_.]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentDataFieldName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_.]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentTitleFieldName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceToIndexFieldMapping[] FieldMappings { get; set; }
	}
	
	/// <summary>
	/// Provides configuration information for crawling service catalog items in the ServiceNow site
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServiceNowServiceCatalogConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CrawlAttachments { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceInclusionsExclusionsStringsMember[] IncludeAttachmentFilePatterns { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceInclusionsExclusionsStringsMember[] ExcludeAttachmentFilePatterns { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_.]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentDataFieldName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_.]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DocumentTitleFieldName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DataSourceToIndexFieldMapping[] FieldMappings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SharePointVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHAREPOINT_ONLINE = 0,
	}
	
	/// <summary>
	/// A list of key/value pairs that identify an index, FAQ, or data source. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Value { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Removes one or more documents from an index. The documents must have been added with the <a>BatchPutDocument</a> operation.</p> <p>The documents are deleted asynchronously. You can see the progress of the deletion by using AWS CloudWatch. Any error messages releated to the processing of the batch are sent to you CloudWatch log.</p>
		/// BatchDeleteDocument /#X-Amz-Target=AWSKendraFrontendService.BatchDeleteDocument
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDeleteDocumentResponse> BatchDeleteDocumentAsync(BatchDeleteDocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.BatchDeleteDocument";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchDeleteDocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Adds one or more documents to an index.</p> <p>The <code>BatchPutDocument</code> operation enables you to ingest inline documents or a set of documents stored in an Amazon S3 bucket. Use this operation to ingest your text and unstructured text into an index, add custom attributes to the documents, and to attach an access control list to the documents added to the index.</p> <p>The documents are indexed asynchronously. You can see the progress of the batch using AWS CloudWatch. Any error messages related to processing the batch are sent to your AWS CloudWatch log.</p>
		/// BatchPutDocument /#X-Amz-Target=AWSKendraFrontendService.BatchPutDocument
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchPutDocumentResponse> BatchPutDocumentAsync(BatchPutDocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.BatchPutDocument";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchPutDocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a data source that you use to with an Amazon Kendra index. </p> <p>You specify a name, connector type and description for your data source. You can choose between an S3 connector, a SharePoint Online connector, and a database connector.</p> <p>You also specify configuration information such as document metadata (author, source URI, and so on) and user context information.</p> <p> <code>CreateDataSource</code> is a synchronous operation. The operation returns 200 if the data source was successfully created. Otherwise, an exception is raised.</p>
		/// CreateDataSource /#X-Amz-Target=AWSKendraFrontendService.CreateDataSource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDataSourceResponse> CreateDataSourceAsync(CreateDataSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.CreateDataSource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDataSourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an new set of frequently asked question (FAQ) questions and answers.
		/// CreateFaq /#X-Amz-Target=AWSKendraFrontendService.CreateFaq
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateFaqResponse> CreateFaqAsync(CreateFaqRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.CreateFaq";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateFaqResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new Amazon Kendra index. Index creation is an asynchronous operation. To determine if index creation has completed, check the <code>Status</code> field returned from a call to . The <code>Status</code> field is set to <code>ACTIVE</code> when the index is ready to use.</p> <p>Once the index is active you can index your documents using the operation or using one of the supported data sources. </p>
		/// CreateIndex /#X-Amz-Target=AWSKendraFrontendService.CreateIndex
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateIndexResponse> CreateIndexAsync(CreateIndexRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.CreateIndex";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateIndexResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an Amazon Kendra data source. An exception is not thrown if the data source is already being deleted. While the data source is being deleted, the <code>Status</code> field returned by a call to the operation is set to <code>DELETING</code>. For more information, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/delete-data-source.html">Deleting Data Sources</a>.
		/// DeleteDataSource /#X-Amz-Target=AWSKendraFrontendService.DeleteDataSource
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteDataSourceAsync(DeleteDataSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.DeleteDataSource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an FAQ from an index.
		/// DeleteFaq /#X-Amz-Target=AWSKendraFrontendService.DeleteFaq
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteFaqAsync(DeleteFaqRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.DeleteFaq";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing Amazon Kendra index. An exception is not thrown if the index is already being deleted. While the index is being deleted, the <code>Status</code> field returned by a call to the <a>DescribeIndex</a> operation is set to <code>DELETING</code>.
		/// DeleteIndex /#X-Amz-Target=AWSKendraFrontendService.DeleteIndex
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteIndexAsync(DeleteIndexRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.DeleteIndex";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a Amazon Kendra data source.
		/// DescribeDataSource /#X-Amz-Target=AWSKendraFrontendService.DescribeDataSource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDataSourceResponse> DescribeDataSourceAsync(DescribeDataSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.DescribeDataSource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDataSourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about an FAQ list.
		/// DescribeFaq /#X-Amz-Target=AWSKendraFrontendService.DescribeFaq
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeFaqResponse> DescribeFaqAsync(DescribeFaqRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.DescribeFaq";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeFaqResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes an existing Amazon Kendra index
		/// DescribeIndex /#X-Amz-Target=AWSKendraFrontendService.DescribeIndex
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeIndexResponse> DescribeIndexAsync(DescribeIndexRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.DescribeIndex";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeIndexResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets statistics about synchronizing Amazon Kendra with a data source.
		/// ListDataSourceSyncJobs /#X-Amz-Target=AWSKendraFrontendService.ListDataSourceSyncJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDataSourceSyncJobsResponse> ListDataSourceSyncJobsAsync(string MaxResults, string NextToken, ListDataSourceSyncJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.ListDataSourceSyncJobs?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDataSourceSyncJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the data sources that you have created.
		/// ListDataSources /#X-Amz-Target=AWSKendraFrontendService.ListDataSources
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDataSourcesResponse> ListDataSourcesAsync(string MaxResults, string NextToken, ListDataSourcesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.ListDataSources?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDataSourcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of FAQ lists associated with an index.
		/// ListFaqs /#X-Amz-Target=AWSKendraFrontendService.ListFaqs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListFaqsResponse> ListFaqsAsync(ListFaqsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.ListFaqs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListFaqsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the Amazon Kendra indexes that you have created.
		/// ListIndices /#X-Amz-Target=AWSKendraFrontendService.ListIndices
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListIndicesResponse> ListIndicesAsync(string MaxResults, string NextToken, ListIndicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.ListIndices?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListIndicesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of tags associated with a specified resource. Indexes, FAQs, and data sources can have tags associated with them.
		/// ListTagsForResource /#X-Amz-Target=AWSKendraFrontendService.ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.ListTagsForResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Searches an active index. Use this API to search your documents using query. The <code>Query</code> operation enables to do faceted search and to filter results based on document attributes.</p> <p>It also enables you to provide user context that Amazon Kendra uses to enforce document access control in the search results. </p> <p>Amazon Kendra searches your index for text content and question and answer (FAQ) content. By default the response contains three types of results.</p> <ul> <li> <p>Relevant passages</p> </li> <li> <p>Matching FAQs</p> </li> <li> <p>Relevant documents</p> </li> </ul> <p>You can specify that the query return only one type of result using the <code>QueryResultTypeConfig</code> parameter.</p>
		/// Query /#X-Amz-Target=AWSKendraFrontendService.Query
		/// </summary>
		/// <returns>Success</returns>
		public async Task<QueryResult> QueryAsync(QueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.Query";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<QueryResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts a synchronization job for a data source. If a synchronization job is already in progress, Amazon Kendra returns a <code>ResourceInUseException</code> exception.
		/// StartDataSourceSyncJob /#X-Amz-Target=AWSKendraFrontendService.StartDataSourceSyncJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartDataSourceSyncJobResponse> StartDataSourceSyncJobAsync(StartDataSourceSyncJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.StartDataSourceSyncJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartDataSourceSyncJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops a running synchronization job. You can't stop a scheduled synchronization job.
		/// StopDataSourceSyncJob /#X-Amz-Target=AWSKendraFrontendService.StopDataSourceSyncJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task StopDataSourceSyncJobAsync(StopDataSourceSyncJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.StopDataSourceSyncJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enables you to provide feedback to Amazon Kendra to improve the performance of the service.
		/// SubmitFeedback /#X-Amz-Target=AWSKendraFrontendService.SubmitFeedback
		/// </summary>
		/// <returns>Success</returns>
		public async Task SubmitFeedbackAsync(SubmitFeedbackRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.SubmitFeedback";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds the specified tag to the specified index, FAQ, or data source resource. If the tag already exists, the existing value is replaced with the new value.
		/// TagResource /#X-Amz-Target=AWSKendraFrontendService.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.TagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a tag from an index, FAQ, or a data source.
		/// UntagResource /#X-Amz-Target=AWSKendraFrontendService.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.UntagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Amazon Kendra data source.
		/// UpdateDataSource /#X-Amz-Target=AWSKendraFrontendService.UpdateDataSource
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdateDataSourceAsync(UpdateDataSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.UpdateDataSource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Amazon Kendra index.
		/// UpdateIndex /#X-Amz-Target=AWSKendraFrontendService.UpdateIndex
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdateIndexAsync(UpdateIndexRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSKendraFrontendService.UpdateIndex";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
