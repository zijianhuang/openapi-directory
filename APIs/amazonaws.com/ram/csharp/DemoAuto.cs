//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptResourceShareInvitationResponse
	{
		
		/// <summary>
		/// Describes an invitation to join a resource share.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceShareInvitation ResourceShareInvitation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateResourceShareResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceShareAssociation[] ResourceShareAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateResourceSharePermissionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateResourceShareResponse
	{
		
		/// <summary>
		/// Describes a resource share.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceShare ResourceShare { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	/// <summary>
	/// Information about a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteResourceShareResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateResourceShareResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceShareAssociation[] ResourceShareAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateResourceSharePermissionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableSharingWithAwsOrganizationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPermissionResponse
	{
		
		/// <summary>
		/// Information about an AWS RAM permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceSharePermissionDetail Permission { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetResourcePoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Policy[] Policies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetResourceShareAssociationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceShareAssociation[] ResourceShareAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetResourceShareInvitationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceShareInvitation[] ResourceShareInvitations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetResourceSharesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceShare[] ResourceShares { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Used to filter information based on tags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TagKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagValue[] TagValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPendingInvitationResourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Resource[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPermissionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceSharePermissionSummary[] Permissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPrincipalsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Principal[] Principals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListResourceSharePermissionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceSharePermissionSummary[] Permissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListResourceTypesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceNameAndResourceType[] ResourceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListResourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Resource[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PromoteResourceShareCreatedFromPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RejectResourceShareInvitationResponse
	{
		
		/// <summary>
		/// Describes an invitation to join a resource share.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceShareInvitation ResourceShareInvitation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateResourceShareResponse
	{
		
		/// <summary>
		/// Describes a resource share.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceShare ResourceShare { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptResourceShareInvitationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareInvitationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	/// <summary>
	/// Describes an invitation to join a resource share.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceShareInvitation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareInvitationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SenderAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReceiverAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> InvitationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceShareInvitationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceShareAssociation[] ResourceShareAssociations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceShareInvitationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateResourceSharePermissionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PermissionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Replace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateResourceShareRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Principals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateResourceShareRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Principals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowExternalPrincipals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] PermissionArns { get; set; }
	}
	
	/// <summary>
	/// Describes a resource share.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceShare
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwningAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowExternalPrincipals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceShareStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceShareFeatureSet FeatureSet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceShareStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceShareFeatureSet
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED_FROM_POLICY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROMOTING_TO_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateResourceSharePermissionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PermissionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateResourceShareRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Principals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPermissionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PermissionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PermissionVersion { get; set; }
	}
	
	/// <summary>
	/// Information about an AWS RAM permission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceSharePermissionDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Permission { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetResourcePoliciesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Principal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceShareAssociationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRINCIPAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceShareAssociationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSOCIATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSOCIATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISASSOCIATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISASSOCIATED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetResourceShareAssociationsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetResourceShareAssociationsRequestAssociationType AssociationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceShareArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Principal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetResourceShareAssociationsRequestAssociationStatus AssociationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetResourceShareAssociationsRequestAssociationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRINCIPAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetResourceShareAssociationsRequestAssociationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSOCIATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSOCIATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISASSOCIATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISASSOCIATED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetResourceShareInvitationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceShareInvitationArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceShareArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceShareStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceOwner
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER-ACCOUNTS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetResourceSharesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceShareArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetResourceSharesRequestResourceShareStatus ResourceShareStatus { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetResourceSharesRequestResourceOwner ResourceOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagFilter[] TagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetResourceSharesRequestResourceShareStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetResourceSharesRequestResourceOwner
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER-ACCOUNTS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPendingInvitationResourcesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareInvitationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPermissionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPrincipalsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListPrincipalsRequestResourceOwner ResourceOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Principals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceShareArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListPrincipalsRequestResourceOwner
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER-ACCOUNTS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListResourceSharePermissionsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListResourceTypesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListResourcesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListResourcesRequestResourceOwner ResourceOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Principal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceShareArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListResourcesRequestResourceOwner
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER-ACCOUNTS = 1,
	}
	
	/// <summary>
	/// Describes a principal for use with AWS Resource Access Manager.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Principal
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> External { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RejectResourceShareInvitationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareInvitationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZONAL_RESOURCE_INACCESSIBLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIMIT_EXCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 4,
	}
	
	/// <summary>
	/// Describes a resource associated with a resource share.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Resource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZONAL_RESOURCE_INACCESSIBLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIMIT_EXCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceShareFeatureSet
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED_FROM_POLICY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROMOTING_TO_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 2,
	}
	
	/// <summary>
	/// Describes an association with a resource share.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceShareAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociatedEntity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceShareAssociationAssociationType AssociationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceShareAssociationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> External { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceShareAssociationAssociationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRINCIPAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceShareAssociationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSOCIATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSOCIATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISASSOCIATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISASSOCIATED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceShareInvitationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 3,
	}
	
	/// <summary>
	/// Information about a permission that is associated with a resource share.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceSharePermissionSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
	}
	
	/// <summary>
	/// Information about the shareable resource types and the AWS services to which they belong.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServiceNameAndResourceType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagKey[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateResourceShareRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowExternalPrincipals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Accepts an invitation to a resource share from another AWS account.
		/// AcceptResourceShareInvitation /acceptresourceshareinvitation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AcceptResourceShareInvitationResponse> AcceptResourceShareInvitationAsync(AcceptResourceShareInvitationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/acceptresourceshareinvitation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AcceptResourceShareInvitationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates the specified resource share with the specified principals and resources.
		/// AssociateResourceShare /associateresourceshare
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateResourceShareResponse> AssociateResourceShareAsync(AssociateResourceShareBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/associateresourceshare";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AssociateResourceShareResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates a permission with a resource share.
		/// AssociateResourceSharePermission /associateresourcesharepermission
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateResourceSharePermissionResponse> AssociateResourceSharePermissionAsync(AssociateResourceSharePermissionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/associateresourcesharepermission";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AssociateResourceSharePermissionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a resource share.
		/// CreateResourceShare /createresourceshare
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateResourceShareResponse> CreateResourceShareAsync(CreateResourceShareBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/createresourceshare";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateResourceShareResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified resource share.
		/// DeleteResourceShare /deleteresourceshare#resourceShareArn
		/// </summary>
		/// <param name="resourceShareArn">The Amazon Resource Name (ARN) of the resource share.</param>
		/// <param name="clientToken">A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</param>
		/// <returns>Success</returns>
		public async Task<DeleteResourceShareResponse> DeleteResourceShareAsync(string resourceShareArn, string clientToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/deleteresourceshare#resourceShareArn?resourceShareArn=" + (resourceShareArn==null? "" : Uri.EscapeDataString(resourceShareArn))+"&clientToken=" + (clientToken==null? "" : Uri.EscapeDataString(clientToken));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteResourceShareResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates the specified principals or resources from the specified resource share.
		/// DisassociateResourceShare /disassociateresourceshare
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateResourceShareResponse> DisassociateResourceShareAsync(DisassociateResourceShareBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/disassociateresourceshare";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisassociateResourceShareResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates an AWS RAM permission from a resource share.
		/// DisassociateResourceSharePermission /disassociateresourcesharepermission
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateResourceSharePermissionResponse> DisassociateResourceSharePermissionAsync(DisassociateResourceSharePermissionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/disassociateresourcesharepermission";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisassociateResourceSharePermissionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Enables resource sharing within your AWS Organization.</p> <p>The caller must be the master account for the AWS Organization.</p>
		/// EnableSharingWithAwsOrganization /enablesharingwithawsorganization
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EnableSharingWithAwsOrganizationResponse> EnableSharingWithAwsOrganizationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/enablesharingwithawsorganization";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EnableSharingWithAwsOrganizationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the contents of an AWS RAM permission in JSON format.
		/// GetPermission /getpermission
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPermissionResponse> GetPermissionAsync(GetPermissionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/getpermission";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetPermissionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the policies for the specified resources that you own and have shared.
		/// GetResourcePolicies /getresourcepolicies
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetResourcePoliciesResponse> GetResourcePoliciesAsync(string maxResults, string nextToken, GetResourcePoliciesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/getresourcepolicies?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetResourcePoliciesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the resources or principals for the resource shares that you own.
		/// GetResourceShareAssociations /getresourceshareassociations
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetResourceShareAssociationsResponse> GetResourceShareAssociationsAsync(string maxResults, string nextToken, GetResourceShareAssociationsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/getresourceshareassociations?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetResourceShareAssociationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the invitations for resource sharing that you've received.
		/// GetResourceShareInvitations /getresourceshareinvitations
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetResourceShareInvitationsResponse> GetResourceShareInvitationsAsync(string maxResults, string nextToken, GetResourceShareInvitationsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/getresourceshareinvitations?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetResourceShareInvitationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the resource shares that you own or the resource shares that are shared with you.
		/// GetResourceShares /getresourceshares
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetResourceSharesResponse> GetResourceSharesAsync(string maxResults, string nextToken, GetResourceSharesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/getresourceshares?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetResourceSharesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the resources in a resource share that is shared with you but that the invitation is still pending for.
		/// ListPendingInvitationResources /listpendinginvitationresources
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPendingInvitationResourcesResponse> ListPendingInvitationResourcesAsync(string maxResults, string nextToken, ListPendingInvitationResourcesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/listpendinginvitationresources?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPendingInvitationResourcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the AWS RAM permissions.
		/// ListPermissions /listpermissions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListPermissionsResponse> ListPermissionsAsync(ListPermissionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/listpermissions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the principals that you have shared resources with or that have shared resources with you.
		/// ListPrincipals /listprincipals
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPrincipalsResponse> ListPrincipalsAsync(string maxResults, string nextToken, ListPrincipalsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/listprincipals?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPrincipalsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the AWS RAM permissions that are associated with a resource share.
		/// ListResourceSharePermissions /listresourcesharepermissions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListResourceSharePermissionsResponse> ListResourceSharePermissionsAsync(ListResourceSharePermissionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/listresourcesharepermissions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListResourceSharePermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the shareable resource types supported by AWS RAM.
		/// ListResourceTypes /listresourcetypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListResourceTypesResponse> ListResourceTypesAsync(ListResourceTypesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/listresourcetypes";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListResourceTypesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the resources that you added to a resource shares or the resources that are shared with you.
		/// ListResources /listresources
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListResourcesResponse> ListResourcesAsync(string maxResults, string nextToken, ListResourcesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/listresources?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListResourcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Resource shares that were created by attaching a policy to a resource are visible only to the resource share owner, and the resource share cannot be modified in AWS RAM.</p> <p>Use this API action to promote the resource share. When you promote the resource share, it becomes:</p> <ul> <li> <p>Visible to all principals that it is shared with.</p> </li> <li> <p>Modifiable in AWS RAM.</p> </li> </ul>
		/// PromoteResourceShareCreatedFromPolicy /promoteresourcesharecreatedfrompolicy#resourceShareArn
		/// </summary>
		/// <param name="resourceShareArn">The ARN of the resource share to promote.</param>
		/// <returns>Success</returns>
		public async Task<PromoteResourceShareCreatedFromPolicyResponse> PromoteResourceShareCreatedFromPolicyAsync(string resourceShareArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/promoteresourcesharecreatedfrompolicy#resourceShareArn?resourceShareArn=" + (resourceShareArn==null? "" : Uri.EscapeDataString(resourceShareArn));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PromoteResourceShareCreatedFromPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rejects an invitation to a resource share from another AWS account.
		/// RejectResourceShareInvitation /rejectresourceshareinvitation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RejectResourceShareInvitationResponse> RejectResourceShareInvitationAsync(RejectResourceShareInvitationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/rejectresourceshareinvitation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RejectResourceShareInvitationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds the specified tags to the specified resource share that you own.
		/// TagResource /tagresource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tagresource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from the specified resource share that you own.
		/// UntagResource /untagresource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(UntagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/untagresource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the specified resource share that you own.
		/// UpdateResourceShare /updateresourceshare
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateResourceShareResponse> UpdateResourceShareAsync(UpdateResourceShareBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/updateresourceshare";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateResourceShareResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptResourceShareInvitationBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the invitation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareInvitationArn { get; set; }
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateResourceShareBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the resource share.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		/// <summary>
		/// The Amazon Resource Names (ARN) of the resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceArns { get; set; }
		
		/// <summary>
		/// The principals.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] Principals { get; set; }
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateResourceSharePermissionBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the resource share.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		/// <summary>
		/// The ARN of the AWS RAM permission to associate with the resource share.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PermissionArn { get; set; }
		
		/// <summary>
		/// Indicates whether the permission should replace the permissions that are currently associated with the resource share. Use <code>true</code> to replace the current permissions. Use <code>false</code> to add the permission to the current permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Replace { get; set; }
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateResourceShareBody
	{
		
		/// <summary>
		/// The name of the resource share.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The Amazon Resource Names (ARN) of the resources to associate with the resource share.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceArns { get; set; }
		
		/// <summary>
		/// The principals to associate with the resource share. The possible values are IDs of AWS accounts, the ARN of an OU or organization from AWS Organizations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] Principals { get; set; }
		
		/// <summary>
		/// One or more tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Indicates whether principals outside your AWS organization can be associated with a resource share.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowExternalPrincipals { get; set; }
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The ARNs of the permissions to associate with the resource share. If you do not specify an ARN for the permission, AWS RAM automatically attaches the default version of the permission for each resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] PermissionArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateResourceShareBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the resource share.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		/// <summary>
		/// The Amazon Resource Names (ARNs) of the resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceArns { get; set; }
		
		/// <summary>
		/// The principals.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] Principals { get; set; }
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateResourceSharePermissionBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the resource share.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		/// <summary>
		/// The ARN of the permission to disassociate from the resource share.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PermissionArn { get; set; }
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPermissionBody
	{
		
		/// <summary>
		/// The ARN of the permission.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PermissionArn { get; set; }
		
		/// <summary>
		/// The identifier for the version of the permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PermissionVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetResourcePoliciesBody
	{
		
		/// <summary>
		/// The Amazon Resource Names (ARN) of the resources.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceArns { get; set; }
		
		/// <summary>
		/// The principal.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Principal { get; set; }
		
		/// <summary>
		/// The token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetResourceShareAssociationsBody
	{
		
		/// <summary>
		/// The association type. Specify <code>PRINCIPAL</code> to list the principals that are associated with the specified resource share. Specify <code>RESOURCE</code> to list the resources that are associated with the specified resource share.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetResourceShareAssociationsBodyAssociationType AssociationType { get; set; }
		
		/// <summary>
		/// The Amazon Resource Names (ARN) of the resource shares.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceShareArns { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the resource. You cannot specify this parameter if the association type is <code>PRINCIPAL</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// The principal. You cannot specify this parameter if the association type is <code>RESOURCE</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Principal { get; set; }
		
		/// <summary>
		/// The association status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GetResourceShareAssociationsBodyAssociationStatus AssociationStatus { get; set; }
		
		/// <summary>
		/// The token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetResourceShareAssociationsBodyAssociationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRINCIPAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetResourceShareAssociationsBodyAssociationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSOCIATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSOCIATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISASSOCIATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISASSOCIATED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetResourceShareInvitationsBody
	{
		
		/// <summary>
		/// The Amazon Resource Names (ARN) of the invitations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceShareInvitationArns { get; set; }
		
		/// <summary>
		/// The Amazon Resource Names (ARN) of the resource shares.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceShareArns { get; set; }
		
		/// <summary>
		/// The token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetResourceSharesBody
	{
		
		/// <summary>
		/// The Amazon Resource Names (ARN) of the resource shares.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceShareArns { get; set; }
		
		/// <summary>
		/// The status of the resource share.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GetResourceSharesBodyResourceShareStatus ResourceShareStatus { get; set; }
		
		/// <summary>
		/// The type of owner.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetResourceSharesBodyResourceOwner ResourceOwner { get; set; }
		
		/// <summary>
		/// The name of the resource share.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// One or more tag filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TagFilter[] TagFilters { get; set; }
		
		/// <summary>
		/// The token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetResourceSharesBodyResourceShareStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetResourceSharesBodyResourceOwner
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER-ACCOUNTS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPendingInvitationResourcesBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the invitation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareInvitationArn { get; set; }
		
		/// <summary>
		/// The token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPermissionsBody
	{
		
		/// <summary>
		/// Specifies the resource type for which to list permissions. For example, to list only permissions that apply to EC2 subnets, specify <code>ec2:Subnet</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// The token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPrincipalsBody
	{
		
		/// <summary>
		/// The type of owner.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListPrincipalsBodyResourceOwner ResourceOwner { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// The principals.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] Principals { get; set; }
		
		/// <summary>
		/// <p>The resource type.</p> <p>Valid values: <code>codebuild:Project</code> | <code>codebuild:ReportGroup</code> | <code>ec2:CapacityReservation</code> | <code>ec2:DedicatedHost</code> | <code>ec2:Subnet</code> | <code>ec2:TrafficMirrorTarget</code> | <code>ec2:TransitGateway</code> | <code>imagebuilder:Component</code> | <code>imagebuilder:Image</code> | <code>imagebuilder:ImageRecipe</code> | <code>license-manager:LicenseConfiguration</code> I <code>resource-groups:Group</code> | <code>rds:Cluster</code> | <code>route53resolver:ResolverRule</code> </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// The Amazon Resource Names (ARN) of the resource shares.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceShareArns { get; set; }
		
		/// <summary>
		/// The token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListPrincipalsBodyResourceOwner
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER-ACCOUNTS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListResourceSharePermissionsBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the resource share.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		/// <summary>
		/// The token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListResourceTypesBody
	{
		
		/// <summary>
		/// The token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListResourcesBody
	{
		
		/// <summary>
		/// The type of owner.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListResourcesBodyResourceOwner ResourceOwner { get; set; }
		
		/// <summary>
		/// The principal.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Principal { get; set; }
		
		/// <summary>
		/// <p>The resource type.</p> <p>Valid values: <code>codebuild:Project</code> | <code>codebuild:ReportGroup</code> | <code>ec2:CapacityReservation</code> | <code>ec2:DedicatedHost</code> | <code>ec2:Subnet</code> | <code>ec2:TrafficMirrorTarget</code> | <code>ec2:TransitGateway</code> | <code>imagebuilder:Component</code> | <code>imagebuilder:Image</code> | <code>imagebuilder:ImageRecipe</code> | <code>license-manager:LicenseConfiguration</code> I <code>resource-groups:Group</code> | <code>rds:Cluster</code> | <code>route53resolver:ResolverRule</code> </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// The Amazon Resource Names (ARN) of the resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceArns { get; set; }
		
		/// <summary>
		/// The Amazon Resource Names (ARN) of the resource shares.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] ResourceShareArns { get; set; }
		
		/// <summary>
		/// The token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListResourcesBodyResourceOwner
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER-ACCOUNTS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RejectResourceShareInvitationBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the invitation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareInvitationArn { get; set; }
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the resource share.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		/// <summary>
		/// One or more tags.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the resource share.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		/// <summary>
		/// The tag keys of the tags to remove.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagKey[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateResourceShareBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the resource share.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceShareArn { get; set; }
		
		/// <summary>
		/// The name of the resource share.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates whether principals outside your AWS organization can be associated with a resource share.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowExternalPrincipals { get; set; }
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
