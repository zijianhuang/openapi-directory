//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMeshOutput
	{
		
		/// <summary>
		/// An object that represents a service mesh returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MeshData Mesh { get; set; }
	}
	
	/// <summary>
	/// An object that represents the egress filter rules for a service mesh.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EgressFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EgressFilterType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EgressFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DROP_ALL = 1,
	}
	
	/// <summary>
	/// Optional metadata that you apply to a resource to assist with categorization and
	///         organization. Each tag consists of a key and an optional value, both of which you define.
	///         Tag keys can have a maximum character length of 128 characters, and tag values can have
	///            a maximum length of 256 characters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagRef
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRouteOutput
	{
		
		/// <summary>
		/// An object that represents a route returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RouteData Route { get; set; }
	}
	
	/// <summary>
	/// An object that represents a gRPC route type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GrpcRoute
	{
		
		/// <summary>
		/// An object that represents the action to take if a match is determined.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GrpcRouteAction Action { get; set; }
		
		/// <summary>
		/// An object that represents the criteria for determining a request match.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GrpcRouteMatch Match { get; set; }
		
		/// <summary>
		/// An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GrpcRetryPolicy RetryPolicy { get; set; }
	}
	
	/// <summary>
	/// An object that represents an HTTP or HTTP/2 route type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HttpRoute
	{
		
		/// <summary>
		/// An object that represents the action to take if a match is determined.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HttpRouteAction Action { get; set; }
		
		/// <summary>
		/// An object that represents the requirements for a route to match HTTP requests for a
		///         virtual router.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HttpRouteMatch Match { get; set; }
		
		/// <summary>
		/// An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HttpRetryPolicy RetryPolicy { get; set; }
	}
	
	/// <summary>
	/// An object that represents a TCP route type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TcpRoute
	{
		
		/// <summary>
		/// An object that represents the action to take if a match is determined.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TcpRouteAction Action { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVirtualNodeOutput
	{
		
		/// <summary>
		/// An object that represents a virtual node returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualNodeData VirtualNode { get; set; }
	}
	
	/// <summary>
	/// An object that represents the default properties for a backend.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BackendDefaults
	{
		
		/// <summary>
		/// An object that represents a client policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientPolicy ClientPolicy { get; set; }
	}
	
	/// <summary>
	/// An object that represents the logging information for a virtual node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Logging
	{
		
		/// <summary>
		/// An object that represents the access logging information for a virtual node.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccessLog AccessLog { get; set; }
	}
	
	/// <summary>
	/// An object that represents the service discovery information for a virtual node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServiceDiscovery
	{
		
		/// <summary>
		/// An object that represents the AWS Cloud Map service discovery information for your virtual
		///         node.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AwsCloudMapServiceDiscovery AwsCloudMap { get; set; }
		
		/// <summary>
		/// An object that represents the DNS service discovery information for your virtual
		///         node.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DnsServiceDiscovery Dns { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVirtualRouterOutput
	{
		
		/// <summary>
		/// An object that represents a virtual router returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualRouterData VirtualRouter { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVirtualServiceOutput
	{
		
		/// <summary>
		/// An object that represents a virtual service returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualServiceData VirtualService { get; set; }
	}
	
	/// <summary>
	/// An object that represents the provider for a virtual service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualServiceProvider
	{
		
		/// <summary>
		/// An object that represents a virtual node service provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VirtualNodeServiceProvider VirtualNode { get; set; }
		
		/// <summary>
		/// An object that represents a virtual node service provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VirtualRouterServiceProvider VirtualRouter { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteMeshOutput
	{
		
		/// <summary>
		/// An object that represents a service mesh returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MeshData Mesh { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteRouteOutput
	{
		
		/// <summary>
		/// An object that represents a route returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RouteData Route { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVirtualNodeOutput
	{
		
		/// <summary>
		/// An object that represents a virtual node returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualNodeData VirtualNode { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVirtualRouterOutput
	{
		
		/// <summary>
		/// An object that represents a virtual router returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualRouterData VirtualRouter { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVirtualServiceOutput
	{
		
		/// <summary>
		/// An object that represents a virtual service returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualServiceData VirtualService { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMeshOutput
	{
		
		/// <summary>
		/// An object that represents a service mesh returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MeshData Mesh { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRouteOutput
	{
		
		/// <summary>
		/// An object that represents a route returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RouteData Route { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVirtualNodeOutput
	{
		
		/// <summary>
		/// An object that represents a virtual node returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualNodeData VirtualNode { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVirtualRouterOutput
	{
		
		/// <summary>
		/// An object that represents a virtual router returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualRouterData VirtualRouter { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVirtualServiceOutput
	{
		
		/// <summary>
		/// An object that represents a virtual service returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualServiceData VirtualService { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListMeshesOutput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MeshRef[] Meshes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListRoutesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RouteRef[] Routes { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagRef[] Tags { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListVirtualNodesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualNodeRef[] VirtualNodes { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListVirtualRoutersOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualRouterRef[] VirtualRouters { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListVirtualServicesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualServiceRef[] VirtualServices { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMeshOutput
	{
		
		/// <summary>
		/// An object that represents a service mesh returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MeshData Mesh { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRouteOutput
	{
		
		/// <summary>
		/// An object that represents a route returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RouteData Route { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVirtualNodeOutput
	{
		
		/// <summary>
		/// An object that represents a virtual node returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualNodeData VirtualNode { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVirtualRouterOutput
	{
		
		/// <summary>
		/// An object that represents a virtual router returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualRouterData VirtualRouter { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVirtualServiceOutput
	{
		
		/// <summary>
		/// An object that represents a virtual service returned by a describe operation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualServiceData VirtualService { get; set; }
	}
	
	/// <summary>
	/// An object that represents a port mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PortMapping
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public int Port { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PortMappingProtocol Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PortMappingProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		grpc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		http = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		http2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tcp = 3,
	}
	
	/// <summary>
	/// An object that represents a virtual router listener.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualRouterListener
	{
		
		/// <summary>
		/// An object that represents a port mapping.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PortMapping PortMapping { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VirtualRouterStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
	}
	
	/// <summary>
	/// An object that represents a duration of time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Duration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DurationUnit Unit { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DurationUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s = 1,
	}
	
	/// <summary>
	/// An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GrpcRetryPolicy
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public GrpcRetryPolicyEvent[] GrpcRetryEvents { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public HttpRetryPolicyEvent[] HttpRetryEvents { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int MaxRetries { get; set; }
		
		/// <summary>
		/// An object that represents a duration of time.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Duration PerRetryTimeout { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public TcpRetryPolicyEvent[] TcpRetryEvents { get; set; }
	}
	
	/// <summary>
	/// An object that represents a virtual node returned by a describe operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualNodeData
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string MeshName { get; set; }
		
		/// <summary>
		/// An object that represents metadata for a resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceMetadata Metadata { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a virtual node.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualNodeSpec Spec { get; set; }
		
		/// <summary>
		/// An object that represents the current status of the virtual node.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualNodeStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string VirtualNodeName { get; set; }
	}
	
	/// <summary>
	/// An object that represents the access logging information for a virtual node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccessLog
	{
		
		/// <summary>
		/// An object that represents an access log file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FileAccessLog File { get; set; }
	}
	
	/// <summary>
	/// An object that represents a virtual router returned by a describe operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualRouterData
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string MeshName { get; set; }
		
		/// <summary>
		/// An object that represents metadata for a resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceMetadata Metadata { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a virtual router.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualRouterSpec Spec { get; set; }
		
		/// <summary>
		/// An object that represents the status of a virtual router. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualRouterStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string VirtualRouterName { get; set; }
	}
	
	/// <summary>
	/// An object that represents metadata for a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceMetadata
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string MeshOwner { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string ResourceOwner { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Uid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Version { get; set; }
	}
	
	/// <summary>
	/// An object that represents a client policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientPolicy
	{
		
		/// <summary>
		/// An object that represents a Transport Layer Security (TLS) client policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientPolicyTls Tls { get; set; }
	}
	
	/// <summary>
	/// An object that represents a virtual service backend for a virtual node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualServiceBackend
	{
		
		/// <summary>
		/// An object that represents a client policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientPolicy ClientPolicy { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualServiceName { get; set; }
	}
	
	/// <summary>
	/// An object that represents the match metadata for the route.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GrpcRouteMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Invert { get; set; }
		
		/// <summary>
		/// An object that represents the match method. Specify one of the match values.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GrpcRouteMetadataMatchMethod Match { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListenerTlsMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMISSIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRICT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PortProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		grpc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		http = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		http2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tcp = 3,
	}
	
	/// <summary>
	/// An object that represents the health check policy for a virtual node's listener.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HealthCheckPolicy
	{
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 10)]
		public int HealthyThreshold { get; set; }
		
		/// <summary>
		/// Minimum: 5000
		/// Maximum: 300000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5000, 300000)]
		public int IntervalMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HealthCheckPolicyProtocol Protocol { get; set; }
		
		/// <summary>
		/// Minimum: 2000
		/// Maximum: 60000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2000, 60000)]
		public int TimeoutMillis { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 10)]
		public int UnhealthyThreshold { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HealthCheckPolicyProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		grpc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		http = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		http2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tcp = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EgressFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DROP_ALL = 1,
	}
	
	/// <summary>
	/// An object that represents a virtual service returned by a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualServiceRef
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string MeshName { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string MeshOwner { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string ResourceOwner { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Version { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualServiceName { get; set; }
	}
	
	/// <summary>
	/// An object that represents a Transport Layer Security (TLS) client policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientPolicyTls
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enforce { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PortNumber[] Ports { get; set; }
		
		/// <summary>
		/// An object that represents a Transport Layer Security (TLS) validation context.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TlsValidationContext Validation { get; set; }
	}
	
	/// <summary>
	/// An object that represents a virtual service returned by a describe operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualServiceData
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string MeshName { get; set; }
		
		/// <summary>
		/// An object that represents metadata for a resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceMetadata Metadata { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a virtual service.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualServiceSpec Spec { get; set; }
		
		/// <summary>
		/// An object that represents the status of a virtual service.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualServiceStatus Status { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualServiceName { get; set; }
	}
	
	/// <summary>
	/// An object that represents a route returned by a describe operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RouteData
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string MeshName { get; set; }
		
		/// <summary>
		/// An object that represents metadata for a resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceMetadata Metadata { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string RouteName { get; set; }
		
		/// <summary>
		/// An object that represents a route specification. Specify one route type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RouteSpec Spec { get; set; }
		
		/// <summary>
		/// An object that represents the current status of a route.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RouteStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string VirtualRouterName { get; set; }
	}
	
	/// <summary>
	/// An object that represents the DNS service discovery information for your virtual
	///         node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DnsServiceDiscovery
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Hostname { get; set; }
	}
	
	/// <summary>
	/// An object that represents the specification of a virtual node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualNodeSpec
	{
		
		/// <summary>
		/// An object that represents the default properties for a backend.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BackendDefaults BackendDefaults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Backend[] Backends { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public Listener[] Listeners { get; set; }
		
		/// <summary>
		/// An object that represents the logging information for a virtual node.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Logging Logging { get; set; }
		
		/// <summary>
		/// An object that represents the service discovery information for a virtual node.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceDiscovery ServiceDiscovery { get; set; }
	}
	
	/// <summary>
	/// An object that represents the current status of the virtual node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualNodeStatus
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualNodeStatusStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VirtualNodeStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TcpRetryPolicyEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		connection-error = 0,
	}
	
	/// <summary>
	/// An object that represents the backends that a virtual node is expected to send outbound
	///         traffic to. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Backend
	{
		
		/// <summary>
		/// An object that represents a virtual service backend for a virtual node.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VirtualServiceBackend VirtualService { get; set; }
	}
	
	/// <summary>
	/// An object that represents the specification of a virtual router.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualRouterSpec
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public VirtualRouterListener[] Listeners { get; set; }
	}
	
	/// <summary>
	/// An object that represents the status of a virtual router. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualRouterStatus
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualRouterStatusStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VirtualRouterStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
	}
	
	/// <summary>
	/// An object that represents the specification of a service mesh.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MeshSpec
	{
		
		/// <summary>
		/// An object that represents the egress filter rules for a service mesh.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EgressFilter EgressFilter { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMeshInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a service mesh.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MeshSpec Spec { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVirtualRouterInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a virtual router.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualRouterSpec Spec { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagRef[] Tags { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string VirtualRouterName { get; set; }
	}
	
	/// <summary>
	/// An object that represents a service mesh returned by a describe operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MeshData
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string MeshName { get; set; }
		
		/// <summary>
		/// An object that represents metadata for a resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceMetadata Metadata { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a service mesh.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MeshSpec Spec { get; set; }
		
		/// <summary>
		/// An object that represents the status of a service mesh.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MeshStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VirtualServiceStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
	}
	
	/// <summary>
	/// An object that represents the status of a virtual service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualServiceStatus
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualServiceStatusStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VirtualServiceStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
	}
	
	/// <summary>
	/// An object that represents an AWS Certicate Manager (ACM) certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListenerTlsAcmCertificate
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
	}
	
	/// <summary>
	/// An object that represents a local file certificate.
	///         The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites">Transport Layer Security (TLS)</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListenerTlsFileCertificate
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string CertificateChain { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string PrivateKey { get; set; }
	}
	
	/// <summary>
	/// An object that represents a listener's Transport Layer Security (TLS) certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListenerTlsCertificate
	{
		
		/// <summary>
		/// An object that represents an AWS Certicate Manager (ACM) certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ListenerTlsAcmCertificate Acm { get; set; }
		
		/// <summary>
		/// An object that represents a local file certificate.
		///         The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites">Transport Layer Security (TLS)</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ListenerTlsFileCertificate File { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HttpMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEAD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATCH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACE = 8,
	}
	
	/// <summary>
	/// An object that represents a service mesh returned by a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MeshRef
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string MeshName { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string MeshOwner { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string ResourceOwner { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Version { get; set; }
	}
	
	/// <summary>
	/// An object that represents a TLS validation context trust for an AWS Certicate Manager (ACM)
	///         certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TlsValidationContextAcmTrust
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public Arn[] CertificateAuthorityArns { get; set; }
	}
	
	/// <summary>
	/// An object that represents a Transport Layer Security (TLS) validation context trust for a local file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TlsValidationContextFileTrust
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string CertificateChain { get; set; }
	}
	
	/// <summary>
	/// An object that represents a Transport Layer Security (TLS) validation context trust.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TlsValidationContextTrust
	{
		
		/// <summary>
		/// An object that represents a TLS validation context trust for an AWS Certicate Manager (ACM)
		///         certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TlsValidationContextAcmTrust Acm { get; set; }
		
		/// <summary>
		/// An object that represents a Transport Layer Security (TLS) validation context trust for a local file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TlsValidationContextFileTrust File { get; set; }
	}
	
	/// <summary>
	/// An object that represents a target and its relative weight. Traffic is distributed
	///         across targets according to their relative weight. For example, a weighted target with a
	///         relative weight of 50 receives five times as much traffic as one with a relative weight of
	///         10. The total weight for all targets combined must be less than or equal to 100.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WeightedTarget
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string VirtualNode { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public int Weight { get; set; }
	}
	
	/// <summary>
	/// An object that represents a route returned by a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RouteRef
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string MeshName { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string MeshOwner { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string ResourceOwner { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string RouteName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Version { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string VirtualRouterName { get; set; }
	}
	
	/// <summary>
	/// An object that represents a route specification. Specify one route type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RouteSpec
	{
		
		/// <summary>
		/// An object that represents a gRPC route type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GrpcRoute GrpcRoute { get; set; }
		
		/// <summary>
		/// An object that represents an HTTP or HTTP/2 route type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HttpRoute Http2Route { get; set; }
		
		/// <summary>
		/// An object that represents an HTTP or HTTP/2 route type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HttpRoute HttpRoute { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// An object that represents a TCP route type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TcpRoute TcpRoute { get; set; }
	}
	
	/// <summary>
	/// An object that represents the current status of a route.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RouteStatus
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RouteStatusStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RouteStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RouteStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GrpcRetryPolicyEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deadline-exceeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@internal = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		resource-exhausted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unavailable = 4,
	}
	
	/// <summary>
	/// An object that represents the range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MatchRange
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int End { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Start { get; set; }
	}
	
	/// <summary>
	/// An object that represents the method and value to match with the header value sent in a
	///         request. Specify one match method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HeaderMatchMethod
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Exact { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Prefix { get; set; }
		
		/// <summary>
		/// An object that represents the range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MatchRange Range { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Regex { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Suffix { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceInput
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagRef[] Tags { get; set; }
	}
	
	/// <summary>
	/// An object that represents a virtual node service provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualNodeServiceProvider
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string VirtualNodeName { get; set; }
	}
	
	/// <summary>
	/// An object that represents a virtual node service provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualRouterServiceProvider
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string VirtualRouterName { get; set; }
	}
	
	/// <summary>
	/// An object that represents the criteria for determining a request match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GrpcRouteMatch
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public GrpcRouteMetadata[] Metadata { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string MethodName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
	}
	
	/// <summary>
	/// An object that represents the AWS Cloud Map service discovery information for your virtual
	///         node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AwsCloudMapServiceDiscovery
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AwsCloudMapInstanceAttribute[] Attributes { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ((?=^.{1,127}$)^([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9])(.([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9]))*$)|(^.$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string NamespaceName { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ((?=^.{1,127}$)^([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9])(.([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9]))*$)|(^.$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MeshStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
	}
	
	/// <summary>
	/// An object that represents the status of a service mesh.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MeshStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MeshStatusStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MeshStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVirtualNodeInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a virtual node.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualNodeSpec Spec { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagRef[] Tags { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string VirtualNodeName { get; set; }
	}
	
	/// <summary>
	/// An object that represents an access log file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FileAccessLog
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// An object that represents a Transport Layer Security (TLS) validation context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TlsValidationContext
	{
		
		/// <summary>
		/// An object that represents a Transport Layer Security (TLS) validation context trust.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TlsValidationContextTrust Trust { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVirtualNodeInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a virtual node.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualNodeSpec Spec { get; set; }
	}
	
	/// <summary>
	/// An object that represents the Transport Layer Security (TLS) properties for a listener.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListenerTls
	{
		
		/// <summary>
		/// An object that represents a listener's Transport Layer Security (TLS) certificate.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListenerTlsCertificate Certificate { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListenerTlsMode Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListenerTlsMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMISSIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRICT = 2,
	}
	
	/// <summary>
	/// An object that represents the specification of a virtual service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualServiceSpec
	{
		
		/// <summary>
		/// An object that represents the provider for a virtual service.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VirtualServiceProvider Provider { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVirtualServiceInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a virtual service.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualServiceSpec Spec { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagRef[] Tags { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualServiceName { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVirtualRouterInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a virtual router.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualRouterSpec Spec { get; set; }
	}
	
	/// <summary>
	/// An object that represents a listener for a virtual node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Listener
	{
		
		/// <summary>
		/// An object that represents the health check policy for a virtual node's listener.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HealthCheckPolicy HealthCheck { get; set; }
		
		/// <summary>
		/// An object that represents a port mapping.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PortMapping PortMapping { get; set; }
		
		/// <summary>
		/// An object that represents the Transport Layer Security (TLS) properties for a listener.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ListenerTls Tls { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VirtualNodeStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVirtualServiceInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a virtual service.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualServiceSpec Spec { get; set; }
	}
	
	/// <summary>
	/// An object that represents the action to take if a match is determined.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HttpRouteAction
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public WeightedTarget[] WeightedTargets { get; set; }
	}
	
	/// <summary>
	/// An object that represents a virtual router returned by a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualRouterRef
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string MeshName { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string MeshOwner { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string ResourceOwner { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Version { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string VirtualRouterName { get; set; }
	}
	
	/// <summary>
	/// An object that represents the HTTP header in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HttpRouteHeader
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Invert { get; set; }
		
		/// <summary>
		/// An object that represents the method and value to match with the header value sent in a
		///         request. Specify one match method.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HeaderMatchMethod Match { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// An object that represents the AWS Cloud Map attribute information for your virtual
	///         node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AwsCloudMapInstanceAttribute
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9!-~]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^([a-zA-Z0-9!-~][ ta-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// An object that represents a virtual node returned by a list operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualNodeRef
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdatedAt { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string MeshName { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string MeshOwner { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string ResourceOwner { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Version { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string VirtualNodeName { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMeshInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string MeshName { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a service mesh.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MeshSpec Spec { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagRef[] Tags { get; set; }
	}
	
	/// <summary>
	/// An object that represents the action to take if a match is determined.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GrpcRouteAction
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public WeightedTarget[] WeightedTargets { get; set; }
	}
	
	/// <summary>
	/// An object that represents the match method. Specify one of the match values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GrpcRouteMetadataMatchMethod
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Exact { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Prefix { get; set; }
		
		/// <summary>
		/// An object that represents the range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MatchRange Range { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Regex { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Suffix { get; set; }
	}
	
	/// <summary>
	/// An object that represents the action to take if a match is determined.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TcpRouteAction
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public WeightedTarget[] WeightedTargets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DurationUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HttpScheme
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		http = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		https = 1,
	}
	
	/// <summary>
	/// An object that represents the requirements for a route to match HTTP requests for a
	///         virtual router.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HttpRouteMatch
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public HttpRouteHeader[] Headers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HttpRouteMatchMethod Method { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HttpRouteMatchScheme Scheme { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HttpRouteMatchMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEAD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATCH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACE = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HttpRouteMatchScheme
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		http = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		https = 1,
	}
	
	/// <summary>
	/// An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HttpRetryPolicy
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public HttpRetryPolicyEvent[] HttpRetryEvents { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int MaxRetries { get; set; }
		
		/// <summary>
		/// An object that represents a duration of time.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Duration PerRetryTimeout { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public TcpRetryPolicyEvent[] TcpRetryEvents { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRouteInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string RouteName { get; set; }
		
		/// <summary>
		/// An object that represents a route specification. Specify one route type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RouteSpec Spec { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagRef[] Tags { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRouteInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object that represents a route specification. Specify one route type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RouteSpec Spec { get; set; }
	}
	
	/// <summary>
	/// 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceInput
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagKey[] TagKeys { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Creates a service mesh.</p>
		/// <p> A service mesh is a logical boundary for network traffic between services that are
		/// represented by resources within the mesh. After you create your service mesh, you can
		/// create virtual services, virtual nodes, virtual routers, and routes to distribute traffic
		/// between the applications in your mesh.</p>
		/// <p>For more information about service meshes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/meshes.html">Service meshes</a>.</p>
		/// CreateMesh /v20190125/meshes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateMeshOutput> CreateMeshAsync(CreateMeshBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateMeshOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of existing service meshes.
		/// ListMeshes /v20190125/meshes
		/// </summary>
		/// <param name="limit">The maximum number of results returned by <code>ListMeshes</code> in paginated output.
		///         When you use this parameter, <code>ListMeshes</code> returns only <code>limit</code>
		///         results in a single page along with a <code>nextToken</code> response element. You can see
		///         the remaining results of the initial request by sending another <code>ListMeshes</code>
		///         request with the returned <code>nextToken</code> value. This value can be between
		///         1 and 100. If you don't use this parameter,
		///            <code>ListMeshes</code> returns up to 100 results and a
		///            <code>nextToken</code> value if applicable.</param>
		/// <param name="nextToken"><p>The <code>nextToken</code> value returned from a previous paginated
		///            <code>ListMeshes</code> request where <code>limit</code> was used and the results
		///         exceeded the value of that parameter. Pagination continues from the end of the previous
		///         results that returned the <code>nextToken</code> value.</p> 
		///         <note>
		///            <p>This token should be treated as an opaque identifier that is used only to
		///                retrieve the next items in a list and not for other programmatic purposes.</p>
		///        </note></param>
		/// <returns>Success</returns>
		public async Task<ListMeshesOutput> ListMeshesAsync(int limit, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes?limit="+limit+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListMeshesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a route that is associated with a virtual router.</p>
		/// <p> You can route several different protocols and define a retry policy for a route.
		/// Traffic can be routed to one or more virtual nodes.</p>
		/// <p>For more information about routes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html">Routes</a>.</p>
		/// CreateRoute /v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes
		/// </summary>
		/// <param name="meshName">The name of the service mesh to create the route in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
		///               the account that you specify must share the mesh with your account before you can create 
		///             the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="virtualRouterName">The name of the virtual router in which to create the route. If the virtual router is in
		///         a shared mesh, then you must be the owner of the virtual router resource.</param>
		/// <returns>Success</returns>
		public async Task<CreateRouteOutput> CreateRouteAsync(string meshName, string meshOwner, string virtualRouterName, CreateRouteBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualRouter/"+ (virtualRouterName==null? "" : Uri.EscapeDataString(virtualRouterName))+"/routes&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateRouteOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of existing routes in a service mesh.
		/// ListRoutes /v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes
		/// </summary>
		/// <param name="limit">The maximum number of results returned by <code>ListRoutes</code> in paginated output.
		///         When you use this parameter, <code>ListRoutes</code> returns only <code>limit</code>
		///         results in a single page along with a <code>nextToken</code> response element. You can see
		///         the remaining results of the initial request by sending another <code>ListRoutes</code>
		///         request with the returned <code>nextToken</code> value. This value can be between
		///         1 and 100. If you don't use this parameter,
		///            <code>ListRoutes</code> returns up to 100 results and a
		///            <code>nextToken</code> value if applicable.</param>
		/// <param name="meshName">The name of the service mesh to list routes in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="nextToken">The <code>nextToken</code> value returned from a previous paginated
		///            <code>ListRoutes</code> request where <code>limit</code> was used and the results
		///         exceeded the value of that parameter. Pagination continues from the end of the previous
		///         results that returned the <code>nextToken</code> value.</param>
		/// <param name="virtualRouterName">The name of the virtual router to list routes in.</param>
		/// <returns>Success</returns>
		public async Task<ListRoutesOutput> ListRoutesAsync(int limit, string meshName, string meshOwner, string nextToken, string virtualRouterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualRouter/"+ (virtualRouterName==null? "" : Uri.EscapeDataString(virtualRouterName))+"/routes?limit="+limit+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListRoutesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a virtual node within a service mesh.</p>
		/// <p> A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS
		/// service or a Kubernetes deployment. When you create a virtual node, you can specify the
		/// service discovery information for your task group, and whether the proxy running in a task
		/// group will communicate with other proxies using Transport Layer Security (TLS).</p>
		/// <p>You define a <code>listener</code> for any inbound traffic that your virtual node
		/// expects. Any virtual service that your virtual node expects to communicate to is specified
		/// as a <code>backend</code>.</p>
		/// <p>The response metadata for your new virtual node contains the <code>arn</code> that is
		/// associated with the virtual node. Set this value (either the full ARN or the truncated
		/// resource name: for example, <code>mesh/default/virtualNode/simpleapp</code>) as the
		/// <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's Envoy
		/// proxy container in your task definition or pod spec. This is then mapped to the
		/// <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>
		/// <note>
		/// <p>If you require your Envoy stats or tracing to use a different name, you can override
		/// the <code>node.cluster</code> value that is set by
		/// <code>APPMESH_VIRTUAL_NODE_NAME</code> with the
		/// <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>
		/// </note>
		/// <p>For more information about virtual nodes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html">Virtual nodes</a>.</p>
		/// CreateVirtualNode /v20190125/meshes/{meshName}/virtualNodes
		/// </summary>
		/// <param name="meshName">The name of the service mesh to create the virtual node in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
		///               the account that you specify must share the mesh with your account before you can create 
		///             the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <returns>Success</returns>
		public async Task<CreateVirtualNodeOutput> CreateVirtualNodeAsync(string meshName, string meshOwner, CreateVirtualNodeBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualNodes&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateVirtualNodeOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of existing virtual nodes.
		/// ListVirtualNodes /v20190125/meshes/{meshName}/virtualNodes
		/// </summary>
		/// <param name="limit">The maximum number of results returned by <code>ListVirtualNodes</code> in paginated
		///         output. When you use this parameter, <code>ListVirtualNodes</code> returns only
		///            <code>limit</code> results in a single page along with a <code>nextToken</code> response
		///         element. You can see the remaining results of the initial request by sending another
		///            <code>ListVirtualNodes</code> request with the returned <code>nextToken</code> value.
		///         This value can be between 1 and 100. If you don't use this
		///         parameter, <code>ListVirtualNodes</code> returns up to 100 results and a
		///            <code>nextToken</code> value if applicable.</param>
		/// <param name="meshName">The name of the service mesh to list virtual nodes in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="nextToken">The <code>nextToken</code> value returned from a previous paginated
		///            <code>ListVirtualNodes</code> request where <code>limit</code> was used and the results
		///         exceeded the value of that parameter. Pagination continues from the end of the previous
		///         results that returned the <code>nextToken</code> value.</param>
		/// <returns>Success</returns>
		public async Task<ListVirtualNodesOutput> ListVirtualNodesAsync(int limit, string meshName, string meshOwner, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualNodes?limit="+limit+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListVirtualNodesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a virtual router within a service mesh.</p>
		/// <p>Specify a <code>listener</code> for any inbound traffic that your virtual router
		/// receives. Create a virtual router for each protocol and port that you need to route.
		/// Virtual routers handle traffic for one or more virtual services within your mesh. After you
		/// create your virtual router, create and associate routes for your virtual router that direct
		/// incoming requests to different virtual nodes.</p>
		/// <p>For more information about virtual routers, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_routers.html">Virtual routers</a>.</p>
		/// CreateVirtualRouter /v20190125/meshes/{meshName}/virtualRouters
		/// </summary>
		/// <param name="meshName">The name of the service mesh to create the virtual router in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
		///               the account that you specify must share the mesh with your account before you can create 
		///             the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <returns>Success</returns>
		public async Task<CreateVirtualRouterOutput> CreateVirtualRouterAsync(string meshName, string meshOwner, CreateVirtualRouterBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualRouters&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateVirtualRouterOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of existing virtual routers in a service mesh.
		/// ListVirtualRouters /v20190125/meshes/{meshName}/virtualRouters
		/// </summary>
		/// <param name="limit">The maximum number of results returned by <code>ListVirtualRouters</code> in paginated
		///         output. When you use this parameter, <code>ListVirtualRouters</code> returns only
		///            <code>limit</code> results in a single page along with a <code>nextToken</code> response
		///         element. You can see the remaining results of the initial request by sending another
		///            <code>ListVirtualRouters</code> request with the returned <code>nextToken</code> value.
		///         This value can be between 1 and 100. If you don't use this
		///         parameter, <code>ListVirtualRouters</code> returns up to 100 results and
		///         a <code>nextToken</code> value if applicable.</param>
		/// <param name="meshName">The name of the service mesh to list virtual routers in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="nextToken">The <code>nextToken</code> value returned from a previous paginated
		///            <code>ListVirtualRouters</code> request where <code>limit</code> was used and the
		///         results exceeded the value of that parameter. Pagination continues from the end of the
		///         previous results that returned the <code>nextToken</code> value.</param>
		/// <returns>Success</returns>
		public async Task<ListVirtualRoutersOutput> ListVirtualRoutersAsync(int limit, string meshName, string meshOwner, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualRouters?limit="+limit+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListVirtualRoutersOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a virtual service within a service mesh.</p>
		/// <p>A virtual service is an abstraction of a real service that is provided by a virtual node
		/// directly or indirectly by means of a virtual router. Dependent services call your virtual
		/// service by its <code>virtualServiceName</code>, and those requests are routed to the
		/// virtual node or virtual router that is specified as the provider for the virtual
		/// service.</p>
		/// <p>For more information about virtual services, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html">Virtual services</a>.</p>
		/// CreateVirtualService /v20190125/meshes/{meshName}/virtualServices
		/// </summary>
		/// <param name="meshName">The name of the service mesh to create the virtual service in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
		///               the account that you specify must share the mesh with your account before you can create 
		///             the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <returns>Success</returns>
		public async Task<CreateVirtualServiceOutput> CreateVirtualServiceAsync(string meshName, string meshOwner, CreateVirtualServiceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualServices&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateVirtualServiceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of existing virtual services in a service mesh.
		/// ListVirtualServices /v20190125/meshes/{meshName}/virtualServices
		/// </summary>
		/// <param name="limit">The maximum number of results returned by <code>ListVirtualServices</code> in paginated
		///         output. When you use this parameter, <code>ListVirtualServices</code> returns only
		///            <code>limit</code> results in a single page along with a <code>nextToken</code> response
		///         element. You can see the remaining results of the initial request by sending another
		///            <code>ListVirtualServices</code> request with the returned <code>nextToken</code> value.
		///         This value can be between 1 and 100. If you don't use this
		///         parameter, <code>ListVirtualServices</code> returns up to 100 results and
		///         a <code>nextToken</code> value if applicable.</param>
		/// <param name="meshName">The name of the service mesh to list virtual services in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="nextToken">The <code>nextToken</code> value returned from a previous paginated
		///            <code>ListVirtualServices</code> request where <code>limit</code> was used and the
		///         results exceeded the value of that parameter. Pagination continues from the end of the
		///         previous results that returned the <code>nextToken</code> value.</param>
		/// <returns>Success</returns>
		public async Task<ListVirtualServicesOutput> ListVirtualServicesAsync(int limit, string meshName, string meshOwner, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualServices?limit="+limit+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListVirtualServicesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an existing service mesh.</p>
		/// <p>You must delete all resources (virtual services, routes, virtual routers, and virtual
		/// nodes) in the service mesh before you can delete the mesh itself.</p>
		/// DeleteMesh /v20190125/meshes/{meshName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteMeshOutput> DeleteMeshAsync(string meshName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteMeshOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes an existing service mesh.
		/// DescribeMesh /v20190125/meshes/{meshName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh to describe.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <returns>Success</returns>
		public async Task<DescribeMeshOutput> DescribeMeshAsync(string meshName, string meshOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeMeshOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing service mesh.
		/// UpdateMesh /v20190125/meshes/{meshName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateMeshOutput> UpdateMeshAsync(string meshName, UpdateMeshBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateMeshOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing route.
		/// DeleteRoute /v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh to delete the route in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="routeName">The name of the route to delete.</param>
		/// <param name="virtualRouterName">The name of the virtual router to delete the route in.</param>
		/// <returns>Success</returns>
		public async Task<DeleteRouteOutput> DeleteRouteAsync(string meshName, string meshOwner, string routeName, string virtualRouterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualRouter/"+ (virtualRouterName==null? "" : Uri.EscapeDataString(virtualRouterName))+"/routes/"+ (routeName==null? "" : Uri.EscapeDataString(routeName))+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteRouteOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes an existing route.
		/// DescribeRoute /v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh that the route resides in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="routeName">The name of the route to describe.</param>
		/// <param name="virtualRouterName">The name of the virtual router that the route is associated with.</param>
		/// <returns>Success</returns>
		public async Task<DescribeRouteOutput> DescribeRouteAsync(string meshName, string meshOwner, string routeName, string virtualRouterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualRouter/"+ (virtualRouterName==null? "" : Uri.EscapeDataString(virtualRouterName))+"/routes/"+ (routeName==null? "" : Uri.EscapeDataString(routeName))+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeRouteOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing route for a specified service mesh and virtual router.
		/// UpdateRoute /v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh that the route resides in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="routeName">The name of the route to update.</param>
		/// <param name="virtualRouterName">The name of the virtual router that the route is associated with.</param>
		/// <returns>Success</returns>
		public async Task<UpdateRouteOutput> UpdateRouteAsync(string meshName, string meshOwner, string routeName, string virtualRouterName, UpdateRouteBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualRouter/"+ (virtualRouterName==null? "" : Uri.EscapeDataString(virtualRouterName))+"/routes/"+ (routeName==null? "" : Uri.EscapeDataString(routeName))+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateRouteOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an existing virtual node.</p>
		/// <p>You must delete any virtual services that list a virtual node as a service provider
		/// before you can delete the virtual node itself.</p>
		/// DeleteVirtualNode /v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh to delete the virtual node in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="virtualNodeName">The name of the virtual node to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteVirtualNodeOutput> DeleteVirtualNodeAsync(string meshName, string meshOwner, string virtualNodeName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualNodes/"+ (virtualNodeName==null? "" : Uri.EscapeDataString(virtualNodeName))+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteVirtualNodeOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes an existing virtual node.
		/// DescribeVirtualNode /v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh that the virtual node resides in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="virtualNodeName">The name of the virtual node to describe.</param>
		/// <returns>Success</returns>
		public async Task<DescribeVirtualNodeOutput> DescribeVirtualNodeAsync(string meshName, string meshOwner, string virtualNodeName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualNodes/"+ (virtualNodeName==null? "" : Uri.EscapeDataString(virtualNodeName))+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeVirtualNodeOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing virtual node in a specified service mesh.
		/// UpdateVirtualNode /v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh that the virtual node resides in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="virtualNodeName">The name of the virtual node to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateVirtualNodeOutput> UpdateVirtualNodeAsync(string meshName, string meshOwner, string virtualNodeName, UpdateVirtualNodeBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualNodes/"+ (virtualNodeName==null? "" : Uri.EscapeDataString(virtualNodeName))+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateVirtualNodeOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an existing virtual router.</p>
		/// <p>You must delete any routes associated with the virtual router before you can delete the
		/// router itself.</p>
		/// DeleteVirtualRouter /v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh to delete the virtual router in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="virtualRouterName">The name of the virtual router to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteVirtualRouterOutput> DeleteVirtualRouterAsync(string meshName, string meshOwner, string virtualRouterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualRouters/"+ (virtualRouterName==null? "" : Uri.EscapeDataString(virtualRouterName))+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteVirtualRouterOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes an existing virtual router.
		/// DescribeVirtualRouter /v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh that the virtual router resides in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="virtualRouterName">The name of the virtual router to describe.</param>
		/// <returns>Success</returns>
		public async Task<DescribeVirtualRouterOutput> DescribeVirtualRouterAsync(string meshName, string meshOwner, string virtualRouterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualRouters/"+ (virtualRouterName==null? "" : Uri.EscapeDataString(virtualRouterName))+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeVirtualRouterOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing virtual router in a specified service mesh.
		/// UpdateVirtualRouter /v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh that the virtual router resides in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="virtualRouterName">The name of the virtual router to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateVirtualRouterOutput> UpdateVirtualRouterAsync(string meshName, string meshOwner, string virtualRouterName, UpdateVirtualRouterBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualRouters/"+ (virtualRouterName==null? "" : Uri.EscapeDataString(virtualRouterName))+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateVirtualRouterOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing virtual service.
		/// DeleteVirtualService /v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh to delete the virtual service in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="virtualServiceName">The name of the virtual service to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteVirtualServiceOutput> DeleteVirtualServiceAsync(string meshName, string meshOwner, string virtualServiceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualServices/"+ (virtualServiceName==null? "" : Uri.EscapeDataString(virtualServiceName))+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteVirtualServiceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes an existing virtual service.
		/// DescribeVirtualService /v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh that the virtual service resides in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="virtualServiceName">The name of the virtual service to describe.</param>
		/// <returns>Success</returns>
		public async Task<DescribeVirtualServiceOutput> DescribeVirtualServiceAsync(string meshName, string meshOwner, string virtualServiceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualServices/"+ (virtualServiceName==null? "" : Uri.EscapeDataString(virtualServiceName))+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeVirtualServiceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing virtual service in a specified service mesh.
		/// UpdateVirtualService /v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}
		/// </summary>
		/// <param name="meshName">The name of the service mesh that the virtual service resides in.</param>
		/// <param name="meshOwner">The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
		///               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.</param>
		/// <param name="virtualServiceName">The name of the virtual service to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateVirtualServiceOutput> UpdateVirtualServiceAsync(string meshName, string meshOwner, string virtualServiceName, UpdateVirtualServiceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/meshes/"+ (meshName==null? "" : Uri.EscapeDataString(meshName))+"/virtualServices/"+ (virtualServiceName==null? "" : Uri.EscapeDataString(virtualServiceName))+"&meshOwner=" + (meshOwner==null? "" : Uri.EscapeDataString(meshOwner));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateVirtualServiceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the tags for an App Mesh resource.
		/// ListTagsForResource /v20190125/tags#resourceArn
		/// </summary>
		/// <param name="limit">The maximum number of tag results returned by <code>ListTagsForResource</code> in
		///         paginated output. When this parameter is used, <code>ListTagsForResource</code> returns
		///         only <code>limit</code> results in a single page along with a <code>nextToken</code>
		///         response element. You can see the remaining results of the initial request by sending
		///         another <code>ListTagsForResource</code> request with the returned <code>nextToken</code>
		///         value. This value can be between 1 and 100. If you don't use
		///         this parameter, <code>ListTagsForResource</code> returns up to 100
		///         results and a <code>nextToken</code> value if applicable.</param>
		/// <param name="nextToken">The <code>nextToken</code> value returned from a previous paginated
		///            <code>ListTagsForResource</code> request where <code>limit</code> was used and the
		///         results exceeded the value of that parameter. Pagination continues from the end of the
		///         previous results that returned the <code>nextToken</code> value.</param>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) that identifies the resource to list the tags for.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceOutput> ListTagsForResourceAsync(int limit, string nextToken, string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/tags#resourceArn?limit="+limit+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&resourceArn=" + (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates the specified tags to a resource with the specified <code>resourceArn</code>.
		/// If existing tags on a resource aren't specified in the request parameters, they aren't
		/// changed. When a resource is deleted, the tags associated with that resource are also
		/// deleted.
		/// TagResource /v20190125/tag#resourceArn
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource to add tags to.</param>
		/// <returns>Success</returns>
		public async Task<TagResourceOutput> TagResourceAsync(string resourceArn, TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/tag#resourceArn?resourceArn=" + (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes specified tags from a resource.
		/// UntagResource /v20190125/untag#resourceArn
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource to delete tags from.</param>
		/// <returns>Success</returns>
		public async Task<UntagResourceOutput> UntagResourceAsync(string resourceArn, UntagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v20190125/untag#resourceArn?resourceArn=" + (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMeshBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The name to use for the service mesh.
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string MeshName { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a service mesh.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Spec { get; set; }
		
		/// <summary>
		/// Optional metadata that you can apply to the service mesh to assist with categorization
		///         and organization. Each tag consists of a key and an optional value, both of which you
		///         define. Tag keys can have a maximum character length of 128 characters, and tag values can have
		///            a maximum length of 256 characters.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagRef[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRouteBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The name to use for the route.
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string RouteName { get; set; }
		
		/// <summary>
		/// An object that represents a route specification. Specify one route type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Spec { get; set; }
		
		/// <summary>
		/// Optional metadata that you can apply to the route to assist with categorization and
		///         organization. Each tag consists of a key and an optional value, both of which you define.
		///         Tag keys can have a maximum character length of 128 characters, and tag values can have
		///            a maximum length of 256 characters.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagRef[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVirtualNodeBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a virtual node.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Spec { get; set; }
		
		/// <summary>
		/// Optional metadata that you can apply to the virtual node to assist with categorization
		///         and organization. Each tag consists of a key and an optional value, both of which you
		///         define. Tag keys can have a maximum character length of 128 characters, and tag values can have
		///            a maximum length of 256 characters.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagRef[] Tags { get; set; }
		
		/// <summary>
		/// The name to use for the virtual node.
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string VirtualNodeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVirtualRouterBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a virtual router.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Spec { get; set; }
		
		/// <summary>
		/// Optional metadata that you can apply to the virtual router to assist with categorization
		///         and organization. Each tag consists of a key and an optional value, both of which you
		///         define. Tag keys can have a maximum character length of 128 characters, and tag values can have
		///            a maximum length of 256 characters.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagRef[] Tags { get; set; }
		
		/// <summary>
		/// The name to use for the virtual router.
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string VirtualRouterName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVirtualServiceBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a virtual service.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Spec { get; set; }
		
		/// <summary>
		/// Optional metadata that you can apply to the virtual service to assist with
		///         categorization and organization. Each tag consists of a key and an optional value, both of
		///         which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have
		///            a maximum length of 256 characters.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagRef[] Tags { get; set; }
		
		/// <summary>
		/// The name to use for the virtual service.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMeshBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a service mesh.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Spec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRouteBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object that represents a route specification. Specify one route type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Spec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVirtualNodeBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a virtual node.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Spec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVirtualRouterBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a virtual router.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Spec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVirtualServiceBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the
		///request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An object that represents the specification of a virtual service.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Spec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		/// The tags to add to the resource. A tag is an array of key-value pairs.
		///         Tag keys can have a maximum character length of 128 characters, and tag values can have
		///            a maximum length of 256 characters.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagRef[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceBody
	{
		
		/// <summary>
		/// The keys of the tags to be removed.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagKey[] TagKeys { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
