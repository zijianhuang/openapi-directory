//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptDirectConnectGatewayAssociationProposalResult
	{
		
		/// <summary>
		/// Information about an association between a Direct Connect gateway and a virtual private gateway or transit gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGatewayAssociation DirectConnectGatewayAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptDirectConnectGatewayAssociationProposalRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProposalId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssociatedGatewayOwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteFilterPrefix[] OverrideAllowedPrefixesToDirectConnectGateway { get; set; }
	}
	
	/// <summary>
	/// Information about an AWS Direct Connect connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Connection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionConnectionState ConnectionState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Bandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Vlan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PartnerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LoaIssueTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LagId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsDevice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> JumboFrameCapable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsDeviceV2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionHasLogicalRedundancy HasLogicalRedundancy { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConnectionConnectionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ordering = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requested = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		down = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConnectionHasLogicalRedundancy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		yes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		no = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AllocateConnectionOnInterconnectRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bandwidth { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InterconnectId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Vlan { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AllocateHostedConnectionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bandwidth { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Vlan { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Information about a virtual interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualInterface
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Vlan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Asn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AmazonSideAsn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AmazonAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VirtualInterfaceAddressFamily AddressFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VirtualInterfaceVirtualInterfaceState VirtualInterfaceState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerRouterConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Mtu { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> JumboFrameCapable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteFilterPrefix[] RouteFilterPrefixes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BGPPeer[] BgpPeers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsDeviceV2 { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VirtualInterfaceAddressFamily
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv6 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VirtualInterfaceVirtualInterfaceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		confirming = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		verifying = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		down = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AllocatePrivateVirtualInterfaceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		/// <summary>
		/// Information about a private virtual interface to be provisioned on a connection.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NewPrivateVirtualInterfaceAllocation NewPrivateVirtualInterfaceAllocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AllocatePublicVirtualInterfaceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		/// <summary>
		/// Information about a public virtual interface to be provisioned on a connection.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NewPublicVirtualInterfaceAllocation NewPublicVirtualInterfaceAllocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AllocateTransitVirtualInterfaceResult
	{
		
		/// <summary>
		/// Information about a virtual interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VirtualInterface VirtualInterface { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AllocateTransitVirtualInterfaceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		/// <summary>
		/// Information about a transit virtual interface to be provisioned on a connection.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NewTransitVirtualInterfaceAllocation NewTransitVirtualInterfaceAllocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateConnectionWithLagRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LagId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateHostedConnectionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParentConnectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateVirtualInterfaceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfirmConnectionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfirmConnectionResponseConnectionState ConnectionState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfirmConnectionResponseConnectionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ordering = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requested = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		down = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfirmConnectionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfirmPrivateVirtualInterfaceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfirmPrivateVirtualInterfaceResponseVirtualInterfaceState VirtualInterfaceState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfirmPrivateVirtualInterfaceResponseVirtualInterfaceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		confirming = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		verifying = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		down = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfirmPrivateVirtualInterfaceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfirmPublicVirtualInterfaceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfirmPublicVirtualInterfaceResponseVirtualInterfaceState VirtualInterfaceState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfirmPublicVirtualInterfaceResponseVirtualInterfaceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		confirming = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		verifying = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		down = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfirmPublicVirtualInterfaceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfirmTransitVirtualInterfaceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfirmTransitVirtualInterfaceResponseVirtualInterfaceState VirtualInterfaceState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfirmTransitVirtualInterfaceResponseVirtualInterfaceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		confirming = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		verifying = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		down = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfirmTransitVirtualInterfaceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBGPPeerResponse
	{
		
		/// <summary>
		/// Information about a virtual interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VirtualInterface VirtualInterface { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBGPPeerRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceId { get; set; }
		
		/// <summary>
		/// Information about a new BGP peer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NewBGPPeer NewBGPPeer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateConnectionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bandwidth { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LagId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDirectConnectGatewayResult
	{
		
		/// <summary>
		/// Information about a Direct Connect gateway, which enables you to connect virtual interfaces and virtual private gateway or transit gateways.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGateway DirectConnectGateway { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDirectConnectGatewayRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AmazonSideAsn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDirectConnectGatewayAssociationResult
	{
		
		/// <summary>
		/// Information about an association between a Direct Connect gateway and a virtual private gateway or transit gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGatewayAssociation DirectConnectGatewayAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDirectConnectGatewayAssociationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteFilterPrefix[] AddAllowedPrefixesToDirectConnectGateway { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualGatewayId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDirectConnectGatewayAssociationProposalResult
	{
		
		/// <summary>
		/// Information about the proposal request to attach a virtual private gateway to a Direct Connect gateway. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGatewayAssociationProposal DirectConnectGatewayAssociationProposal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDirectConnectGatewayAssociationProposalRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayOwnerAccount { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteFilterPrefix[] AddAllowedPrefixesToDirectConnectGateway { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteFilterPrefix[] RemoveAllowedPrefixesToDirectConnectGateway { get; set; }
	}
	
	/// <summary>
	/// Information about an interconnect.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Interconnect
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InterconnectId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InterconnectName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InterconnectInterconnectState InterconnectState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Bandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LoaIssueTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LagId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsDevice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> JumboFrameCapable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsDeviceV2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InterconnectHasLogicalRedundancy HasLogicalRedundancy { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InterconnectInterconnectState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requested = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		down = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InterconnectHasLogicalRedundancy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		yes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		no = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInterconnectRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InterconnectName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bandwidth { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LagId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
	}
	
	/// <summary>
	/// Information about a link aggregation group (LAG).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Lag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionsBandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfConnections { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LagId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LagName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LagLagState LagState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinimumLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsDevice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsDeviceV2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Connection[] Connections { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowsHostedConnections { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> JumboFrameCapable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LagHasLogicalRedundancy HasLogicalRedundancy { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LagLagState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requested = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		down = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LagHasLogicalRedundancy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		yes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		no = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLagRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int NumberOfConnections { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionsBandwidth { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LagName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] ChildConnectionTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePrivateVirtualInterfaceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		/// <summary>
		/// Information about a private virtual interface.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NewPrivateVirtualInterface NewPrivateVirtualInterface { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePublicVirtualInterfaceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		/// <summary>
		/// Information about a public virtual interface.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NewPublicVirtualInterface NewPublicVirtualInterface { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTransitVirtualInterfaceResult
	{
		
		/// <summary>
		/// Information about a virtual interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VirtualInterface VirtualInterface { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTransitVirtualInterfaceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		/// <summary>
		/// Information about a transit virtual interface.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NewTransitVirtualInterface NewTransitVirtualInterface { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteBGPPeerResponse
	{
		
		/// <summary>
		/// Information about a virtual interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VirtualInterface VirtualInterface { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteBGPPeerRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Asn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BgpPeerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteConnectionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDirectConnectGatewayResult
	{
		
		/// <summary>
		/// Information about a Direct Connect gateway, which enables you to connect virtual interfaces and virtual private gateway or transit gateways.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGateway DirectConnectGateway { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDirectConnectGatewayRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDirectConnectGatewayAssociationResult
	{
		
		/// <summary>
		/// Information about an association between a Direct Connect gateway and a virtual private gateway or transit gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGatewayAssociation DirectConnectGatewayAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDirectConnectGatewayAssociationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualGatewayId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDirectConnectGatewayAssociationProposalResult
	{
		
		/// <summary>
		/// Information about the proposal request to attach a virtual private gateway to a Direct Connect gateway. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGatewayAssociationProposal DirectConnectGatewayAssociationProposal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDirectConnectGatewayAssociationProposalRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProposalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteInterconnectResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeleteInterconnectResponseInterconnectState InterconnectState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeleteInterconnectResponseInterconnectState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requested = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		down = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteInterconnectRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InterconnectId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLagRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LagId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVirtualInterfaceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeleteVirtualInterfaceResponseVirtualInterfaceState VirtualInterfaceState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeleteVirtualInterfaceResponseVirtualInterfaceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		confirming = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		verifying = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		down = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVirtualInterfaceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConnectionLoaResponse
	{
		
		/// <summary>
		/// Information about a Letter of Authorization - Connecting Facility Assignment (LOA-CFA) for a connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Loa Loa { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConnectionLoaRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeConnectionLoaRequestLoaContentType LoaContentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeConnectionLoaRequestLoaContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		application/pdf = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Connections
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Connection[] Connections1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConnectionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConnectionsOnInterconnectRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InterconnectId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDirectConnectGatewayAssociationProposalsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGatewayAssociationProposal[] DirectConnectGatewayAssociationProposals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDirectConnectGatewayAssociationProposalsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProposalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociatedGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDirectConnectGatewayAssociationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGatewayAssociation[] DirectConnectGatewayAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDirectConnectGatewayAssociationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociatedGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualGatewayId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDirectConnectGatewayAttachmentsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGatewayAttachment[] DirectConnectGatewayAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDirectConnectGatewayAttachmentsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDirectConnectGatewaysResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGateway[] DirectConnectGateways { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDirectConnectGatewaysRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeHostedConnectionsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInterconnectLoaResponse
	{
		
		/// <summary>
		/// Information about a Letter of Authorization - Connecting Facility Assignment (LOA-CFA) for a connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Loa Loa { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInterconnectLoaRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InterconnectId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeInterconnectLoaRequestLoaContentType LoaContentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeInterconnectLoaRequestLoaContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		application/pdf = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Interconnects
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Interconnect[] Interconnects1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInterconnectsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InterconnectId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Lags
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Lag[] Lags1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLagsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LagId { get; set; }
	}
	
	/// <summary>
	/// Information about a Letter of Authorization - Connecting Facility Assignment (LOA-CFA) for a connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Loa
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LoaContent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoaLoaContentType LoaContentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoaLoaContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		application/pdf = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLoaRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeLoaRequestLoaContentType LoaContentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeLoaRequestLoaContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		application/pdf = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Locations
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Location[] Locations1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTagsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceTag[] ResourceTags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTagsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceArn[] ResourceArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualGateways
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VirtualGateway[] VirtualGateways1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualInterfaces
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VirtualInterface[] VirtualInterfaces1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVirtualInterfacesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateConnectionFromLagRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LagId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListVirtualInterfaceTestHistoryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VirtualInterfaceTestHistory[] VirtualInterfaceTestHistory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListVirtualInterfaceTestHistoryRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BGPPeerId[] BgpPeers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartBgpFailoverTestResponse
	{
		
		/// <summary>
		/// Information about the virtual interface failover test.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VirtualInterfaceTestHistory VirtualInterfaceTest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartBgpFailoverTestRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BGPPeerId[] BgpPeers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TestDurationInMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopBgpFailoverTestResponse
	{
		
		/// <summary>
		/// Information about the virtual interface failover test.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VirtualInterfaceTestHistory VirtualInterfaceTest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopBgpFailoverTestRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagKey[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDirectConnectGatewayAssociationResult
	{
		
		/// <summary>
		/// Information about an association between a Direct Connect gateway and a virtual private gateway or transit gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGatewayAssociation DirectConnectGatewayAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDirectConnectGatewayAssociationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteFilterPrefix[] AddAllowedPrefixesToDirectConnectGateway { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteFilterPrefix[] RemoveAllowedPrefixesToDirectConnectGateway { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateLagRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LagId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LagName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinimumLinks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVirtualInterfaceAttributesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Mtu { get; set; }
	}
	
	/// <summary>
	/// Information about an association between a Direct Connect gateway and a virtual private gateway or transit gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DirectConnectGatewayAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayOwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGatewayAssociationAssociationState AssociationState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateChangeError { get; set; }
		
		/// <summary>
		/// Information about the associated gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AssociatedGateway AssociatedGateway { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteFilterPrefix[] AllowedPrefixesToDirectConnectGateway { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualGatewayRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualGatewayOwnerAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DirectConnectGatewayAssociationAssociationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociated = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		updating = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AddressFamily
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv6 = 1,
	}
	
	/// <summary>
	/// Information about a private virtual interface to be provisioned on a connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewPrivateVirtualInterfaceAllocation
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Vlan { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Asn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Mtu { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AmazonAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NewPrivateVirtualInterfaceAllocationAddressFamily AddressFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerAddress { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NewPrivateVirtualInterfaceAllocationAddressFamily
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv6 = 1,
	}
	
	/// <summary>
	/// Information about a public virtual interface to be provisioned on a connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewPublicVirtualInterfaceAllocation
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Vlan { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Asn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AmazonAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NewPublicVirtualInterfaceAllocationAddressFamily AddressFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteFilterPrefix[] RouteFilterPrefixes { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NewPublicVirtualInterfaceAllocationAddressFamily
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv6 = 1,
	}
	
	/// <summary>
	/// Information about a transit virtual interface to be provisioned on a connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewTransitVirtualInterfaceAllocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Vlan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Asn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Mtu { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AmazonAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NewTransitVirtualInterfaceAllocationAddressFamily AddressFamily { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NewTransitVirtualInterfaceAllocationAddressFamily
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv6 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GatewayType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		virtualPrivateGateway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transitGateway = 1,
	}
	
	/// <summary>
	/// Information about the associated gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociatedGateway
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssociatedGatewayType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociatedGatewayType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		virtualPrivateGateway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transitGateway = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BGPPeerState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		verifying = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BGPStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		up = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		down = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 2,
	}
	
	/// <summary>
	/// Information about a BGP peer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BGPPeer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BgpPeerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Asn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BGPPeerAddressFamily AddressFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AmazonAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BGPPeerBgpPeerState BgpPeerState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BGPPeerBgpStatus BgpStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsDeviceV2 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BGPPeerAddressFamily
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv6 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BGPPeerBgpPeerState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		verifying = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BGPPeerBgpStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		up = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		down = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConnectionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ordering = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requested = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		down = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VirtualInterfaceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		confirming = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		verifying = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		down = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HasLogicalRedundancy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		yes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		no = 2,
	}
	
	/// <summary>
	/// Information about a new BGP peer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewBGPPeer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Asn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NewBGPPeerAddressFamily AddressFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AmazonAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NewBGPPeerAddressFamily
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv6 = 1,
	}
	
	/// <summary>
	/// Information about the proposal request to attach a virtual private gateway to a Direct Connect gateway. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DirectConnectGatewayAssociationProposal
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProposalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayOwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGatewayAssociationProposalProposalState ProposalState { get; set; }
		
		/// <summary>
		/// Information about the associated gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AssociatedGateway AssociatedGateway { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteFilterPrefix[] ExistingAllowedPrefixesToDirectConnectGateway { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteFilterPrefix[] RequestedAllowedPrefixesToDirectConnectGateway { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DirectConnectGatewayAssociationProposalProposalState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requested = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 2,
	}
	
	/// <summary>
	/// Information about a Direct Connect gateway, which enables you to connect virtual interfaces and virtual private gateway or transit gateways.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DirectConnectGateway
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AmazonSideAsn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGatewayDirectConnectGatewayState DirectConnectGatewayState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateChangeError { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DirectConnectGatewayDirectConnectGatewayState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 3,
	}
	
	/// <summary>
	/// Information about a private virtual interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewPrivateVirtualInterface
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Vlan { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Asn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Mtu { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AmazonAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NewPrivateVirtualInterfaceAddressFamily AddressFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NewPrivateVirtualInterfaceAddressFamily
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv6 = 1,
	}
	
	/// <summary>
	/// Information about a public virtual interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewPublicVirtualInterface
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Vlan { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Asn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AmazonAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NewPublicVirtualInterfaceAddressFamily AddressFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteFilterPrefix[] RouteFilterPrefixes { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NewPublicVirtualInterfaceAddressFamily
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv6 = 1,
	}
	
	/// <summary>
	/// Information about a transit virtual interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewTransitVirtualInterface
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Vlan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Asn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Mtu { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AmazonAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NewTransitVirtualInterfaceAddressFamily AddressFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NewTransitVirtualInterfaceAddressFamily
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv6 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InterconnectState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requested = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		down = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoaContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		application/pdf = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DirectConnectGatewayState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DirectConnectGatewayAssociationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociated = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		updating = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DirectConnectGatewayAssociationProposalState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requested = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DirectConnectGatewayAttachmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		attaching = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		attached = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		detaching = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		detached = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DirectConnectGatewayAttachmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TransitVirtualInterface = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrivateVirtualInterface = 1,
	}
	
	/// <summary>
	/// Information about an attachment between a Direct Connect gateway and a virtual interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DirectConnectGatewayAttachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectConnectGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceOwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGatewayAttachmentAttachmentState AttachmentState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DirectConnectGatewayAttachmentAttachmentType AttachmentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateChangeError { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DirectConnectGatewayAttachmentAttachmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		attaching = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		attached = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		detaching = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		detached = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DirectConnectGatewayAttachmentAttachmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TransitVirtualInterface = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrivateVirtualInterface = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LagState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requested = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		down = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 6,
	}
	
	/// <summary>
	/// Information about an AWS Direct Connect location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Location
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LocationCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PortSpeed[] AvailablePortSpeeds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProviderName[] AvailableProviders { get; set; }
	}
	
	/// <summary>
	/// Information about a tag associated with an AWS Direct Connect resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceTag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Information about a route filter prefix that a customer can advertise through Border Gateway Protocol (BGP) over a public virtual interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RouteFilterPrefix
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Cidr { get; set; }
	}
	
	/// <summary>
	/// Information about the virtual interface failover test.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualInterfaceTestHistory
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BGPPeerId[] BgpPeers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TestDurationInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
	}
	
	/// <summary>
	/// Information about a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Information about a virtual private gateway for a private virtual interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VirtualGateway
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualGatewayState { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Accepts a proposal request to attach a virtual private gateway or transit gateway to a Direct Connect gateway.
		/// AcceptDirectConnectGatewayAssociationProposal /#X-Amz-Target=OvertureService.AcceptDirectConnectGatewayAssociationProposal
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AcceptDirectConnectGatewayAssociationProposalResult> AcceptDirectConnectGatewayAssociationProposalAsync(AcceptDirectConnectGatewayAssociationProposalRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.AcceptDirectConnectGatewayAssociationProposal";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AcceptDirectConnectGatewayAssociationProposalResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deprecated. Use <a>AllocateHostedConnection</a> instead.</p> <p>Creates a hosted connection on an interconnect.</p> <p>Allocates a VLAN number and a specified amount of bandwidth for use by a hosted connection on the specified interconnect.</p> <note> <p>Intended for use by AWS Direct Connect Partners only.</p> </note>
		/// AllocateConnectionOnInterconnect /#X-Amz-Target=OvertureService.AllocateConnectionOnInterconnect
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Connection> AllocateConnectionOnInterconnectAsync(AllocateConnectionOnInterconnectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.AllocateConnectionOnInterconnect";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Connection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a hosted connection on the specified interconnect or a link aggregation group (LAG) of interconnects.</p> <p>Allocates a VLAN number and a specified amount of capacity (bandwidth) for use by a hosted connection on the specified interconnect or LAG of interconnects. AWS polices the hosted connection for the specified capacity and the AWS Direct Connect Partner must also police the hosted connection for the specified capacity.</p> <note> <p>Intended for use by AWS Direct Connect Partners only.</p> </note>
		/// AllocateHostedConnection /#X-Amz-Target=OvertureService.AllocateHostedConnection
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Connection> AllocateHostedConnectionAsync(AllocateHostedConnectionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.AllocateHostedConnection";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Connection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Provisions a private virtual interface to be owned by the specified AWS account.</p> <p>Virtual interfaces created using this action must be confirmed by the owner using <a>ConfirmPrivateVirtualInterface</a>. Until then, the virtual interface is in the <code>Confirming</code> state and is not available to handle traffic.</p>
		/// AllocatePrivateVirtualInterface /#X-Amz-Target=OvertureService.AllocatePrivateVirtualInterface
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VirtualInterface> AllocatePrivateVirtualInterfaceAsync(AllocatePrivateVirtualInterfaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.AllocatePrivateVirtualInterface";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<VirtualInterface>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Provisions a public virtual interface to be owned by the specified AWS account.</p> <p>The owner of a connection calls this function to provision a public virtual interface to be owned by the specified AWS account.</p> <p>Virtual interfaces created using this function must be confirmed by the owner using <a>ConfirmPublicVirtualInterface</a>. Until this step has been completed, the virtual interface is in the <code>confirming</code> state and is not available to handle traffic.</p> <p>When creating an IPv6 public virtual interface, omit the Amazon address and customer address. IPv6 addresses are automatically assigned from the Amazon pool of IPv6 addresses; you cannot specify custom IPv6 addresses.</p>
		/// AllocatePublicVirtualInterface /#X-Amz-Target=OvertureService.AllocatePublicVirtualInterface
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VirtualInterface> AllocatePublicVirtualInterfaceAsync(AllocatePublicVirtualInterfaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.AllocatePublicVirtualInterface";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<VirtualInterface>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Provisions a transit virtual interface to be owned by the specified AWS account. Use this type of interface to connect a transit gateway to your Direct Connect gateway.</p> <p>The owner of a connection provisions a transit virtual interface to be owned by the specified AWS account.</p> <p>After you create a transit virtual interface, it must be confirmed by the owner using <a>ConfirmTransitVirtualInterface</a>. Until this step has been completed, the transit virtual interface is in the <code>requested</code> state and is not available to handle traffic.</p>
		/// AllocateTransitVirtualInterface /#X-Amz-Target=OvertureService.AllocateTransitVirtualInterface
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AllocateTransitVirtualInterfaceResult> AllocateTransitVirtualInterfaceAsync(AllocateTransitVirtualInterfaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.AllocateTransitVirtualInterface";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AllocateTransitVirtualInterfaceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Associates an existing connection with a link aggregation group (LAG). The connection is interrupted and re-established as a member of the LAG (connectivity to AWS is interrupted). The connection must be hosted on the same AWS Direct Connect endpoint as the LAG, and its bandwidth must match the bandwidth for the LAG. You can re-associate a connection that's currently associated with a different LAG; however, if removing the connection would cause the original LAG to fall below its setting for minimum number of operational connections, the request fails.</p> <p>Any virtual interfaces that are directly associated with the connection are automatically re-associated with the LAG. If the connection was originally associated with a different LAG, the virtual interfaces remain associated with the original LAG.</p> <p>For interconnects, any hosted connections are automatically re-associated with the LAG. If the interconnect was originally associated with a different LAG, the hosted connections remain associated with the original LAG.</p>
		/// AssociateConnectionWithLag /#X-Amz-Target=OvertureService.AssociateConnectionWithLag
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Connection> AssociateConnectionWithLagAsync(AssociateConnectionWithLagRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.AssociateConnectionWithLag";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Connection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a hosted connection and its virtual interfaces with a link aggregation group (LAG) or interconnect. If the target interconnect or LAG has an existing hosted connection with a conflicting VLAN number or IP address, the operation fails. This action temporarily interrupts the hosted connection's connectivity to AWS as it is being migrated.</p> <note> <p>Intended for use by AWS Direct Connect Partners only.</p> </note>
		/// AssociateHostedConnection /#X-Amz-Target=OvertureService.AssociateHostedConnection
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Connection> AssociateHostedConnectionAsync(AssociateHostedConnectionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.AssociateHostedConnection";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Connection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a virtual interface with a specified link aggregation group (LAG) or connection. Connectivity to AWS is temporarily interrupted as the virtual interface is being migrated. If the target connection or LAG has an associated virtual interface with a conflicting VLAN number or a conflicting IP address, the operation fails.</p> <p>Virtual interfaces associated with a hosted connection cannot be associated with a LAG; hosted connections must be migrated along with their virtual interfaces using <a>AssociateHostedConnection</a>.</p> <p>To reassociate a virtual interface to a new connection or LAG, the requester must own either the virtual interface itself or the connection to which the virtual interface is currently associated. Additionally, the requester must own the connection or LAG for the association.</p>
		/// AssociateVirtualInterface /#X-Amz-Target=OvertureService.AssociateVirtualInterface
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VirtualInterface> AssociateVirtualInterfaceAsync(AssociateVirtualInterfaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.AssociateVirtualInterface";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<VirtualInterface>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Confirms the creation of the specified hosted connection on an interconnect.</p> <p>Upon creation, the hosted connection is initially in the <code>Ordering</code> state, and remains in this state until the owner confirms creation of the hosted connection.</p>
		/// ConfirmConnection /#X-Amz-Target=OvertureService.ConfirmConnection
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ConfirmConnectionResponse> ConfirmConnectionAsync(ConfirmConnectionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.ConfirmConnection";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConfirmConnectionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Accepts ownership of a private virtual interface created by another AWS account.</p> <p>After the virtual interface owner makes this call, the virtual interface is created and attached to the specified virtual private gateway or Direct Connect gateway, and is made available to handle traffic.</p>
		/// ConfirmPrivateVirtualInterface /#X-Amz-Target=OvertureService.ConfirmPrivateVirtualInterface
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ConfirmPrivateVirtualInterfaceResponse> ConfirmPrivateVirtualInterfaceAsync(ConfirmPrivateVirtualInterfaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.ConfirmPrivateVirtualInterface";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConfirmPrivateVirtualInterfaceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Accepts ownership of a public virtual interface created by another AWS account.</p> <p>After the virtual interface owner makes this call, the specified virtual interface is created and made available to handle traffic.</p>
		/// ConfirmPublicVirtualInterface /#X-Amz-Target=OvertureService.ConfirmPublicVirtualInterface
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ConfirmPublicVirtualInterfaceResponse> ConfirmPublicVirtualInterfaceAsync(ConfirmPublicVirtualInterfaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.ConfirmPublicVirtualInterface";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConfirmPublicVirtualInterfaceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Accepts ownership of a transit virtual interface created by another AWS account.</p> <p> After the owner of the transit virtual interface makes this call, the specified transit virtual interface is created and made available to handle traffic.</p>
		/// ConfirmTransitVirtualInterface /#X-Amz-Target=OvertureService.ConfirmTransitVirtualInterface
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ConfirmTransitVirtualInterfaceResponse> ConfirmTransitVirtualInterfaceAsync(ConfirmTransitVirtualInterfaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.ConfirmTransitVirtualInterface";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConfirmTransitVirtualInterfaceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a BGP peer on the specified virtual interface.</p> <p>You must create a BGP peer for the corresponding address family (IPv4/IPv6) in order to access AWS resources that also use that address family.</p> <p>If logical redundancy is not supported by the connection, interconnect, or LAG, the BGP peer cannot be in the same address family as an existing BGP peer on the virtual interface.</p> <p>When creating a IPv6 BGP peer, omit the Amazon address and customer address. IPv6 addresses are automatically assigned from the Amazon pool of IPv6 addresses; you cannot specify custom IPv6 addresses.</p> <p>For a public virtual interface, the Autonomous System Number (ASN) must be private or already whitelisted for the virtual interface.</p>
		/// CreateBGPPeer /#X-Amz-Target=OvertureService.CreateBGPPeer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateBGPPeerResponse> CreateBGPPeerAsync(CreateBGPPeerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.CreateBGPPeer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateBGPPeerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a connection between a customer network and a specific AWS Direct Connect location.</p> <p>A connection links your internal network to an AWS Direct Connect location over a standard Ethernet fiber-optic cable. One end of the cable is connected to your router, the other to an AWS Direct Connect router.</p> <p>To find the locations for your Region, use <a>DescribeLocations</a>.</p> <p>You can automatically add the new connection to a link aggregation group (LAG) by specifying a LAG ID in the request. This ensures that the new connection is allocated on the same AWS Direct Connect endpoint that hosts the specified LAG. If there are no available ports on the endpoint, the request fails and no connection is created.</p>
		/// CreateConnection /#X-Amz-Target=OvertureService.CreateConnection
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Connection> CreateConnectionAsync(CreateConnectionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.CreateConnection";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Connection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a Direct Connect gateway, which is an intermediate object that enables you to connect a set of virtual interfaces and virtual private gateways. A Direct Connect gateway is global and visible in any AWS Region after it is created. The virtual interfaces and virtual private gateways that are connected through a Direct Connect gateway can be in different AWS Regions. This enables you to connect to a VPC in any Region, regardless of the Region in which the virtual interfaces are located, and pass traffic between them.
		/// CreateDirectConnectGateway /#X-Amz-Target=OvertureService.CreateDirectConnectGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDirectConnectGatewayResult> CreateDirectConnectGatewayAsync(CreateDirectConnectGatewayRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.CreateDirectConnectGateway";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDirectConnectGatewayResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an association between a Direct Connect gateway and a virtual private gateway. The virtual private gateway must be attached to a VPC and must not be associated with another Direct Connect gateway.
		/// CreateDirectConnectGatewayAssociation /#X-Amz-Target=OvertureService.CreateDirectConnectGatewayAssociation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDirectConnectGatewayAssociationResult> CreateDirectConnectGatewayAssociationAsync(CreateDirectConnectGatewayAssociationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.CreateDirectConnectGatewayAssociation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDirectConnectGatewayAssociationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a proposal to associate the specified virtual private gateway or transit gateway with the specified Direct Connect gateway.</p> <p>You can only associate a Direct Connect gateway and virtual private gateway or transit gateway when the account that owns the Direct Connect gateway and the account that owns the virtual private gateway or transit gateway have the same AWS Payer ID.</p>
		/// CreateDirectConnectGatewayAssociationProposal /#X-Amz-Target=OvertureService.CreateDirectConnectGatewayAssociationProposal
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDirectConnectGatewayAssociationProposalResult> CreateDirectConnectGatewayAssociationProposalAsync(CreateDirectConnectGatewayAssociationProposalRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.CreateDirectConnectGatewayAssociationProposal";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDirectConnectGatewayAssociationProposalResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an interconnect between an AWS Direct Connect Partner's network and a specific AWS Direct Connect location.</p> <p>An interconnect is a connection that is capable of hosting other connections. The AWS Direct Connect partner can use an interconnect to provide AWS Direct Connect hosted connections to customers through their own network services. Like a standard connection, an interconnect links the partner's network to an AWS Direct Connect location over a standard Ethernet fiber-optic cable. One end is connected to the partner's router, the other to an AWS Direct Connect router.</p> <p>You can automatically add the new interconnect to a link aggregation group (LAG) by specifying a LAG ID in the request. This ensures that the new interconnect is allocated on the same AWS Direct Connect endpoint that hosts the specified LAG. If there are no available ports on the endpoint, the request fails and no interconnect is created.</p> <p>For each end customer, the AWS Direct Connect Partner provisions a connection on their interconnect by calling <a>AllocateHostedConnection</a>. The end customer can then connect to AWS resources by creating a virtual interface on their connection, using the VLAN assigned to them by the AWS Direct Connect Partner.</p> <note> <p>Intended for use by AWS Direct Connect Partners only.</p> </note>
		/// CreateInterconnect /#X-Amz-Target=OvertureService.CreateInterconnect
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Interconnect> CreateInterconnectAsync(CreateInterconnectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.CreateInterconnect";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Interconnect>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a link aggregation group (LAG) with the specified number of bundled physical connections between the customer network and a specific AWS Direct Connect location. A LAG is a logical interface that uses the Link Aggregation Control Protocol (LACP) to aggregate multiple interfaces, enabling you to treat them as a single interface.</p> <p>All connections in a LAG must use the same bandwidth and must terminate at the same AWS Direct Connect endpoint.</p> <p>You can have up to 10 connections per LAG. Regardless of this limit, if you request more connections for the LAG than AWS Direct Connect can allocate on a single endpoint, no LAG is created.</p> <p>You can specify an existing physical connection or interconnect to include in the LAG (which counts towards the total number of connections). Doing so interrupts the current physical connection or hosted connections, and re-establishes them as a member of the LAG. The LAG will be created on the same AWS Direct Connect endpoint to which the connection terminates. Any virtual interfaces associated with the connection are automatically disassociated and re-associated with the LAG. The connection ID does not change.</p> <p>If the AWS account used to create a LAG is a registered AWS Direct Connect Partner, the LAG is automatically enabled to host sub-connections. For a LAG owned by a partner, any associated virtual interfaces cannot be directly configured.</p>
		/// CreateLag /#X-Amz-Target=OvertureService.CreateLag
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Lag> CreateLagAsync(CreateLagRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.CreateLag";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Lag>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a private virtual interface. A virtual interface is the VLAN that transports AWS Direct Connect traffic. A private virtual interface can be connected to either a Direct Connect gateway or a Virtual Private Gateway (VGW). Connecting the private virtual interface to a Direct Connect gateway enables the possibility for connecting to multiple VPCs, including VPCs in different AWS Regions. Connecting the private virtual interface to a VGW only provides access to a single VPC within the same Region.</p> <p>Setting the MTU of a virtual interface to 9001 (jumbo frames) can cause an update to the underlying physical connection if it wasn't updated to support jumbo frames. Updating the connection disrupts network connectivity for all virtual interfaces associated with the connection for up to 30 seconds. To check whether your connection supports jumbo frames, call <a>DescribeConnections</a>. To check whether your virtual interface supports jumbo frames, call <a>DescribeVirtualInterfaces</a>.</p>
		/// CreatePrivateVirtualInterface /#X-Amz-Target=OvertureService.CreatePrivateVirtualInterface
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VirtualInterface> CreatePrivateVirtualInterfaceAsync(CreatePrivateVirtualInterfaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.CreatePrivateVirtualInterface";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<VirtualInterface>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a public virtual interface. A virtual interface is the VLAN that transports AWS Direct Connect traffic. A public virtual interface supports sending traffic to public services of AWS such as Amazon S3.</p> <p>When creating an IPv6 public virtual interface (<code>addressFamily</code> is <code>ipv6</code>), leave the <code>customer</code> and <code>amazon</code> address fields blank to use auto-assigned IPv6 space. Custom IPv6 addresses are not supported.</p>
		/// CreatePublicVirtualInterface /#X-Amz-Target=OvertureService.CreatePublicVirtualInterface
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VirtualInterface> CreatePublicVirtualInterfaceAsync(CreatePublicVirtualInterfaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.CreatePublicVirtualInterface";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<VirtualInterface>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a transit virtual interface. A transit virtual interface should be used to access one or more transit gateways associated with Direct Connect gateways. A transit virtual interface enables the connection of multiple VPCs attached to a transit gateway to a Direct Connect gateway.</p> <important> <p>If you associate your transit gateway with one or more Direct Connect gateways, the Autonomous System Number (ASN) used by the transit gateway and the Direct Connect gateway must be different. For example, if you use the default ASN 64512 for both your the transit gateway and Direct Connect gateway, the association request fails.</p> </important> <p>Setting the MTU of a virtual interface to 8500 (jumbo frames) can cause an update to the underlying physical connection if it wasn't updated to support jumbo frames. Updating the connection disrupts network connectivity for all virtual interfaces associated with the connection for up to 30 seconds. To check whether your connection supports jumbo frames, call <a>DescribeConnections</a>. To check whether your virtual interface supports jumbo frames, call <a>DescribeVirtualInterfaces</a>.</p>
		/// CreateTransitVirtualInterface /#X-Amz-Target=OvertureService.CreateTransitVirtualInterface
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTransitVirtualInterfaceResult> CreateTransitVirtualInterfaceAsync(CreateTransitVirtualInterfaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.CreateTransitVirtualInterface";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateTransitVirtualInterfaceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified BGP peer on the specified virtual interface with the specified customer address and ASN.</p> <p>You cannot delete the last BGP peer from a virtual interface.</p>
		/// DeleteBGPPeer /#X-Amz-Target=OvertureService.DeleteBGPPeer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteBGPPeerResponse> DeleteBGPPeerAsync(DeleteBGPPeerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DeleteBGPPeer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteBGPPeerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified connection.</p> <p>Deleting a connection only stops the AWS Direct Connect port hour and data transfer charges. If you are partnering with any third parties to connect with the AWS Direct Connect location, you must cancel your service with them separately.</p>
		/// DeleteConnection /#X-Amz-Target=OvertureService.DeleteConnection
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Connection> DeleteConnectionAsync(DeleteConnectionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DeleteConnection";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Connection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Direct Connect gateway. You must first delete all virtual interfaces that are attached to the Direct Connect gateway and disassociate all virtual private gateways associated with the Direct Connect gateway.
		/// DeleteDirectConnectGateway /#X-Amz-Target=OvertureService.DeleteDirectConnectGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDirectConnectGatewayResult> DeleteDirectConnectGatewayAsync(DeleteDirectConnectGatewayRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DeleteDirectConnectGateway";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDirectConnectGatewayResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the association between the specified Direct Connect gateway and virtual private gateway.</p> <p>We recommend that you specify the <code>associationID</code> to delete the association. Alternatively, if you own virtual gateway and a Direct Connect gateway association, you can specify the <code>virtualGatewayId</code> and <code>directConnectGatewayId</code> to delete an association.</p>
		/// DeleteDirectConnectGatewayAssociation /#X-Amz-Target=OvertureService.DeleteDirectConnectGatewayAssociation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDirectConnectGatewayAssociationResult> DeleteDirectConnectGatewayAssociationAsync(DeleteDirectConnectGatewayAssociationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DeleteDirectConnectGatewayAssociation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDirectConnectGatewayAssociationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the association proposal request between the specified Direct Connect gateway and virtual private gateway or transit gateway.
		/// DeleteDirectConnectGatewayAssociationProposal /#X-Amz-Target=OvertureService.DeleteDirectConnectGatewayAssociationProposal
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDirectConnectGatewayAssociationProposalResult> DeleteDirectConnectGatewayAssociationProposalAsync(DeleteDirectConnectGatewayAssociationProposalRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DeleteDirectConnectGatewayAssociationProposal";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDirectConnectGatewayAssociationProposalResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified interconnect.</p> <note> <p>Intended for use by AWS Direct Connect Partners only.</p> </note>
		/// DeleteInterconnect /#X-Amz-Target=OvertureService.DeleteInterconnect
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteInterconnectResponse> DeleteInterconnectAsync(DeleteInterconnectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DeleteInterconnect";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteInterconnectResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified link aggregation group (LAG). You cannot delete a LAG if it has active virtual interfaces or hosted connections.
		/// DeleteLag /#X-Amz-Target=OvertureService.DeleteLag
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Lag> DeleteLagAsync(DeleteLagRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DeleteLag";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Lag>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a virtual interface.
		/// DeleteVirtualInterface /#X-Amz-Target=OvertureService.DeleteVirtualInterface
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteVirtualInterfaceResponse> DeleteVirtualInterfaceAsync(DeleteVirtualInterfaceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DeleteVirtualInterface";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteVirtualInterfaceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deprecated. Use <a>DescribeLoa</a> instead.</p> <p>Gets the LOA-CFA for a connection.</p> <p>The Letter of Authorization - Connecting Facility Assignment (LOA-CFA) is a document that your APN partner or service provider uses when establishing your cross connect to AWS at the colocation facility. For more information, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/Colocation.html">Requesting Cross Connects at AWS Direct Connect Locations</a> in the <i>AWS Direct Connect User Guide</i>.</p>
		/// DescribeConnectionLoa /#X-Amz-Target=OvertureService.DescribeConnectionLoa
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeConnectionLoaResponse> DescribeConnectionLoaAsync(DescribeConnectionLoaRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DescribeConnectionLoa";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeConnectionLoaResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Displays the specified connection or all connections in this Region.
		/// DescribeConnections /#X-Amz-Target=OvertureService.DescribeConnections
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Connections> DescribeConnectionsAsync(DescribeConnectionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DescribeConnections";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Connections>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deprecated. Use <a>DescribeHostedConnections</a> instead.</p> <p>Lists the connections that have been provisioned on the specified interconnect.</p> <note> <p>Intended for use by AWS Direct Connect Partners only.</p> </note>
		/// DescribeConnectionsOnInterconnect /#X-Amz-Target=OvertureService.DescribeConnectionsOnInterconnect
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Connections> DescribeConnectionsOnInterconnectAsync(DescribeConnectionsOnInterconnectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DescribeConnectionsOnInterconnect";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Connections>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes one or more association proposals for connection between a virtual private gateway or transit gateway and a Direct Connect gateway.
		/// DescribeDirectConnectGatewayAssociationProposals /#X-Amz-Target=OvertureService.DescribeDirectConnectGatewayAssociationProposals
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDirectConnectGatewayAssociationProposalsResult> DescribeDirectConnectGatewayAssociationProposalsAsync(DescribeDirectConnectGatewayAssociationProposalsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DescribeDirectConnectGatewayAssociationProposals";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDirectConnectGatewayAssociationProposalsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the associations between your Direct Connect gateways and virtual private gateways. You must specify a Direct Connect gateway, a virtual private gateway, or both. If you specify a Direct Connect gateway, the response contains all virtual private gateways associated with the Direct Connect gateway. If you specify a virtual private gateway, the response contains all Direct Connect gateways associated with the virtual private gateway. If you specify both, the response contains the association between the Direct Connect gateway and the virtual private gateway.
		/// DescribeDirectConnectGatewayAssociations /#X-Amz-Target=OvertureService.DescribeDirectConnectGatewayAssociations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDirectConnectGatewayAssociationsResult> DescribeDirectConnectGatewayAssociationsAsync(DescribeDirectConnectGatewayAssociationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DescribeDirectConnectGatewayAssociations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDirectConnectGatewayAssociationsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the attachments between your Direct Connect gateways and virtual interfaces. You must specify a Direct Connect gateway, a virtual interface, or both. If you specify a Direct Connect gateway, the response contains all virtual interfaces attached to the Direct Connect gateway. If you specify a virtual interface, the response contains all Direct Connect gateways attached to the virtual interface. If you specify both, the response contains the attachment between the Direct Connect gateway and the virtual interface.
		/// DescribeDirectConnectGatewayAttachments /#X-Amz-Target=OvertureService.DescribeDirectConnectGatewayAttachments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDirectConnectGatewayAttachmentsResult> DescribeDirectConnectGatewayAttachmentsAsync(DescribeDirectConnectGatewayAttachmentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DescribeDirectConnectGatewayAttachments";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDirectConnectGatewayAttachmentsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all your Direct Connect gateways or only the specified Direct Connect gateway. Deleted Direct Connect gateways are not returned.
		/// DescribeDirectConnectGateways /#X-Amz-Target=OvertureService.DescribeDirectConnectGateways
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDirectConnectGatewaysResult> DescribeDirectConnectGatewaysAsync(DescribeDirectConnectGatewaysRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DescribeDirectConnectGateways";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDirectConnectGatewaysResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the hosted connections that have been provisioned on the specified interconnect or link aggregation group (LAG).</p> <note> <p>Intended for use by AWS Direct Connect Partners only.</p> </note>
		/// DescribeHostedConnections /#X-Amz-Target=OvertureService.DescribeHostedConnections
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Connections> DescribeHostedConnectionsAsync(DescribeHostedConnectionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DescribeHostedConnections";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Connections>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deprecated. Use <a>DescribeLoa</a> instead.</p> <p>Gets the LOA-CFA for the specified interconnect.</p> <p>The Letter of Authorization - Connecting Facility Assignment (LOA-CFA) is a document that is used when establishing your cross connect to AWS at the colocation facility. For more information, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/Colocation.html">Requesting Cross Connects at AWS Direct Connect Locations</a> in the <i>AWS Direct Connect User Guide</i>.</p>
		/// DescribeInterconnectLoa /#X-Amz-Target=OvertureService.DescribeInterconnectLoa
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeInterconnectLoaResponse> DescribeInterconnectLoaAsync(DescribeInterconnectLoaRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DescribeInterconnectLoa";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeInterconnectLoaResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the interconnects owned by the AWS account or only the specified interconnect.
		/// DescribeInterconnects /#X-Amz-Target=OvertureService.DescribeInterconnects
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Interconnects> DescribeInterconnectsAsync(DescribeInterconnectsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DescribeInterconnects";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Interconnects>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes all your link aggregation groups (LAG) or the specified LAG.
		/// DescribeLags /#X-Amz-Target=OvertureService.DescribeLags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Lags> DescribeLagsAsync(DescribeLagsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DescribeLags";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Lags>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the LOA-CFA for a connection, interconnect, or link aggregation group (LAG).</p> <p>The Letter of Authorization - Connecting Facility Assignment (LOA-CFA) is a document that is used when establishing your cross connect to AWS at the colocation facility. For more information, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/Colocation.html">Requesting Cross Connects at AWS Direct Connect Locations</a> in the <i>AWS Direct Connect User Guide</i>.</p>
		/// DescribeLoa /#X-Amz-Target=OvertureService.DescribeLoa
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Loa> DescribeLoaAsync(DescribeLoaRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DescribeLoa";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Loa>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the AWS Direct Connect locations in the current AWS Region. These are the locations that can be selected when calling <a>CreateConnection</a> or <a>CreateInterconnect</a>.
		/// DescribeLocations /#X-Amz-Target=OvertureService.DescribeLocations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Locations> DescribeLocationsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DescribeLocations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Locations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the tags associated with the specified AWS Direct Connect resources.
		/// DescribeTags /#X-Amz-Target=OvertureService.DescribeTags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeTagsResponse> DescribeTagsAsync(DescribeTagsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DescribeTags";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeTagsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the virtual private gateways owned by the AWS account.</p> <p>You can create one or more AWS Direct Connect private virtual interfaces linked to a virtual private gateway.</p>
		/// DescribeVirtualGateways /#X-Amz-Target=OvertureService.DescribeVirtualGateways
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VirtualGateways> DescribeVirtualGatewaysAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DescribeVirtualGateways";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<VirtualGateways>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Displays all virtual interfaces for an AWS account. Virtual interfaces deleted fewer than 15 minutes before you make the request are also returned. If you specify a connection ID, only the virtual interfaces associated with the connection are returned. If you specify a virtual interface ID, then only a single virtual interface is returned.</p> <p>A virtual interface (VLAN) transmits the traffic between the AWS Direct Connect location and the customer network.</p>
		/// DescribeVirtualInterfaces /#X-Amz-Target=OvertureService.DescribeVirtualInterfaces
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VirtualInterfaces> DescribeVirtualInterfacesAsync(DescribeVirtualInterfacesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DescribeVirtualInterfaces";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<VirtualInterfaces>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates a connection from a link aggregation group (LAG). The connection is interrupted and re-established as a standalone connection (the connection is not deleted; to delete the connection, use the <a>DeleteConnection</a> request). If the LAG has associated virtual interfaces or hosted connections, they remain associated with the LAG. A disassociated connection owned by an AWS Direct Connect Partner is automatically converted to an interconnect.</p> <p>If disassociating the connection would cause the LAG to fall below its setting for minimum number of operational connections, the request fails, except when it's the last member of the LAG. If all connections are disassociated, the LAG continues to exist as an empty LAG with no physical connections. </p>
		/// DisassociateConnectionFromLag /#X-Amz-Target=OvertureService.DisassociateConnectionFromLag
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Connection> DisassociateConnectionFromLagAsync(DisassociateConnectionFromLagRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.DisassociateConnectionFromLag";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Connection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the virtual interface failover test history.
		/// ListVirtualInterfaceTestHistory /#X-Amz-Target=OvertureService.ListVirtualInterfaceTestHistory
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListVirtualInterfaceTestHistoryResponse> ListVirtualInterfaceTestHistoryAsync(ListVirtualInterfaceTestHistoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.ListVirtualInterfaceTestHistory";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListVirtualInterfaceTestHistoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts the virtual interface failover test that verifies your configuration meets your resiliency requirements by placing the BGP peering session in the DOWN state. You can then send traffic to verify that there are no outages.</p> <p>You can run the test on public, private, transit, and hosted virtual interfaces.</p> <p>You can use <a href="https://docs.aws.amazon.com/directconnect/latest/APIReference/API_ListVirtualInterfaceTestHistory.html">ListVirtualInterfaceTestHistory</a> to view the virtual interface test history.</p> <p>If you need to stop the test before the test interval completes, use <a href="https://docs.aws.amazon.com/directconnect/latest/APIReference/API_StopBgpFailoverTest.html">StopBgpFailoverTest</a>.</p>
		/// StartBgpFailoverTest /#X-Amz-Target=OvertureService.StartBgpFailoverTest
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartBgpFailoverTestResponse> StartBgpFailoverTestAsync(StartBgpFailoverTestRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.StartBgpFailoverTest";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartBgpFailoverTestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops the virtual interface failover test.
		/// StopBgpFailoverTest /#X-Amz-Target=OvertureService.StopBgpFailoverTest
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopBgpFailoverTestResponse> StopBgpFailoverTestAsync(StopBgpFailoverTestRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.StopBgpFailoverTest";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopBgpFailoverTestResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Adds the specified tags to the specified AWS Direct Connect resource. Each resource can have a maximum of 50 tags.</p> <p>Each tag consists of a key and an optional value. If a tag with the same key is already associated with the resource, this action updates its value.</p>
		/// TagResource /#X-Amz-Target=OvertureService.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.TagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes one or more tags from the specified AWS Direct Connect resource.
		/// UntagResource /#X-Amz-Target=OvertureService.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.UntagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified attributes of the Direct Connect gateway association.</p> <p>Add or remove prefixes from the association.</p>
		/// UpdateDirectConnectGatewayAssociation /#X-Amz-Target=OvertureService.UpdateDirectConnectGatewayAssociation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDirectConnectGatewayAssociationResult> UpdateDirectConnectGatewayAssociationAsync(UpdateDirectConnectGatewayAssociationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.UpdateDirectConnectGatewayAssociation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDirectConnectGatewayAssociationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the attributes of the specified link aggregation group (LAG).</p> <p>You can update the following attributes:</p> <ul> <li> <p>The name of the LAG.</p> </li> <li> <p>The value for the minimum number of connections that must be operational for the LAG itself to be operational. </p> </li> </ul> <p>When you create a LAG, the default value for the minimum number of operational connections is zero (0). If you update this value and the number of operational connections falls below the specified value, the LAG automatically goes down to avoid over-utilization of the remaining connections. Adjust this value with care, as it could force the LAG down if it is set higher than the current number of operational connections.</p>
		/// UpdateLag /#X-Amz-Target=OvertureService.UpdateLag
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Lag> UpdateLagAsync(UpdateLagRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.UpdateLag";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Lag>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified attributes of the specified virtual private interface.</p> <p>Setting the MTU of a virtual interface to 9001 (jumbo frames) can cause an update to the underlying physical connection if it wasn't updated to support jumbo frames. Updating the connection disrupts network connectivity for all virtual interfaces associated with the connection for up to 30 seconds. To check whether your connection supports jumbo frames, call <a>DescribeConnections</a>. To check whether your virtual q interface supports jumbo frames, call <a>DescribeVirtualInterfaces</a>.</p>
		/// UpdateVirtualInterfaceAttributes /#X-Amz-Target=OvertureService.UpdateVirtualInterfaceAttributes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VirtualInterface> UpdateVirtualInterfaceAttributesAsync(UpdateVirtualInterfaceAttributesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=OvertureService.UpdateVirtualInterfaceAttributes";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<VirtualInterface>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
