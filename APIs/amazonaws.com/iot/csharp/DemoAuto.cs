//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateTargetsWithJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string JobId { get; set; }
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string JobId { get; set; }
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAuthorizerResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w=,@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string AuthorizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerArn { get; set; }
	}
	
	/// <summary>
	/// A set of key/value pairs that are used to manage the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBillingGroupResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string BillingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingGroupArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string BillingGroupId { get; set; }
	}
	
	/// <summary>
	/// The output from the CreateCertificateFromCsr operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateCertificateFromCsrResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 64
		/// Pattern: (0x)?[a-fA-F0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=64)]
		public string CertificateId { get; set; }
		
		/// <summary>
		/// The PEM of a certificate.
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string CertificatePem { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDimensionResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDomainConfigurationResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w.-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DomainConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainConfigurationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDynamicThingGroupResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingGroupArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingGroupId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string QueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QueryVersion { get; set; }
	}
	
	/// <summary>
	/// The attribute payload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttributePayload
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Merge { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string JobId { get; set; }
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Allows you to create an exponential rate of rollout for a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExponentialRolloutRate
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public int BaseRatePerMinute { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 5)]
		public double IncrementFactor { get; set; }
		
		/// <summary>
		/// Allows you to define a criteria to initiate the increase in rate of rollout for a job.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RateIncreaseCriteria RateIncreaseCriteria { get; set; }
	}
	
	/// <summary>
	/// The output of the CreateKeysAndCertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateKeysAndCertificateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 64
		/// Pattern: (0x)?[a-fA-F0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=64)]
		public string CertificateId { get; set; }
		
		/// <summary>
		/// The PEM of a certificate.
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string CertificatePem { get; set; }
		
		/// <summary>
		/// Describes a key pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KeyPair KeyPair { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMitigationActionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionId { get; set; }
	}
	
	/// <summary>
	/// Parameters to define a mitigation action that changes the state of the device certificate to inactive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDeviceCertificateParams
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateDeviceCertificateParamsAction Action { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateDeviceCertificateParamsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEACTIVATE = 0,
	}
	
	/// <summary>
	/// Parameters to define a mitigation action that changes the state of the CA certificate to inactive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateCACertificateParams
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateCACertificateParamsAction Action { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateCACertificateParamsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEACTIVATE = 0,
	}
	
	/// <summary>
	/// Parameters used when defining a mitigation action that move a set of things to a thing group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddThingsToThingGroupParams
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public ThingGroupName[] ThingGroupNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverrideDynamicGroups { get; set; }
	}
	
	/// <summary>
	/// Parameters to define a mitigation action that adds a blank policy to restrict permissions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplaceDefaultPolicyVersionParams
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReplaceDefaultPolicyVersionParamsTemplateName TemplateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReplaceDefaultPolicyVersionParamsTemplateName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLANK_POLICY = 0,
	}
	
	/// <summary>
	/// Parameters used when defining a mitigation action that enable AWS IoT logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableIoTLoggingParams
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArnForLogging { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EnableIoTLoggingParamsLogLevel LogLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EnableIoTLoggingParamsLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	/// <summary>
	/// Parameters to define a mitigation action that publishes findings to Amazon SNS. You can implement your own custom actions in response to the Amazon SNS messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PublishFindingToSnsParams
	{
		
		/// <summary>
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(350)]
		public string TopicArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateOTAUpdateResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string OtaUpdateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsIotJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OtaUpdateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsIotJobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateOTAUpdateResponseOtaUpdateStatus OtaUpdateStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateOTAUpdateResponseOtaUpdateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_COMPLETE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Protocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MQTT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 1,
	}
	
	/// <summary>
	/// Describes a file to be associated with an OTA update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OTAUpdateFile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FileVersion { get; set; }
		
		/// <summary>
		/// The location of the OTA update.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FileLocation FileLocation { get; set; }
		
		/// <summary>
		/// Describes the method to use when code signing a file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CodeSigning CodeSigning { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributesMap Attributes { get; set; }
	}
	
	/// <summary>
	/// The output from the CreatePolicy operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePolicyResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+=,.@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
		
		/// <summary>
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PolicyVersionId { get; set; }
	}
	
	/// <summary>
	/// The output of the CreatePolicyVersion operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePolicyVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
		
		/// <summary>
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PolicyVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefaultVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProvisioningClaimResponse
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 64
		/// Pattern: (0x)?[a-fA-F0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=64)]
		public string CertificateId { get; set; }
		
		/// <summary>
		/// The PEM of a certificate.
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string CertificatePem { get; set; }
		
		/// <summary>
		/// Describes a key pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KeyPair KeyPair { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Expiration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProvisioningTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateArn { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 1
		/// Pattern: ^[0-9A-Za-z_-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultVersionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProvisioningTemplateVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateArn { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 1
		/// Pattern: ^[0-9A-Za-z_-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefaultVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRoleAliasResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w=,@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string RoleAlias { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string RoleAliasArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateScheduledAuditResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledAuditArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSecurityProfileResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string SecurityProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecurityProfileArn { get; set; }
	}
	
	/// <summary>
	/// A Device Defender security profile behavior.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Behavior
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Metric { get; set; }
		
		/// <summary>
		/// The dimension of a metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetricDimension MetricDimension { get; set; }
		
		/// <summary>
		/// The criteria by which the behavior is determined to be normal.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BehaviorCriteria Criteria { get; set; }
	}
	
	/// <summary>
	/// A structure containing the alert target ARN and the role ARN.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AlertTarget
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlertTargetArn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// The metric you want to retain. Dimensions are optional.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MetricToRetain
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Metric { get; set; }
		
		/// <summary>
		/// The dimension of a metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetricDimension MetricDimension { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateStreamResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string StreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamArn { get; set; }
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> StreamVersion { get; set; }
	}
	
	/// <summary>
	/// Represents a file to stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StreamFile
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> FileId { get; set; }
		
		/// <summary>
		/// The S3 location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Location S3Location { get; set; }
	}
	
	/// <summary>
	/// The output of the CreateThing operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateThingResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateThingGroupResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingGroupArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingGroupId { get; set; }
	}
	
	/// <summary>
	/// The output of the CreateThingType operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateThingTypeResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingTypeArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingTypeId { get; set; }
	}
	
	/// <summary>
	/// Describes the actions associated with a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Action
	{
		
		/// <summary>
		/// <p>Describes an action to write to a DynamoDB table.</p> <p>The <code>tableName</code>, <code>hashKeyField</code>, and <code>rangeKeyField</code> values must match the values used when you created the table.</p> <p>The <code>hashKeyValue</code> and <code>rangeKeyvalue</code> fields use a substitution template syntax. These templates provide data at runtime. The syntax is as follows: ${<i>sql-expression</i>}.</p> <p>You can specify any valid expression in a WHERE or SELECT clause, including JSON properties, comparisons, calculations, and functions. For example, the following field uses the third level of the topic:</p> <p> <code>"hashKeyValue": "${topic(3)}"</code> </p> <p>The following field uses the timestamp:</p> <p> <code>"rangeKeyValue": "${timestamp()}"</code> </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DynamoDBAction DynamoDB { get; set; }
		
		/// <summary>
		/// <p>Describes an action to write to a DynamoDB table.</p> <p>This DynamoDB action writes each attribute in the message payload into it's own column in the DynamoDB table.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DynamoDBv2Action DynamoDBv2 { get; set; }
		
		/// <summary>
		/// Describes an action to invoke a Lambda function.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LambdaAction Lambda { get; set; }
		
		/// <summary>
		/// Describes an action to publish to an Amazon SNS topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SnsAction Sns { get; set; }
		
		/// <summary>
		/// Describes an action to publish data to an Amazon SQS queue.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SqsAction Sqs { get; set; }
		
		/// <summary>
		/// Describes an action to write data to an Amazon Kinesis stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KinesisAction Kinesis { get; set; }
		
		/// <summary>
		/// Describes an action to republish to another topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RepublishAction Republish { get; set; }
		
		/// <summary>
		/// Describes an action to write data to an Amazon S3 bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Action S3 { get; set; }
		
		/// <summary>
		/// Describes an action that writes data to an Amazon Kinesis Firehose stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FirehoseAction Firehose { get; set; }
		
		/// <summary>
		/// Describes an action that captures a CloudWatch metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudwatchMetricAction CloudwatchMetric { get; set; }
		
		/// <summary>
		/// Describes an action that updates a CloudWatch alarm.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudwatchAlarmAction CloudwatchAlarm { get; set; }
		
		/// <summary>
		/// Describes an action that sends data to CloudWatch Logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudwatchLogsAction CloudwatchLogs { get; set; }
		
		/// <summary>
		/// Describes an action that writes data to an Amazon Elasticsearch Service domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ElasticsearchAction Elasticsearch { get; set; }
		
		/// <summary>
		/// Describes an action to write a message to a Salesforce IoT Cloud Input Stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SalesforceAction Salesforce { get; set; }
		
		/// <summary>
		/// Sends message data to an AWS IoT Analytics channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IotAnalyticsAction IotAnalytics { get; set; }
		
		/// <summary>
		/// Sends an input to an AWS IoT Events detector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IotEventsAction IotEvents { get; set; }
		
		/// <summary>
		/// Describes an action to send data from an MQTT message that triggered the rule to AWS IoT SiteWise asset properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IotSiteWiseAction IotSiteWise { get; set; }
		
		/// <summary>
		/// Starts execution of a Step Functions state machine.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StepFunctionsAction StepFunctions { get; set; }
		
		/// <summary>
		/// Send data to an HTTPS endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HttpAction Http { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTopicRuleDestinationResponse
	{
		
		/// <summary>
		/// A topic rule destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TopicRuleDestination TopicRuleDestination { get; set; }
	}
	
	/// <summary>
	/// HTTP URL destination configuration used by the topic rule's HTTP action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HttpUrlDestinationConfiguration
	{
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string ConfirmationUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAccountAuditConfigurationResponse
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuditNotificationTargetConfigurations AuditNotificationTargetConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuditCheckConfigurations AuditCheckConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAuditFindingResponse
	{
		
		/// <summary>
		/// The findings (results) of the audit.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuditFinding Finding { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAuditMitigationActionsTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeAuditMitigationActionsTaskResponseTaskStatus TaskStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuditMitigationActionsTaskStatistics TaskStatistics { get; set; }
		
		/// <summary>
		/// Used in MitigationActionParams, this information identifies the target findings to which the mitigation actions are applied. Only one entry appears.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuditMitigationActionsTaskTarget Target { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuditCheckToActionsMapping AuditCheckToActionsMapping { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MitigationAction[] ActionsDefinition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeAuditMitigationActionsTaskResponseTaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAuditTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeAuditTaskResponseTaskStatus TaskStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeAuditTaskResponseTaskType TaskType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TaskStartTime { get; set; }
		
		/// <summary>
		/// Statistics for the checks performed during the audit.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TaskStatistics TaskStatistics { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ScheduledAuditName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuditDetails AuditDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeAuditTaskResponseTaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeAuditTaskResponseTaskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND_AUDIT_TASK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED_AUDIT_TASK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAuthorizerResponse
	{
		
		/// <summary>
		/// The authorizer description.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthorizerDescription AuthorizerDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeBillingGroupResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string BillingGroupName { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string BillingGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		/// <summary>
		/// The properties of a billing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BillingGroupProperties BillingGroupProperties { get; set; }
		
		/// <summary>
		/// Additional information about the billing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BillingGroupMetadata BillingGroupMetadata { get; set; }
	}
	
	/// <summary>
	/// The output from the DescribeCACertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeCACertificateResponse
	{
		
		/// <summary>
		/// Describes a CA certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CACertificateDescription CertificateDescription { get; set; }
		
		/// <summary>
		/// The registration configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RegistrationConfig RegistrationConfig { get; set; }
	}
	
	/// <summary>
	/// The output of the DescribeCertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeCertificateResponse
	{
		
		/// <summary>
		/// Describes a certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CertificateDescription CertificateDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDefaultAuthorizerResponse
	{
		
		/// <summary>
		/// The authorizer description.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthorizerDescription AuthorizerDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDimensionResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeDimensionResponseType Type { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DimensionStringValue[] StringValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeDimensionResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOPIC_FILTER = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDomainConfigurationResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w.:-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DomainConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainConfigurationArn { get; set; }
		
		/// <summary>
		/// Max length: 253
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(253, MinimumLength=1)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServerCertificateSummary[] ServerCertificates { get; set; }
		
		/// <summary>
		/// An object that specifies the authorization service for a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthorizerConfig AuthorizerConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeDomainConfigurationResponseDomainConfigurationStatus DomainConfigurationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeDomainConfigurationResponseServiceType ServiceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeDomainConfigurationResponseDomainType DomainType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeDomainConfigurationResponseDomainConfigurationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeDomainConfigurationResponseServiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDENTIAL_PROVIDER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOBS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeDomainConfigurationResponseDomainType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENDPOINT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_MANAGED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_MANAGED = 2,
	}
	
	/// <summary>
	/// The output from the DescribeEndpoint operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEventConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventConfigurations EventConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIndexResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IndexName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeIndexResponseIndexStatus IndexStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeIndexResponseIndexStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REBUILDING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeJobResponse
	{
		
		/// <summary>
		/// Max length: 1350
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1350, MinimumLength=1)]
		public string DocumentSource { get; set; }
		
		/// <summary>
		/// The <code>Job</code> object contains details about a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Job Job { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeJobExecutionResponse
	{
		
		/// <summary>
		/// The job execution object represents the execution of a job on a particular device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobExecution Execution { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMitigationActionResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeMitigationActionResponseActionType ActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MitigationActionParams ActionParams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeMitigationActionResponseActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_DEVICE_CERTIFICATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_CA_CERTIFICATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD_THINGS_TO_THING_GROUP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLACE_DEFAULT_POLICY_VERSION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLE_IOT_LOGGING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISH_FINDING_TO_SNS = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeProvisioningTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateArn { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 1
		/// Pattern: ^[0-9A-Za-z_-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [^\p{C}]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ProvisioningRoleArn { get; set; }
		
		/// <summary>
		/// Structure that contains <code>payloadVersion</code> and <code>targetArn</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningHook PreProvisioningHook { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeProvisioningTemplateVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefaultVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRoleAliasResponse
	{
		
		/// <summary>
		/// Role alias description.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RoleAliasDescription RoleAliasDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeScheduledAuditResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeScheduledAuditResponseFrequency Frequency { get; set; }
		
		/// <summary>
		/// Pattern: ^([1-9]|[12][0-9]|3[01])$|^LAST$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DayOfMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeScheduledAuditResponseDayOfWeek DayOfWeek { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuditCheckName[] TargetCheckNames { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ScheduledAuditName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledAuditArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeScheduledAuditResponseFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIWEEKLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeScheduledAuditResponseDayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THU = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAT = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSecurityProfileResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string SecurityProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecurityProfileArn { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string SecurityProfileDescription { get; set; }
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Behavior[] Behaviors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlertTargets AlertTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BehaviorMetric[] AdditionalMetricsToRetain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricToRetain[] AdditionalMetricsToRetainV2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeStreamResponse
	{
		
		/// <summary>
		/// Information about a stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StreamInfo StreamInfo { get; set; }
	}
	
	/// <summary>
	/// The output from the DescribeThing operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeThingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultClientId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string BillingGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeThingGroupResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingGroupName { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		/// <summary>
		/// Thing group properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThingGroupProperties ThingGroupProperties { get; set; }
		
		/// <summary>
		/// Thing group metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThingGroupMetadata ThingGroupMetadata { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string QueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QueryVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeThingGroupResponseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeThingGroupResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REBUILDING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeThingRegistrationTaskResponse
	{
		
		/// <summary>
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40)]
		public string TaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateBody { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 3
		/// Pattern: [a-zA-Z0-9._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=3)]
		public string InputFileBucket { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9!_.*'()-\/]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string InputFileKey { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeThingRegistrationTaskResponseStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SuccessCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FailureCount { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> PercentageProgress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeThingRegistrationTaskResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelling = 4,
	}
	
	/// <summary>
	/// The output for the DescribeThingType operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeThingTypeResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingTypeArn { get; set; }
		
		/// <summary>
		/// The ThingTypeProperties contains information about the thing type including: a thing type description, and a list of searchable thing attribute names.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThingTypeProperties ThingTypeProperties { get; set; }
		
		/// <summary>
		/// The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when time was deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThingTypeMetadata ThingTypeMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCardinalityResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Cardinality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetEffectivePoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EffectivePolicy[] EffectivePolicies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetIndexingConfigurationResponse
	{
		
		/// <summary>
		/// The thing indexing configuration. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/managing-index.html">Managing Thing Indexing</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThingIndexingConfiguration ThingIndexingConfiguration { get; set; }
		
		/// <summary>
		/// Thing group indexing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThingGroupIndexingConfiguration ThingGroupIndexingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetJobDocumentResponse
	{
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Document { get; set; }
	}
	
	/// <summary>
	/// The output from the GetLoggingOptions operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLoggingOptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetLoggingOptionsResponseLogLevel LogLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetLoggingOptionsResponseLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOTAUpdateResponse
	{
		
		/// <summary>
		/// Information about an OTA update.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OTAUpdateInfo OtaUpdateInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPercentilesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PercentPair[] Percentiles { get; set; }
	}
	
	/// <summary>
	/// The output from the GetPolicy operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPolicyResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+=,.@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
		
		/// <summary>
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DefaultVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GenerationId { get; set; }
	}
	
	/// <summary>
	/// The output from the GetPolicyVersion operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPolicyVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+=,.@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
		
		/// <summary>
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PolicyVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefaultVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GenerationId { get; set; }
	}
	
	/// <summary>
	/// The output from the GetRegistrationCode operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRegistrationCodeResponse
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 64
		/// Pattern: (0x)?[a-fA-F0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=64)]
		public string RegistrationCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetStatisticsResponse
	{
		
		/// <summary>
		/// A map of key-value pairs for all supported statistics. Currently, only count is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Statistics Statistics { get; set; }
	}
	
	/// <summary>
	/// The output from the GetTopicRule operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTopicRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RuleArn { get; set; }
		
		/// <summary>
		/// Describes a rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TopicRule Rule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTopicRuleDestinationResponse
	{
		
		/// <summary>
		/// A topic rule destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TopicRuleDestination TopicRuleDestination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetV2LoggingOptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetV2LoggingOptionsResponseDefaultLogLevel DefaultLogLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableAllLogs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetV2LoggingOptionsResponseDefaultLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListActiveViolationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ActiveViolation[] ActiveViolations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAttachedPoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Policy[] Policies { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9+/]+={0,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAuditFindingsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuditFinding[] Findings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about the version of the policy associated with the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PolicyVersionIdentifier
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+=,.@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string PolicyName { get; set; }
		
		/// <summary>
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PolicyVersionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAuditMitigationActionsExecutionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuditMitigationActionExecutionMetadata[] ActionsExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAuditMitigationActionsTasksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuditMitigationActionsTaskMetadata[] Tasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAuditTasksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuditTaskMetadata[] Tasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAuthorizersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizerSummary[] Authorizers { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9+/]+={0,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListBillingGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroupNameAndArn[] BillingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The output from the ListCACertificates operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListCACertificatesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CACertificate[] Certificates { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9+/]+={0,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// The output of the ListCertificates operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListCertificatesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9+/]+={0,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// The output of the ListCertificatesByCA operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListCertificatesByCAResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9+/]+={0,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDimensionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DimensionName[] DimensionNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDomainConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DomainConfigurationSummary[] DomainConfigurations { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9+/]+={0,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListIndicesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IndexName[] IndexNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListJobExecutionsForJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JobExecutionSummaryForJob[] ExecutionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListJobExecutionsForThingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JobExecutionSummaryForThing[] ExecutionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JobSummary[] Jobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListMitigationActionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MitigationActionIdentifier[] ActionIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListOTAUpdatesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OTAUpdateSummary[] OtaUpdates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The output from the ListOutgoingCertificates operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListOutgoingCertificatesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OutgoingCertificate[] OutgoingCertificates { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9+/]+={0,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// The output from the ListPolicies operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Policy[] Policies { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9+/]+={0,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// The output from the ListPolicyPrincipals operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPolicyPrincipalsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PrincipalArn[] Principals { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9+/]+={0,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// The output from the ListPolicyVersions operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPolicyVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyVersion[] PolicyVersions { get; set; }
	}
	
	/// <summary>
	/// The output from the ListPrincipalPolicies operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPrincipalPoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Policy[] Policies { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9+/]+={0,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// The output from the ListPrincipalThings operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPrincipalThingsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ThingName[] Things { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListProvisioningTemplateVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningTemplateVersionSummary[] Versions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListProvisioningTemplatesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningTemplateSummary[] Templates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListRoleAliasesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RoleAlias[] RoleAliases { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9+/]+={0,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListScheduledAuditsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledAuditMetadata[] ScheduledAudits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSecurityProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityProfileIdentifier[] SecurityProfileIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSecurityProfilesForTargetResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityProfileTargetMapping[] SecurityProfileTargetMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListStreamsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StreamSummary[] Streams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTargetsForPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyTarget[] Targets { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9+/]+={0,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTargetsForSecurityProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityProfileTarget[] SecurityProfileTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListThingGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroupNameAndArn[] ThingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListThingGroupsForThingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroupNameAndArn[] ThingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The output from the ListThingPrincipals operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListThingPrincipalsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PrincipalArn[] Principals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListThingRegistrationTaskReportsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3FileUrl[] ResourceLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListThingRegistrationTaskReportsResponseReportType ReportType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListThingRegistrationTaskReportsResponseReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESULTS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListThingRegistrationTasksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TaskId[] TaskIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The output for the ListThingTypes operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListThingTypesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ThingTypeDefinition[] ThingTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The output from the ListThings operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListThingsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ThingAttribute[] Things { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListThingsInBillingGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ThingName[] Things { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListThingsInThingGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ThingName[] Things { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTopicRuleDestinationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TopicRuleDestinationSummary[] DestinationSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The output from the ListTopicRules operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTopicRulesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TopicRuleListItem[] Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListV2LoggingLevelsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LogTargetConfiguration[] LogTargetConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListViolationEventsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ViolationEvent[] ViolationEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The output from the RegisterCACertificateResponse operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterCACertificateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 64
		/// Pattern: (0x)?[a-fA-F0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=64)]
		public string CertificateId { get; set; }
	}
	
	/// <summary>
	/// The output from the RegisterCertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterCertificateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 64
		/// Pattern: (0x)?[a-fA-F0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=64)]
		public string CertificateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterCertificateWithoutCAResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 64
		/// Pattern: (0x)?[a-fA-F0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=64)]
		public string CertificateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterThingResponse
	{
		
		/// <summary>
		/// The PEM of a certificate.
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string CertificatePem { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceArns ResourceArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SearchIndexResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThingDocument[] Things { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThingGroupDocument[] ThingGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetDefaultAuthorizerResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w=,@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string AuthorizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LogTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THING_GROUP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartAuditMitigationActionsTaskResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string TaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartOnDemandAuditTaskResponse
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string TaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartThingRegistrationTaskResponse
	{
		
		/// <summary>
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40)]
		public string TaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestAuthorizationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthResult[] AuthResults { get; set; }
	}
	
	/// <summary>
	/// A collection of authorization information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthInfoActionType ActionType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Resource[] Resources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthInfoActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIBE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECEIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECT = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestInvokeAuthorizerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsAuthenticated { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string PrincipalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyDocument[] PolicyDocuments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RefreshAfterInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DisconnectAfterInSeconds { get; set; }
	}
	
	/// <summary>
	/// The output from the TransferCertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferCertificateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransferredCertificateArn { get; set; }
	}
	
	/// <summary>
	/// Information about the targets to which audit notifications are sent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuditNotificationTarget
	{
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string TargetArn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Which audit checks are enabled and disabled for this account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuditCheckConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAuthorizerResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w=,@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string AuthorizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateBillingGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDimensionResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateDimensionResponseType Type { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DimensionStringValue[] StringValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateDimensionResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOPIC_FILTER = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainConfigurationResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w.:-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DomainConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainConfigurationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDynamicThingGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Configuration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ThingIndexingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTRY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTRY_AND_SHADOW = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ThingConnectivityIndexingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ThingGroupIndexingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMitigationActionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRoleAliasResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w=,@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string RoleAlias { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string RoleAliasArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateScheduledAuditResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledAuditArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSecurityProfileResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string SecurityProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecurityProfileArn { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string SecurityProfileDescription { get; set; }
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Behavior[] Behaviors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlertTargets AlertTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BehaviorMetric[] AdditionalMetricsToRetain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricToRetain[] AdditionalMetricsToRetainV2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateStreamResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string StreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamArn { get; set; }
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> StreamVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateThingGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidateSecurityProfileBehaviorsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Valid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ValidationError[] ValidationErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AbortAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL = 0,
	}
	
	/// <summary>
	/// Details of abort criteria to abort the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AbortConfig
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public AbortCriteria[] CriteriaList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobExecutionFailureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 3,
	}
	
	/// <summary>
	/// Details of abort criteria to define rules to abort the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AbortCriteria
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AbortCriteriaFailureType FailureType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AbortCriteriaAction Action { get; set; }
		
		/// <summary>
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(System.Double.MinValue, 100)]
		public double ThresholdPercentage { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int MinNumberOfExecutedThings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AbortCriteriaFailureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AbortCriteriaAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL = 0,
	}
	
	/// <summary>
	/// <p>Describes an action to write to a DynamoDB table.</p> <p>The <code>tableName</code>, <code>hashKeyField</code>, and <code>rangeKeyField</code> values must match the values used when you created the table.</p> <p>The <code>hashKeyValue</code> and <code>rangeKeyvalue</code> fields use a substitution template syntax. These templates provide data at runtime. The syntax is as follows: ${<i>sql-expression</i>}.</p> <p>You can specify any valid expression in a WHERE or SELECT clause, including JSON properties, comparisons, calculations, and functions. For example, the following field uses the third level of the topic:</p> <p> <code>"hashKeyValue": "${topic(3)}"</code> </p> <p>The following field uses the timestamp:</p> <p> <code>"rangeKeyValue": "${timestamp()}"</code> </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DynamoDBAction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TableName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HashKeyField { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HashKeyValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DynamoDBActionHashKeyType HashKeyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RangeKeyField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RangeKeyValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DynamoDBActionRangeKeyType RangeKeyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PayloadField { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DynamoDBActionHashKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DynamoDBActionRangeKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER = 1,
	}
	
	/// <summary>
	/// <p>Describes an action to write to a DynamoDB table.</p> <p>This DynamoDB action writes each attribute in the message payload into it's own column in the DynamoDB table.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DynamoDBv2Action
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The input for the DynamoActionVS action that specifies the DynamoDB table to which the message data will be written.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PutItemInput PutItem { get; set; }
	}
	
	/// <summary>
	/// Describes an action to invoke a Lambda function.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LambdaAction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FunctionArn { get; set; }
	}
	
	/// <summary>
	/// Describes an action to publish to an Amazon SNS topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SnsAction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnsActionMessageFormat MessageFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SnsActionMessageFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
	}
	
	/// <summary>
	/// Describes an action to publish data to an Amazon SQS queue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SqsAction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string QueueUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseBase64 { get; set; }
	}
	
	/// <summary>
	/// Describes an action to write data to an Amazon Kinesis stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KinesisAction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StreamName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PartitionKey { get; set; }
	}
	
	/// <summary>
	/// Describes an action to republish to another topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RepublishAction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Topic { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Int32> Qos { get; set; }
	}
	
	/// <summary>
	/// Describes an action to write data to an Amazon S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3Action
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BucketName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3ActionCannedAcl CannedAcl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum S3ActionCannedAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@private = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		public-read = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		public-read-write = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aws-exec-read = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticated-read = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucket-owner-read = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucket-owner-full-control = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		log-delivery-write = 7,
	}
	
	/// <summary>
	/// Describes an action that writes data to an Amazon Kinesis Firehose stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FirehoseAction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryStreamName { get; set; }
		
		/// <summary>
		/// Pattern: ([\n\t])|(\r\n)|(,)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Separator { get; set; }
	}
	
	/// <summary>
	/// Describes an action that captures a CloudWatch metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudwatchMetricAction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricNamespace { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricValue { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricTimestamp { get; set; }
	}
	
	/// <summary>
	/// Describes an action that updates a CloudWatch alarm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudwatchAlarmAction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlarmName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StateReason { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StateValue { get; set; }
	}
	
	/// <summary>
	/// Describes an action that sends data to CloudWatch Logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudwatchLogsAction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LogGroupName { get; set; }
	}
	
	/// <summary>
	/// Describes an action that writes data to an Amazon Elasticsearch Service domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ElasticsearchAction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Pattern: https?://.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Endpoint { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Index { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Describes an action to write a message to a Salesforce IoT Cloud Input Stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SalesforceAction
	{
		
		/// <summary>
		/// Min length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=40)]
		public string Token { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// Pattern: https://ingestion-[a-zA-Z0-9]{1,12}\.[a-zA-Z0-9]+\.((sfdc-matrix\.net)|(sfdcnow\.com))/streams/\w{1,20}/\w{1,20}/event
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Sends message data to an AWS IoT Analytics channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IotAnalyticsAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Sends an input to an AWS IoT Events detector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IotEventsAction
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string InputName { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string MessageId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Describes an action to send data from an MQTT message that triggered the rule to AWS IoT SiteWise asset properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IotSiteWiseAction
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public PutAssetPropertyValueEntry[] PutAssetPropertyValueEntries { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Starts execution of a Step Functions state machine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StepFunctionsAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionNamePrefix { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StateMachineName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Send data to an HTTPS endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HttpAction
	{
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string Url { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string ConfirmationUrl { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public HttpActionHeader[] Headers { get; set; }
		
		/// <summary>
		/// The authorization method used to send messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HttpAuthorization Auth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIBE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECEIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECT = 3,
	}
	
	/// <summary>
	/// The value to be compared with the <code>metric</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MetricValue
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cidr[] Cidrs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Port[] Ports { get; set; }
	}
	
	/// <summary>
	/// Information about an active Device Defender security profile behavior violation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActiveViolation
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ViolationId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingName { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string SecurityProfileName { get; set; }
		
		/// <summary>
		/// A Device Defender security profile behavior.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Behavior Behavior { get; set; }
		
		/// <summary>
		/// The value to be compared with the <code>metric</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetricValue LastViolationValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastViolationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ViolationStartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddThingToBillingGroupRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string BillingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingGroupArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddThingToThingGroupRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingGroupArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverrideDynamicGroups { get; set; }
	}
	
	/// <summary>
	/// The type of alert target: one of "SNS".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AlertTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNS = 0,
	}
	
	/// <summary>
	/// Contains information that allowed the authorization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Allowed
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Policy[] Policies { get; set; }
	}
	
	/// <summary>
	/// An asset property timestamp entry containing the following information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssetPropertyTimestamp
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TimeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OffsetInNanos { get; set; }
	}
	
	/// <summary>
	/// Contains an asset property value (of a single type).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssetPropertyVariant
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string StringValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegerValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DoubleValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BooleanValue { get; set; }
	}
	
	/// <summary>
	/// An asset property value entry containing the following information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssetPropertyValue
	{
		
		/// <summary>
		/// Contains an asset property value (of a single type).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AssetPropertyVariant Value { get; set; }
		
		/// <summary>
		/// An asset property timestamp entry containing the following information.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AssetPropertyTimestamp Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Quality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateTargetsWithJobRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public TargetArn[] Targets { get; set; }
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Comment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachPolicyRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuditCheckRunStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAITING_FOR_DATA_COLLECTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED_COMPLIANT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED_NON_COMPLIANT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
	}
	
	/// <summary>
	/// Information about the audit check.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuditCheckDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuditCheckDetailsCheckRunStatus CheckRunStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CheckCompliant { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalResourcesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NonCompliantResourcesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuditCheckDetailsCheckRunStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAITING_FOR_DATA_COLLECTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED_COMPLIANT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED_NON_COMPLIANT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuditFindingSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
	}
	
	/// <summary>
	/// Information about the resource that was noncompliant with the audit check.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NonCompliantResource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NonCompliantResourceResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceIdentifier ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringMap AdditionalInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NonCompliantResourceResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_CERTIFICATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_CERTIFICATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOT_POLICY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COGNITO_IDENTITY_POOL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_ID = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_SETTINGS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLE_ALIAS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM_ROLE = 7,
	}
	
	/// <summary>
	/// The findings (results) of the audit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuditFinding
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string FindingId { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string TaskId { get; set; }
		
		/// <summary>
		/// An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CheckName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TaskStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FindingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuditFindingSeverity Severity { get; set; }
		
		/// <summary>
		/// Information about the resource that was noncompliant with the audit check.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NonCompliantResource NonCompliantResource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RelatedResource[] RelatedResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReasonForNonCompliance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReasonForNonComplianceCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuditFindingSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuditFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIWEEKLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuditMitigationActionsExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 5,
	}
	
	/// <summary>
	/// Returned by ListAuditMitigationActionsTask, this object contains information that describes a mitigation action that has been started.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuditMitigationActionExecutionMetadata
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string TaskId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string FindingId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuditMitigationActionExecutionMetadataStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuditMitigationActionExecutionMetadataStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuditMitigationActionsTaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 3,
	}
	
	/// <summary>
	/// Information about an audit mitigation actions task that is returned by <code>ListAuditMitigationActionsTasks</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuditMitigationActionsTaskMetadata
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string TaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuditMitigationActionsTaskMetadataTaskStatus TaskStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuditMitigationActionsTaskMetadataTaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 3,
	}
	
	/// <summary>
	/// Provides summary counts of how many tasks for findings are in a particular state. This information is included in the response from DescribeAuditMitigationActionsTask.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaskStatisticsForAuditCheck
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalFindingsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FailedFindingsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SucceededFindingsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SkippedFindingsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CanceledFindingsCount { get; set; }
	}
	
	/// <summary>
	/// Used in MitigationActionParams, this information identifies the target findings to which the mitigation actions are applied. Only one entry appears.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuditMitigationActionsTaskTarget
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string AuditTaskId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public FindingId[] FindingIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuditCheckToReasonCodeFilter AuditCheckToReasonCodeFilter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuditNotificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuditTaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuditTaskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND_AUDIT_TASK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED_AUDIT_TASK = 1,
	}
	
	/// <summary>
	/// The audits that were performed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuditTaskMetadata
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string TaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuditTaskMetadataTaskStatus TaskStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuditTaskMetadataTaskType TaskType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuditTaskMetadataTaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuditTaskMetadataTaskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND_AUDIT_TASK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED_AUDIT_TASK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthDecision
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOWED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLICIT_DENY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPLICIT_DENY = 2,
	}
	
	/// <summary>
	/// Contains information that denied the authorization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Denied
	{
		
		/// <summary>
		/// Information that implicitly denies authorization. When policy doesn't explicitly deny or allow an action on a resource it is considered an implicit deny.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ImplicitDeny ImplicitDeny { get; set; }
		
		/// <summary>
		/// Information that explicitly denies authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExplicitDeny ExplicitDeny { get; set; }
	}
	
	/// <summary>
	/// The authorizer result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthResult
	{
		
		/// <summary>
		/// A collection of authorization information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthInfo AuthInfo { get; set; }
		
		/// <summary>
		/// Contains information that allowed the authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Allowed Allowed { get; set; }
		
		/// <summary>
		/// Contains information that denied the authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Denied Denied { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthResultAuthDecision AuthDecision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MissingContextValue[] MissingContextValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthResultAuthDecision
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOWED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLICIT_DENY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPLICIT_DENY = 2,
	}
	
	/// <summary>
	/// An object that specifies the authorization service for a domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizerConfig
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w=,@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DefaultAuthorizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowAuthorizerOverride { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthorizerStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
	}
	
	/// <summary>
	/// The authorizer description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizerDescription
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w=,@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string AuthorizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerFunctionArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string TokenKeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PublicKeyMap TokenSigningPublicKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizerDescriptionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SigningDisabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthorizerDescriptionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
	}
	
	/// <summary>
	/// The authorizer summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizerSummary
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w=,@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string AuthorizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutoRegistrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLE = 1,
	}
	
	/// <summary>
	/// Configuration for the rollout of OTA updates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AwsJobExecutionsRolloutConfig
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaximumPerMinute { get; set; }
	}
	
	/// <summary>
	/// Configuration information for pre-signed URLs. Valid when <code>protocols</code> contains HTTP.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AwsJobPresignedUrlConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpiresInSec { get; set; }
	}
	
	/// <summary>
	/// The dimension of a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MetricDimension
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DimensionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDimensionOperator Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MetricDimensionOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_IN = 1,
	}
	
	/// <summary>
	/// The criteria by which the behavior is determined to be normal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BehaviorCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BehaviorCriteriaComparisonOperator ComparisonOperator { get; set; }
		
		/// <summary>
		/// The value to be compared with the <code>metric</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetricValue Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationSeconds { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> ConsecutiveDatapointsToAlarm { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> ConsecutiveDatapointsToClear { get; set; }
		
		/// <summary>
		/// A statistical ranking (percentile) which indicates a threshold value by which a behavior is determined to be in compliance or in violation of the behavior.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StatisticalThreshold StatisticalThreshold { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BehaviorCriteriaComparisonOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		less-than = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		less-than-equals = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		greater-than = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		greater-than-equals = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		in-cidr-set = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not-in-cidr-set = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		in-port-set = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not-in-port-set = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComparisonOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		less-than = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		less-than-equals = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		greater-than = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		greater-than-equals = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		in-cidr-set = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not-in-cidr-set = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		in-port-set = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not-in-port-set = 7,
	}
	
	/// <summary>
	/// A statistical ranking (percentile) which indicates a threshold value by which a behavior is determined to be in compliance or in violation of the behavior.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StatisticalThreshold
	{
		
		/// <summary>
		/// Pattern: (p0|p0\.1|p0\.01|p1|p10|p50|p90|p99|p99\.9|p99\.99|p100)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Statistic { get; set; }
	}
	
	/// <summary>
	/// Additional information about the billing group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingGroupMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	/// <summary>
	/// The name and ARN of a group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GroupNameAndArn
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupArn { get; set; }
	}
	
	/// <summary>
	/// The properties of a billing group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingGroupProperties
	{
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string BillingGroupDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CACertificateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
	}
	
	/// <summary>
	/// A CA certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CACertificate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 64
		/// Pattern: (0x)?[a-fA-F0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=64)]
		public string CertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CACertificateStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CACertificateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
	}
	
	/// <summary>
	/// When the certificate is valid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CertificateValidity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NotBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NotAfter { get; set; }
	}
	
	/// <summary>
	/// Describes a CA certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CACertificateDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 64
		/// Pattern: (0x)?[a-fA-F0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=64)]
		public string CertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CACertificateDescriptionStatus Status { get; set; }
		
		/// <summary>
		/// The PEM of a certificate.
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string CertificatePem { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string OwnedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CACertificateDescriptionAutoRegistrationStatus AutoRegistrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> CustomerVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GenerationId { get; set; }
		
		/// <summary>
		/// When the certificate is valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CertificateValidity Validity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CACertificateDescriptionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CACertificateDescriptionAutoRegistrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CACertificateUpdateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEACTIVATE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelJobExecutionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DetailsMap StatusDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelJobRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Pattern: [\p{Upper}\p{Digit}_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string ReasonCode { get; set; }
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Comment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CannedAccessControlList
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@private = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		public-read = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		public-read-write = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aws-exec-read = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticated-read = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucket-owner-read = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucket-owner-full-control = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		log-delivery-write = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CertificateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVOKED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_TRANSFER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTER_INACTIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_ACTIVATION = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CertificateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNI_ONLY = 1,
	}
	
	/// <summary>
	/// Information about a certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Certificate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 64
		/// Pattern: (0x)?[a-fA-F0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=64)]
		public string CertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CertificateStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CertificateCertificateMode CertificateMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CertificateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVOKED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_TRANSFER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTER_INACTIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_ACTIVATION = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CertificateCertificateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNI_ONLY = 1,
	}
	
	/// <summary>
	/// Data used to transfer a certificate to an AWS account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferData
	{
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string TransferMessage { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string RejectReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TransferDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AcceptDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RejectDate { get; set; }
	}
	
	/// <summary>
	/// Describes a certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CertificateDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 64
		/// Pattern: (0x)?[a-fA-F0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=64)]
		public string CertificateId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 64
		/// Pattern: (0x)?[a-fA-F0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=64)]
		public string CaCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CertificateDescriptionStatus Status { get; set; }
		
		/// <summary>
		/// The PEM of a certificate.
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string CertificatePem { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string OwnedBy { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string PreviousOwnedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> CustomerVersion { get; set; }
		
		/// <summary>
		/// Data used to transfer a certificate to an AWS account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransferData TransferData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GenerationId { get; set; }
		
		/// <summary>
		/// When the certificate is valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CertificateValidity Validity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CertificateDescriptionCertificateMode CertificateMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CertificateDescriptionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVOKED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_TRANSFER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTER_INACTIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_ACTIVATION = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CertificateDescriptionCertificateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNI_ONLY = 1,
	}
	
	/// <summary>
	/// Information required to start a signing job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartSigningJobParameter
	{
		
		/// <summary>
		/// Describes the code-signing profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SigningProfileParameter SigningProfileParameter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SigningProfileName { get; set; }
		
		/// <summary>
		/// Describes the location of the updated firmware.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Destination Destination { get; set; }
	}
	
	/// <summary>
	/// Describes a custom method used to code sign a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomCodeSigning
	{
		
		/// <summary>
		/// Describes the signature for a file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CodeSigningSignature Signature { get; set; }
		
		/// <summary>
		/// Describes the certificate chain being used when code signing a file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CodeSigningCertificateChain CertificateChain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HashAlgorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SignatureAlgorithm { get; set; }
	}
	
	/// <summary>
	/// Describes the method to use when code signing a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CodeSigning
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsSignerJobId { get; set; }
		
		/// <summary>
		/// Information required to start a signing job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StartSigningJobParameter StartSigningJobParameter { get; set; }
		
		/// <summary>
		/// Describes a custom method used to code sign a file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomCodeSigning CustomCodeSigning { get; set; }
	}
	
	/// <summary>
	/// Describes the certificate chain being used when code signing a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CodeSigningCertificateChain
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InlineDocument { get; set; }
	}
	
	/// <summary>
	/// Describes the signature for a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CodeSigningSignature
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InlineDocument { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAuthorizerRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerFunctionArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string TokenKeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PublicKeyMap TokenSigningPublicKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateAuthorizerRequestStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SigningDisabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateAuthorizerRequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBillingGroupRequest
	{
		
		/// <summary>
		/// The properties of a billing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BillingGroupProperties BillingGroupProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The input for the CreateCertificateFromCsr operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateCertificateFromCsrRequest
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string CertificateSigningRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DimensionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOPIC_FILTER = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDimensionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateDimensionRequestType Type { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DimensionStringValue[] StringValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDimensionRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOPIC_FILTER = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ServiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDENTIAL_PROVIDER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOBS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDomainConfigurationRequest
	{
		
		/// <summary>
		/// Max length: 253
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(253, MinimumLength=1)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public AcmCertificateArn[] ServerCertificateArns { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: arn:aws:acm:[a-z]{2}-(gov-)?[a-z]{4,9}-\d{1}:\d{12}:certificate/?[a-zA-Z0-9/-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ValidationCertificateArn { get; set; }
		
		/// <summary>
		/// An object that specifies the authorization service for a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthorizerConfig AuthorizerConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateDomainConfigurationRequestServiceType ServiceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDomainConfigurationRequestServiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDENTIAL_PROVIDER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOBS = 2,
	}
	
	/// <summary>
	/// Thing group properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThingGroupProperties
	{
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string ThingGroupDescription { get; set; }
		
		/// <summary>
		/// The attribute payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributePayload AttributePayload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDynamicThingGroupRequest
	{
		
		/// <summary>
		/// Thing group properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThingGroupProperties ThingGroupProperties { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string QueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QueryVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Configuration for pre-signed S3 URLs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PresignedUrlConfig
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Minimum: 60
		/// Maximum: 3600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 3600)]
		public System.Nullable<System.Int32> ExpiresInSec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TargetSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUOUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT = 1,
	}
	
	/// <summary>
	/// Allows you to create a staged rollout of a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobExecutionsRolloutConfig
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaximumPerMinute { get; set; }
		
		/// <summary>
		/// Allows you to create an exponential rate of rollout for a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExponentialRolloutRate ExponentialRate { get; set; }
	}
	
	/// <summary>
	/// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimeoutConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InProgressTimeoutInMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public TargetArn[] Targets { get; set; }
		
		/// <summary>
		/// Max length: 1350
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1350, MinimumLength=1)]
		public string DocumentSource { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Document { get; set; }
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
		
		/// <summary>
		/// Configuration for pre-signed S3 URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PresignedUrlConfig PresignedUrlConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateJobRequestTargetSelection TargetSelection { get; set; }
		
		/// <summary>
		/// Allows you to create a staged rollout of a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobExecutionsRolloutConfig JobExecutionsRolloutConfig { get; set; }
		
		/// <summary>
		/// Details of abort criteria to abort the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AbortConfig AbortConfig { get; set; }
		
		/// <summary>
		/// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimeoutConfig TimeoutConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobRequestTargetSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUOUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT = 1,
	}
	
	/// <summary>
	/// Describes a key pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KeyPair
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PublicKey { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PrivateKey { get; set; }
	}
	
	/// <summary>
	/// The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MitigationActionParams
	{
		
		/// <summary>
		/// Parameters to define a mitigation action that changes the state of the device certificate to inactive.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateDeviceCertificateParams UpdateDeviceCertificateParams { get; set; }
		
		/// <summary>
		/// Parameters to define a mitigation action that changes the state of the CA certificate to inactive.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateCACertificateParams UpdateCACertificateParams { get; set; }
		
		/// <summary>
		/// Parameters used when defining a mitigation action that move a set of things to a thing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AddThingsToThingGroupParams AddThingsToThingGroupParams { get; set; }
		
		/// <summary>
		/// Parameters to define a mitigation action that adds a blank policy to restrict permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReplaceDefaultPolicyVersionParams ReplaceDefaultPolicyVersionParams { get; set; }
		
		/// <summary>
		/// Parameters used when defining a mitigation action that enable AWS IoT logging.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EnableIoTLoggingParams EnableIoTLoggingParams { get; set; }
		
		/// <summary>
		/// Parameters to define a mitigation action that publishes findings to Amazon SNS. You can implement your own custom actions in response to the Amazon SNS messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PublishFindingToSnsParams PublishFindingToSnsParams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMitigationActionRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MitigationActionParams ActionParams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateOTAUpdateRequest
	{
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public Protocol[] Protocols { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateOTAUpdateRequestTargetSelection TargetSelection { get; set; }
		
		/// <summary>
		/// Configuration for the rollout of OTA updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AwsJobExecutionsRolloutConfig AwsJobExecutionsRolloutConfig { get; set; }
		
		/// <summary>
		/// Configuration information for pre-signed URLs. Valid when <code>protocols</code> contains HTTP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AwsJobPresignedUrlConfig AwsJobPresignedUrlConfig { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public OTAUpdateFile[] Files { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdditionalParameterMap AdditionalParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateOTAUpdateRequestTargetSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUOUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OTAUpdateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_COMPLETE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 3,
	}
	
	/// <summary>
	/// The input for the CreatePolicy operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePolicyRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The input for the CreatePolicyVersion operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePolicyVersionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
	}
	
	/// <summary>
	/// Structure that contains <code>payloadVersion</code> and <code>targetArn</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProvisioningHook
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 10
		/// Pattern: ^[0-9-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=10)]
		public string PayloadVersion { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string TargetArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProvisioningTemplateRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 1
		/// Pattern: ^[0-9A-Za-z_-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [^\p{C}]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TemplateBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ProvisioningRoleArn { get; set; }
		
		/// <summary>
		/// Structure that contains <code>payloadVersion</code> and <code>targetArn</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningHook PreProvisioningHook { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProvisioningTemplateVersionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TemplateBody { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRoleAliasRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Minimum: 900
		/// Maximum: 3600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(900, 3600)]
		public System.Nullable<System.Int32> CredentialDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THU = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAT = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateScheduledAuditRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateScheduledAuditRequestFrequency Frequency { get; set; }
		
		/// <summary>
		/// Pattern: ^([1-9]|[12][0-9]|3[01])$|^LAST$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DayOfMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateScheduledAuditRequestDayOfWeek DayOfWeek { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuditCheckName[] TargetCheckNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateScheduledAuditRequestFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIWEEKLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateScheduledAuditRequestDayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THU = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAT = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSecurityProfileRequest
	{
		
		/// <summary>
		/// Max length: 1000
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string SecurityProfileDescription { get; set; }
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Behavior[] Behaviors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlertTargets AlertTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BehaviorMetric[] AdditionalMetricsToRetain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricToRetain[] AdditionalMetricsToRetainV2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateStreamRequest
	{
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public StreamFile[] Files { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateThingGroupRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ParentGroupName { get; set; }
		
		/// <summary>
		/// Thing group properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThingGroupProperties ThingGroupProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The input for the CreateThing operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateThingRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingTypeName { get; set; }
		
		/// <summary>
		/// The attribute payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributePayload AttributePayload { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string BillingGroupName { get; set; }
	}
	
	/// <summary>
	/// The ThingTypeProperties contains information about the thing type including: a thing type description, and a list of searchable thing attribute names.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThingTypeProperties
	{
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string ThingTypeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeName[] SearchableAttributes { get; set; }
	}
	
	/// <summary>
	/// The input for the CreateThingType operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateThingTypeRequest
	{
		
		/// <summary>
		/// The ThingTypeProperties contains information about the thing type including: a thing type description, and a list of searchable thing attribute names.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThingTypeProperties ThingTypeProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Configuration of the topic rule destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TopicRuleDestinationConfiguration
	{
		
		/// <summary>
		/// HTTP URL destination configuration used by the topic rule's HTTP action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HttpUrlDestinationConfiguration HttpUrlConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTopicRuleDestinationRequest
	{
		
		/// <summary>
		/// Configuration of the topic rule destination.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TopicRuleDestinationConfiguration DestinationConfiguration { get; set; }
	}
	
	/// <summary>
	/// A topic rule destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TopicRuleDestination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopicRuleDestinationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusReason { get; set; }
		
		/// <summary>
		/// HTTP URL destination properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HttpUrlDestinationProperties HttpUrlProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TopicRuleDestinationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 3,
	}
	
	/// <summary>
	/// Describes a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TopicRulePayload
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Sql { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Action[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RuleDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsIotSqlVersion { get; set; }
		
		/// <summary>
		/// Describes the actions associated with a rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Action ErrorAction { get; set; }
	}
	
	/// <summary>
	/// The input for the CreateTopicRule operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTopicRuleRequest
	{
		
		/// <summary>
		/// Describes a rule.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TopicRulePayload TopicRulePayload { get; set; }
	}
	
	/// <summary>
	/// Information that implicitly denies authorization. When policy doesn't explicitly deny or allow an action on a resource it is considered an implicit deny.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImplicitDeny
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Policy[] Policies { get; set; }
	}
	
	/// <summary>
	/// Information that explicitly denies authorization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExplicitDeny
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Policy[] Policies { get; set; }
	}
	
	/// <summary>
	/// The input for the DeprecateThingType operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeprecateThingTypeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UndoDeprecate { get; set; }
	}
	
	/// <summary>
	/// Statistics for the checks performed during the audit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaskStatistics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalChecks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InProgressChecks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> WaitingForDataCollectionChecks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompliantChecks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NonCompliantChecks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FailedChecks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CanceledChecks { get; set; }
	}
	
	/// <summary>
	/// The registration configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegistrationConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateBody { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainConfigurationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENDPOINT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_MANAGED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_MANAGED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IndexStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REBUILDING = 2,
	}
	
	/// <summary>
	/// The job execution object represents the execution of a job on a particular device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobExecution
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceCanceled { get; set; }
		
		/// <summary>
		/// Details of the job execution status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobExecutionStatusDetails StatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> QueuedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExecutionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VersionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ApproximateSecondsBeforeTimedOut { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 7,
	}
	
	/// <summary>
	/// The <code>Job</code> object contains details about a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Job
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobTargetSelection TargetSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceCanceled { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Pattern: [\p{Upper}\p{Digit}_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string ReasonCode { get; set; }
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Comment { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public TargetArn[] Targets { get; set; }
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
		
		/// <summary>
		/// Configuration for pre-signed S3 URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PresignedUrlConfig PresignedUrlConfig { get; set; }
		
		/// <summary>
		/// Allows you to create a staged rollout of a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobExecutionsRolloutConfig JobExecutionsRolloutConfig { get; set; }
		
		/// <summary>
		/// Details of abort criteria to abort the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AbortConfig AbortConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletedAt { get; set; }
		
		/// <summary>
		/// The job process details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobProcessDetails JobProcessDetails { get; set; }
		
		/// <summary>
		/// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimeoutConfig TimeoutConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobTargetSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUOUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETION_IN_PROGRESS = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MitigationActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_DEVICE_CERTIFICATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_CA_CERTIFICATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD_THINGS_TO_THING_GROUP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLACE_DEFAULT_POLICY_VERSION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLE_IOT_LOGGING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISH_FINDING_TO_SNS = 5,
	}
	
	/// <summary>
	/// Role alias description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RoleAliasDescription
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w=,@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string RoleAlias { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string RoleAliasArn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string Owner { get; set; }
		
		/// <summary>
		/// Minimum: 900
		/// Maximum: 3600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(900, 3600)]
		public System.Nullable<System.Int32> CredentialDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
	}
	
	/// <summary>
	/// Information about a stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StreamInfo
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string StreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamArn { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> StreamVersion { get; set; }
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public StreamFile[] Files { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedAt { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Thing group metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThingGroupMetadata
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ParentGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupNameAndArn[] RootToParentThingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DynamicGroupStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REBUILDING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelling = 4,
	}
	
	/// <summary>
	/// The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when time was deprecated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThingTypeMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deprecated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeprecationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	/// <summary>
	/// Describes the location of updated firmware in S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3Destination
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
	}
	
	/// <summary>
	/// Describes the location of the updated firmware.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Destination
	{
		
		/// <summary>
		/// Describes the location of updated firmware in S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Destination S3Destination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetachPolicyRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeviceCertificateUpdateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEACTIVATE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DimensionValueOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_IN = 1,
	}
	
	/// <summary>
	/// <p>The summary of a domain configuration. A domain configuration specifies custom IoT-specific information about a domain. A domain configuration can be associated with an AWS-managed domain (for example, dbc123defghijk.iot.us-west-2.amazonaws.com), a customer managed domain, or a default endpoint.</p> <ul> <li> <p>Data</p> </li> <li> <p>Jobs</p> </li> <li> <p>CredentialProvider</p> </li> </ul> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainConfigurationSummary
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w.:-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DomainConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainConfigurationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainConfigurationSummaryServiceType ServiceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainConfigurationSummaryServiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDENTIAL_PROVIDER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOBS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DynamoKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER = 1,
	}
	
	/// <summary>
	/// The input for the DynamoActionVS action that specifies the DynamoDB table to which the message data will be written.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutItemInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TableName { get; set; }
	}
	
	/// <summary>
	/// The policy that has the effect on the authorization results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EffectivePolicy
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+=,.@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
	}
	
	/// <summary>
	/// Error information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ErrorInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THING_GROUP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THING_TYPE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THING_GROUP_MEMBERSHIP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THING_GROUP_HIERARCHY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THING_TYPE_ASSOCIATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_EXECUTION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POLICY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERTIFICATE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_CERTIFICATE = 10,
	}
	
	/// <summary>
	/// Allows you to define a criteria to initiate the increase in rate of rollout for a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RateIncreaseCriteria
	{
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> NumberOfNotifiedThings { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> NumberOfSucceededThings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FieldType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Number = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Boolean = 2,
	}
	
	/// <summary>
	/// Describes the name and data type at a field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Field
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FieldType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FieldType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Number = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Boolean = 2,
	}
	
	/// <summary>
	/// Describes a group of files that can be streamed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Stream
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string StreamId { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> FileId { get; set; }
	}
	
	/// <summary>
	/// The S3 location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3Location
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// The location of the OTA update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FileLocation
	{
		
		/// <summary>
		/// Describes a group of files that can be streamed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Stream Stream { get; set; }
		
		/// <summary>
		/// The S3 location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Location S3Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCardinalityRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AggregationField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QueryVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetEffectivePoliciesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Principal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CognitoIdentityPoolId { get; set; }
	}
	
	/// <summary>
	/// The thing indexing configuration. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/managing-index.html">Managing Thing Indexing</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThingIndexingConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ThingIndexingConfigurationThingIndexingMode ThingIndexingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThingIndexingConfigurationThingConnectivityIndexingMode ThingConnectivityIndexingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Field[] ManagedFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Field[] CustomFields { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ThingIndexingConfigurationThingIndexingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTRY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTRY_AND_SHADOW = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ThingIndexingConfigurationThingConnectivityIndexingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS = 1,
	}
	
	/// <summary>
	/// Thing group indexing configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThingGroupIndexingConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ThingGroupIndexingConfigurationThingGroupIndexingMode ThingGroupIndexingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Field[] ManagedFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Field[] CustomFields { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ThingGroupIndexingConfigurationThingGroupIndexingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON = 1,
	}
	
	/// <summary>
	/// Information about an OTA update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OTAUpdateInfo
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string OtaUpdateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OtaUpdateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public Protocol[] Protocols { get; set; }
		
		/// <summary>
		/// Configuration for the rollout of OTA updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AwsJobExecutionsRolloutConfig AwsJobExecutionsRolloutConfig { get; set; }
		
		/// <summary>
		/// Configuration information for pre-signed URLs. Valid when <code>protocols</code> contains HTTP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AwsJobPresignedUrlConfig AwsJobPresignedUrlConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OTAUpdateInfoTargetSelection TargetSelection { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public OTAUpdateFile[] OtaUpdateFiles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OTAUpdateInfoOtaUpdateStatus OtaUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsIotJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsIotJobArn { get; set; }
		
		/// <summary>
		/// Error information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorInfo ErrorInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdditionalParameterMap AdditionalParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OTAUpdateInfoTargetSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUOUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OTAUpdateInfoOtaUpdateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_COMPLETE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPercentilesRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AggregationField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QueryVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Percent[] Percents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetStatisticsRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AggregationField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QueryVersion { get; set; }
	}
	
	/// <summary>
	/// A map of key-value pairs for all supported statistics. Currently, only count is supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Statistics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Average { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Sum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Minimum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Maximum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SumOfSquares { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Variance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> StdDeviation { get; set; }
	}
	
	/// <summary>
	/// Describes a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TopicRule
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string RuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Sql { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Action[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RuleDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsIotSqlVersion { get; set; }
		
		/// <summary>
		/// Describes the actions associated with a rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Action ErrorAction { get; set; }
	}
	
	/// <summary>
	/// The HTTP action header.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HttpActionHeader
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The authorization method used to send messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HttpAuthorization
	{
		
		/// <summary>
		/// Use Sig V4 authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SigV4Authorization Sigv4 { get; set; }
	}
	
	/// <summary>
	/// Use Sig V4 authorization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SigV4Authorization
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SigningRegion { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Specifies the HTTP context to use for the test authorizer request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HttpContext
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HttpHeaders Headers { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096, MinimumLength=1)]
		public string QueryString { get; set; }
	}
	
	/// <summary>
	/// HTTP URL destination properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HttpUrlDestinationProperties
	{
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string ConfirmationUrl { get; set; }
	}
	
	/// <summary>
	/// Information about an HTTP URL destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HttpUrlDestinationSummary
	{
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string ConfirmationUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETION_IN_PROGRESS = 3,
	}
	
	/// <summary>
	/// The job process details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobProcessDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessingTargetName[] ProcessingTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfCanceledThings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfSucceededThings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfFailedThings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfRejectedThings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfQueuedThings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfInProgressThings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfRemovedThings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfTimedOutThings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 7,
	}
	
	/// <summary>
	/// Details of the job execution status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobExecutionStatusDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DetailsMap DetailsMap { get; set; }
	}
	
	/// <summary>
	/// The job execution summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobExecutionSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JobExecutionSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> QueuedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExecutionNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobExecutionSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 7,
	}
	
	/// <summary>
	/// Contains a summary of information about job executions for a specific job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobExecutionSummaryForJob
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
		
		/// <summary>
		/// The job execution summary.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobExecutionSummary JobExecutionSummary { get; set; }
	}
	
	/// <summary>
	/// The job execution summary for a thing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobExecutionSummaryForThing
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string JobId { get; set; }
		
		/// <summary>
		/// The job execution summary.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobExecutionSummary JobExecutionSummary { get; set; }
	}
	
	/// <summary>
	/// The job summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string JobId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobSummaryTargetSelection TargetSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobSummaryTargetSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUOUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETION_IN_PROGRESS = 3,
	}
	
	/// <summary>
	/// Information that identifies the noncompliant resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceIdentifier
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 64
		/// Pattern: (0x)?[a-fA-F0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=64)]
		public string DeviceCertificateId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 64
		/// Pattern: (0x)?[a-fA-F0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=64)]
		public string CaCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CognitoIdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Information about the version of the policy associated with the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PolicyVersionIdentifier PolicyVersionIdentifier { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string Account { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string IamRoleArn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string RoleAliasArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAuditFindingsRequest
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string TaskId { get; set; }
		
		/// <summary>
		/// An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CheckName { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceIdentifier ResourceIdentifier { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 250)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESULTS = 1,
	}
	
	/// <summary>
	/// A log target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LogTarget
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LogTargetTargetType TargetType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LogTargetTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THING_GROUP = 1,
	}
	
	/// <summary>
	/// The target configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LogTargetConfiguration
	{
		
		/// <summary>
		/// A log target.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogTarget LogTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogTargetConfigurationLogLevel LogLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LogTargetConfigurationLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	/// <summary>
	/// Describes the logging options payload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoggingOptionsPayload
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoggingOptionsPayloadLogLevel LogLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoggingOptionsPayloadLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MessageFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
	}
	
	/// <summary>
	/// Describes which changes should be applied as part of a mitigation action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MitigationAction
	{
		
		/// <summary>
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MitigationActionParams ActionParams { get; set; }
	}
	
	/// <summary>
	/// Information that identifies a mitigation action. This information is returned by ListMitigationActions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MitigationActionIdentifier
	{
		
		/// <summary>
		/// Max length: 128
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	/// <summary>
	/// Specifies the MQTT context to use for the test authorizer request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MqttContext
	{
		
		/// <summary>
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65535, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65535, MinimumLength=1)]
		public string Password { get; set; }
		
		/// <summary>
		/// Max length: 65535
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65535, MinimumLength=1)]
		public string ClientId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_CERTIFICATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_CERTIFICATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOT_POLICY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COGNITO_IDENTITY_POOL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_ID = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_SETTINGS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLE_ALIAS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM_ROLE = 7,
	}
	
	/// <summary>
	/// An OTA update summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OTAUpdateSummary
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string OtaUpdateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OtaUpdateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	/// <summary>
	/// A certificate that has been transferred but not yet accepted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutgoingCertificate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 64
		/// Pattern: (0x)?[a-fA-F0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=64)]
		public string CertificateId { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string TransferredTo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TransferDate { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string TransferMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	/// <summary>
	/// Describes the percentile and percentile value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PercentPair
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Double> Percent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// Describes an AWS IoT policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Policy
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+=,.@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PolicyTemplateName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLANK_POLICY = 0,
	}
	
	/// <summary>
	/// Describes a policy version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PolicyVersion
	{
		
		/// <summary>
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefaultVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
	}
	
	/// <summary>
	/// A summary of information about a fleet provisioning template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProvisioningTemplateSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateArn { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 1
		/// Pattern: ^[0-9A-Za-z_-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [^\p{C}]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// A summary of information about a fleet provision template version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProvisioningTemplateVersionSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefaultVersion { get; set; }
	}
	
	/// <summary>
	/// An asset property value entry containing the following information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutAssetPropertyValueEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EntryId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PropertyId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string PropertyAlias { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public AssetPropertyValue[] PropertyValues { get; set; }
	}
	
	/// <summary>
	/// The input to the RegisterCACertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterCACertificateRequest
	{
		
		/// <summary>
		/// The PEM of a certificate.
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string CaCertificate { get; set; }
		
		/// <summary>
		/// The PEM of a certificate.
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string VerificationCertificate { get; set; }
		
		/// <summary>
		/// The registration configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RegistrationConfig RegistrationConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The input to the RegisterCertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterCertificateRequest
	{
		
		/// <summary>
		/// The PEM of a certificate.
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string CertificatePem { get; set; }
		
		/// <summary>
		/// The PEM of a certificate.
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string CaCertificatePem { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RegisterCertificateRequestStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegisterCertificateRequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVOKED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_TRANSFER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTER_INACTIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_ACTIVATION = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterCertificateWithoutCARequest
	{
		
		/// <summary>
		/// The PEM of a certificate.
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string CertificatePem { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RegisterCertificateWithoutCARequestStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegisterCertificateWithoutCARequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVOKED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_TRANSFER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTER_INACTIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_ACTIVATION = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterThingRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TemplateBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameters Parameters { get; set; }
	}
	
	/// <summary>
	/// The input for the RejectCertificateTransfer operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RejectCertificateTransferRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string RejectReason { get; set; }
	}
	
	/// <summary>
	/// Information about a related resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RelatedResource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RelatedResourceResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceIdentifier ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringMap AdditionalInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RelatedResourceResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_CERTIFICATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_CERTIFICATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOT_POLICY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COGNITO_IDENTITY_POOL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT_ID = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_SETTINGS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLE_ALIAS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM_ROLE = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveThingFromBillingGroupRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string BillingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingGroupArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveThingFromThingGroupRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingGroupArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
	}
	
	/// <summary>
	/// The input for the ReplaceTopicRule operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplaceTopicRuleRequest
	{
		
		/// <summary>
		/// Describes a rule.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TopicRulePayload TopicRulePayload { get; set; }
	}
	
	/// <summary>
	/// Information about the scheduled audit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledAuditMetadata
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ScheduledAuditName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledAuditArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledAuditMetadataFrequency Frequency { get; set; }
		
		/// <summary>
		/// Pattern: ^([1-9]|[12][0-9]|3[01])$|^LAST$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DayOfMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledAuditMetadataDayOfWeek DayOfWeek { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScheduledAuditMetadataFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIWEEKLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScheduledAuditMetadataDayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THU = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAT = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SearchIndexRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string QueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QueryVersion { get; set; }
	}
	
	/// <summary>
	/// Identifying information for a Device Defender security profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SecurityProfileIdentifier
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// A target to which an alert is sent when a security profile behavior is violated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SecurityProfileTarget
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Information about a security profile and the target associated with it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SecurityProfileTargetMapping
	{
		
		/// <summary>
		/// Identifying information for a Device Defender security profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SecurityProfileIdentifier SecurityProfileIdentifier { get; set; }
		
		/// <summary>
		/// A target to which an alert is sent when a security profile behavior is violated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SecurityProfileTarget Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ServerCertificateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALID = 1,
	}
	
	/// <summary>
	/// An object that contains information about a server certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServerCertificateSummary
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: arn:aws:acm:[a-z]{2}-(gov-)?[a-z]{4,9}-\d{1}:\d{12}:certificate/?[a-zA-Z0-9/-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ServerCertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServerCertificateSummaryServerCertificateStatus ServerCertificateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerCertificateStatusDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ServerCertificateSummaryServerCertificateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALID = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetDefaultAuthorizerRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w=,@-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string AuthorizerName { get; set; }
	}
	
	/// <summary>
	/// The input for the SetLoggingOptions operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetLoggingOptionsRequest
	{
		
		/// <summary>
		/// Describes the logging options payload.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoggingOptionsPayload LoggingOptionsPayload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetV2LoggingLevelRequest
	{
		
		/// <summary>
		/// A log target.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LogTarget LogTarget { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SetV2LoggingLevelRequestLogLevel LogLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SetV2LoggingLevelRequestLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetV2LoggingOptionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SetV2LoggingOptionsRequestDefaultLogLevel DefaultLogLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableAllLogs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SetV2LoggingOptionsRequestDefaultLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	/// <summary>
	/// Describes the code-signing profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SigningProfileParameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificatePathOnDevice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartAuditMitigationActionsTaskRequest
	{
		
		/// <summary>
		/// Used in MitigationActionParams, this information identifies the target findings to which the mitigation actions are applied. Only one entry appears.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuditMitigationActionsTaskTarget Target { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuditCheckToActionsMapping AuditCheckToActionsMapping { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartOnDemandAuditTaskRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuditCheckName[] TargetCheckNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartThingRegistrationTaskRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TemplateBody { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 3
		/// Pattern: [a-zA-Z0-9._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=3)]
		public string InputFileBucket { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9!_.*'()-\/]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string InputFileKey { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// A summary of a stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StreamSummary
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string StreamId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamArn { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> StreamVersion { get; set; }
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestAuthorizationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Principal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CognitoIdentityPoolId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public AuthInfo[] AuthInfos { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyName[] PolicyNamesToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyName[] PolicyNamesToSkip { get; set; }
	}
	
	/// <summary>
	/// Specifies the TLS context to use for the test authorizer request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TlsContext
	{
		
		/// <summary>
		/// Max length: 253
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(253, MinimumLength=1)]
		public string ServerName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestInvokeAuthorizerRequest
	{
		
		/// <summary>
		/// Max length: 6144
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(6144, MinimumLength=1)]
		public string Token { get; set; }
		
		/// <summary>
		/// Max length: 2560
		/// Min length: 1
		/// Pattern: [A-Za-z0-9+/]+={0,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2560, MinimumLength=1)]
		public string TokenSignature { get; set; }
		
		/// <summary>
		/// Specifies the HTTP context to use for the test authorizer request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HttpContext HttpContext { get; set; }
		
		/// <summary>
		/// Specifies the MQTT context to use for the test authorizer request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MqttContext MqttContext { get; set; }
		
		/// <summary>
		/// Specifies the TLS context to use for the test authorizer request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TlsContext TlsContext { get; set; }
	}
	
	/// <summary>
	/// The properties of the thing, including thing name, thing type name, and a list of thing attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThingAttribute
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingName { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// The connectivity status of the thing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThingConnectivity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Connected { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Timestamp { get; set; }
	}
	
	/// <summary>
	/// The thing search index document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThingDocument
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThingGroupName[] ThingGroupNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Shadow { get; set; }
		
		/// <summary>
		/// The connectivity status of the thing.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThingConnectivity Connectivity { get; set; }
	}
	
	/// <summary>
	/// The thing group search index document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThingGroupDocument
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingGroupName { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingGroupId { get; set; }
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string ThingGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThingGroupName[] ParentGroupNames { get; set; }
	}
	
	/// <summary>
	/// The definition of the thing type, including thing type name and description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThingTypeDefinition
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThingTypeArn { get; set; }
		
		/// <summary>
		/// The ThingTypeProperties contains information about the thing type including: a thing type description, and a list of searchable thing attribute names.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThingTypeProperties ThingTypeProperties { get; set; }
		
		/// <summary>
		/// The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when time was deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThingTypeMetadata ThingTypeMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TopicRuleDestinationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 3,
	}
	
	/// <summary>
	/// Information about the topic rule destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TopicRuleDestinationSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TopicRuleDestinationSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusReason { get; set; }
		
		/// <summary>
		/// Information about an HTTP URL destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HttpUrlDestinationSummary HttpUrlSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TopicRuleDestinationSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 3,
	}
	
	/// <summary>
	/// Describes a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TopicRuleListItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RuleArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string RuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TopicPattern { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RuleDisabled { get; set; }
	}
	
	/// <summary>
	/// The input for the TransferCertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferCertificateRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string TransferMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagKey[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAccountAuditConfigurationRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuditNotificationTargetConfigurations AuditNotificationTargetConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuditCheckConfigurations AuditCheckConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAuthorizerRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerFunctionArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string TokenKeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PublicKeyMap TokenSigningPublicKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateAuthorizerRequestStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateAuthorizerRequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateBillingGroupRequest
	{
		
		/// <summary>
		/// The properties of a billing group.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BillingGroupProperties BillingGroupProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
	}
	
	/// <summary>
	/// The input to the UpdateCACertificate operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateCACertificateRequest
	{
		
		/// <summary>
		/// The registration configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RegistrationConfig RegistrationConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemoveAutoRegistration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDimensionRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DimensionStringValue[] StringValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainConfigurationRequest
	{
		
		/// <summary>
		/// An object that specifies the authorization service for a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthorizerConfig AuthorizerConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateDomainConfigurationRequestDomainConfigurationStatus DomainConfigurationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemoveAuthorizerConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateDomainConfigurationRequestDomainConfigurationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDynamicThingGroupRequest
	{
		
		/// <summary>
		/// Thing group properties.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ThingGroupProperties ThingGroupProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string QueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QueryVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateEventConfigurationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventConfigurations EventConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateIndexingConfigurationRequest
	{
		
		/// <summary>
		/// The thing indexing configuration. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/managing-index.html">Managing Thing Indexing</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThingIndexingConfiguration ThingIndexingConfiguration { get; set; }
		
		/// <summary>
		/// Thing group indexing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThingGroupIndexingConfiguration ThingGroupIndexingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateJobRequest
	{
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
		
		/// <summary>
		/// Configuration for pre-signed S3 URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PresignedUrlConfig PresignedUrlConfig { get; set; }
		
		/// <summary>
		/// Allows you to create a staged rollout of a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobExecutionsRolloutConfig JobExecutionsRolloutConfig { get; set; }
		
		/// <summary>
		/// Details of abort criteria to abort the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AbortConfig AbortConfig { get; set; }
		
		/// <summary>
		/// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimeoutConfig TimeoutConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMitigationActionRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MitigationActionParams ActionParams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateProvisioningTemplateRequest
	{
		
		/// <summary>
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [^\p{C}]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultVersionId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ProvisioningRoleArn { get; set; }
		
		/// <summary>
		/// Structure that contains <code>payloadVersion</code> and <code>targetArn</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningHook PreProvisioningHook { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemovePreProvisioningHook { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRoleAliasRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Minimum: 900
		/// Maximum: 3600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(900, 3600)]
		public System.Nullable<System.Int32> CredentialDurationSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateScheduledAuditRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateScheduledAuditRequestFrequency Frequency { get; set; }
		
		/// <summary>
		/// Pattern: ^([1-9]|[12][0-9]|3[01])$|^LAST$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DayOfMonth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateScheduledAuditRequestDayOfWeek DayOfWeek { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuditCheckName[] TargetCheckNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateScheduledAuditRequestFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIWEEKLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateScheduledAuditRequestDayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THU = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAT = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSecurityProfileRequest
	{
		
		/// <summary>
		/// Max length: 1000
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string SecurityProfileDescription { get; set; }
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Behavior[] Behaviors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlertTargets AlertTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BehaviorMetric[] AdditionalMetricsToRetain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricToRetain[] AdditionalMetricsToRetainV2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteBehaviors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteAlertTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteAdditionalMetricsToRetain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateStreamRequest
	{
		
		/// <summary>
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public StreamFile[] Files { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateThingGroupRequest
	{
		
		/// <summary>
		/// Thing group properties.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ThingGroupProperties ThingGroupProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateThingGroupsForThingRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThingGroupName[] ThingGroupsToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThingGroupName[] ThingGroupsToRemove { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverrideDynamicGroups { get; set; }
	}
	
	/// <summary>
	/// The input for the UpdateThing operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateThingRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingTypeName { get; set; }
		
		/// <summary>
		/// The attribute payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributePayload AttributePayload { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemoveThingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTopicRuleDestinationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateTopicRuleDestinationRequestStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateTopicRuleDestinationRequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidateSecurityProfileBehaviorsRequest
	{
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Behavior[] Behaviors { get; set; }
	}
	
	/// <summary>
	/// Information about an error found in a behavior specification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidationError
	{
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ViolationEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		in-alarm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alarm-cleared = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alarm-invalidated = 2,
	}
	
	/// <summary>
	/// Information about a Device Defender security profile behavior violation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ViolationEvent
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ViolationId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingName { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string SecurityProfileName { get; set; }
		
		/// <summary>
		/// A Device Defender security profile behavior.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Behavior Behavior { get; set; }
		
		/// <summary>
		/// The value to be compared with the <code>metric</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetricValue MetricValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ViolationEventViolationEventType ViolationEventType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ViolationEventTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ViolationEventViolationEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		in-alarm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alarm-cleared = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alarm-invalidated = 2,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Adds a thing to a billing group.
		/// AddThingToBillingGroup /billing-groups/addThingToBillingGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddThingToBillingGroupResponse> AddThingToBillingGroupAsync(AddThingToBillingGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/billing-groups/addThingToBillingGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AddThingToBillingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a thing to a thing group.
		/// AddThingToThingGroup /thing-groups/addThingToThingGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddThingToThingGroupResponse> AddThingToThingGroupAsync(AddThingToThingGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-groups/addThingToThingGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AddThingToThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a group with a continuous job. The following criteria must be met: </p> <ul> <li> <p>The job must have been created with the <code>targetSelection</code> field set to "CONTINUOUS".</p> </li> <li> <p>The job status must currently be "IN_PROGRESS".</p> </li> <li> <p>The total number of targets associated with a job must not exceed 100.</p> </li> </ul>
		/// AssociateTargetsWithJob /jobs/{jobId}/targets
		/// </summary>
		/// <param name="jobId">The unique identifier you assigned to this job when it was created.</param>
		/// <returns>Success</returns>
		public async Task<AssociateTargetsWithJobResponse> AssociateTargetsWithJobAsync(string jobId, AssociateTargetsWithJobBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/jobs/"+ (jobId==null? "" : Uri.EscapeDataString(jobId))+"/targets";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AssociateTargetsWithJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attaches a policy to the specified target.
		/// AttachPolicy /target-policies/{policyName}
		/// </summary>
		/// <param name="policyName">The name of the policy to attach.</param>
		/// <returns>Success</returns>
		public async Task AttachPolicyAsync(string policyName, AttachPolicyBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/target-policies/"+ (policyName==null? "" : Uri.EscapeDataString(policyName));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Detaches a policy from the specified target.
		/// DetachPolicy /target-policies/{policyName}
		/// </summary>
		/// <param name="policyName">The policy to detach.</param>
		/// <returns>Success</returns>
		public async Task DetachPolicyAsync(string policyName, DetachPolicyBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/target-policies/"+ (policyName==null? "" : Uri.EscapeDataString(policyName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches the specified policy to the specified principal (certificate or other credential).</p> <p> <b>Note:</b> This API is deprecated. Please use <a>AttachPolicy</a> instead.</p>
		/// AttachPrincipalPolicy /principal-policies/{policyName}#x-amzn-iot-principal
		/// </summary>
		/// <param name="policyName">The policy name.</param>
		/// <returns>Success</returns>
		public async Task AttachPrincipalPolicyAsync(string policyName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/principal-policies/"+ (policyName==null? "" : Uri.EscapeDataString(policyName))+"#x-amzn-iot-principal";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified policy from the specified certificate.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>DetachPolicy</a> instead.</p>
		/// DetachPrincipalPolicy /principal-policies/{policyName}#x-amzn-iot-principal
		/// </summary>
		/// <param name="policyName">The name of the policy to detach.</param>
		/// <returns>Success</returns>
		public async Task DetachPrincipalPolicyAsync(string policyName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/principal-policies/"+ (policyName==null? "" : Uri.EscapeDataString(policyName))+"#x-amzn-iot-principal";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a Device Defender security profile with a thing group or this account. Each thing group or account can have up to five security profiles associated with it.
		/// AttachSecurityProfile /security-profiles/{securityProfileName}/targets#securityProfileTargetArn
		/// </summary>
		/// <param name="securityProfileName">The security profile that is attached.</param>
		/// <param name="securityProfileTargetArn">The ARN of the target (thing group) to which the security profile is attached.</param>
		/// <returns>Success</returns>
		public async Task<AttachSecurityProfileResponse> AttachSecurityProfileAsync(string securityProfileName, string securityProfileTargetArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/security-profiles/"+ (securityProfileName==null? "" : Uri.EscapeDataString(securityProfileName))+"/targets#securityProfileTargetArn&securityProfileTargetArn=" + (securityProfileTargetArn==null? "" : Uri.EscapeDataString(securityProfileTargetArn));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AttachSecurityProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a Device Defender security profile from a thing group or from this account.
		/// DetachSecurityProfile /security-profiles/{securityProfileName}/targets#securityProfileTargetArn
		/// </summary>
		/// <param name="securityProfileName">The security profile that is detached.</param>
		/// <param name="securityProfileTargetArn">The ARN of the thing group from which the security profile is detached.</param>
		/// <returns>Success</returns>
		public async Task<DetachSecurityProfileResponse> DetachSecurityProfileAsync(string securityProfileName, string securityProfileTargetArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/security-profiles/"+ (securityProfileName==null? "" : Uri.EscapeDataString(securityProfileName))+"/targets#securityProfileTargetArn&securityProfileTargetArn=" + (securityProfileTargetArn==null? "" : Uri.EscapeDataString(securityProfileTargetArn));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DetachSecurityProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attaches the specified principal to the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.
		/// AttachThingPrincipal /things/{thingName}/principals#x-amzn-principal
		/// </summary>
		/// <param name="thingName">The name of the thing.</param>
		/// <returns>Success</returns>
		public async Task<AttachThingPrincipalResponse> AttachThingPrincipalAsync(string thingName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/things/"+ (thingName==null? "" : Uri.EscapeDataString(thingName))+"/principals#x-amzn-principal";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AttachThingPrincipalResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Detaches the specified principal from the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.</p> <note> <p>This call is asynchronous. It might take several seconds for the detachment to propagate.</p> </note>
		/// DetachThingPrincipal /things/{thingName}/principals#x-amzn-principal
		/// </summary>
		/// <param name="thingName">The name of the thing.</param>
		/// <returns>Success</returns>
		public async Task<DetachThingPrincipalResponse> DetachThingPrincipalAsync(string thingName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/things/"+ (thingName==null? "" : Uri.EscapeDataString(thingName))+"/principals#x-amzn-principal";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DetachThingPrincipalResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a mitigation action task that is in progress. If the task is not in progress, an InvalidRequestException occurs.
		/// CancelAuditMitigationActionsTask /audit/mitigationactions/tasks/{taskId}/cancel
		/// </summary>
		/// <param name="taskId">The unique identifier for the task that you want to cancel. </param>
		/// <returns>Success</returns>
		public async Task<CancelAuditMitigationActionsTaskResponse> CancelAuditMitigationActionsTaskAsync(string taskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/mitigationactions/tasks/"+ (taskId==null? "" : Uri.EscapeDataString(taskId))+"/cancel";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CancelAuditMitigationActionsTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels an audit that is in progress. The audit can be either scheduled or on-demand. If the audit is not in progress, an "InvalidRequestException" occurs.
		/// CancelAuditTask /audit/tasks/{taskId}/cancel
		/// </summary>
		/// <param name="taskId">The ID of the audit you want to cancel. You can only cancel an audit that is "IN_PROGRESS".</param>
		/// <returns>Success</returns>
		public async Task<CancelAuditTaskResponse> CancelAuditTaskAsync(string taskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/tasks/"+ (taskId==null? "" : Uri.EscapeDataString(taskId))+"/cancel";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CancelAuditTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a job.
		/// CancelJob /jobs/{jobId}/cancel
		/// </summary>
		/// <param name="jobId">The unique identifier you assigned to this job when it was created.</param>
		/// <param name="force"><p>(Optional) If <code>true</code> job executions with status "IN_PROGRESS" and "QUEUED" are canceled, otherwise only job executions with status "QUEUED" are canceled. The default is <code>false</code>.</p> <p>Canceling a job which is "IN_PROGRESS", will cause a device which is executing the job to be unable to update the job execution status. Use caution and ensure that each device executing a job which is canceled is able to recover to a valid state.</p></param>
		/// <returns>Success</returns>
		public async Task<CancelJobResponse> CancelJobAsync(string jobId, bool force, CancelJobBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/jobs/"+ (jobId==null? "" : Uri.EscapeDataString(jobId))+"/cancel&force="+force;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CancelJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancels the execution of a job for a given thing.
		/// CancelJobExecution /things/{thingName}/jobs/{jobId}/cancel
		/// </summary>
		/// <param name="jobId">The ID of the job to be canceled.</param>
		/// <param name="thingName">The name of the thing whose execution of the job will be canceled.</param>
		/// <param name="force"><p>(Optional) If <code>true</code> the job execution will be canceled if it has status IN_PROGRESS or QUEUED, otherwise the job execution will be canceled only if it has status QUEUED. If you attempt to cancel a job execution that is IN_PROGRESS, and you do not set <code>force</code> to <code>true</code>, then an <code>InvalidStateTransitionException</code> will be thrown. The default is <code>false</code>.</p> <p>Canceling a job execution which is "IN_PROGRESS", will cause the device to be unable to update the job execution status. Use caution and ensure that the device is able to recover to a valid state.</p></param>
		/// <returns>Success</returns>
		public async Task CancelJobExecutionAsync(string jobId, string thingName, bool force, CancelJobExecutionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/things/"+ (thingName==null? "" : Uri.EscapeDataString(thingName))+"/jobs/"+ (jobId==null? "" : Uri.EscapeDataString(jobId))+"/cancel&force="+force;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Clears the default authorizer.
		/// ClearDefaultAuthorizer /default-authorizer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ClearDefaultAuthorizerResponse> ClearDefaultAuthorizerAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/default-authorizer";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ClearDefaultAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the default authorizer.
		/// DescribeDefaultAuthorizer /default-authorizer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDefaultAuthorizerResponse> DescribeDefaultAuthorizerAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/default-authorizer";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDefaultAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the default authorizer. This will be used if a websocket connection is made without specifying an authorizer.
		/// SetDefaultAuthorizer /default-authorizer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetDefaultAuthorizerResponse> SetDefaultAuthorizerAsync(SetDefaultAuthorizerBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/default-authorizer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SetDefaultAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Confirms a topic rule destination. When you create a rule requiring a destination, AWS IoT sends a confirmation message to the endpoint or base address you specify. The message includes a token which you pass back when calling <code>ConfirmTopicRuleDestination</code> to confirm that you own or have access to the endpoint.
		/// ConfirmTopicRuleDestination /confirmdestination/{confirmationToken}
		/// </summary>
		/// <param name="confirmationToken">The token used to confirm ownership or access to the topic rule confirmation URL.</param>
		/// <returns>Success</returns>
		public async Task<ConfirmTopicRuleDestinationResponse> ConfirmTopicRuleDestinationAsync(string confirmationToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/confirmdestination/"+ (confirmationToken==null? "" : Uri.EscapeDataString(confirmationToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConfirmTopicRuleDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an authorizer.
		/// CreateAuthorizer /authorizer/{authorizerName}
		/// </summary>
		/// <param name="authorizerName">The authorizer name.</param>
		/// <returns>Success</returns>
		public async Task<CreateAuthorizerResponse> CreateAuthorizerAsync(string authorizerName, CreateAuthorizerBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/authorizer/"+ (authorizerName==null? "" : Uri.EscapeDataString(authorizerName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an authorizer.
		/// DeleteAuthorizer /authorizer/{authorizerName}
		/// </summary>
		/// <param name="authorizerName">The name of the authorizer to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteAuthorizerResponse> DeleteAuthorizerAsync(string authorizerName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/authorizer/"+ (authorizerName==null? "" : Uri.EscapeDataString(authorizerName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes an authorizer.
		/// DescribeAuthorizer /authorizer/{authorizerName}
		/// </summary>
		/// <param name="authorizerName">The name of the authorizer to describe.</param>
		/// <returns>Success</returns>
		public async Task<DescribeAuthorizerResponse> DescribeAuthorizerAsync(string authorizerName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/authorizer/"+ (authorizerName==null? "" : Uri.EscapeDataString(authorizerName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an authorizer.
		/// UpdateAuthorizer /authorizer/{authorizerName}
		/// </summary>
		/// <param name="authorizerName">The authorizer name.</param>
		/// <returns>Success</returns>
		public async Task<UpdateAuthorizerResponse> UpdateAuthorizerAsync(string authorizerName, UpdateAuthorizerBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/authorizer/"+ (authorizerName==null? "" : Uri.EscapeDataString(authorizerName));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a billing group.
		/// CreateBillingGroup /billing-groups/{billingGroupName}
		/// </summary>
		/// <param name="billingGroupName">The name you wish to give to the billing group.</param>
		/// <returns>Success</returns>
		public async Task<CreateBillingGroupResponse> CreateBillingGroupAsync(string billingGroupName, CreateBillingGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/billing-groups/"+ (billingGroupName==null? "" : Uri.EscapeDataString(billingGroupName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateBillingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the billing group.
		/// DeleteBillingGroup /billing-groups/{billingGroupName}
		/// </summary>
		/// <param name="billingGroupName">The name of the billing group.</param>
		/// <param name="expectedVersion">The expected version of the billing group. If the version of the billing group does not match the expected version specified in the request, the <code>DeleteBillingGroup</code> request is rejected with a <code>VersionConflictException</code>.</param>
		/// <returns>Success</returns>
		public async Task<DeleteBillingGroupResponse> DeleteBillingGroupAsync(string billingGroupName, int expectedVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/billing-groups/"+ (billingGroupName==null? "" : Uri.EscapeDataString(billingGroupName))+"&expectedVersion="+expectedVersion;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteBillingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a billing group.
		/// DescribeBillingGroup /billing-groups/{billingGroupName}
		/// </summary>
		/// <param name="billingGroupName">The name of the billing group.</param>
		/// <returns>Success</returns>
		public async Task<DescribeBillingGroupResponse> DescribeBillingGroupAsync(string billingGroupName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/billing-groups/"+ (billingGroupName==null? "" : Uri.EscapeDataString(billingGroupName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeBillingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an X.509 certificate using the specified certificate signing request.</p> <p> <b>Note:</b> The CSR must include a public key that is either an RSA key with a length of at least 2048 bits or an ECC key from NIST P-256 or NIST P-384 curves. </p> <p> <b>Note:</b> Reusing the same certificate signing request (CSR) results in a distinct certificate.</p> <p>You can create multiple certificates in a batch by creating a directory, copying multiple .csr files into that directory, and then specifying that directory on the command line. The following commands show how to create a batch of certificates given a batch of CSRs.</p> <p>Assuming a set of CSRs are located inside of the directory my-csr-directory:</p> <p>On Linux and OS X, the command is:</p> <p>$ ls my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>This command lists all of the CSRs in my-csr-directory and pipes each CSR file name to the aws iot create-certificate-from-csr AWS CLI command to create a certificate for the corresponding CSR.</p> <p>The aws iot create-certificate-from-csr part of the command can also be run in parallel to speed up the certificate creation process:</p> <p>$ ls my-csr-directory/ | xargs -P 10 -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p>On Windows PowerShell, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; ls -Name my-csr-directory | %{aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/$_}</p> <p>On a Windows command prompt, the command to create certificates for all CSRs in my-csr-directory is:</p> <p>&gt; forfiles /p my-csr-directory /c "cmd /c aws iot create-certificate-from-csr --certificate-signing-request file://@path"</p>
		/// CreateCertificateFromCsr /certificates
		/// </summary>
		/// <param name="setAsActive">Specifies whether the certificate is active.</param>
		/// <returns>Success</returns>
		public async Task<CreateCertificateFromCsrResponse> CreateCertificateFromCsrAsync(bool setAsActive, CreateCertificateFromCsrBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/certificates?setAsActive="+setAsActive;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateCertificateFromCsrResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the certificates registered in your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>
		/// ListCertificates /certificates
		/// </summary>
		/// <param name="pageSize">The result page size.</param>
		/// <param name="marker">The marker for the next set of results.</param>
		/// <param name="isAscendingOrder">Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.</param>
		/// <returns>Success</returns>
		public async Task<ListCertificatesResponse> ListCertificatesAsync(int pageSize, string marker, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/certificates?pageSize="+pageSize+"&marker=" + (marker==null? "" : Uri.EscapeDataString(marker))+"&isAscendingOrder="+isAscendingOrder;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListCertificatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a dimension that you can use to limit the scope of a metric used in a security profile for AWS IoT Device Defender. For example, using a <code>TOPIC_FILTER</code> dimension, you can narrow down the scope of the metric only to MQTT topics whose name match the pattern specified in the dimension.
		/// CreateDimension /dimensions/{name}
		/// </summary>
		/// <param name="name">A unique identifier for the dimension. Choose something that describes the type and value to make it easy to remember what it does.</param>
		/// <returns>Success</returns>
		public async Task<CreateDimensionResponse> CreateDimensionAsync(string name, CreateDimensionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/dimensions/"+ (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDimensionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the specified dimension from your AWS account.
		/// DeleteDimension /dimensions/{name}
		/// </summary>
		/// <param name="name">The unique identifier for the dimension that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteDimensionResponse> DeleteDimensionAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/dimensions/"+ (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDimensionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides details about a dimension that is defined in your AWS account.
		/// DescribeDimension /dimensions/{name}
		/// </summary>
		/// <param name="name">The unique identifier for the dimension.</param>
		/// <returns>Success</returns>
		public async Task<DescribeDimensionResponse> DescribeDimensionAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/dimensions/"+ (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDimensionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
		/// CreateDomainConfiguration /domainConfigurations/{domainConfigurationName}
		/// </summary>
		/// <param name="domainConfigurationName">The name of the domain configuration. This value must be unique to a region.</param>
		/// <returns>Success</returns>
		public async Task<CreateDomainConfigurationResponse> CreateDomainConfigurationAsync(string domainConfigurationName, CreateDomainConfigurationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/domainConfigurations/"+ (domainConfigurationName==null? "" : Uri.EscapeDataString(domainConfigurationName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDomainConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
		/// DeleteDomainConfiguration /domainConfigurations/{domainConfigurationName}
		/// </summary>
		/// <param name="domainConfigurationName">The name of the domain configuration to be deleted.</param>
		/// <returns>Success</returns>
		public async Task<DeleteDomainConfigurationResponse> DeleteDomainConfigurationAsync(string domainConfigurationName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/domainConfigurations/"+ (domainConfigurationName==null? "" : Uri.EscapeDataString(domainConfigurationName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDomainConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets summary information about a domain configuration.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
		/// DescribeDomainConfiguration /domainConfigurations/{domainConfigurationName}
		/// </summary>
		/// <param name="domainConfigurationName">The name of the domain configuration.</param>
		/// <returns>Success</returns>
		public async Task<DescribeDomainConfigurationResponse> DescribeDomainConfigurationAsync(string domainConfigurationName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/domainConfigurations/"+ (domainConfigurationName==null? "" : Uri.EscapeDataString(domainConfigurationName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDomainConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates values stored in the domain configuration. Domain configurations for default endpoints can't be updated.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
		/// UpdateDomainConfiguration /domainConfigurations/{domainConfigurationName}
		/// </summary>
		/// <param name="domainConfigurationName">The name of the domain configuration to be updated.</param>
		/// <returns>Success</returns>
		public async Task<UpdateDomainConfigurationResponse> UpdateDomainConfigurationAsync(string domainConfigurationName, UpdateDomainConfigurationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/domainConfigurations/"+ (domainConfigurationName==null? "" : Uri.EscapeDataString(domainConfigurationName));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDomainConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a dynamic thing group.
		/// CreateDynamicThingGroup /dynamic-thing-groups/{thingGroupName}
		/// </summary>
		/// <param name="thingGroupName">The dynamic thing group name to create.</param>
		/// <returns>Success</returns>
		public async Task<CreateDynamicThingGroupResponse> CreateDynamicThingGroupAsync(string thingGroupName, CreateDynamicThingGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/dynamic-thing-groups/"+ (thingGroupName==null? "" : Uri.EscapeDataString(thingGroupName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDynamicThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a dynamic thing group.
		/// DeleteDynamicThingGroup /dynamic-thing-groups/{thingGroupName}
		/// </summary>
		/// <param name="thingGroupName">The name of the dynamic thing group to delete.</param>
		/// <param name="expectedVersion">The expected version of the dynamic thing group to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteDynamicThingGroupResponse> DeleteDynamicThingGroupAsync(string thingGroupName, int expectedVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/dynamic-thing-groups/"+ (thingGroupName==null? "" : Uri.EscapeDataString(thingGroupName))+"&expectedVersion="+expectedVersion;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDynamicThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a job.
		/// CreateJob /jobs/{jobId}
		/// </summary>
		/// <param name="jobId">A job identifier which must be unique for your AWS account. We recommend using a UUID. Alpha-numeric characters, "-" and "_" are valid for use here.</param>
		/// <returns>Success</returns>
		public async Task<CreateJobResponse> CreateJobAsync(string jobId, CreateJobBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/jobs/"+ (jobId==null? "" : Uri.EscapeDataString(jobId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a job and its related job executions.</p> <p>Deleting a job may take time, depending on the number of job executions created for the job and various other factors. While the job is being deleted, the status of the job will be shown as "DELETION_IN_PROGRESS". Attempting to delete or cancel a job whose status is already "DELETION_IN_PROGRESS" will result in an error.</p> <p>Only 10 jobs may have status "DELETION_IN_PROGRESS" at the same time, or a LimitExceededException will occur.</p>
		/// DeleteJob /jobs/{jobId}
		/// </summary>
		/// <param name="jobId"><p>The ID of the job to be deleted.</p> <p>After a job deletion is completed, you may reuse this jobId when you create a new job. However, this is not recommended, and you must ensure that your devices are not using the jobId to refer to the deleted job.</p></param>
		/// <param name="force"><p>(Optional) When true, you can delete a job which is "IN_PROGRESS". Otherwise, you can only delete a job which is in a terminal state ("COMPLETED" or "CANCELED") or an exception will occur. The default is false.</p> <note> <p>Deleting a job which is "IN_PROGRESS", will cause a device which is executing the job to be unable to access job information or update the job execution status. Use caution and ensure that each device executing a job which is deleted is able to recover to a valid state.</p> </note></param>
		/// <returns>Success</returns>
		public async Task DeleteJobAsync(string jobId, bool force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/jobs/"+ (jobId==null? "" : Uri.EscapeDataString(jobId))+"&force="+force;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes a job.
		/// DescribeJob /jobs/{jobId}
		/// </summary>
		/// <param name="jobId">The unique identifier you assigned to this job when it was created.</param>
		/// <returns>Success</returns>
		public async Task<DescribeJobResponse> DescribeJobAsync(string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/jobs/"+ (jobId==null? "" : Uri.EscapeDataString(jobId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued public key. You can also call <code>CreateKeysAndCertificate</code> over MQTT from a device, for more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html#provision-mqtt-api">Provisioning MQTT API</a>.</p> <p> <b>Note</b> This is the only time AWS IoT issues the private key for this certificate, so it is important to keep it in a secure location.</p>
		/// CreateKeysAndCertificate /keys-and-certificate
		/// </summary>
		/// <param name="setAsActive">Specifies whether the certificate is active.</param>
		/// <returns>Success</returns>
		public async Task<CreateKeysAndCertificateResponse> CreateKeysAndCertificateAsync(bool setAsActive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/keys-and-certificate?setAsActive="+setAsActive;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateKeysAndCertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Defines an action that can be applied to audit findings by using StartAuditMitigationActionsTask. Each mitigation action can apply only one type of change.
		/// CreateMitigationAction /mitigationactions/actions/{actionName}
		/// </summary>
		/// <param name="actionName">A friendly name for the action. Choose a friendly name that accurately describes the action (for example, <code>EnableLoggingAction</code>).</param>
		/// <returns>Success</returns>
		public async Task<CreateMitigationActionResponse> CreateMitigationActionAsync(string actionName, CreateMitigationActionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/mitigationactions/actions/"+ (actionName==null? "" : Uri.EscapeDataString(actionName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateMitigationActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a defined mitigation action from your AWS account.
		/// DeleteMitigationAction /mitigationactions/actions/{actionName}
		/// </summary>
		/// <param name="actionName">The name of the mitigation action that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteMitigationActionResponse> DeleteMitigationActionAsync(string actionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/mitigationactions/actions/"+ (actionName==null? "" : Uri.EscapeDataString(actionName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteMitigationActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a mitigation action.
		/// DescribeMitigationAction /mitigationactions/actions/{actionName}
		/// </summary>
		/// <param name="actionName">The friendly name that uniquely identifies the mitigation action.</param>
		/// <returns>Success</returns>
		public async Task<DescribeMitigationActionResponse> DescribeMitigationActionAsync(string actionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/mitigationactions/actions/"+ (actionName==null? "" : Uri.EscapeDataString(actionName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeMitigationActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an AWS IoT OTAUpdate on a target group of things or groups.
		/// CreateOTAUpdate /otaUpdates/{otaUpdateId}
		/// </summary>
		/// <param name="otaUpdateId">The ID of the OTA update to be created.</param>
		/// <returns>Success</returns>
		public async Task<CreateOTAUpdateResponse> CreateOTAUpdateAsync(string otaUpdateId, CreateOTAUpdateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/otaUpdates/"+ (otaUpdateId==null? "" : Uri.EscapeDataString(otaUpdateId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateOTAUpdateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an OTA update.
		/// DeleteOTAUpdate /otaUpdates/{otaUpdateId}
		/// </summary>
		/// <param name="otaUpdateId">The OTA update ID to delete.</param>
		/// <param name="deleteStream">Specifies if the stream associated with an OTA update should be deleted when the OTA update is deleted.</param>
		/// <param name="forceDeleteAWSJob">Specifies if the AWS Job associated with the OTA update should be deleted with the OTA update is deleted.</param>
		/// <returns>Success</returns>
		public async Task<DeleteOTAUpdateResponse> DeleteOTAUpdateAsync(string otaUpdateId, bool deleteStream, bool forceDeleteAWSJob, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/otaUpdates/"+ (otaUpdateId==null? "" : Uri.EscapeDataString(otaUpdateId))+"&deleteStream="+deleteStream+"&forceDeleteAWSJob="+forceDeleteAWSJob;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteOTAUpdateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an OTA update.
		/// GetOTAUpdate /otaUpdates/{otaUpdateId}
		/// </summary>
		/// <param name="otaUpdateId">The OTA update ID.</param>
		/// <returns>Success</returns>
		public async Task<GetOTAUpdateResponse> GetOTAUpdateAsync(string otaUpdateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/otaUpdates/"+ (otaUpdateId==null? "" : Uri.EscapeDataString(otaUpdateId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetOTAUpdateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an AWS IoT policy.</p> <p>The created policy is the default version for the policy. This operation creates a policy version with a version identifier of <b>1</b> and sets <b>1</b> as the policy's default version.</p>
		/// CreatePolicy /policies/{policyName}
		/// </summary>
		/// <param name="policyName">The policy name.</param>
		/// <returns>Success</returns>
		public async Task<CreatePolicyResponse> CreatePolicyAsync(string policyName, CreatePolicyBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/policies/"+ (policyName==null? "" : Uri.EscapeDataString(policyName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreatePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified policy.</p> <p>A policy cannot be deleted if it has non-default versions or it is attached to any certificate.</p> <p>To delete a policy, use the DeletePolicyVersion API to delete all non-default versions of the policy; use the DetachPrincipalPolicy API to detach the policy from any certificate; and then use the DeletePolicy API to delete the policy.</p> <p>When a policy is deleted using DeletePolicy, its default version is deleted with it.</p>
		/// DeletePolicy /policies/{policyName}
		/// </summary>
		/// <param name="policyName">The name of the policy to delete.</param>
		/// <returns>Success</returns>
		public async Task DeletePolicyAsync(string policyName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/policies/"+ (policyName==null? "" : Uri.EscapeDataString(policyName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified policy with the policy document of the default version.
		/// GetPolicy /policies/{policyName}
		/// </summary>
		/// <param name="policyName">The name of the policy.</param>
		/// <returns>Success</returns>
		public async Task<GetPolicyResponse> GetPolicyAsync(string policyName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/policies/"+ (policyName==null? "" : Uri.EscapeDataString(policyName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new version of the specified AWS IoT policy. To update a policy, create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must use <a>DeletePolicyVersion</a> to delete an existing version before you create a new one.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the operative version (that is, the version that is in effect for the certificates to which the policy is attached).</p>
		/// CreatePolicyVersion /policies/{policyName}/version
		/// </summary>
		/// <param name="policyName">The policy name.</param>
		/// <param name="setAsDefault">Specifies whether the policy version is set as the default. When this parameter is true, the new policy version becomes the operative version (that is, the version that is in effect for the certificates to which the policy is attached).</param>
		/// <returns>Success</returns>
		public async Task<CreatePolicyVersionResponse> CreatePolicyVersionAsync(string policyName, bool setAsDefault, CreatePolicyVersionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/policies/"+ (policyName==null? "" : Uri.EscapeDataString(policyName))+"/version&setAsDefault="+setAsDefault;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreatePolicyVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the versions of the specified policy and identifies the default version.
		/// ListPolicyVersions /policies/{policyName}/version
		/// </summary>
		/// <param name="policyName">The policy name.</param>
		/// <returns>Success</returns>
		public async Task<ListPolicyVersionsResponse> ListPolicyVersionsAsync(string policyName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/policies/"+ (policyName==null? "" : Uri.EscapeDataString(policyName))+"/version";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPolicyVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a provisioning claim.
		/// CreateProvisioningClaim /provisioning-templates/{templateName}/provisioning-claim
		/// </summary>
		/// <param name="templateName">The name of the provisioning template to use.</param>
		/// <returns>Success</returns>
		public async Task<CreateProvisioningClaimResponse> CreateProvisioningClaimAsync(string templateName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/provisioning-templates/"+ (templateName==null? "" : Uri.EscapeDataString(templateName))+"/provisioning-claim";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateProvisioningClaimResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a fleet provisioning template.
		/// CreateProvisioningTemplate /provisioning-templates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateProvisioningTemplateResponse> CreateProvisioningTemplateAsync(CreateProvisioningTemplateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/provisioning-templates";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateProvisioningTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the fleet provisioning templates in your AWS account.
		/// ListProvisioningTemplates /provisioning-templates
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return at one time.</param>
		/// <param name="nextToken">A token to retrieve the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListProvisioningTemplatesResponse> ListProvisioningTemplatesAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/provisioning-templates?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListProvisioningTemplatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new version of a fleet provisioning template.
		/// CreateProvisioningTemplateVersion /provisioning-templates/{templateName}/versions
		/// </summary>
		/// <param name="templateName">The name of the fleet provisioning template.</param>
		/// <param name="setAsDefault">Sets a fleet provision template version as the default version.</param>
		/// <returns>Success</returns>
		public async Task<CreateProvisioningTemplateVersionResponse> CreateProvisioningTemplateVersionAsync(string templateName, bool setAsDefault, CreateProvisioningTemplateVersionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/provisioning-templates/"+ (templateName==null? "" : Uri.EscapeDataString(templateName))+"/versions&setAsDefault="+setAsDefault;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateProvisioningTemplateVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A list of fleet provisioning template versions.
		/// ListProvisioningTemplateVersions /provisioning-templates/{templateName}/versions
		/// </summary>
		/// <param name="templateName">The name of the fleet provisioning template.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.</param>
		/// <param name="nextToken">A token to retrieve the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListProvisioningTemplateVersionsResponse> ListProvisioningTemplateVersionsAsync(string templateName, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/provisioning-templates/"+ (templateName==null? "" : Uri.EscapeDataString(templateName))+"/versions&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListProvisioningTemplateVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a role alias.
		/// CreateRoleAlias /role-aliases/{roleAlias}
		/// </summary>
		/// <param name="roleAlias">The role alias that points to a role ARN. This allows you to change the role without having to update the device.</param>
		/// <returns>Success</returns>
		public async Task<CreateRoleAliasResponse> CreateRoleAliasAsync(string roleAlias, CreateRoleAliasBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/role-aliases/"+ (roleAlias==null? "" : Uri.EscapeDataString(roleAlias));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateRoleAliasResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a role alias
		/// DeleteRoleAlias /role-aliases/{roleAlias}
		/// </summary>
		/// <param name="roleAlias">The role alias to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteRoleAliasResponse> DeleteRoleAliasAsync(string roleAlias, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/role-aliases/"+ (roleAlias==null? "" : Uri.EscapeDataString(roleAlias));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteRoleAliasResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes a role alias.
		/// DescribeRoleAlias /role-aliases/{roleAlias}
		/// </summary>
		/// <param name="roleAlias">The role alias to describe.</param>
		/// <returns>Success</returns>
		public async Task<DescribeRoleAliasResponse> DescribeRoleAliasAsync(string roleAlias, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/role-aliases/"+ (roleAlias==null? "" : Uri.EscapeDataString(roleAlias));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeRoleAliasResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a role alias.
		/// UpdateRoleAlias /role-aliases/{roleAlias}
		/// </summary>
		/// <param name="roleAlias">The role alias to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateRoleAliasResponse> UpdateRoleAliasAsync(string roleAlias, UpdateRoleAliasBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/role-aliases/"+ (roleAlias==null? "" : Uri.EscapeDataString(roleAlias));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateRoleAliasResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a scheduled audit that is run at a specified time interval.
		/// CreateScheduledAudit /audit/scheduledaudits/{scheduledAuditName}
		/// </summary>
		/// <param name="scheduledAuditName">The name you want to give to the scheduled audit. (Max. 128 chars)</param>
		/// <returns>Success</returns>
		public async Task<CreateScheduledAuditResponse> CreateScheduledAuditAsync(string scheduledAuditName, CreateScheduledAuditBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/scheduledaudits/"+ (scheduledAuditName==null? "" : Uri.EscapeDataString(scheduledAuditName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateScheduledAuditResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a scheduled audit.
		/// DeleteScheduledAudit /audit/scheduledaudits/{scheduledAuditName}
		/// </summary>
		/// <param name="scheduledAuditName">The name of the scheduled audit you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteScheduledAuditResponse> DeleteScheduledAuditAsync(string scheduledAuditName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/scheduledaudits/"+ (scheduledAuditName==null? "" : Uri.EscapeDataString(scheduledAuditName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteScheduledAuditResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a scheduled audit.
		/// DescribeScheduledAudit /audit/scheduledaudits/{scheduledAuditName}
		/// </summary>
		/// <param name="scheduledAuditName">The name of the scheduled audit whose information you want to get.</param>
		/// <returns>Success</returns>
		public async Task<DescribeScheduledAuditResponse> DescribeScheduledAuditAsync(string scheduledAuditName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/scheduledaudits/"+ (scheduledAuditName==null? "" : Uri.EscapeDataString(scheduledAuditName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeScheduledAuditResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Device Defender security profile.
		/// CreateSecurityProfile /security-profiles/{securityProfileName}
		/// </summary>
		/// <param name="securityProfileName">The name you are giving to the security profile.</param>
		/// <returns>Success</returns>
		public async Task<CreateSecurityProfileResponse> CreateSecurityProfileAsync(string securityProfileName, CreateSecurityProfileBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/security-profiles/"+ (securityProfileName==null? "" : Uri.EscapeDataString(securityProfileName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateSecurityProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Device Defender security profile.
		/// DeleteSecurityProfile /security-profiles/{securityProfileName}
		/// </summary>
		/// <param name="securityProfileName">The name of the security profile to be deleted.</param>
		/// <param name="expectedVersion">The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different from the actual version, a <code>VersionConflictException</code> is thrown.</param>
		/// <returns>Success</returns>
		public async Task<DeleteSecurityProfileResponse> DeleteSecurityProfileAsync(string securityProfileName, int expectedVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/security-profiles/"+ (securityProfileName==null? "" : Uri.EscapeDataString(securityProfileName))+"&expectedVersion="+expectedVersion;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteSecurityProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a Device Defender security profile.
		/// DescribeSecurityProfile /security-profiles/{securityProfileName}
		/// </summary>
		/// <param name="securityProfileName">The name of the security profile whose information you want to get.</param>
		/// <returns>Success</returns>
		public async Task<DescribeSecurityProfileResponse> DescribeSecurityProfileAsync(string securityProfileName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/security-profiles/"+ (securityProfileName==null? "" : Uri.EscapeDataString(securityProfileName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeSecurityProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a stream for delivering one or more large files in chunks over MQTT. A stream transports data bytes in chunks or blocks packaged as MQTT messages from a source like S3. You can have one or more files associated with a stream.
		/// CreateStream /streams/{streamId}
		/// </summary>
		/// <param name="streamId">The stream ID.</param>
		/// <returns>Success</returns>
		public async Task<CreateStreamResponse> CreateStreamAsync(string streamId, CreateStreamBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/streams/"+ (streamId==null? "" : Uri.EscapeDataString(streamId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateStreamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a stream.
		/// DeleteStream /streams/{streamId}
		/// </summary>
		/// <param name="streamId">The stream ID.</param>
		/// <returns>Success</returns>
		public async Task<DeleteStreamResponse> DeleteStreamAsync(string streamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/streams/"+ (streamId==null? "" : Uri.EscapeDataString(streamId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteStreamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a stream.
		/// DescribeStream /streams/{streamId}
		/// </summary>
		/// <param name="streamId">The stream ID.</param>
		/// <returns>Success</returns>
		public async Task<DescribeStreamResponse> DescribeStreamAsync(string streamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/streams/"+ (streamId==null? "" : Uri.EscapeDataString(streamId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeStreamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing stream. The stream version will be incremented by one.
		/// UpdateStream /streams/{streamId}
		/// </summary>
		/// <param name="streamId">The stream ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateStreamResponse> UpdateStreamAsync(string streamId, UpdateStreamBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/streams/"+ (streamId==null? "" : Uri.EscapeDataString(streamId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateStreamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a thing record in the registry. If this call is made multiple times using the same thing name and configuration, the call will succeed. If this call is made with the same thing name but different configuration a <code>ResourceAlreadyExistsException</code> is thrown.</p> <note> <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-authorization.html">Authorization</a> for information about authorizing control plane actions.</p> </note>
		/// CreateThing /things/{thingName}
		/// </summary>
		/// <param name="thingName"><p>The name of the thing to create.</p> <p>You can't change a thing's name after you create it. To change a thing's name, you must create a new thing, give it the new name, and then delete the old thing.</p></param>
		/// <returns>Success</returns>
		public async Task<CreateThingResponse> CreateThingAsync(string thingName, CreateThingBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/things/"+ (thingName==null? "" : Uri.EscapeDataString(thingName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateThingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified thing. Returns successfully with no error if the deletion is successful or you specify a thing that doesn't exist.
		/// DeleteThing /things/{thingName}
		/// </summary>
		/// <param name="thingName">The name of the thing to delete.</param>
		/// <param name="expectedVersion">The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>DeleteThing</code> request is rejected with a <code>VersionConflictException</code>.</param>
		/// <returns>Success</returns>
		public async Task<DeleteThingResponse> DeleteThingAsync(string thingName, int expectedVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/things/"+ (thingName==null? "" : Uri.EscapeDataString(thingName))+"&expectedVersion="+expectedVersion;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteThingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified thing.
		/// DescribeThing /things/{thingName}
		/// </summary>
		/// <param name="thingName">The name of the thing.</param>
		/// <returns>Success</returns>
		public async Task<DescribeThingResponse> DescribeThingAsync(string thingName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/things/"+ (thingName==null? "" : Uri.EscapeDataString(thingName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeThingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Create a thing group.</p> <note> <p>This is a control plane operation. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-authorization.html">Authorization</a> for information about authorizing control plane actions.</p> </note>
		/// CreateThingGroup /thing-groups/{thingGroupName}
		/// </summary>
		/// <param name="thingGroupName">The thing group name to create.</param>
		/// <returns>Success</returns>
		public async Task<CreateThingGroupResponse> CreateThingGroupAsync(string thingGroupName, CreateThingGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-groups/"+ (thingGroupName==null? "" : Uri.EscapeDataString(thingGroupName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a thing group.
		/// DeleteThingGroup /thing-groups/{thingGroupName}
		/// </summary>
		/// <param name="thingGroupName">The name of the thing group to delete.</param>
		/// <param name="expectedVersion">The expected version of the thing group to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteThingGroupResponse> DeleteThingGroupAsync(string thingGroupName, int expectedVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-groups/"+ (thingGroupName==null? "" : Uri.EscapeDataString(thingGroupName))+"&expectedVersion="+expectedVersion;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describe a thing group.
		/// DescribeThingGroup /thing-groups/{thingGroupName}
		/// </summary>
		/// <param name="thingGroupName">The name of the thing group.</param>
		/// <returns>Success</returns>
		public async Task<DescribeThingGroupResponse> DescribeThingGroupAsync(string thingGroupName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-groups/"+ (thingGroupName==null? "" : Uri.EscapeDataString(thingGroupName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new thing type.
		/// CreateThingType /thing-types/{thingTypeName}
		/// </summary>
		/// <param name="thingTypeName">The name of the thing type.</param>
		/// <returns>Success</returns>
		public async Task<CreateThingTypeResponse> CreateThingTypeAsync(string thingTypeName, CreateThingTypeBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-types/"+ (thingTypeName==null? "" : Uri.EscapeDataString(thingTypeName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateThingTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified thing type. You cannot delete a thing type if it has things associated with it. To delete a thing type, first mark it as deprecated by calling <a>DeprecateThingType</a>, then remove any associated things by calling <a>UpdateThing</a> to change the thing type on any associated thing, and finally use <a>DeleteThingType</a> to delete the thing type.
		/// DeleteThingType /thing-types/{thingTypeName}
		/// </summary>
		/// <param name="thingTypeName">The name of the thing type.</param>
		/// <returns>Success</returns>
		public async Task<DeleteThingTypeResponse> DeleteThingTypeAsync(string thingTypeName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-types/"+ (thingTypeName==null? "" : Uri.EscapeDataString(thingTypeName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteThingTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified thing type.
		/// DescribeThingType /thing-types/{thingTypeName}
		/// </summary>
		/// <param name="thingTypeName">The name of the thing type.</param>
		/// <returns>Success</returns>
		public async Task<DescribeThingTypeResponse> DescribeThingTypeAsync(string thingTypeName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-types/"+ (thingTypeName==null? "" : Uri.EscapeDataString(thingTypeName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeThingTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.
		/// CreateTopicRule /rules/{ruleName}
		/// </summary>
		/// <param name="ruleName">The name of the rule.</param>
		/// <returns>Success</returns>
		public async Task CreateTopicRuleAsync(string ruleName, CreateTopicRuleBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/rules/"+ (ruleName==null? "" : Uri.EscapeDataString(ruleName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the rule.
		/// DeleteTopicRule /rules/{ruleName}
		/// </summary>
		/// <param name="ruleName">The name of the rule.</param>
		/// <returns>Success</returns>
		public async Task DeleteTopicRuleAsync(string ruleName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/rules/"+ (ruleName==null? "" : Uri.EscapeDataString(ruleName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the rule.
		/// GetTopicRule /rules/{ruleName}
		/// </summary>
		/// <param name="ruleName">The name of the rule.</param>
		/// <returns>Success</returns>
		public async Task<GetTopicRuleResponse> GetTopicRuleAsync(string ruleName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/rules/"+ (ruleName==null? "" : Uri.EscapeDataString(ruleName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetTopicRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a topic rule destination. The destination must be confirmed prior to use.
		/// CreateTopicRuleDestination /destinations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTopicRuleDestinationResponse> CreateTopicRuleDestinationAsync(CreateTopicRuleDestinationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/destinations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateTopicRuleDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all the topic rule destinations in your AWS account.
		/// ListTopicRuleDestinations /destinations
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return at one time.</param>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListTopicRuleDestinationsResponse> ListTopicRuleDestinationsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/destinations?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTopicRuleDestinationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores the default settings for Device Defender audits for this account. Any configuration data you entered is deleted and all audit checks are reset to disabled.
		/// DeleteAccountAuditConfiguration /audit/configuration
		/// </summary>
		/// <param name="deleteScheduledAudits">If true, all scheduled audits are deleted.</param>
		/// <returns>Success</returns>
		public async Task<DeleteAccountAuditConfigurationResponse> DeleteAccountAuditConfigurationAsync(bool deleteScheduledAudits, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/configuration?deleteScheduledAudits="+deleteScheduledAudits;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteAccountAuditConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the Device Defender audit settings for this account. Settings include how audit notifications are sent and which audit checks are enabled or disabled.
		/// DescribeAccountAuditConfiguration /audit/configuration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAccountAuditConfigurationResponse> DescribeAccountAuditConfigurationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/configuration";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAccountAuditConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a registered CA certificate.
		/// DeleteCACertificate /cacertificate/{caCertificateId}
		/// </summary>
		/// <param name="caCertificateId">The ID of the certificate to delete. (The last part of the certificate ARN contains the certificate ID.)</param>
		/// <returns>Success</returns>
		public async Task<DeleteCACertificateResponse> DeleteCACertificateAsync(string caCertificateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/cacertificate/"+ (caCertificateId==null? "" : Uri.EscapeDataString(caCertificateId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteCACertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes a registered CA certificate.
		/// DescribeCACertificate /cacertificate/{caCertificateId}
		/// </summary>
		/// <param name="caCertificateId">The CA certificate identifier.</param>
		/// <returns>Success</returns>
		public async Task<DescribeCACertificateResponse> DescribeCACertificateAsync(string caCertificateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/cacertificate/"+ (caCertificateId==null? "" : Uri.EscapeDataString(caCertificateId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeCACertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a registered CA certificate.
		/// UpdateCACertificate /cacertificate/{caCertificateId}
		/// </summary>
		/// <param name="caCertificateId">The CA certificate identifier.</param>
		/// <param name="newStatus"><p>The updated status of the CA certificate.</p> <p> <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p></param>
		/// <param name="newAutoRegistrationStatus">The new value for the auto registration status. Valid values are: "ENABLE" or "DISABLE".</param>
		/// <returns>Success</returns>
		public async Task UpdateCACertificateAsync(string caCertificateId, string newStatus, string newAutoRegistrationStatus, UpdateCACertificateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/cacertificate/"+ (caCertificateId==null? "" : Uri.EscapeDataString(caCertificateId))+"&newStatus=" + newStatus+"&newAutoRegistrationStatus=" + newAutoRegistrationStatus;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified certificate.</p> <p>A certificate cannot be deleted if it has a policy or IoT thing attached to it or if its status is set to ACTIVE. To delete a certificate, first use the <a>DetachPrincipalPolicy</a> API to detach all policies. Next, use the <a>UpdateCertificate</a> API to set the certificate to the INACTIVE status.</p>
		/// DeleteCertificate /certificates/{certificateId}
		/// </summary>
		/// <param name="certificateId">The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)</param>
		/// <param name="forceDelete">Forces the deletion of a certificate if it is inactive and is not attached to an IoT thing.</param>
		/// <returns>Success</returns>
		public async Task DeleteCertificateAsync(string certificateId, bool forceDelete, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/certificates/"+ (certificateId==null? "" : Uri.EscapeDataString(certificateId))+"&forceDelete="+forceDelete;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified certificate.
		/// DescribeCertificate /certificates/{certificateId}
		/// </summary>
		/// <param name="certificateId">The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)</param>
		/// <returns>Success</returns>
		public async Task<DescribeCertificateResponse> DescribeCertificateAsync(string certificateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/certificates/"+ (certificateId==null? "" : Uri.EscapeDataString(certificateId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeCertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a job execution.
		/// DeleteJobExecution /things/{thingName}/jobs/{jobId}/executionNumber/{executionNumber}
		/// </summary>
		/// <param name="jobId">The ID of the job whose execution on a particular device will be deleted.</param>
		/// <param name="thingName">The name of the thing whose job execution will be deleted.</param>
		/// <param name="executionNumber"><p>The ID of the job execution to be deleted. The <code>executionNumber</code> refers to the execution of a particular job on a particular device.</p> <p>Note that once a job execution is deleted, the <code>executionNumber</code> may be reused by IoT, so be sure you get and use the correct value here.</p></param>
		/// <param name="force"><p>(Optional) When true, you can delete a job execution which is "IN_PROGRESS". Otherwise, you can only delete a job execution which is in a terminal state ("SUCCEEDED", "FAILED", "REJECTED", "REMOVED" or "CANCELED") or an exception will occur. The default is false.</p> <note> <p>Deleting a job execution which is "IN_PROGRESS", will cause the device to be unable to access job information or update the job execution status. Use caution and ensure that the device is able to recover to a valid state.</p> </note></param>
		/// <returns>Success</returns>
		public async Task DeleteJobExecutionAsync(string jobId, string thingName, int executionNumber, bool force, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/things/"+ (thingName==null? "" : Uri.EscapeDataString(thingName))+"/jobs/"+ (jobId==null? "" : Uri.EscapeDataString(jobId))+"/executionNumber/"+executionNumber+"&force="+force;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified version of the specified policy. You cannot delete the default version of a policy using this API. To delete the default version of a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use ListPolicyVersions.
		/// DeletePolicyVersion /policies/{policyName}/version/{policyVersionId}
		/// </summary>
		/// <param name="policyName">The name of the policy.</param>
		/// <param name="policyVersionId">The policy version ID.</param>
		/// <returns>Success</returns>
		public async Task DeletePolicyVersionAsync(string policyName, string policyVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/policies/"+ (policyName==null? "" : Uri.EscapeDataString(policyName))+"/version/"+ (policyVersionId==null? "" : Uri.EscapeDataString(policyVersionId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified policy version.
		/// GetPolicyVersion /policies/{policyName}/version/{policyVersionId}
		/// </summary>
		/// <param name="policyName">The name of the policy.</param>
		/// <param name="policyVersionId">The policy version ID.</param>
		/// <returns>Success</returns>
		public async Task<GetPolicyVersionResponse> GetPolicyVersionAsync(string policyName, string policyVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/policies/"+ (policyName==null? "" : Uri.EscapeDataString(policyName))+"/version/"+ (policyVersionId==null? "" : Uri.EscapeDataString(policyVersionId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetPolicyVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a fleet provisioning template.
		/// DeleteProvisioningTemplate /provisioning-templates/{templateName}
		/// </summary>
		/// <param name="templateName">The name of the fleet provision template to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteProvisioningTemplateResponse> DeleteProvisioningTemplateAsync(string templateName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/provisioning-templates/"+ (templateName==null? "" : Uri.EscapeDataString(templateName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteProvisioningTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a fleet provisioning template.
		/// DescribeProvisioningTemplate /provisioning-templates/{templateName}
		/// </summary>
		/// <param name="templateName">The name of the fleet provisioning template.</param>
		/// <returns>Success</returns>
		public async Task<DescribeProvisioningTemplateResponse> DescribeProvisioningTemplateAsync(string templateName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/provisioning-templates/"+ (templateName==null? "" : Uri.EscapeDataString(templateName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeProvisioningTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a fleet provisioning template version.
		/// DeleteProvisioningTemplateVersion /provisioning-templates/{templateName}/versions/{versionId}
		/// </summary>
		/// <param name="templateName">The name of the fleet provisioning template version to delete.</param>
		/// <param name="versionId">The fleet provisioning template version ID to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteProvisioningTemplateVersionResponse> DeleteProvisioningTemplateVersionAsync(string templateName, int versionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/provisioning-templates/"+ (templateName==null? "" : Uri.EscapeDataString(templateName))+"/versions/"+versionId;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteProvisioningTemplateVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a fleet provisioning template version.
		/// DescribeProvisioningTemplateVersion /provisioning-templates/{templateName}/versions/{versionId}
		/// </summary>
		/// <param name="templateName">The template name.</param>
		/// <param name="versionId">The fleet provisioning template version ID.</param>
		/// <returns>Success</returns>
		public async Task<DescribeProvisioningTemplateVersionResponse> DescribeProvisioningTemplateVersionAsync(string templateName, int versionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/provisioning-templates/"+ (templateName==null? "" : Uri.EscapeDataString(templateName))+"/versions/"+versionId;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeProvisioningTemplateVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a CA certificate registration code.
		/// DeleteRegistrationCode /registrationcode
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRegistrationCodeResponse> DeleteRegistrationCodeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/registrationcode";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteRegistrationCodeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a registration code used to register a CA certificate with AWS IoT.
		/// GetRegistrationCode /registrationcode
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRegistrationCodeResponse> GetRegistrationCodeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/registrationcode";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRegistrationCodeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a topic rule destination.
		/// DeleteTopicRuleDestination /destinations/{arn}
		/// </summary>
		/// <param name="arn">The ARN of the topic rule destination to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteTopicRuleDestinationResponse> DeleteTopicRuleDestinationAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/destinations/"+ (arn==null? "" : Uri.EscapeDataString(arn));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteTopicRuleDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a topic rule destination.
		/// GetTopicRuleDestination /destinations/{arn}
		/// </summary>
		/// <param name="arn">The ARN of the topic rule destination.</param>
		/// <returns>Success</returns>
		public async Task<GetTopicRuleDestinationResponse> GetTopicRuleDestinationAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/destinations/"+ (arn==null? "" : Uri.EscapeDataString(arn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetTopicRuleDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a logging level.
		/// DeleteV2LoggingLevel /v2LoggingLevel#targetType&targetName
		/// </summary>
		/// <param name="targetType">The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.</param>
		/// <param name="targetName">The name of the resource for which you are configuring logging.</param>
		/// <returns>Success</returns>
		public async Task DeleteV2LoggingLevelAsync(LogTargetType targetType, string targetName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2LoggingLevel#targetType&targetName?targetType=" + targetType+"&targetName=" + (targetName==null? "" : Uri.EscapeDataString(targetName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deprecates a thing type. You can not associate new things with deprecated thing type.
		/// DeprecateThingType /thing-types/{thingTypeName}/deprecate
		/// </summary>
		/// <param name="thingTypeName">The name of the thing type to deprecate.</param>
		/// <returns>Success</returns>
		public async Task<DeprecateThingTypeResponse> DeprecateThingTypeAsync(string thingTypeName, DeprecateThingTypeBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-types/"+ (thingTypeName==null? "" : Uri.EscapeDataString(thingTypeName))+"/deprecate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeprecateThingTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a single audit finding. Properties include the reason for noncompliance, the severity of the issue, and when the audit that returned the finding was started.
		/// DescribeAuditFinding /audit/findings/{findingId}
		/// </summary>
		/// <param name="findingId">A unique identifier for a single audit finding. You can use this identifier to apply mitigation actions to the finding.</param>
		/// <returns>Success</returns>
		public async Task<DescribeAuditFindingResponse> DescribeAuditFindingAsync(string findingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/findings/"+ (findingId==null? "" : Uri.EscapeDataString(findingId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAuditFindingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about an audit mitigation task that is used to apply mitigation actions to a set of audit findings. Properties include the actions being applied, the audit checks to which they're being applied, the task status, and aggregated task statistics.
		/// DescribeAuditMitigationActionsTask /audit/mitigationactions/tasks/{taskId}
		/// </summary>
		/// <param name="taskId">The unique identifier for the audit mitigation task.</param>
		/// <returns>Success</returns>
		public async Task<DescribeAuditMitigationActionsTaskResponse> DescribeAuditMitigationActionsTaskAsync(string taskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/mitigationactions/tasks/"+ (taskId==null? "" : Uri.EscapeDataString(taskId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAuditMitigationActionsTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a task that applies a set of mitigation actions to the specified target.
		/// StartAuditMitigationActionsTask /audit/mitigationactions/tasks/{taskId}
		/// </summary>
		/// <param name="taskId">A unique identifier for the task. You can use this identifier to check the status of the task or to cancel it.</param>
		/// <returns>Success</returns>
		public async Task<StartAuditMitigationActionsTaskResponse> StartAuditMitigationActionsTaskAsync(string taskId, StartAuditMitigationActionsTaskBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/mitigationactions/tasks/"+ (taskId==null? "" : Uri.EscapeDataString(taskId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartAuditMitigationActionsTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a Device Defender audit.
		/// DescribeAuditTask /audit/tasks/{taskId}
		/// </summary>
		/// <param name="taskId">The ID of the audit whose information you want to get.</param>
		/// <returns>Success</returns>
		public async Task<DescribeAuditTaskResponse> DescribeAuditTaskAsync(string taskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/tasks/"+ (taskId==null? "" : Uri.EscapeDataString(taskId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAuditTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a unique endpoint specific to the AWS account making the call.
		/// DescribeEndpoint /endpoint
		/// </summary>
		/// <param name="endpointType"><p>The endpoint type. Valid endpoint types include:</p> <ul> <li> <p> <code>iot:Data</code> - Returns a VeriSign signed data endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:Data-ATS</code> - Returns an ATS signed data endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:CredentialProvider</code> - Returns an AWS IoT credentials provider API endpoint.</p> </li> </ul> <ul> <li> <p> <code>iot:Jobs</code> - Returns an AWS IoT device management Jobs API endpoint.</p> </li> </ul> <p>We strongly recommend that customers use the newer <code>iot:Data-ATS</code> endpoint type to avoid issues related to the widespread distrust of Symantec certificate authorities.</p></param>
		/// <returns>Success</returns>
		public async Task<DescribeEndpointResponse> DescribeEndpointAsync(string endpointType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/endpoint?endpointType=" + (endpointType==null? "" : Uri.EscapeDataString(endpointType));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeEndpointResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes event configurations.
		/// DescribeEventConfigurations /event-configurations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeEventConfigurationsResponse> DescribeEventConfigurationsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/event-configurations";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeEventConfigurationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes a search index.
		/// DescribeIndex /indices/{indexName}
		/// </summary>
		/// <param name="indexName">The index name.</param>
		/// <returns>Success</returns>
		public async Task<DescribeIndexResponse> DescribeIndexAsync(string indexName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/indices/"+ (indexName==null? "" : Uri.EscapeDataString(indexName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeIndexResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes a job execution.
		/// DescribeJobExecution /things/{thingName}/jobs/{jobId}
		/// </summary>
		/// <param name="jobId">The unique identifier you assigned to this job when it was created.</param>
		/// <param name="thingName">The name of the thing on which the job execution is running.</param>
		/// <param name="executionNumber">A string (consisting of the digits "0" through "9" which is used to specify a particular job execution on a particular device.</param>
		/// <returns>Success</returns>
		public async Task<DescribeJobExecutionResponse> DescribeJobExecutionAsync(string jobId, string thingName, int executionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/things/"+ (thingName==null? "" : Uri.EscapeDataString(thingName))+"/jobs/"+ (jobId==null? "" : Uri.EscapeDataString(jobId))+"&executionNumber="+executionNumber;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeJobExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes a bulk thing provisioning task.
		/// DescribeThingRegistrationTask /thing-registration-tasks/{taskId}
		/// </summary>
		/// <param name="taskId">The task ID.</param>
		/// <returns>Success</returns>
		public async Task<DescribeThingRegistrationTaskResponse> DescribeThingRegistrationTaskAsync(string taskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-registration-tasks/"+ (taskId==null? "" : Uri.EscapeDataString(taskId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeThingRegistrationTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables the rule.
		/// DisableTopicRule /rules/{ruleName}/disable
		/// </summary>
		/// <param name="ruleName">The name of the rule to disable.</param>
		/// <returns>Success</returns>
		public async Task DisableTopicRuleAsync(string ruleName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/rules/"+ (ruleName==null? "" : Uri.EscapeDataString(ruleName))+"/disable";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables the rule.
		/// EnableTopicRule /rules/{ruleName}/enable
		/// </summary>
		/// <param name="ruleName">The name of the topic rule to enable.</param>
		/// <returns>Success</returns>
		public async Task EnableTopicRuleAsync(string ruleName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/rules/"+ (ruleName==null? "" : Uri.EscapeDataString(ruleName))+"/enable";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the approximate count of unique values that match the query.
		/// GetCardinality /indices/cardinality
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCardinalityResponse> GetCardinalityAsync(GetCardinalityBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/indices/cardinality";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetCardinalityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the policies that have an effect on the authorization behavior of the specified device when it connects to the AWS IoT device gateway.
		/// GetEffectivePolicies /effective-policies
		/// </summary>
		/// <param name="thingName">The thing name.</param>
		/// <returns>Success</returns>
		public async Task<GetEffectivePoliciesResponse> GetEffectivePoliciesAsync(string thingName, GetEffectivePoliciesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/effective-policies?thingName=" + (thingName==null? "" : Uri.EscapeDataString(thingName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetEffectivePoliciesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the indexing configuration.
		/// GetIndexingConfiguration /indexing/config
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetIndexingConfigurationResponse> GetIndexingConfigurationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/indexing/config";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetIndexingConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the search configuration.
		/// UpdateIndexingConfiguration /indexing/config
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateIndexingConfigurationResponse> UpdateIndexingConfigurationAsync(UpdateIndexingConfigurationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/indexing/config";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateIndexingConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a job document.
		/// GetJobDocument /jobs/{jobId}/job-document
		/// </summary>
		/// <param name="jobId">The unique identifier you assigned to this job when it was created.</param>
		/// <returns>Success</returns>
		public async Task<GetJobDocumentResponse> GetJobDocumentAsync(string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/jobs/"+ (jobId==null? "" : Uri.EscapeDataString(jobId))+"/job-document";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetJobDocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>GetV2LoggingOptions</code> instead.</p>
		/// GetLoggingOptions /loggingOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLoggingOptionsResponse> GetLoggingOptionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/loggingOptions";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetLoggingOptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the logging options.</p> <p>NOTE: use of this command is not recommended. Use <code>SetV2LoggingOptions</code> instead.</p>
		/// SetLoggingOptions /loggingOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task SetLoggingOptionsAsync(SetLoggingOptionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/loggingOptions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Groups the aggregated values that match the query into percentile groupings. The default percentile groupings are: 1,5,25,50,75,95,99, although you can specify your own when you call <code>GetPercentiles</code>. This function returns a value for each percentile group specified (or the default percentile groupings). The percentile group "1" contains the aggregated field value that occurs in approximately one percent of the values that match the query. The percentile group "5" contains the aggregated field value that occurs in approximately five percent of the values that match the query, and so on. The result is an approximation, the more values that match the query, the more accurate the percentile values.
		/// GetPercentiles /indices/percentiles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPercentilesResponse> GetPercentilesAsync(GetPercentilesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/indices/percentiles";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetPercentilesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the count, average, sum, minimum, maximum, sum of squares, variance, and standard deviation for the specified aggregated field. If the aggregation field is of type <code>String</code>, only the count statistic is returned.
		/// GetStatistics /indices/statistics
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetStatisticsResponse> GetStatisticsAsync(GetStatisticsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/indices/statistics";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetStatisticsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the fine grained logging options.
		/// GetV2LoggingOptions /v2LoggingOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetV2LoggingOptionsResponse> GetV2LoggingOptionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2LoggingOptions";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetV2LoggingOptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the logging options for the V2 logging service.
		/// SetV2LoggingOptions /v2LoggingOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task SetV2LoggingOptionsAsync(SetV2LoggingOptionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2LoggingOptions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the active violations for a given Device Defender security profile.
		/// ListActiveViolations /active-violations
		/// </summary>
		/// <param name="thingName">The name of the thing whose active violations are listed.</param>
		/// <param name="securityProfileName">The name of the Device Defender security profile for which violations are listed.</param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.</param>
		/// <returns>Success</returns>
		public async Task<ListActiveViolationsResponse> ListActiveViolationsAsync(string thingName, string securityProfileName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/active-violations?thingName=" + (thingName==null? "" : Uri.EscapeDataString(thingName))+"&securityProfileName=" + (securityProfileName==null? "" : Uri.EscapeDataString(securityProfileName))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListActiveViolationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the policies attached to the specified thing group.
		/// ListAttachedPolicies /attached-policies/{target}
		/// </summary>
		/// <param name="target">The group or principal for which the policies will be listed.</param>
		/// <param name="recursive">When true, recursively list attached policies.</param>
		/// <param name="marker">The token to retrieve the next set of results.</param>
		/// <param name="pageSize">The maximum number of results to be returned per request.</param>
		/// <returns>Success</returns>
		public async Task<ListAttachedPoliciesResponse> ListAttachedPoliciesAsync(string target, bool recursive, string marker, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/attached-policies/"+ (target==null? "" : Uri.EscapeDataString(target))+"&recursive="+recursive+"&marker=" + (marker==null? "" : Uri.EscapeDataString(marker))+"&pageSize="+pageSize;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListAttachedPoliciesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the findings (results) of a Device Defender audit or of the audits performed during a specified time period. (Findings are retained for 180 days.)
		/// ListAuditFindings /audit/findings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListAuditFindingsResponse> ListAuditFindingsAsync(ListAuditFindingsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/findings";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListAuditFindingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the status of audit mitigation action tasks that were executed.
		/// ListAuditMitigationActionsExecutions /audit/mitigationactions/executions#taskId&findingId
		/// </summary>
		/// <param name="taskId">Specify this filter to limit results to actions for a specific audit mitigation actions task.</param>
		/// <param name="actionStatus">Specify this filter to limit results to those with a specific status.</param>
		/// <param name="findingId">Specify this filter to limit results to those that were applied to a specific audit finding.</param>
		/// <param name="maxResults">The maximum number of results to return at one time. The default is 25.</param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListAuditMitigationActionsExecutionsResponse> ListAuditMitigationActionsExecutionsAsync(string taskId, AuditMitigationActionsExecutionStatus actionStatus, string findingId, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/mitigationactions/executions#taskId&findingId?taskId=" + (taskId==null? "" : Uri.EscapeDataString(taskId))+"&actionStatus=" + actionStatus+"&findingId=" + (findingId==null? "" : Uri.EscapeDataString(findingId))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListAuditMitigationActionsExecutionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of audit mitigation action tasks that match the specified filters.
		/// ListAuditMitigationActionsTasks /audit/mitigationactions/tasks#startTime&endTime
		/// </summary>
		/// <param name="auditTaskId">Specify this filter to limit results to tasks that were applied to results for a specific audit.</param>
		/// <param name="findingId">Specify this filter to limit results to tasks that were applied to a specific audit finding.</param>
		/// <param name="taskStatus">Specify this filter to limit results to tasks that are in a specific state.</param>
		/// <param name="maxResults">The maximum number of results to return at one time. The default is 25.</param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="startTime">Specify this filter to limit results to tasks that began on or after a specific date and time.</param>
		/// <param name="endTime">Specify this filter to limit results to tasks that were completed or canceled on or before a specific date and time.</param>
		/// <returns>Success</returns>
		public async Task<ListAuditMitigationActionsTasksResponse> ListAuditMitigationActionsTasksAsync(string auditTaskId, string findingId, DescribeAuditMitigationActionsTaskResponseTaskStatus taskStatus, int maxResults, string nextToken, System.DateTimeOffset startTime, System.DateTimeOffset endTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/mitigationactions/tasks#startTime&endTime?auditTaskId=" + (auditTaskId==null? "" : Uri.EscapeDataString(auditTaskId))+"&findingId=" + (findingId==null? "" : Uri.EscapeDataString(findingId))+"&taskStatus=" + taskStatus+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListAuditMitigationActionsTasksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the Device Defender audits that have been performed during a given time period.
		/// ListAuditTasks /audit/tasks#startTime&endTime
		/// </summary>
		/// <param name="startTime">The beginning of the time period. Audit information is retained for a limited time (180 days). Requesting a start time prior to what is retained results in an "InvalidRequestException".</param>
		/// <param name="endTime">The end of the time period.</param>
		/// <param name="taskType">A filter to limit the output to the specified type of audit: can be one of "ON_DEMAND_AUDIT_TASK" or "SCHEDULED__AUDIT_TASK".</param>
		/// <param name="taskStatus">A filter to limit the output to audits with the specified completion status: can be one of "IN_PROGRESS", "COMPLETED", "FAILED", or "CANCELED".</param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time. The default is 25.</param>
		/// <returns>Success</returns>
		public async Task<ListAuditTasksResponse> ListAuditTasksAsync(System.DateTimeOffset startTime, System.DateTimeOffset endTime, DescribeAuditTaskResponseTaskType taskType, DescribeAuditMitigationActionsTaskResponseTaskStatus taskStatus, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/tasks#startTime&endTime?startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&taskType=" + taskType+"&taskStatus=" + taskStatus+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListAuditTasksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the authorizers registered in your account.
		/// ListAuthorizers /authorizers/
		/// </summary>
		/// <param name="pageSize">The maximum number of results to return at one time.</param>
		/// <param name="marker">A marker used to get the next set of results.</param>
		/// <param name="isAscendingOrder">Return the list of authorizers in ascending alphabetical order.</param>
		/// <param name="status">The status of the list authorizers request.</param>
		/// <returns>Success</returns>
		public async Task<ListAuthorizersResponse> ListAuthorizersAsync(int pageSize, string marker, bool isAscendingOrder, AuthorizerStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/authorizers/?pageSize="+pageSize+"&marker=" + (marker==null? "" : Uri.EscapeDataString(marker))+"&isAscendingOrder="+isAscendingOrder+"&status=" + status;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListAuthorizersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the billing groups you have created.
		/// ListBillingGroups /billing-groups
		/// </summary>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return per request.</param>
		/// <param name="namePrefixFilter">Limit the results to billing groups whose names have the given prefix.</param>
		/// <returns>Success</returns>
		public async Task<ListBillingGroupsResponse> ListBillingGroupsAsync(string nextToken, int maxResults, string namePrefixFilter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/billing-groups?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&namePrefixFilter=" + (namePrefixFilter==null? "" : Uri.EscapeDataString(namePrefixFilter));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListBillingGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the CA certificates registered for your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>
		/// ListCACertificates /cacertificates
		/// </summary>
		/// <param name="pageSize">The result page size.</param>
		/// <param name="marker">The marker for the next set of results.</param>
		/// <param name="isAscendingOrder">Determines the order of the results.</param>
		/// <returns>Success</returns>
		public async Task<ListCACertificatesResponse> ListCACertificatesAsync(int pageSize, string marker, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/cacertificates?pageSize="+pageSize+"&marker=" + (marker==null? "" : Uri.EscapeDataString(marker))+"&isAscendingOrder="+isAscendingOrder;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListCACertificatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the device certificates signed by the specified CA certificate.
		/// ListCertificatesByCA /certificates-by-ca/{caCertificateId}
		/// </summary>
		/// <param name="caCertificateId">The ID of the CA certificate. This operation will list all registered device certificate that were signed by this CA certificate.</param>
		/// <param name="pageSize">The result page size.</param>
		/// <param name="marker">The marker for the next set of results.</param>
		/// <param name="isAscendingOrder">Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.</param>
		/// <returns>Success</returns>
		public async Task<ListCertificatesByCAResponse> ListCertificatesByCAAsync(string caCertificateId, int pageSize, string marker, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/certificates-by-ca/"+ (caCertificateId==null? "" : Uri.EscapeDataString(caCertificateId))+"&pageSize="+pageSize+"&marker=" + (marker==null? "" : Uri.EscapeDataString(marker))+"&isAscendingOrder="+isAscendingOrder;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListCertificatesByCAResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the set of dimensions that are defined for your AWS account.
		/// ListDimensions /dimensions
		/// </summary>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to retrieve at one time.</param>
		/// <returns>Success</returns>
		public async Task<ListDimensionsResponse> ListDimensionsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/dimensions?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDimensionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a list of domain configurations for the user. This list is sorted alphabetically by domain configuration name.</p> <note> <p>The domain configuration feature is in public preview and is subject to change.</p> </note>
		/// ListDomainConfigurations /domainConfigurations
		/// </summary>
		/// <param name="marker">The marker for the next set of results.</param>
		/// <param name="pageSize">The result page size.</param>
		/// <param name="serviceType">The type of service delivered by the endpoint.</param>
		/// <returns>Success</returns>
		public async Task<ListDomainConfigurationsResponse> ListDomainConfigurationsAsync(string marker, int pageSize, DescribeDomainConfigurationResponseServiceType serviceType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/domainConfigurations?marker=" + (marker==null? "" : Uri.EscapeDataString(marker))+"&pageSize="+pageSize+"&serviceType=" + serviceType;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDomainConfigurationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the search indices.
		/// ListIndices /indices
		/// </summary>
		/// <param name="nextToken">The token used to get the next set of results, or <code>null</code> if there are no additional results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.</param>
		/// <returns>Success</returns>
		public async Task<ListIndicesResponse> ListIndicesAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/indices?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListIndicesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the job executions for a job.
		/// ListJobExecutionsForJob /jobs/{jobId}/things
		/// </summary>
		/// <param name="jobId">The unique identifier you assigned to this job when it was created.</param>
		/// <param name="status">The status of the job.</param>
		/// <param name="maxResults">The maximum number of results to be returned per request.</param>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListJobExecutionsForJobResponse> ListJobExecutionsForJobAsync(string jobId, JobExecutionStatus status, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/jobs/"+ (jobId==null? "" : Uri.EscapeDataString(jobId))+"/things&status=" + status+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListJobExecutionsForJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the job executions for the specified thing.
		/// ListJobExecutionsForThing /things/{thingName}/jobs
		/// </summary>
		/// <param name="thingName">The thing name.</param>
		/// <param name="status">An optional filter that lets you search for jobs that have the specified status.</param>
		/// <param name="maxResults">The maximum number of results to be returned per request.</param>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListJobExecutionsForThingResponse> ListJobExecutionsForThingAsync(string thingName, JobExecutionStatus status, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/things/"+ (thingName==null? "" : Uri.EscapeDataString(thingName))+"/jobs&status=" + status+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListJobExecutionsForThingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists jobs.
		/// ListJobs /jobs
		/// </summary>
		/// <param name="status">An optional filter that lets you search for jobs that have the specified status.</param>
		/// <param name="targetSelection">Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group. </param>
		/// <param name="maxResults">The maximum number of results to return per request.</param>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <param name="thingGroupName">A filter that limits the returned jobs to those for the specified group.</param>
		/// <param name="thingGroupId">A filter that limits the returned jobs to those for the specified group.</param>
		/// <returns>Success</returns>
		public async Task<ListJobsResponse> ListJobsAsync(JobStatus status, TargetSelection targetSelection, int maxResults, string nextToken, string thingGroupName, string thingGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/jobs?status=" + status+"&targetSelection=" + targetSelection+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&thingGroupName=" + (thingGroupName==null? "" : Uri.EscapeDataString(thingGroupName))+"&thingGroupId=" + (thingGroupId==null? "" : Uri.EscapeDataString(thingGroupId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of all mitigation actions that match the specified filter criteria.
		/// ListMitigationActions /mitigationactions/actions
		/// </summary>
		/// <param name="actionType">Specify a value to limit the result to mitigation actions with a specific action type.</param>
		/// <param name="maxResults">The maximum number of results to return at one time. The default is 25.</param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListMitigationActionsResponse> ListMitigationActionsAsync(DescribeMitigationActionResponseActionType actionType, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/mitigationactions/actions?actionType=" + actionType+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListMitigationActionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists OTA updates.
		/// ListOTAUpdates /otaUpdates
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return at one time.</param>
		/// <param name="nextToken">A token used to retrieve the next set of results.</param>
		/// <param name="otaUpdateStatus">The OTA update job status.</param>
		/// <returns>Success</returns>
		public async Task<ListOTAUpdatesResponse> ListOTAUpdatesAsync(int maxResults, string nextToken, CreateOTAUpdateResponseOtaUpdateStatus otaUpdateStatus, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/otaUpdates?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&otaUpdateStatus=" + otaUpdateStatus;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListOTAUpdatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists certificates that are being transferred but not yet accepted.
		/// ListOutgoingCertificates /certificates-out-going
		/// </summary>
		/// <param name="pageSize">The result page size.</param>
		/// <param name="marker">The marker for the next set of results.</param>
		/// <param name="isAscendingOrder">Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.</param>
		/// <returns>Success</returns>
		public async Task<ListOutgoingCertificatesResponse> ListOutgoingCertificatesAsync(int pageSize, string marker, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/certificates-out-going?pageSize="+pageSize+"&marker=" + (marker==null? "" : Uri.EscapeDataString(marker))+"&isAscendingOrder="+isAscendingOrder;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListOutgoingCertificatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists your policies.
		/// ListPolicies /policies
		/// </summary>
		/// <param name="marker">The marker for the next set of results.</param>
		/// <param name="pageSize">The result page size.</param>
		/// <param name="isAscendingOrder">Specifies the order for results. If true, the results are returned in ascending creation order.</param>
		/// <returns>Success</returns>
		public async Task<ListPoliciesResponse> ListPoliciesAsync(string marker, int pageSize, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/policies?marker=" + (marker==null? "" : Uri.EscapeDataString(marker))+"&pageSize="+pageSize+"&isAscendingOrder="+isAscendingOrder;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPoliciesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the principals associated with the specified policy.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListTargetsForPolicy</a> instead.</p>
		/// ListPolicyPrincipals /policy-principals#x-amzn-iot-policy
		/// </summary>
		/// <param name="marker">The marker for the next set of results.</param>
		/// <param name="pageSize">The result page size.</param>
		/// <param name="isAscendingOrder">Specifies the order for results. If true, the results are returned in ascending creation order.</param>
		/// <returns>Success</returns>
		public async Task<ListPolicyPrincipalsResponse> ListPolicyPrincipalsAsync(string marker, int pageSize, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/policy-principals#x-amzn-iot-policy?marker=" + (marker==null? "" : Uri.EscapeDataString(marker))+"&pageSize="+pageSize+"&isAscendingOrder="+isAscendingOrder;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPolicyPrincipalsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the policies attached to the specified principal. If you use an Cognito identity, the ID must be in <a href="https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax">AmazonCognito Identity format</a>.</p> <p> <b>Note:</b> This API is deprecated. Please use <a>ListAttachedPolicies</a> instead.</p>
		/// ListPrincipalPolicies /principal-policies#x-amzn-iot-principal
		/// </summary>
		/// <param name="marker">The marker for the next set of results.</param>
		/// <param name="pageSize">The result page size.</param>
		/// <param name="isAscendingOrder">Specifies the order for results. If true, results are returned in ascending creation order.</param>
		/// <returns>Success</returns>
		public async Task<ListPrincipalPoliciesResponse> ListPrincipalPoliciesAsync(string marker, int pageSize, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/principal-policies#x-amzn-iot-principal?marker=" + (marker==null? "" : Uri.EscapeDataString(marker))+"&pageSize="+pageSize+"&isAscendingOrder="+isAscendingOrder;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPrincipalPoliciesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the things associated with the specified principal. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.
		/// ListPrincipalThings /principals/things#x-amzn-principal
		/// </summary>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return in this operation.</param>
		/// <returns>Success</returns>
		public async Task<ListPrincipalThingsResponse> ListPrincipalThingsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/principals/things#x-amzn-principal?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPrincipalThingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the role aliases registered in your account.
		/// ListRoleAliases /role-aliases
		/// </summary>
		/// <param name="pageSize">The maximum number of results to return at one time.</param>
		/// <param name="marker">A marker used to get the next set of results.</param>
		/// <param name="isAscendingOrder">Return the list of role aliases in ascending alphabetical order.</param>
		/// <returns>Success</returns>
		public async Task<ListRoleAliasesResponse> ListRoleAliasesAsync(int pageSize, string marker, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/role-aliases?pageSize="+pageSize+"&marker=" + (marker==null? "" : Uri.EscapeDataString(marker))+"&isAscendingOrder="+isAscendingOrder;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListRoleAliasesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of your scheduled audits.
		/// ListScheduledAudits /audit/scheduledaudits
		/// </summary>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time. The default is 25.</param>
		/// <returns>Success</returns>
		public async Task<ListScheduledAuditsResponse> ListScheduledAuditsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/scheduledaudits?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListScheduledAuditsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the Device Defender security profiles you have created. You can use filters to list only those security profiles associated with a thing group or only those associated with your account.
		/// ListSecurityProfiles /security-profiles
		/// </summary>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.</param>
		/// <param name="dimensionName">A filter to limit results to the security profiles that use the defined dimension.</param>
		/// <returns>Success</returns>
		public async Task<ListSecurityProfilesResponse> ListSecurityProfilesAsync(string nextToken, int maxResults, string dimensionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/security-profiles?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&dimensionName=" + (dimensionName==null? "" : Uri.EscapeDataString(dimensionName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListSecurityProfilesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the Device Defender security profiles attached to a target (thing group).
		/// ListSecurityProfilesForTarget /security-profiles-for-target#securityProfileTargetArn
		/// </summary>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.</param>
		/// <param name="recursive">If true, return child groups too.</param>
		/// <param name="securityProfileTargetArn">The ARN of the target (thing group) whose attached security profiles you want to get.</param>
		/// <returns>Success</returns>
		public async Task<ListSecurityProfilesForTargetResponse> ListSecurityProfilesForTargetAsync(string nextToken, int maxResults, bool recursive, string securityProfileTargetArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/security-profiles-for-target#securityProfileTargetArn?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&recursive="+recursive+"&securityProfileTargetArn=" + (securityProfileTargetArn==null? "" : Uri.EscapeDataString(securityProfileTargetArn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListSecurityProfilesForTargetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the streams in your AWS account.
		/// ListStreams /streams
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return at a time.</param>
		/// <param name="nextToken">A token used to get the next set of results.</param>
		/// <param name="isAscendingOrder">Set to true to return the list of streams in ascending order.</param>
		/// <returns>Success</returns>
		public async Task<ListStreamsResponse> ListStreamsAsync(int maxResults, string nextToken, bool isAscendingOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/streams?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&isAscendingOrder="+isAscendingOrder;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListStreamsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags (metadata) you have assigned to the resource.
		/// ListTagsForResource /tags#resourceArn
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource.</param>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags#resourceArn?resourceArn=" + (resourceArn==null? "" : Uri.EscapeDataString(resourceArn))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List targets for the specified policy.
		/// ListTargetsForPolicy /policy-targets/{policyName}
		/// </summary>
		/// <param name="policyName">The policy name.</param>
		/// <param name="marker">A marker used to get the next set of results.</param>
		/// <param name="pageSize">The maximum number of results to return at one time.</param>
		/// <returns>Success</returns>
		public async Task<ListTargetsForPolicyResponse> ListTargetsForPolicyAsync(string policyName, string marker, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/policy-targets/"+ (policyName==null? "" : Uri.EscapeDataString(policyName))+"&marker=" + (marker==null? "" : Uri.EscapeDataString(marker))+"&pageSize="+pageSize;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTargetsForPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the targets (thing groups) associated with a given Device Defender security profile.
		/// ListTargetsForSecurityProfile /security-profiles/{securityProfileName}/targets
		/// </summary>
		/// <param name="securityProfileName">The security profile.</param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.</param>
		/// <returns>Success</returns>
		public async Task<ListTargetsForSecurityProfileResponse> ListTargetsForSecurityProfileAsync(string securityProfileName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/security-profiles/"+ (securityProfileName==null? "" : Uri.EscapeDataString(securityProfileName))+"/targets&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTargetsForSecurityProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the thing groups in your account.
		/// ListThingGroups /thing-groups
		/// </summary>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.</param>
		/// <param name="parentGroup">A filter that limits the results to those with the specified parent group.</param>
		/// <param name="namePrefixFilter">A filter that limits the results to those with the specified name prefix.</param>
		/// <param name="recursive">If true, return child groups as well.</param>
		/// <returns>Success</returns>
		public async Task<ListThingGroupsResponse> ListThingGroupsAsync(string nextToken, int maxResults, string parentGroup, string namePrefixFilter, bool recursive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-groups?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&parentGroup=" + (parentGroup==null? "" : Uri.EscapeDataString(parentGroup))+"&namePrefixFilter=" + (namePrefixFilter==null? "" : Uri.EscapeDataString(namePrefixFilter))+"&recursive="+recursive;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListThingGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the thing groups to which the specified thing belongs.
		/// ListThingGroupsForThing /things/{thingName}/thing-groups
		/// </summary>
		/// <param name="thingName">The thing name.</param>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.</param>
		/// <returns>Success</returns>
		public async Task<ListThingGroupsForThingResponse> ListThingGroupsForThingAsync(string thingName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/things/"+ (thingName==null? "" : Uri.EscapeDataString(thingName))+"/thing-groups&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListThingGroupsForThingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the principals associated with the specified thing. A principal can be X.509 certificates, IAM users, groups, and roles, Amazon Cognito identities or federated identities.
		/// ListThingPrincipals /things/{thingName}/principals
		/// </summary>
		/// <param name="thingName">The name of the thing.</param>
		/// <returns>Success</returns>
		public async Task<ListThingPrincipalsResponse> ListThingPrincipalsAsync(string thingName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/things/"+ (thingName==null? "" : Uri.EscapeDataString(thingName))+"/principals";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListThingPrincipalsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Information about the thing registration tasks.
		/// ListThingRegistrationTaskReports /thing-registration-tasks/{taskId}/reports#reportType
		/// </summary>
		/// <param name="taskId">The id of the task.</param>
		/// <param name="reportType">The type of task report.</param>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return per request.</param>
		/// <returns>Success</returns>
		public async Task<ListThingRegistrationTaskReportsResponse> ListThingRegistrationTaskReportsAsync(string taskId, ListThingRegistrationTaskReportsResponseReportType reportType, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-registration-tasks/"+ (taskId==null? "" : Uri.EscapeDataString(taskId))+"/reports#reportType&reportType=" + reportType+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListThingRegistrationTaskReportsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List bulk thing provisioning tasks.
		/// ListThingRegistrationTasks /thing-registration-tasks
		/// </summary>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.</param>
		/// <param name="status">The status of the bulk thing provisioning task.</param>
		/// <returns>Success</returns>
		public async Task<ListThingRegistrationTasksResponse> ListThingRegistrationTasksAsync(string nextToken, int maxResults, DescribeThingRegistrationTaskResponseStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-registration-tasks?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&status=" + status;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListThingRegistrationTasksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a bulk thing provisioning task.
		/// StartThingRegistrationTask /thing-registration-tasks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartThingRegistrationTaskResponse> StartThingRegistrationTaskAsync(StartThingRegistrationTaskBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-registration-tasks";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartThingRegistrationTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the existing thing types.
		/// ListThingTypes /thing-types
		/// </summary>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return in this operation.</param>
		/// <param name="thingTypeName">The name of the thing type.</param>
		/// <returns>Success</returns>
		public async Task<ListThingTypesResponse> ListThingTypesAsync(string nextToken, int maxResults, string thingTypeName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-types?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&thingTypeName=" + (thingTypeName==null? "" : Uri.EscapeDataString(thingTypeName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListThingTypesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists your things. Use the <b>attributeName</b> and <b>attributeValue</b> parameters to filter your things. For example, calling <code>ListThings</code> with attributeName=Color and attributeValue=Red retrieves all things in the registry that contain an attribute <b>Color</b> with the value <b>Red</b>.
		/// ListThings /things
		/// </summary>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return in this operation.</param>
		/// <param name="attributeName">The attribute name used to search for things.</param>
		/// <param name="attributeValue">The attribute value used to search for things.</param>
		/// <param name="thingTypeName">The name of the thing type used to search for things.</param>
		/// <returns>Success</returns>
		public async Task<ListThingsResponse> ListThingsAsync(string nextToken, int maxResults, string attributeName, string attributeValue, string thingTypeName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/things?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&attributeName=" + (attributeName==null? "" : Uri.EscapeDataString(attributeName))+"&attributeValue=" + (attributeValue==null? "" : Uri.EscapeDataString(attributeValue))+"&thingTypeName=" + (thingTypeName==null? "" : Uri.EscapeDataString(thingTypeName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListThingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provisions a thing in the device registry. RegisterThing calls other AWS IoT control plane APIs. These calls might exceed your account level <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_iot"> AWS IoT Throttling Limits</a> and cause throttle errors. Please contact <a href="https://console.aws.amazon.com/support/home">AWS Customer Support</a> to raise your throttling limits if necessary.
		/// RegisterThing /things
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterThingResponse> RegisterThingAsync(RegisterThingBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/things";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RegisterThingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the things you have added to the given billing group.
		/// ListThingsInBillingGroup /billing-groups/{billingGroupName}/things
		/// </summary>
		/// <param name="billingGroupName">The name of the billing group.</param>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return per request.</param>
		/// <returns>Success</returns>
		public async Task<ListThingsInBillingGroupResponse> ListThingsInBillingGroupAsync(string billingGroupName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/billing-groups/"+ (billingGroupName==null? "" : Uri.EscapeDataString(billingGroupName))+"/things&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListThingsInBillingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the things in the specified group.
		/// ListThingsInThingGroup /thing-groups/{thingGroupName}/things
		/// </summary>
		/// <param name="thingGroupName">The thing group name.</param>
		/// <param name="recursive">When true, list things in this thing group and in all child groups as well.</param>
		/// <param name="nextToken">The token to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.</param>
		/// <returns>Success</returns>
		public async Task<ListThingsInThingGroupResponse> ListThingsInThingGroupAsync(string thingGroupName, bool recursive, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-groups/"+ (thingGroupName==null? "" : Uri.EscapeDataString(thingGroupName))+"/things&recursive="+recursive+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListThingsInThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the rules for the specific topic.
		/// ListTopicRules /rules
		/// </summary>
		/// <param name="topic">The topic.</param>
		/// <param name="maxResults">The maximum number of results to return.</param>
		/// <param name="nextToken">A token used to retrieve the next value.</param>
		/// <param name="ruleDisabled">Specifies whether the rule is disabled.</param>
		/// <returns>Success</returns>
		public async Task<ListTopicRulesResponse> ListTopicRulesAsync(string topic, int maxResults, string nextToken, bool ruleDisabled, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/rules?topic=" + (topic==null? "" : Uri.EscapeDataString(topic))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&ruleDisabled="+ruleDisabled;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTopicRulesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists logging levels.
		/// ListV2LoggingLevels /v2LoggingLevel
		/// </summary>
		/// <param name="targetType">The type of resource for which you are configuring logging. Must be <code>THING_Group</code>.</param>
		/// <param name="nextToken">The token used to get the next set of results, or <b>null</b> if there are no additional results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.</param>
		/// <returns>Success</returns>
		public async Task<ListV2LoggingLevelsResponse> ListV2LoggingLevelsAsync(LogTargetType targetType, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2LoggingLevel?targetType=" + targetType+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListV2LoggingLevelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the logging level.
		/// SetV2LoggingLevel /v2LoggingLevel
		/// </summary>
		/// <returns>Success</returns>
		public async Task SetV2LoggingLevelAsync(SetV2LoggingLevelBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v2LoggingLevel";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the Device Defender security profile violations discovered during the given time period. You can use filters to limit the results to those alerts issued for a particular security profile, behavior, or thing (device).
		/// ListViolationEvents /violation-events#startTime&endTime
		/// </summary>
		/// <param name="startTime">The start time for the alerts to be listed.</param>
		/// <param name="endTime">The end time for the alerts to be listed.</param>
		/// <param name="thingName">A filter to limit results to those alerts caused by the specified thing.</param>
		/// <param name="securityProfileName">A filter to limit results to those alerts generated by the specified security profile.</param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return at one time.</param>
		/// <returns>Success</returns>
		public async Task<ListViolationEventsResponse> ListViolationEventsAsync(System.DateTimeOffset startTime, System.DateTimeOffset endTime, string thingName, string securityProfileName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/violation-events#startTime&endTime?startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&thingName=" + (thingName==null? "" : Uri.EscapeDataString(thingName))+"&securityProfileName=" + (securityProfileName==null? "" : Uri.EscapeDataString(securityProfileName))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListViolationEventsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Registers a CA certificate with AWS IoT. This CA certificate can then be used to sign device certificates, which can be then registered with AWS IoT. You can register up to 10 CA certificates per AWS account that have the same subject field. This enables you to have up to 10 certificate authorities sign your device certificates. If you have more than one CA certificate registered, make sure you pass the CA certificate when you register your device certificates with the RegisterCertificate API.
		/// RegisterCACertificate /cacertificate
		/// </summary>
		/// <param name="setAsActive">A boolean value that specifies if the CA certificate is set to active.</param>
		/// <param name="allowAutoRegistration">Allows this CA certificate to be used for auto registration of device certificates.</param>
		/// <returns>Success</returns>
		public async Task<RegisterCACertificateResponse> RegisterCACertificateAsync(bool setAsActive, bool allowAutoRegistration, RegisterCACertificateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/cacertificate?setAsActive="+setAsActive+"&allowAutoRegistration="+allowAutoRegistration;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RegisterCACertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Registers a device certificate with AWS IoT. If you have more than one CA certificate that has the same subject field, you must specify the CA certificate that was used to sign the device certificate being registered.
		/// RegisterCertificate /certificate/register
		/// </summary>
		/// <param name="setAsActive">A boolean value that specifies if the certificate is set to active.</param>
		/// <returns>Success</returns>
		public async Task<RegisterCertificateResponse> RegisterCertificateAsync(bool setAsActive, RegisterCertificateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/certificate/register?setAsActive="+setAsActive;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RegisterCertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Register a certificate that does not have a certificate authority (CA).
		/// RegisterCertificateWithoutCA /certificate/register-no-ca
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterCertificateWithoutCAResponse> RegisterCertificateWithoutCAAsync(RegisterCertificateWithoutCABody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/certificate/register-no-ca";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RegisterCertificateWithoutCAResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the given thing from the billing group.
		/// RemoveThingFromBillingGroup /billing-groups/removeThingFromBillingGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RemoveThingFromBillingGroupResponse> RemoveThingFromBillingGroupAsync(RemoveThingFromBillingGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/billing-groups/removeThingFromBillingGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RemoveThingFromBillingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove the specified thing from the specified group.
		/// RemoveThingFromThingGroup /thing-groups/removeThingFromThingGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RemoveThingFromThingGroupResponse> RemoveThingFromThingGroupAsync(RemoveThingFromThingGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-groups/removeThingFromThingGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RemoveThingFromThingGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The query search index.
		/// SearchIndex /indices/search
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SearchIndexResponse> SearchIndexAsync(SearchIndexBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/indices/search";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SearchIndexResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an on-demand Device Defender audit.
		/// StartOnDemandAuditTask /audit/tasks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartOnDemandAuditTaskResponse> StartOnDemandAuditTaskAsync(StartOnDemandAuditTaskBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/audit/tasks";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartOnDemandAuditTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancels a bulk thing provisioning task.
		/// StopThingRegistrationTask /thing-registration-tasks/{taskId}/cancel
		/// </summary>
		/// <param name="taskId">The bulk thing provisioning task ID.</param>
		/// <returns>Success</returns>
		public async Task<StopThingRegistrationTaskResponse> StopThingRegistrationTaskAsync(string taskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-registration-tasks/"+ (taskId==null? "" : Uri.EscapeDataString(taskId))+"/cancel";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopThingRegistrationTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.
		/// TagResource /tags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Tests if a specified principal is authorized to perform an AWS IoT action on a specified resource. Use this to test and debug the authorization behavior of devices that connect to the AWS IoT device gateway.
		/// TestAuthorization /test-authorization
		/// </summary>
		/// <param name="clientId">The MQTT client ID.</param>
		/// <returns>Success</returns>
		public async Task<TestAuthorizationResponse> TestAuthorizationAsync(string clientId, TestAuthorizationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/test-authorization?clientId=" + (clientId==null? "" : Uri.EscapeDataString(clientId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestAuthorizationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Tests a custom authorization behavior by invoking a specified custom authorizer. Use this to test and debug the custom authorization behavior of devices that connect to the AWS IoT device gateway.
		/// TestInvokeAuthorizer /authorizer/{authorizerName}/test
		/// </summary>
		/// <param name="authorizerName">The custom authorizer name.</param>
		/// <returns>Success</returns>
		public async Task<TestInvokeAuthorizerResponse> TestInvokeAuthorizerAsync(string authorizerName, TestInvokeAuthorizerBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/authorizer/"+ (authorizerName==null? "" : Uri.EscapeDataString(authorizerName))+"/test";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestInvokeAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the given tags (metadata) from the resource.
		/// UntagResource /untag
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(UntagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/untag";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the status of the specified certificate. This operation is idempotent.</p> <p>Moving a certificate from the ACTIVE state (including REVOKED) will not disconnect currently connected devices, but these devices will be unable to reconnect.</p> <p>The ACTIVE state is required to authenticate devices connecting to AWS IoT using a certificate.</p>
		/// UpdateCertificate /certificates/{certificateId}#newStatus
		/// </summary>
		/// <param name="certificateId">The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)</param>
		/// <param name="newStatus"><p>The new status.</p> <p> <b>Note:</b> Setting the status to PENDING_TRANSFER or PENDING_ACTIVATION will result in an exception being thrown. PENDING_TRANSFER and PENDING_ACTIVATION are statuses used internally by AWS IoT. They are not intended for developer use.</p> <p> <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p></param>
		/// <returns>Success</returns>
		public async Task UpdateCertificateAsync(string certificateId, string newStatus, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/certificates/"+ (certificateId==null? "" : Uri.EscapeDataString(certificateId))+"#newStatus&newStatus=" + newStatus;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the groups to which the thing belongs.
		/// UpdateThingGroupsForThing /thing-groups/updateThingGroupsForThing
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateThingGroupsForThingResponse> UpdateThingGroupsForThingAsync(UpdateThingGroupsForThingBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/thing-groups/updateThingGroupsForThing";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateThingGroupsForThingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Validates a Device Defender security profile behaviors specification.
		/// ValidateSecurityProfileBehaviors /security-profile-behaviors/validate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ValidateSecurityProfileBehaviorsResponse> ValidateSecurityProfileBehaviorsAsync(ValidateSecurityProfileBehaviorsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/security-profile-behaviors/validate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ValidateSecurityProfileBehaviorsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddThingToBillingGroupBody
	{
		
		/// <summary>
		/// The name of the billing group.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string BillingGroupName { get; set; }
		
		/// <summary>
		/// The ARN of the billing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingGroupArn { get; set; }
		
		/// <summary>
		/// The name of the thing to be added to the billing group.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingName { get; set; }
		
		/// <summary>
		/// The ARN of the thing to be added to the billing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddThingToThingGroupBody
	{
		
		/// <summary>
		/// The name of the group to which you are adding a thing.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingGroupName { get; set; }
		
		/// <summary>
		/// The ARN of the group to which you are adding a thing.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThingGroupArn { get; set; }
		
		/// <summary>
		/// The name of the thing to add to a group.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingName { get; set; }
		
		/// <summary>
		/// The ARN of the thing to add to a group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
		
		/// <summary>
		/// Override dynamic thing groups with static thing groups when 10-group limit is reached. If a thing belongs to 10 thing groups, and one or more of those groups are dynamic thing groups, adding a thing to a static group removes the thing from the last dynamic group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverrideDynamicGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateTargetsWithJobBody
	{
		
		/// <summary>
		/// A list of thing group ARNs that define the targets of the job.
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public TargetArn[] Targets { get; set; }
		
		/// <summary>
		/// An optional comment string describing why the job was associated with the targets.
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Comment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachPolicyBody
	{
		
		/// <summary>
		/// The <a href="https://docs.aws.amazon.com/iot/latest/developerguide/iot-security-identity.html">identity</a> to which the policy is attached.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetachPolicyBody
	{
		
		/// <summary>
		/// The target from which the policy will be detached.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelJobBody
	{
		
		/// <summary>
		/// (Optional)A reason code string that explains why the job was canceled.
		/// Max length: 128
		/// Pattern: [\p{Upper}\p{Digit}_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string ReasonCode { get; set; }
		
		/// <summary>
		/// An optional comment string describing why the job was canceled.
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Comment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelJobExecutionBody
	{
		
		/// <summary>
		/// (Optional) The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpectedVersion { get; set; }
		
		/// <summary>
		/// A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged. You can specify at most 10 name/value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StatusDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetDefaultAuthorizerBody
	{
		
		/// <summary>
		/// The authorizer name.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w=,@-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string AuthorizerName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAuthorizerBody
	{
		
		/// <summary>
		/// The ARN of the authorizer's Lambda function.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerFunctionArn { get; set; }
		
		/// <summary>
		/// The name of the token key used to extract the token from the HTTP headers.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string TokenKeyName { get; set; }
		
		/// <summary>
		/// The public keys used to verify the digital signature returned by your custom authentication service.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TokenSigningPublicKeys { get; set; }
		
		/// <summary>
		/// The status of the create authorizer request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateAuthorizerBodyStatus Status { get; set; }
		
		/// <summary>
		/// <p>Metadata which can be used to manage the custom authorizer.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Specifies whether AWS IoT validates the token signature in an authorization request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SigningDisabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateAuthorizerBodyStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAuthorizerBody
	{
		
		/// <summary>
		/// The ARN of the authorizer's Lambda function.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerFunctionArn { get; set; }
		
		/// <summary>
		/// The key used to extract the token from the HTTP headers. 
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string TokenKeyName { get; set; }
		
		/// <summary>
		/// The public keys used to verify the token signature.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TokenSigningPublicKeys { get; set; }
		
		/// <summary>
		/// The status of the update authorizer request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateAuthorizerBodyStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateAuthorizerBodyStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBillingGroupBody
	{
		
		/// <summary>
		/// The properties of a billing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingGroupProperties { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the billing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateCertificateFromCsrBody
	{
		
		/// <summary>
		/// The certificate signing request (CSR).
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string CertificateSigningRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDimensionBody
	{
		
		/// <summary>
		/// Specifies the type of dimension. Supported types: <code>TOPIC_FILTER.</code> 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateDimensionBodyType Type { get; set; }
		
		/// <summary>
		/// Specifies the value or list of values for the dimension. For <code>TOPIC_FILTER</code> dimensions, this is a pattern used to match the MQTT topic (for example, "admin/#").
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DimensionStringValue[] StringValues { get; set; }
		
		/// <summary>
		/// Metadata that can be used to manage the dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Each dimension must have a unique client request token. If you try to create a new dimension with the same token as a dimension that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDimensionBodyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOPIC_FILTER = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDomainConfigurationBody
	{
		
		/// <summary>
		/// The name of the domain.
		/// Max length: 253
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(253, MinimumLength=1)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// The ARNs of the certificates that AWS IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for AWS-managed domains.
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public AcmCertificateArn[] ServerCertificateArns { get; set; }
		
		/// <summary>
		/// The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for AWS-managed domains.
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: arn:aws:acm:[a-z]{2}-(gov-)?[a-z]{4,9}-\d{1}:\d{12}:certificate/?[a-zA-Z0-9/-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ValidationCertificateArn { get; set; }
		
		/// <summary>
		/// An object that specifies the authorization service for a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerConfig { get; set; }
		
		/// <summary>
		/// <p>The type of service delivered by the endpoint.</p> <note> <p>AWS IoT Core currently supports only the <code>DATA</code> service type.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateDomainConfigurationBodyServiceType ServiceType { get; set; }
		
		/// <summary>
		/// <p>Metadata which can be used to manage the domain configuration.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDomainConfigurationBodyServiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDENTIAL_PROVIDER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOBS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainConfigurationBody
	{
		
		/// <summary>
		/// An object that specifies the authorization service for a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerConfig { get; set; }
		
		/// <summary>
		/// The status to which the domain configuration should be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateDomainConfigurationBodyDomainConfigurationStatus DomainConfigurationStatus { get; set; }
		
		/// <summary>
		/// Removes the authorization configuration from a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemoveAuthorizerConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateDomainConfigurationBodyDomainConfigurationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDynamicThingGroupBody
	{
		
		/// <summary>
		/// Thing group properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThingGroupProperties { get; set; }
		
		/// <summary>
		/// <p>The dynamic thing group index name.</p> <note> <p>Currently one index is supported: "AWS_Things".</p> </note>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IndexName { get; set; }
		
		/// <summary>
		/// <p>The dynamic thing group search query string.</p> <p>See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/query-syntax.html">Query Syntax</a> for information about query string syntax.</p>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// <p>The dynamic thing group query version.</p> <note> <p>Currently one query version is supported: "2017-09-30". If not specified, the query version defaults to this value.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string QueryVersion { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the dynamic thing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobBody
	{
		
		/// <summary>
		/// A list of things and thing groups to which the job should be sent.
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public TargetArn[] Targets { get; set; }
		
		/// <summary>
		/// An S3 link to the job document.
		/// Max length: 1350
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1350, MinimumLength=1)]
		public string DocumentSource { get; set; }
		
		/// <summary>
		/// <p>The job document.</p> <note> <p>If the job document resides in an S3 bucket, you must use a placeholder link when specifying the document.</p> <p>The placeholder link is of the following form:</p> <p> <code>${aws:iot:s3-presigned-url:https://s3.amazonaws.com/<i>bucket</i>/<i>key</i>}</code> </p> <p>where <i>bucket</i> is your bucket name and <i>key</i> is the object in the bucket to which you are linking.</p> </note>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Document { get; set; }
		
		/// <summary>
		/// A short text description of the job.
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
		
		/// <summary>
		/// Configuration for pre-signed S3 URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PresignedUrlConfig { get; set; }
		
		/// <summary>
		/// Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateJobBodyTargetSelection TargetSelection { get; set; }
		
		/// <summary>
		/// Allows you to create a staged rollout of a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string JobExecutionsRolloutConfig { get; set; }
		
		/// <summary>
		/// Details of abort criteria to abort the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AbortConfig { get; set; }
		
		/// <summary>
		/// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TimeoutConfig { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobBodyTargetSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUOUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMitigationActionBody
	{
		
		/// <summary>
		/// The ARN of the IAM role that is used to apply the mitigation action.
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ActionParams { get; set; }
		
		/// <summary>
		/// Metadata that can be used to manage the mitigation action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateOTAUpdateBody
	{
		
		/// <summary>
		/// The description of the OTA update.
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
		
		/// <summary>
		/// The targeted devices to receive OTA updates.
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// The protocol used to transfer the OTA update image. Valid values are [HTTP], [MQTT], [HTTP, MQTT]. When both HTTP and MQTT are specified, the target device can choose the protocol.
		/// Minimum items: 1
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public Protocol[] Protocols { get; set; }
		
		/// <summary>
		/// Specifies whether the update will continue to run (CONTINUOUS), or will be complete after all the things specified as targets have completed the update (SNAPSHOT). If continuous, the update may also be run on a thing when a change is detected in a target. For example, an update will run on a thing when the thing is added to a target group, even after the update was completed by all things originally in the group. Valid values: CONTINUOUS | SNAPSHOT.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateOTAUpdateBodyTargetSelection TargetSelection { get; set; }
		
		/// <summary>
		/// Configuration for the rollout of OTA updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AwsJobExecutionsRolloutConfig { get; set; }
		
		/// <summary>
		/// Configuration information for pre-signed URLs. Valid when <code>protocols</code> contains HTTP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AwsJobPresignedUrlConfig { get; set; }
		
		/// <summary>
		/// The files to be streamed by the OTA update.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public OTAUpdateFile[] Files { get; set; }
		
		/// <summary>
		/// The IAM role that allows access to the AWS IoT Jobs service.
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// A list of additional OTA update parameters which are name-value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalParameters { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateOTAUpdateBodyTargetSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUOUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePolicyBody
	{
		
		/// <summary>
		/// The JSON document that describes the policy. <b>policyDocument</b> must have a minimum length of 1, with a maximum length of 2048, excluding whitespace.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
		
		/// <summary>
		/// <p>Metadata which can be used to manage the policy.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePolicyVersionBody
	{
		
		/// <summary>
		/// The JSON document that describes the policy. Minimum length of 1. Maximum length of 2048, excluding whitespace.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProvisioningTemplateBody
	{
		
		/// <summary>
		/// The name of the fleet provisioning template.
		/// Max length: 36
		/// Min length: 1
		/// Pattern: ^[0-9A-Za-z_-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		/// <summary>
		/// The description of the fleet provisioning template.
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [^\p{C}]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// The JSON formatted contents of the fleet provisioning template.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TemplateBody { get; set; }
		
		/// <summary>
		/// True to enable the fleet provisioning template, otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The role ARN for the role associated with the fleet provisioning template. This IoT role grants permission to provision a device.
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ProvisioningRoleArn { get; set; }
		
		/// <summary>
		/// Structure that contains <code>payloadVersion</code> and <code>targetArn</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PreProvisioningHook { get; set; }
		
		/// <summary>
		/// <p>Metadata which can be used to manage the fleet provisioning template.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProvisioningTemplateVersionBody
	{
		
		/// <summary>
		/// The JSON formatted contents of the fleet provisioning template.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TemplateBody { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRoleAliasBody
	{
		
		/// <summary>
		/// The role ARN.
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// How long (in seconds) the credentials will be valid.
		/// Minimum: 900
		/// Maximum: 3600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(900, 3600)]
		public System.Nullable<System.Int32> CredentialDurationSeconds { get; set; }
		
		/// <summary>
		/// <p>Metadata which can be used to manage the role alias.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRoleAliasBody
	{
		
		/// <summary>
		/// The role ARN.
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The number of seconds the credential will be valid.
		/// Minimum: 900
		/// Maximum: 3600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(900, 3600)]
		public System.Nullable<System.Int32> CredentialDurationSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateScheduledAuditBody
	{
		
		/// <summary>
		/// How often the scheduled audit takes place. Can be one of "DAILY", "WEEKLY", "BIWEEKLY" or "MONTHLY". The start time of each audit is determined by the system.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateScheduledAuditBodyFrequency Frequency { get; set; }
		
		/// <summary>
		/// The day of the month on which the scheduled audit takes place. Can be "1" through "31" or "LAST". This field is required if the "frequency" parameter is set to "MONTHLY". If days 29-31 are specified, and the month does not have that many days, the audit takes place on the "LAST" day of the month.
		/// Pattern: ^([1-9]|[12][0-9]|3[01])$|^LAST$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DayOfMonth { get; set; }
		
		/// <summary>
		/// The day of the week on which the scheduled audit takes place. Can be one of "SUN", "MON", "TUE", "WED", "THU", "FRI", or "SAT". This field is required if the "frequency" parameter is set to "WEEKLY" or "BIWEEKLY".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateScheduledAuditBodyDayOfWeek DayOfWeek { get; set; }
		
		/// <summary>
		/// Which checks are performed during the scheduled audit. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuditCheckName[] TargetCheckNames { get; set; }
		
		/// <summary>
		/// Metadata that can be used to manage the scheduled audit.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateScheduledAuditBodyFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIWEEKLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateScheduledAuditBodyDayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THU = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAT = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSecurityProfileBody
	{
		
		/// <summary>
		/// A description of the security profile.
		/// Max length: 1000
		/// Pattern: [\p{Graph}\x20]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string SecurityProfileDescription { get; set; }
		
		/// <summary>
		/// Specifies the behaviors that, when violated by a device (thing), cause an alert.
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Behavior[] Behaviors { get; set; }
		
		/// <summary>
		/// Specifies the destinations to which alerts are sent. (Alerts are always sent to the console.) Alerts are generated when a device (thing) violates a behavior.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AlertTargets { get; set; }
		
		/// <summary>
		/// <p>A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's <code>behaviors</code>, but it is also retained for any metric specified here.</p> <p> <b>Note:</b> This API field is deprecated. Please use <a>CreateSecurityProfileRequest$additionalMetricsToRetainV2</a> instead.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BehaviorMetric[] AdditionalMetricsToRetain { get; set; }
		
		/// <summary>
		/// A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's <code>behaviors</code>, but it is also retained for any metric specified here.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetricToRetain[] AdditionalMetricsToRetainV2 { get; set; }
		
		/// <summary>
		/// Metadata that can be used to manage the security profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateStreamBody
	{
		
		/// <summary>
		/// A description of the stream.
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
		
		/// <summary>
		/// The files to stream.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public StreamFile[] Files { get; set; }
		
		/// <summary>
		/// An IAM role that allows the IoT service principal assumes to access your S3 files.
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage streams.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateStreamBody
	{
		
		/// <summary>
		/// The description of the stream.
		/// Max length: 2028
		/// Pattern: [^\p{C}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2028)]
		public string Description { get; set; }
		
		/// <summary>
		/// The files associated with the stream.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public StreamFile[] Files { get; set; }
		
		/// <summary>
		/// An IAM role that allows the IoT service principal assumes to access your S3 files.
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateThingBody
	{
		
		/// <summary>
		/// The name of the thing type associated with the new thing.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingTypeName { get; set; }
		
		/// <summary>
		/// The attribute payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AttributePayload { get; set; }
		
		/// <summary>
		/// The name of the billing group the thing will be added to.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string BillingGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateThingGroupBody
	{
		
		/// <summary>
		/// The name of the parent thing group.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ParentGroupName { get; set; }
		
		/// <summary>
		/// Thing group properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThingGroupProperties { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the thing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateThingTypeBody
	{
		
		/// <summary>
		/// The ThingTypeProperties contains information about the thing type including: a thing type description, and a list of searchable thing attribute names.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThingTypeProperties { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the thing type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTopicRuleBody
	{
		
		/// <summary>
		/// Describes a rule.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicRulePayload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTopicRuleDestinationBody
	{
		
		/// <summary>
		/// Configuration of the topic rule destination.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateCACertificateBody
	{
		
		/// <summary>
		/// The registration configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RegistrationConfig { get; set; }
		
		/// <summary>
		/// If true, removes auto registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemoveAutoRegistration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeprecateThingTypeBody
	{
		
		/// <summary>
		/// Whether to undeprecate a deprecated thing type. If <b>true</b>, the thing type will not be deprecated anymore and you can associate it with things.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UndoDeprecate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartAuditMitigationActionsTaskBody
	{
		
		/// <summary>
		/// Used in MitigationActionParams, this information identifies the target findings to which the mitigation actions are applied. Only one entry appears.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
		
		/// <summary>
		/// For an audit check, specifies which mitigation actions to apply. Those actions must be defined in your AWS account.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuditCheckToActionsMapping { get; set; }
		
		/// <summary>
		/// Each audit mitigation task must have a unique client request token. If you try to start a new task with the same token as a task that already exists, an exception occurs. If you omit this value, a unique client request token is generated automatically.
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCardinalityBody
	{
		
		/// <summary>
		/// The name of the index to search.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IndexName { get; set; }
		
		/// <summary>
		/// The search query.
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// The field to aggregate.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AggregationField { get; set; }
		
		/// <summary>
		/// The query version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string QueryVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetEffectivePoliciesBody
	{
		
		/// <summary>
		/// The principal.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Principal { get; set; }
		
		/// <summary>
		/// The Cognito identity pool ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CognitoIdentityPoolId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateIndexingConfigurationBody
	{
		
		/// <summary>
		/// The thing indexing configuration. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/managing-index.html">Managing Thing Indexing</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThingIndexingConfiguration { get; set; }
		
		/// <summary>
		/// Thing group indexing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThingGroupIndexingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetLoggingOptionsBody
	{
		
		/// <summary>
		/// Describes the logging options payload.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoggingOptionsPayload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPercentilesBody
	{
		
		/// <summary>
		/// The name of the index to search.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IndexName { get; set; }
		
		/// <summary>
		/// The query string.
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// The field to aggregate.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AggregationField { get; set; }
		
		/// <summary>
		/// The query version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string QueryVersion { get; set; }
		
		/// <summary>
		/// The percentile groups returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Percent[] Percents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetStatisticsBody
	{
		
		/// <summary>
		/// The name of the index to search. The default value is <code>AWS_Things</code>.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IndexName { get; set; }
		
		/// <summary>
		/// The query used to search. You can specify "*" for the query string to get the count of all indexed things in your AWS account.
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// The aggregation field name.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AggregationField { get; set; }
		
		/// <summary>
		/// The version of the query used to search.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string QueryVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetV2LoggingOptionsBody
	{
		
		/// <summary>
		/// The ARN of the role that allows IoT to write to Cloudwatch logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The default logging level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SetV2LoggingOptionsBodyDefaultLogLevel DefaultLogLevel { get; set; }
		
		/// <summary>
		/// If true all logs are disabled. The default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableAllLogs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SetV2LoggingOptionsBodyDefaultLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAuditFindingsBody
	{
		
		/// <summary>
		/// A filter to limit results to the audit with the specified ID. You must specify either the taskId or the startTime and endTime, but not both.
		/// Max length: 40
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string TaskId { get; set; }
		
		/// <summary>
		/// An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CheckName { get; set; }
		
		/// <summary>
		/// Information that identifies the noncompliant resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResourceIdentifier { get; set; }
		
		/// <summary>
		/// The maximum number of results to return at one time. The default is 25.
		/// Minimum: 1
		/// Maximum: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 250)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The token for the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// A filter to limit results to those found after the specified time. You must specify either the startTime and endTime or the taskId, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// A filter to limit results to those found before the specified time. You must specify either the startTime and endTime or the taskId, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartThingRegistrationTaskBody
	{
		
		/// <summary>
		/// The provisioning template.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TemplateBody { get; set; }
		
		/// <summary>
		/// The S3 bucket that contains the input file.
		/// Max length: 256
		/// Min length: 3
		/// Pattern: [a-zA-Z0-9._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=3)]
		public string InputFileBucket { get; set; }
		
		/// <summary>
		/// The name of input file within the S3 bucket. This file contains a newline delimited JSON file. Each line contains the parameter values to provision one device (thing).
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9!_.*'()-\/]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string InputFileKey { get; set; }
		
		/// <summary>
		/// The IAM role ARN that grants permission the input file.
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterThingBody
	{
		
		/// <summary>
		/// The provisioning template. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-w-cert.html">Provisioning Devices That Have Device Certificates</a> for more information.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TemplateBody { get; set; }
		
		/// <summary>
		/// The parameters for provisioning a thing. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-template.html">Provisioning Templates</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetV2LoggingLevelBody
	{
		
		/// <summary>
		/// A log target.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LogTarget { get; set; }
		
		/// <summary>
		/// The log level.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SetV2LoggingLevelBodyLogLevel LogLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SetV2LoggingLevelBodyLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterCACertificateBody
	{
		
		/// <summary>
		/// The PEM of a certificate.
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string CaCertificate { get; set; }
		
		/// <summary>
		/// The PEM of a certificate.
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string VerificationCertificate { get; set; }
		
		/// <summary>
		/// The registration configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RegistrationConfig { get; set; }
		
		/// <summary>
		/// <p>Metadata which can be used to manage the CA certificate.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterCertificateBody
	{
		
		/// <summary>
		/// The PEM of a certificate.
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string CertificatePem { get; set; }
		
		/// <summary>
		/// The PEM of a certificate.
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string CaCertificatePem { get; set; }
		
		/// <summary>
		/// The status of the register certificate request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RegisterCertificateBodyStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegisterCertificateBodyStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVOKED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_TRANSFER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTER_INACTIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_ACTIVATION = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterCertificateWithoutCABody
	{
		
		/// <summary>
		/// The PEM of a certificate.
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string CertificatePem { get; set; }
		
		/// <summary>
		/// The status of the register certificate request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RegisterCertificateWithoutCABodyStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegisterCertificateWithoutCABodyStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVOKED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_TRANSFER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTER_INACTIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_ACTIVATION = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveThingFromBillingGroupBody
	{
		
		/// <summary>
		/// The name of the billing group.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string BillingGroupName { get; set; }
		
		/// <summary>
		/// The ARN of the billing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingGroupArn { get; set; }
		
		/// <summary>
		/// The name of the thing to be removed from the billing group.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingName { get; set; }
		
		/// <summary>
		/// The ARN of the thing to be removed from the billing group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveThingFromThingGroupBody
	{
		
		/// <summary>
		/// The group name.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingGroupName { get; set; }
		
		/// <summary>
		/// The group ARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThingGroupArn { get; set; }
		
		/// <summary>
		/// The name of the thing to remove from the group.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingName { get; set; }
		
		/// <summary>
		/// The ARN of the thing to remove from the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThingArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SearchIndexBody
	{
		
		/// <summary>
		/// The search index name.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IndexName { get; set; }
		
		/// <summary>
		/// The search query string.
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string QueryString { get; set; }
		
		/// <summary>
		/// The token used to get the next set of results, or <code>null</code> if there are no additional results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return at one time.
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// The query version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string QueryVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartOnDemandAuditTaskBody
	{
		
		/// <summary>
		/// Which checks are performed during the audit. The checks you specify must be enabled for your account or an exception occurs. Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuditCheckName[] TargetCheckNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		/// The ARN of the resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// The new or modified tags for the resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestAuthorizationBody
	{
		
		/// <summary>
		/// The principal.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Principal { get; set; }
		
		/// <summary>
		/// The Cognito identity pool ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CognitoIdentityPoolId { get; set; }
		
		/// <summary>
		/// A list of authorization info objects. Simulating authorization will create a response for each <code>authInfo</code> object in the list.
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public AuthInfo[] AuthInfos { get; set; }
		
		/// <summary>
		/// When testing custom authorization, the policies specified here are treated as if they are attached to the principal being authorized.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PolicyName[] PolicyNamesToAdd { get; set; }
		
		/// <summary>
		/// When testing custom authorization, the policies specified here are treated as if they are not attached to the principal being authorized.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PolicyName[] PolicyNamesToSkip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestInvokeAuthorizerBody
	{
		
		/// <summary>
		/// The token returned by your custom authentication service.
		/// Max length: 6144
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(6144, MinimumLength=1)]
		public string Token { get; set; }
		
		/// <summary>
		/// The signature made with the token and your custom authentication service's private key. This value must be Base-64-encoded.
		/// Max length: 2560
		/// Min length: 1
		/// Pattern: [A-Za-z0-9+/]+={0,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2560, MinimumLength=1)]
		public string TokenSignature { get; set; }
		
		/// <summary>
		/// Specifies the HTTP context to use for the test authorizer request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HttpContext { get; set; }
		
		/// <summary>
		/// Specifies the MQTT context to use for the test authorizer request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MqttContext { get; set; }
		
		/// <summary>
		/// Specifies the TLS context to use for the test authorizer request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TlsContext { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceBody
	{
		
		/// <summary>
		/// The ARN of the resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// A list of the keys of the tags to be removed from the resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagKey[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateThingGroupsForThingBody
	{
		
		/// <summary>
		/// The thing whose group memberships will be updated.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9:_-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ThingName { get; set; }
		
		/// <summary>
		/// The groups to which the thing will be added.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThingGroupName[] ThingGroupsToAdd { get; set; }
		
		/// <summary>
		/// The groups from which the thing will be removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThingGroupName[] ThingGroupsToRemove { get; set; }
		
		/// <summary>
		/// Override dynamic thing groups with static thing groups when 10-group limit is reached. If a thing belongs to 10 thing groups, and one or more of those groups are dynamic thing groups, adding a thing to a static group removes the thing from the last dynamic group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverrideDynamicGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidateSecurityProfileBehaviorsBody
	{
		
		/// <summary>
		/// Specifies the behaviors that, when violated by a device (thing), cause an alert.
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Behavior[] Behaviors { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
