//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetAggregateResourceConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BaseConfigurationItem[] BaseConfigurationItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateResourceIdentifier[] UnprocessedResourceIdentifiers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetAggregateResourceConfigRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConfigurationAggregatorName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public AggregateResourceIdentifier[] ResourceIdentifiers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetResourceConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BaseConfigurationItem[] BaseConfigurationItems { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ResourceKey[] UnprocessedResourceKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetResourceConfigRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ResourceKey[] ResourceKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteAggregationAuthorizationRequest
	{
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizedAccountId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string AuthorizedAwsRegion { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteConfigRuleRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteConfigurationAggregatorRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConfigurationAggregatorName { get; set; }
	}
	
	/// <summary>
	/// The request object for the <code>DeleteConfigurationRecorder</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteConfigurationRecorderRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConfigurationRecorderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteConformancePackRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z][-a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConformancePackName { get; set; }
	}
	
	/// <summary>
	/// The input for the <a>DeleteDeliveryChannel</a> action. The action accepts the following data, in JSON format. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDeliveryChannelRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string DeliveryChannelName { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteEvaluationResultsRequest
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteOrganizationConfigRuleRequest
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string OrganizationConfigRuleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteOrganizationConformancePackRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z][-a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string OrganizationConformancePackName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeletePendingAggregationRequestRequest
	{
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RequesterAccountId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string RequesterAwsRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteRemediationConfigurationRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteRemediationExceptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailedDeleteRemediationExceptionsBatch[] FailedBatches { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteRemediationExceptionsRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public RemediationExceptionResourceKey[] ResourceKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteResourceConfigRequest
	{
		
		/// <summary>
		/// Max length: 196
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(196, MinimumLength=1)]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteRetentionConfigurationRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string RetentionConfigurationName { get; set; }
	}
	
	/// <summary>
	/// The output for the <a>DeliverConfigSnapshot</a> action, in JSON format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeliverConfigSnapshotResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigSnapshotId { get; set; }
	}
	
	/// <summary>
	/// The input for the <a>DeliverConfigSnapshot</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeliverConfigSnapshotRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string DeliveryChannelName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAggregateComplianceByConfigRulesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateComplianceByConfigRule[] AggregateComplianceByConfigRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAggregateComplianceByConfigRulesRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConfigurationAggregatorName { get; set; }
		
		/// <summary>
		/// Filters the compliance results based on account ID, region, compliance type, and rule name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigRuleComplianceFilters Filters { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAggregationAuthorizationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AggregationAuthorization[] AggregationAuthorizations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAggregationAuthorizationsRequest
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeComplianceByConfigRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceByConfigRule[] ComplianceByConfigRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeComplianceByConfigRuleRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public ConfigRuleName[] ConfigRuleNames { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public ComplianceType[] ComplianceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeComplianceByResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceByResource[] ComplianceByResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeComplianceByResourceRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public ComplianceType[] ComplianceTypes { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConfigRuleEvaluationStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigRuleEvaluationStatus[] ConfigRulesEvaluationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConfigRuleEvaluationStatusRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public ConfigRuleName[] ConfigRuleNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 50)]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConfigRulesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigRule[] ConfigRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConfigRulesRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public ConfigRuleName[] ConfigRuleNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConfigurationAggregatorSourcesStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AggregatedSourceStatus[] AggregatedSourceStatusList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConfigurationAggregatorSourcesStatusRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConfigurationAggregatorName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public AggregatedSourceStatusType[] UpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConfigurationAggregatorsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationAggregator[] ConfigurationAggregators { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConfigurationAggregatorsRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public ConfigurationAggregatorName[] ConfigurationAggregatorNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	/// <summary>
	/// The output for the <a>DescribeConfigurationRecorderStatus</a> action, in JSON format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConfigurationRecorderStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRecorderStatus[] ConfigurationRecordersStatus { get; set; }
	}
	
	/// <summary>
	/// The input for the <a>DescribeConfigurationRecorderStatus</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConfigurationRecorderStatusRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RecorderName[] ConfigurationRecorderNames { get; set; }
	}
	
	/// <summary>
	/// The output for the <a>DescribeConfigurationRecorders</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConfigurationRecordersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRecorder[] ConfigurationRecorders { get; set; }
	}
	
	/// <summary>
	/// The input for the <a>DescribeConfigurationRecorders</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConfigurationRecordersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RecorderName[] ConfigurationRecorderNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConformancePackComplianceResponse
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z][-a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConformancePackName { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public ConformancePackRuleCompliance[] ConformancePackRuleComplianceList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConformancePackComplianceRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z][-a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConformancePackName { get; set; }
		
		/// <summary>
		/// Filters the conformance pack by compliance types and AWS Config rule names.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackComplianceFilters Filters { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConformancePackStatusResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public ConformancePackStatusDetail[] ConformancePackStatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConformancePackStatusRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public ConformancePackName[] ConformancePackNames { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 20)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConformancePacksResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public ConformancePackDetail[] ConformancePackDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConformancePacksRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public ConformancePackName[] ConformancePackNames { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 20)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The output for the <a>DescribeDeliveryChannelStatus</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDeliveryChannelStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeliveryChannelStatus[] DeliveryChannelsStatus { get; set; }
	}
	
	/// <summary>
	/// The input for the <a>DeliveryChannelStatus</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDeliveryChannelStatusRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelName[] DeliveryChannelNames { get; set; }
	}
	
	/// <summary>
	/// The output for the <a>DescribeDeliveryChannels</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDeliveryChannelsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeliveryChannel[] DeliveryChannels { get; set; }
	}
	
	/// <summary>
	/// The input for the <a>DescribeDeliveryChannels</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDeliveryChannelsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelName[] DeliveryChannelNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeOrganizationConfigRuleStatusesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConfigRuleStatus[] OrganizationConfigRuleStatuses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeOrganizationConfigRuleStatusesRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public StringWithCharLimit64[] OrganizationConfigRuleNames { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeOrganizationConfigRulesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConfigRule[] OrganizationConfigRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeOrganizationConfigRulesRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public StringWithCharLimit64[] OrganizationConfigRuleNames { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeOrganizationConformancePackStatusesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConformancePackStatus[] OrganizationConformancePackStatuses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeOrganizationConformancePackStatusesRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public OrganizationConformancePackName[] OrganizationConformancePackNames { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeOrganizationConformancePacksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConformancePack[] OrganizationConformancePacks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeOrganizationConformancePacksRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public OrganizationConformancePackName[] OrganizationConformancePackNames { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePendingAggregationRequestsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PendingAggregationRequest[] PendingAggregationRequests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePendingAggregationRequestsRequest
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 20)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRemediationConfigurationsResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public RemediationConfiguration[] RemediationConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRemediationConfigurationsRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public ConfigRuleName[] ConfigRuleNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRemediationExceptionsResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public RemediationException[] RemediationExceptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRemediationExceptionsRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public RemediationExceptionResourceKey[] ResourceKeys { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRemediationExecutionStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationExecutionStatus[] RemediationExecutionStatuses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRemediationExecutionStatusRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ResourceKey[] ResourceKeys { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRetentionConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RetentionConfiguration[] RetentionConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRetentionConfigurationsRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public RetentionConfigurationName[] RetentionConfigurationNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAggregateComplianceDetailsByConfigRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateEvaluationResult[] AggregateEvaluationResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAggregateComplianceDetailsByConfigRuleRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConfigurationAggregatorName { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string AwsRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetAggregateComplianceDetailsByConfigRuleRequestComplianceType ComplianceType { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetAggregateComplianceDetailsByConfigRuleRequestComplianceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_APPLICABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_DATA = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAggregateConfigRuleComplianceSummaryResponse
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string GroupByKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateComplianceCount[] AggregateComplianceCounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAggregateConfigRuleComplianceSummaryRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConfigurationAggregatorName { get; set; }
		
		/// <summary>
		/// Filters the results based on the account IDs and regions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigRuleComplianceSummaryFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetAggregateConfigRuleComplianceSummaryRequestGroupByKey GroupByKey { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetAggregateConfigRuleComplianceSummaryRequestGroupByKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_REGION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAggregateDiscoveredResourceCountsResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TotalDiscoveredResources { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string GroupByKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupedResourceCount[] GroupedResourceCounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAggregateDiscoveredResourceCountsRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConfigurationAggregatorName { get; set; }
		
		/// <summary>
		/// Filters the resource count based on account ID, region, and resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceCountFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetAggregateDiscoveredResourceCountsRequestGroupByKey GroupByKey { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetAggregateDiscoveredResourceCountsRequestGroupByKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_ID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_REGION = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAggregateResourceConfigResponse
	{
		
		/// <summary>
		/// A list that contains detailed configurations of a specified resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationItem ConfigurationItem { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAggregateResourceConfigRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConfigurationAggregatorName { get; set; }
		
		/// <summary>
		/// The details that identify a resource that is collected by AWS Config aggregator, including the resource type, ID, (if available) the custom resource name, the source account, and source region.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AggregateResourceIdentifier ResourceIdentifier { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetComplianceDetailsByConfigRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationResult[] EvaluationResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetComplianceDetailsByConfigRuleRequest
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public ComplianceType[] ComplianceTypes { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetComplianceDetailsByResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationResult[] EvaluationResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetComplianceDetailsByResourceRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public ComplianceType[] ComplianceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetComplianceSummaryByConfigRuleResponse
	{
		
		/// <summary>
		/// The number of AWS Config rules or AWS resources that are compliant and noncompliant.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComplianceSummary ComplianceSummary { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetComplianceSummaryByResourceTypeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceSummaryByResourceType[] ComplianceSummariesByResourceType { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetComplianceSummaryByResourceTypeRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public StringWithCharLimit256[] ResourceTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetConformancePackComplianceDetailsResponse
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z][-a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConformancePackName { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ConformancePackEvaluationResult[] ConformancePackRuleEvaluationResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetConformancePackComplianceDetailsRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z][-a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConformancePackName { get; set; }
		
		/// <summary>
		/// Filters a conformance pack by AWS Config rule names, compliance types, AWS resource types, and resource IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackEvaluationFilters Filters { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetConformancePackComplianceSummaryResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public ConformancePackComplianceSummary[] ConformancePackComplianceSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetConformancePackComplianceSummaryRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public ConformancePackName[] ConformancePackNames { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 20)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDiscoveredResourceCountsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalDiscoveredResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceCount[] ResourceCounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDiscoveredResourceCountsRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public StringWithCharLimit256[] ResourceTypes { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOrganizationConfigRuleDetailedStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MemberAccountStatus[] OrganizationConfigRuleDetailedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOrganizationConfigRuleDetailedStatusRequest
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string OrganizationConfigRuleName { get; set; }
		
		/// <summary>
		/// Status filter object to filter results based on specific member account ID or status type for an organization config rule. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StatusDetailFilters Filters { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOrganizationConformancePackDetailedStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConformancePackDetailedStatus[] OrganizationConformancePackDetailedStatuses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOrganizationConformancePackDetailedStatusRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z][-a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string OrganizationConformancePackName { get; set; }
		
		/// <summary>
		/// Status filter object to filter results based on specific member account ID or status type for an organization conformance pack.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OrganizationResourceDetailedStatusFilters Filters { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The output for the <a>GetResourceConfigHistory</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetResourceConfigHistoryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationItem[] ConfigurationItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The input for the <a>GetResourceConfigHistory</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetResourceConfigHistoryRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetResourceConfigHistoryRequestResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LaterTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EarlierTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetResourceConfigHistoryRequestChronologicalOrder ChronologicalOrder { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetResourceConfigHistoryRequestResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::CustomerGateway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Host = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Instance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::InternetGateway = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkAcl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkInterface = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RouteTable = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::SecurityGroup = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Subnet = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudTrail::Trail = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Volume = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNConnection = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNGateway = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RegisteredHAInstance = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NatGateway = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EgressOnlyInternetGateway = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpoint = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpointService = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::FlowLog = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCPeeringConnection = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Elasticsearch::Domain = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Group = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Policy = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Role = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::User = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancingV2::LoadBalancer = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ACM::Certificate = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBInstance = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSubnetGroup = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSecurityGroup = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSnapshot = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBCluster = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBClusterSnapshot = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::EventSubscription = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::Bucket = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::AccountPublicAccessBlock = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::Cluster = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSnapshot = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterParameterGroup = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSecurityGroup = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSubnetGroup = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::EventSubscription = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::ManagedInstanceInventory = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudWatch::Alarm = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFormation::Stack = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancing::LoadBalancer = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::AutoScalingGroup = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::LaunchConfiguration = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScalingPolicy = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScheduledAction = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::DynamoDB::Table = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodeBuild::Project = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RateBasedRule = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::Rule = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RuleGroup = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::WebACL = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RateBasedRule = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::Rule = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RuleGroup = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::WebACL = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::Distribution = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::StreamingDistribution = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Lambda::Function = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Application = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::ApplicationVersion = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Environment = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::WebACL = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RuleGroup = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::IPSet = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RegexPatternSet = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::ManagedRuleSet = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::XRay::EncryptionConfig = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::AssociationCompliance = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::PatchCompliance = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Shield::Protection = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ShieldRegional::Protection = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Config::ResourceCompliance = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::Stage = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::RestApi = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Stage = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Api = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodePipeline::Pipeline = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProvisionedProduct = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProduct = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::Portfolio = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SQS::Queue = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::KMS::Key = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::QLDB::Ledger = 89,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetResourceConfigHistoryRequestChronologicalOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reverse = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Forward = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAggregateDiscoveredResourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateResourceIdentifier[] ResourceIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAggregateDiscoveredResourcesRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConfigurationAggregatorName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListAggregateDiscoveredResourcesRequestResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Filters the results by resource account ID, region, resource ID, and resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceFilters Filters { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListAggregateDiscoveredResourcesRequestResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::CustomerGateway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Host = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Instance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::InternetGateway = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkAcl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkInterface = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RouteTable = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::SecurityGroup = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Subnet = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudTrail::Trail = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Volume = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNConnection = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNGateway = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RegisteredHAInstance = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NatGateway = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EgressOnlyInternetGateway = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpoint = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpointService = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::FlowLog = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCPeeringConnection = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Elasticsearch::Domain = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Group = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Policy = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Role = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::User = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancingV2::LoadBalancer = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ACM::Certificate = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBInstance = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSubnetGroup = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSecurityGroup = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSnapshot = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBCluster = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBClusterSnapshot = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::EventSubscription = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::Bucket = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::AccountPublicAccessBlock = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::Cluster = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSnapshot = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterParameterGroup = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSecurityGroup = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSubnetGroup = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::EventSubscription = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::ManagedInstanceInventory = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudWatch::Alarm = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFormation::Stack = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancing::LoadBalancer = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::AutoScalingGroup = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::LaunchConfiguration = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScalingPolicy = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScheduledAction = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::DynamoDB::Table = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodeBuild::Project = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RateBasedRule = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::Rule = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RuleGroup = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::WebACL = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RateBasedRule = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::Rule = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RuleGroup = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::WebACL = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::Distribution = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::StreamingDistribution = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Lambda::Function = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Application = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::ApplicationVersion = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Environment = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::WebACL = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RuleGroup = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::IPSet = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RegexPatternSet = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::ManagedRuleSet = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::XRay::EncryptionConfig = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::AssociationCompliance = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::PatchCompliance = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Shield::Protection = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ShieldRegional::Protection = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Config::ResourceCompliance = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::Stage = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::RestApi = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Stage = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Api = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodePipeline::Pipeline = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProvisionedProduct = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProduct = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::Portfolio = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SQS::Queue = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::KMS::Key = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::QLDB::Ledger = 89,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDiscoveredResourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceIdentifier[] ResourceIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDiscoveredResourcesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListDiscoveredResourcesRequestResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceId[] ResourceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeDeletedResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListDiscoveredResourcesRequestResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::CustomerGateway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Host = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Instance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::InternetGateway = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkAcl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkInterface = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RouteTable = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::SecurityGroup = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Subnet = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudTrail::Trail = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Volume = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNConnection = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNGateway = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RegisteredHAInstance = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NatGateway = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EgressOnlyInternetGateway = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpoint = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpointService = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::FlowLog = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCPeeringConnection = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Elasticsearch::Domain = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Group = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Policy = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Role = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::User = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancingV2::LoadBalancer = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ACM::Certificate = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBInstance = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSubnetGroup = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSecurityGroup = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSnapshot = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBCluster = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBClusterSnapshot = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::EventSubscription = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::Bucket = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::AccountPublicAccessBlock = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::Cluster = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSnapshot = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterParameterGroup = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSecurityGroup = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSubnetGroup = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::EventSubscription = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::ManagedInstanceInventory = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudWatch::Alarm = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFormation::Stack = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancing::LoadBalancer = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::AutoScalingGroup = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::LaunchConfiguration = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScalingPolicy = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScheduledAction = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::DynamoDB::Table = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodeBuild::Project = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RateBasedRule = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::Rule = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RuleGroup = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::WebACL = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RateBasedRule = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::Rule = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RuleGroup = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::WebACL = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::Distribution = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::StreamingDistribution = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Lambda::Function = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Application = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::ApplicationVersion = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Environment = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::WebACL = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RuleGroup = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::IPSet = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RegexPatternSet = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::ManagedRuleSet = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::XRay::EncryptionConfig = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::AssociationCompliance = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::PatchCompliance = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Shield::Protection = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ShieldRegional::Protection = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Config::ResourceCompliance = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::Stage = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::RestApi = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Stage = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Api = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodePipeline::Pipeline = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProvisionedProduct = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProduct = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::Portfolio = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SQS::Queue = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::KMS::Key = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::QLDB::Ledger = 89,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceRequest
	{
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutAggregationAuthorizationResponse
	{
		
		/// <summary>
		/// An object that represents the authorizations granted to aggregator accounts and regions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AggregationAuthorization AggregationAuthorization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutAggregationAuthorizationRequest
	{
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizedAccountId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string AuthorizedAwsRegion { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutConfigRuleRequest
	{
		
		/// <summary>
		/// <p>An AWS Config rule represents an AWS Lambda function that you create for a custom rule or a predefined function for an AWS managed rule. The function evaluates configuration items to assess whether your AWS resources comply with your desired configurations. This function can run when AWS Config detects a configuration change to an AWS resource and at a periodic frequency that you choose (for example, every 24 hours).</p> <note> <p>You can use the AWS CLI and AWS SDKs if you want to create a rule that triggers evaluations for your resources when AWS Config delivers the configuration snapshot. For more information, see <a>ConfigSnapshotDeliveryProperties</a>.</p> </note> <p>For more information about developing and using AWS Config rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html">Evaluating AWS Resource Configurations with AWS Config</a> in the <i>AWS Config Developer Guide</i>.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConfigRule ConfigRule { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutConfigurationAggregatorResponse
	{
		
		/// <summary>
		/// The details about the configuration aggregator, including information about source accounts, regions, and metadata of the aggregator. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationAggregator ConfigurationAggregator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutConfigurationAggregatorRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConfigurationAggregatorName { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public AccountAggregationSource[] AccountAggregationSources { get; set; }
		
		/// <summary>
		/// This object contains regions to set up the aggregator and an IAM role to retrieve organization details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OrganizationAggregationSource OrganizationAggregationSource { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The input for the <a>PutConfigurationRecorder</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutConfigurationRecorderRequest
	{
		
		/// <summary>
		/// An object that represents the recording of configuration changes of an AWS resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRecorder ConfigurationRecorder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutConformancePackResponse
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ConformancePackArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutConformancePackRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z][-a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConformancePackName { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: s3://.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string TemplateS3Uri { get; set; }
		
		/// <summary>
		/// Max length: 51200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(51200, MinimumLength=1)]
		public string TemplateBody { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string DeliveryS3Bucket { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string DeliveryS3KeyPrefix { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public ConformancePackInputParameter[] ConformancePackInputParameters { get; set; }
	}
	
	/// <summary>
	/// The input for the <a>PutDeliveryChannel</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutDeliveryChannelRequest
	{
		
		/// <summary>
		/// The channel through which AWS Config delivers notifications and updated configuration states.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeliveryChannel DeliveryChannel { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutEvaluationsResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Evaluation[] FailedEvaluations { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutEvaluationsRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Evaluation[] Evaluations { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResultToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TestMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutOrganizationConfigRuleResponse
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string OrganizationConfigRuleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutOrganizationConfigRuleRequest
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string OrganizationConfigRuleName { get; set; }
		
		/// <summary>
		/// An object that specifies organization managed rule metadata such as resource type and ID of AWS resource along with the rule identifier. It also provides the frequency with which you want AWS Config to run evaluations for the rule if the trigger type is periodic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OrganizationManagedRuleMetadata OrganizationManagedRuleMetadata { get; set; }
		
		/// <summary>
		/// An object that specifies organization custom rule metadata such as resource type, resource ID of AWS resource, Lamdba function ARN, and organization trigger types that trigger AWS Config to evaluate your AWS resources against a rule. It also provides the frequency with which you want AWS Config to run evaluations for the rule if the trigger type is periodic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OrganizationCustomRuleMetadata OrganizationCustomRuleMetadata { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public AccountId[] ExcludedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutOrganizationConformancePackResponse
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string OrganizationConformancePackArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutOrganizationConformancePackRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z][-a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string OrganizationConformancePackName { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: s3://.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string TemplateS3Uri { get; set; }
		
		/// <summary>
		/// Max length: 51200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(51200, MinimumLength=1)]
		public string TemplateBody { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string DeliveryS3Bucket { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string DeliveryS3KeyPrefix { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public ConformancePackInputParameter[] ConformancePackInputParameters { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public AccountId[] ExcludedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRemediationConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailedRemediationBatch[] FailedBatches { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRemediationConfigurationsRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public RemediationConfiguration[] RemediationConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRemediationExceptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailedRemediationExceptionBatch[] FailedBatches { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRemediationExceptionsRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public RemediationExceptionResourceKey[] ResourceKeys { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutResourceConfigRequest
	{
		
		/// <summary>
		/// Max length: 196
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(196, MinimumLength=1)]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [A-Za-z0-9-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string SchemaVersionId { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRetentionConfigurationResponse
	{
		
		/// <summary>
		/// An object with the name of the retention configuration and the retention period in days. The object stores the configuration for data retention in AWS Config.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RetentionConfiguration RetentionConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRetentionConfigurationRequest
	{
		
		/// <summary>
		/// Minimum: 30
		/// Maximum: 2557
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(30, 2557)]
		public int RetentionPeriodInDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SelectAggregateResourceConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Results { get; set; }
		
		/// <summary>
		/// Details about the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueryInfo QueryInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SelectAggregateResourceConfigRequest
	{
		
		/// <summary>
		/// Max length: 4096
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096, MinimumLength=1)]
		public string Expression { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConfigurationAggregatorName { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SelectResourceConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Results { get; set; }
		
		/// <summary>
		/// Details about the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueryInfo QueryInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SelectResourceConfigRequest
	{
		
		/// <summary>
		/// Max length: 4096
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096, MinimumLength=1)]
		public string Expression { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartConfigRulesEvaluationRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public ConfigRuleName[] ConfigRuleNames { get; set; }
	}
	
	/// <summary>
	/// The input for the <a>StartConfigurationRecorder</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartConfigurationRecorderRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConfigurationRecorderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartRemediationExecutionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureMessage { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ResourceKey[] FailedItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartRemediationExecutionRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ResourceKey[] ResourceKeys { get; set; }
	}
	
	/// <summary>
	/// The input for the <a>StopConfigurationRecorder</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopConfigurationRecorderRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConfigurationRecorderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagKey[] TagKeys { get; set; }
	}
	
	/// <summary>
	/// A collection of accounts and regions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountAggregationSource
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public AccountId[] AccountIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllAwsRegions { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public String[] AwsRegions { get; set; }
	}
	
	/// <summary>
	/// Indicates whether an AWS resource or AWS Config rule is compliant and provides the number of contributors that affect the compliance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Compliance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceComplianceType ComplianceType { get; set; }
		
		/// <summary>
		/// The number of AWS resources or AWS Config rules responsible for the current compliance of the item, up to a maximum number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComplianceContributorCount ComplianceContributorCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComplianceComplianceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_APPLICABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_DATA = 3,
	}
	
	/// <summary>
	/// <p>Indicates whether an AWS Config rule is compliant based on account ID, region, compliance, and rule name.</p> <p>A rule is compliant if all of the resources that the rule evaluated comply with it. It is noncompliant if any of these resources do not comply.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AggregateComplianceByConfigRule
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Indicates whether an AWS resource or AWS Config rule is compliant and provides the number of contributors that affect the compliance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Compliance Compliance { get; set; }
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string AwsRegion { get; set; }
	}
	
	/// <summary>
	/// The number of AWS Config rules or AWS resources that are compliant and noncompliant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ComplianceSummary
	{
		
		/// <summary>
		/// The number of AWS resources or AWS Config rules responsible for the current compliance of the item, up to a maximum number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComplianceContributorCount CompliantResourceCount { get; set; }
		
		/// <summary>
		/// The number of AWS resources or AWS Config rules responsible for the current compliance of the item, up to a maximum number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComplianceContributorCount NonCompliantResourceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ComplianceSummaryTimestamp { get; set; }
	}
	
	/// <summary>
	/// Returns the number of compliant and noncompliant rules for one or more accounts and regions in an aggregator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AggregateComplianceCount
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string GroupName { get; set; }
		
		/// <summary>
		/// The number of AWS Config rules or AWS resources that are compliant and noncompliant.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComplianceSummary ComplianceSummary { get; set; }
	}
	
	/// <summary>
	/// Uniquely identifies an evaluation result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EvaluationResultIdentifier
	{
		
		/// <summary>
		/// Identifies an AWS Config rule that evaluated an AWS resource, and provides the type and ID of the resource that the rule evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EvaluationResultQualifier EvaluationResultQualifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> OrderingTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComplianceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_APPLICABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_DATA = 3,
	}
	
	/// <summary>
	/// The details of an AWS Config evaluation for an account ID and region in an aggregator. Provides the AWS resource that was evaluated, the compliance of the resource, related time stamps, and supplementary information. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AggregateEvaluationResult
	{
		
		/// <summary>
		/// Uniquely identifies an evaluation result.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EvaluationResultIdentifier EvaluationResultIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AggregateEvaluationResultComplianceType ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ResultRecordedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ConfigRuleInvokedTime { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Annotation { get; set; }
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string AwsRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AggregateEvaluationResultComplianceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_APPLICABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_DATA = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::CustomerGateway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Host = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Instance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::InternetGateway = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkAcl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkInterface = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RouteTable = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::SecurityGroup = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Subnet = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudTrail::Trail = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Volume = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNConnection = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNGateway = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RegisteredHAInstance = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NatGateway = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EgressOnlyInternetGateway = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpoint = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpointService = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::FlowLog = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCPeeringConnection = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Elasticsearch::Domain = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Group = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Policy = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Role = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::User = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancingV2::LoadBalancer = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ACM::Certificate = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBInstance = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSubnetGroup = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSecurityGroup = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSnapshot = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBCluster = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBClusterSnapshot = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::EventSubscription = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::Bucket = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::AccountPublicAccessBlock = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::Cluster = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSnapshot = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterParameterGroup = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSecurityGroup = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSubnetGroup = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::EventSubscription = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::ManagedInstanceInventory = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudWatch::Alarm = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFormation::Stack = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancing::LoadBalancer = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::AutoScalingGroup = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::LaunchConfiguration = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScalingPolicy = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScheduledAction = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::DynamoDB::Table = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodeBuild::Project = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RateBasedRule = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::Rule = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RuleGroup = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::WebACL = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RateBasedRule = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::Rule = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RuleGroup = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::WebACL = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::Distribution = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::StreamingDistribution = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Lambda::Function = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Application = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::ApplicationVersion = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Environment = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::WebACL = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RuleGroup = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::IPSet = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RegexPatternSet = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::ManagedRuleSet = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::XRay::EncryptionConfig = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::AssociationCompliance = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::PatchCompliance = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Shield::Protection = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ShieldRegional::Protection = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Config::ResourceCompliance = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::Stage = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::RestApi = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Stage = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Api = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodePipeline::Pipeline = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProvisionedProduct = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProduct = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::Portfolio = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SQS::Queue = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::KMS::Key = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::QLDB::Ledger = 89,
	}
	
	/// <summary>
	/// The details that identify a resource that is collected by AWS Config aggregator, including the resource type, ID, (if available) the custom resource name, the source account, and source region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AggregateResourceIdentifier
	{
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceAccountId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SourceRegion { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AggregateResourceIdentifierResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AggregateResourceIdentifierResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::CustomerGateway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Host = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Instance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::InternetGateway = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkAcl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkInterface = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RouteTable = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::SecurityGroup = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Subnet = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudTrail::Trail = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Volume = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNConnection = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNGateway = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RegisteredHAInstance = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NatGateway = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EgressOnlyInternetGateway = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpoint = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpointService = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::FlowLog = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCPeeringConnection = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Elasticsearch::Domain = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Group = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Policy = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Role = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::User = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancingV2::LoadBalancer = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ACM::Certificate = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBInstance = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSubnetGroup = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSecurityGroup = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSnapshot = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBCluster = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBClusterSnapshot = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::EventSubscription = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::Bucket = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::AccountPublicAccessBlock = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::Cluster = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSnapshot = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterParameterGroup = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSecurityGroup = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSubnetGroup = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::EventSubscription = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::ManagedInstanceInventory = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudWatch::Alarm = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFormation::Stack = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancing::LoadBalancer = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::AutoScalingGroup = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::LaunchConfiguration = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScalingPolicy = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScheduledAction = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::DynamoDB::Table = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodeBuild::Project = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RateBasedRule = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::Rule = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RuleGroup = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::WebACL = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RateBasedRule = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::Rule = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RuleGroup = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::WebACL = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::Distribution = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::StreamingDistribution = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Lambda::Function = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Application = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::ApplicationVersion = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Environment = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::WebACL = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RuleGroup = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::IPSet = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RegexPatternSet = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::ManagedRuleSet = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::XRay::EncryptionConfig = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::AssociationCompliance = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::PatchCompliance = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Shield::Protection = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ShieldRegional::Protection = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Config::ResourceCompliance = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::Stage = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::RestApi = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Stage = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Api = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodePipeline::Pipeline = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProvisionedProduct = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProduct = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::Portfolio = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SQS::Queue = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::KMS::Key = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::QLDB::Ledger = 89,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AggregatedSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORGANIZATION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AggregatedSourceStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTDATED = 2,
	}
	
	/// <summary>
	/// The current sync status between the source and the aggregator account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AggregatedSourceStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AggregatedSourceStatusSourceType SourceType { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string AwsRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AggregatedSourceStatusLastUpdateStatus LastUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AggregatedSourceStatusSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORGANIZATION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AggregatedSourceStatusLastUpdateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTDATED = 2,
	}
	
	/// <summary>
	/// An object that represents the authorizations granted to aggregator accounts and regions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AggregationAuthorization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AggregationAuthorizationArn { get; set; }
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizedAccountId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string AuthorizedAwsRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigurationItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceDiscovered = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceNotRecorded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceDeleted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceDeletedNotRecorded = 4,
	}
	
	/// <summary>
	/// The detailed configuration of a specified resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BaseConfigurationItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ConfigurationItemCaptureTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BaseConfigurationItemConfigurationItemStatus ConfigurationItemStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationStateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BaseConfigurationItemResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string AwsRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ResourceCreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SupplementaryConfiguration SupplementaryConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BaseConfigurationItemConfigurationItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceDiscovered = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceNotRecorded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceDeleted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceDeletedNotRecorded = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BaseConfigurationItemResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::CustomerGateway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Host = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Instance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::InternetGateway = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkAcl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkInterface = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RouteTable = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::SecurityGroup = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Subnet = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudTrail::Trail = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Volume = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNConnection = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNGateway = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RegisteredHAInstance = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NatGateway = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EgressOnlyInternetGateway = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpoint = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpointService = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::FlowLog = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCPeeringConnection = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Elasticsearch::Domain = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Group = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Policy = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Role = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::User = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancingV2::LoadBalancer = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ACM::Certificate = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBInstance = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSubnetGroup = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSecurityGroup = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSnapshot = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBCluster = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBClusterSnapshot = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::EventSubscription = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::Bucket = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::AccountPublicAccessBlock = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::Cluster = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSnapshot = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterParameterGroup = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSecurityGroup = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSubnetGroup = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::EventSubscription = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::ManagedInstanceInventory = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudWatch::Alarm = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFormation::Stack = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancing::LoadBalancer = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::AutoScalingGroup = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::LaunchConfiguration = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScalingPolicy = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScheduledAction = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::DynamoDB::Table = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodeBuild::Project = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RateBasedRule = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::Rule = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RuleGroup = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::WebACL = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RateBasedRule = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::Rule = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RuleGroup = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::WebACL = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::Distribution = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::StreamingDistribution = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Lambda::Function = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Application = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::ApplicationVersion = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Environment = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::WebACL = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RuleGroup = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::IPSet = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RegexPatternSet = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::ManagedRuleSet = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::XRay::EncryptionConfig = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::AssociationCompliance = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::PatchCompliance = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Shield::Protection = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ShieldRegional::Protection = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Config::ResourceCompliance = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::Stage = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::RestApi = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Stage = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Api = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodePipeline::Pipeline = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProvisionedProduct = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProduct = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::Portfolio = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SQS::Queue = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::KMS::Key = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::QLDB::Ledger = 89,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChronologicalOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reverse = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Forward = 1,
	}
	
	/// <summary>
	/// The number of AWS resources or AWS Config rules responsible for the current compliance of the item, up to a maximum number.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ComplianceContributorCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CappedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CapExceeded { get; set; }
	}
	
	/// <summary>
	/// Indicates whether an AWS Config rule is compliant. A rule is compliant if all of the resources that the rule evaluated comply with it. A rule is noncompliant if any of these resources do not comply.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ComplianceByConfigRule
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Indicates whether an AWS resource or AWS Config rule is compliant and provides the number of contributors that affect the compliance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Compliance Compliance { get; set; }
	}
	
	/// <summary>
	/// Indicates whether an AWS resource that is evaluated according to one or more AWS Config rules is compliant. A resource is compliant if it complies with all of the rules that evaluate it. A resource is noncompliant if it does not comply with one or more of these rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ComplianceByResource
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Indicates whether an AWS resource or AWS Config rule is compliant and provides the number of contributors that affect the compliance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Compliance Compliance { get; set; }
	}
	
	/// <summary>
	/// The number of AWS resources of a specific type that are compliant or noncompliant, up to a maximum of 100 for each.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ComplianceSummaryByResourceType
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// The number of AWS Config rules or AWS resources that are compliant and noncompliant.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComplianceSummary ComplianceSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeliveryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failure = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Not_Applicable = 2,
	}
	
	/// <summary>
	/// Provides status of the delivery of the snapshot or the configuration history to the specified Amazon S3 bucket. Also provides the status of notifications about the Amazon S3 delivery to the specified Amazon SNS topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigExportDeliveryInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigExportDeliveryInfoLastStatus LastStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastAttemptTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastSuccessfulTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NextDeliveryTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigExportDeliveryInfoLastStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failure = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Not_Applicable = 2,
	}
	
	/// <summary>
	/// Defines which resources trigger an evaluation for an AWS Config rule. The scope can include one or more resource types, a combination of a tag key and value, or a combination of one resource type and one resource ID. Specify a scope to constrain which resources trigger an evaluation for a rule. Otherwise, evaluations for the rule are triggered when any resource in your recording group changes in configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Scope
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public StringWithCharLimit256[] ComplianceResourceTypes { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string TagKey { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string TagValue { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ComplianceResourceId { get; set; }
	}
	
	/// <summary>
	/// Provides the AWS Config rule owner (AWS or customer), the rule identifier, and the events that trigger the evaluation of your AWS resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Source
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SourceOwner Owner { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string SourceIdentifier { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public SourceDetail[] SourceDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SourceOwner
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_LAMBDA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MaximumExecutionFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		One_Hour = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Three_Hours = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Six_Hours = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Twelve_Hours = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TwentyFour_Hours = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigRuleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING_RESULTS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVALUATING = 3,
	}
	
	/// <summary>
	/// <p>An AWS Config rule represents an AWS Lambda function that you create for a custom rule or a predefined function for an AWS managed rule. The function evaluates configuration items to assess whether your AWS resources comply with your desired configurations. This function can run when AWS Config detects a configuration change to an AWS resource and at a periodic frequency that you choose (for example, every 24 hours).</p> <note> <p>You can use the AWS CLI and AWS SDKs if you want to create a rule that triggers evaluations for your resources when AWS Config delivers the configuration snapshot. For more information, see <a>ConfigSnapshotDeliveryProperties</a>.</p> </note> <p>For more information about developing and using AWS Config rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html">Evaluating AWS Resource Configurations with AWS Config</a> in the <i>AWS Config Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigRule
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConfigRuleArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ConfigRuleId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Defines which resources trigger an evaluation for an AWS Config rule. The scope can include one or more resource types, a combination of a tag key and value, or a combination of one resource type and one resource ID. Specify a scope to constrain which resources trigger an evaluation for a rule. Otherwise, evaluations for the rule are triggered when any resource in your recording group changes in configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Scope Scope { get; set; }
		
		/// <summary>
		/// Provides the AWS Config rule owner (AWS or customer), the rule identifier, and the events that trigger the evaluation of your AWS resources.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Source Source { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string InputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigRuleMaximumExecutionFrequency MaximumExecutionFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigRuleConfigRuleState ConfigRuleState { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string CreatedBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigRuleMaximumExecutionFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		One_Hour = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Three_Hours = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Six_Hours = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Twelve_Hours = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TwentyFour_Hours = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigRuleConfigRuleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING_RESULTS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVALUATING = 3,
	}
	
	/// <summary>
	/// Filters the compliance results based on account ID, region, compliance type, and rule name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigRuleComplianceFilters
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigRuleComplianceFiltersComplianceType ComplianceType { get; set; }
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string AwsRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigRuleComplianceFiltersComplianceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_APPLICABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_DATA = 3,
	}
	
	/// <summary>
	/// Filters the results based on the account IDs and regions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigRuleComplianceSummaryFilters
	{
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string AwsRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigRuleComplianceSummaryGroupKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_REGION = 1,
	}
	
	/// <summary>
	/// <p>Status information for your AWS managed Config rules. The status includes information such as the last time the rule ran, the last time it failed, and the related error for the last failure.</p> <p>This action does not return status information about custom AWS Config rules.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigRuleEvaluationStatus
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigRuleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastSuccessfulInvocationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastFailedInvocationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastSuccessfulEvaluationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastFailedEvaluationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FirstActivatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastDeactivatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FirstEvaluationStarted { get; set; }
	}
	
	/// <summary>
	/// <p>Provides options for how often AWS Config delivers configuration snapshots to the Amazon S3 bucket in your delivery channel.</p> <p>The frequency for a rule that triggers evaluations for your resources when AWS Config delivers the configuration snapshot is set by one of two values, depending on which is less frequent:</p> <ul> <li> <p>The value for the <code>deliveryFrequency</code> parameter within the delivery channel configuration, which sets how often AWS Config delivers configuration snapshots. This value also sets how often AWS Config invokes evaluations for AWS Config rules.</p> </li> <li> <p>The value for the <code>MaximumExecutionFrequency</code> parameter, which sets the maximum frequency with which AWS Config invokes evaluations for the rule. For more information, see <a>ConfigRule</a>.</p> </li> </ul> <p>If the <code>deliveryFrequency</code> value is less frequent than the <code>MaximumExecutionFrequency</code> value for a rule, AWS Config invokes the rule only as often as the <code>deliveryFrequency</code> value.</p> <ol> <li> <p>For example, you want your rule to run evaluations when AWS Config delivers the configuration snapshot.</p> </li> <li> <p>You specify the <code>MaximumExecutionFrequency</code> value for <code>Six_Hours</code>. </p> </li> <li> <p>You then specify the delivery channel <code>deliveryFrequency</code> value for <code>TwentyFour_Hours</code>.</p> </li> <li> <p>Because the value for <code>deliveryFrequency</code> is less frequent than <code>MaximumExecutionFrequency</code>, AWS Config invokes evaluations for the rule every 24 hours. </p> </li> </ol> <p>You should set the <code>MaximumExecutionFrequency</code> value to be at least as frequent as the <code>deliveryFrequency</code> value. You can view the <code>deliveryFrequency</code> value by using the <code>DescribeDeliveryChannnels</code> action.</p> <p>To update the <code>deliveryFrequency</code> with which AWS Config delivers your configuration snapshots, use the <code>PutDeliveryChannel</code> action.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigSnapshotDeliveryProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigSnapshotDeliveryPropertiesDeliveryFrequency DeliveryFrequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigSnapshotDeliveryPropertiesDeliveryFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		One_Hour = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Three_Hours = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Six_Hours = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Twelve_Hours = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TwentyFour_Hours = 4,
	}
	
	/// <summary>
	/// A list that contains the status of the delivery of the configuration stream notification to the Amazon SNS topic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigStreamDeliveryInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigStreamDeliveryInfoLastStatus LastStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastStatusChangeTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigStreamDeliveryInfoLastStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failure = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Not_Applicable = 2,
	}
	
	/// <summary>
	/// This object contains regions to set up the aggregator and an IAM role to retrieve organization details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrganizationAggregationSource
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public String[] AwsRegions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllAwsRegions { get; set; }
	}
	
	/// <summary>
	/// The details about the configuration aggregator, including information about source accounts, regions, and metadata of the aggregator. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationAggregator
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConfigurationAggregatorName { get; set; }
		
		/// <summary>
		/// Pattern: arn:aws[a-z\-]*:config:[a-z\-\d]+:\d+:config-aggregator/config-aggregator-[a-z\d]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationAggregatorArn { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public AccountAggregationSource[] AccountAggregationSources { get; set; }
		
		/// <summary>
		/// This object contains regions to set up the aggregator and an IAM role to retrieve organization details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OrganizationAggregationSource OrganizationAggregationSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
	}
	
	/// <summary>
	/// A list that contains detailed configurations of a specified resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ConfigurationItemCaptureTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationItemConfigurationItemStatus ConfigurationItemStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationStateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationItemMD5Hash { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationItemResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string AwsRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ResourceCreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RelatedEvent[] RelatedEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Relationship[] Relationships { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SupplementaryConfiguration SupplementaryConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigurationItemConfigurationItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceDiscovered = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceNotRecorded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceDeleted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceDeletedNotRecorded = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigurationItemResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::CustomerGateway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Host = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Instance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::InternetGateway = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkAcl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkInterface = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RouteTable = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::SecurityGroup = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Subnet = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudTrail::Trail = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Volume = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNConnection = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNGateway = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RegisteredHAInstance = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NatGateway = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EgressOnlyInternetGateway = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpoint = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpointService = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::FlowLog = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCPeeringConnection = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Elasticsearch::Domain = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Group = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Policy = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Role = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::User = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancingV2::LoadBalancer = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ACM::Certificate = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBInstance = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSubnetGroup = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSecurityGroup = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSnapshot = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBCluster = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBClusterSnapshot = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::EventSubscription = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::Bucket = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::AccountPublicAccessBlock = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::Cluster = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSnapshot = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterParameterGroup = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSecurityGroup = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSubnetGroup = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::EventSubscription = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::ManagedInstanceInventory = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudWatch::Alarm = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFormation::Stack = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancing::LoadBalancer = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::AutoScalingGroup = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::LaunchConfiguration = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScalingPolicy = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScheduledAction = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::DynamoDB::Table = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodeBuild::Project = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RateBasedRule = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::Rule = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RuleGroup = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::WebACL = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RateBasedRule = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::Rule = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RuleGroup = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::WebACL = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::Distribution = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::StreamingDistribution = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Lambda::Function = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Application = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::ApplicationVersion = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Environment = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::WebACL = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RuleGroup = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::IPSet = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RegexPatternSet = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::ManagedRuleSet = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::XRay::EncryptionConfig = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::AssociationCompliance = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::PatchCompliance = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Shield::Protection = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ShieldRegional::Protection = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Config::ResourceCompliance = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::Stage = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::RestApi = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Stage = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Api = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodePipeline::Pipeline = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProvisionedProduct = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProduct = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::Portfolio = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SQS::Queue = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::KMS::Key = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::QLDB::Ledger = 89,
	}
	
	/// <summary>
	/// <p>Specifies the types of AWS resource for which AWS Config records configuration changes.</p> <p>In the recording group, you specify whether all supported types or specific types of resources are recorded.</p> <p>By default, AWS Config records configuration changes for all supported types of regional resources that AWS Config discovers in the region in which it is running. Regional resources are tied to a region and can be used only in that region. Examples of regional resources are EC2 instances and EBS volumes.</p> <p>You can also have AWS Config record configuration changes for supported types of global resources (for example, IAM resources). Global resources are not tied to an individual region and can be used in all regions.</p> <important> <p>The configuration details for any global resource are the same in all regions. If you customize AWS Config in multiple regions to record global resources, it will create multiple configuration items each time a global resource changes: one configuration item for each region. These configuration items will contain identical data. To prevent duplicate configuration items, you should consider customizing AWS Config in only one region to record global resources, unless you want the configuration items to be available in multiple regions.</p> </important> <p>If you don't want AWS Config to record all resources, you can specify which types of resources it will record with the <code>resourceTypes</code> parameter.</p> <p>For a list of supported resource types, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources">Supported Resource Types</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/select-resources.html">Selecting Which Resources AWS Config Records</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RecordingGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllSupported { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeGlobalResourceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceType[] ResourceTypes { get; set; }
	}
	
	/// <summary>
	/// An object that represents the recording of configuration changes of an AWS resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationRecorder
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// <p>Specifies the types of AWS resource for which AWS Config records configuration changes.</p> <p>In the recording group, you specify whether all supported types or specific types of resources are recorded.</p> <p>By default, AWS Config records configuration changes for all supported types of regional resources that AWS Config discovers in the region in which it is running. Regional resources are tied to a region and can be used only in that region. Examples of regional resources are EC2 instances and EBS volumes.</p> <p>You can also have AWS Config record configuration changes for supported types of global resources (for example, IAM resources). Global resources are not tied to an individual region and can be used in all regions.</p> <important> <p>The configuration details for any global resource are the same in all regions. If you customize AWS Config in multiple regions to record global resources, it will create multiple configuration items each time a global resource changes: one configuration item for each region. These configuration items will contain identical data. To prevent duplicate configuration items, you should consider customizing AWS Config in only one region to record global resources, unless you want the configuration items to be available in multiple regions.</p> </important> <p>If you don't want AWS Config to record all resources, you can specify which types of resources it will record with the <code>resourceTypes</code> parameter.</p> <p>For a list of supported resource types, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html#supported-resources">Supported Resource Types</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/select-resources.html">Selecting Which Resources AWS Config Records</a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecordingGroup RecordingGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RecorderStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failure = 2,
	}
	
	/// <summary>
	/// The current status of the configuration recorder.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationRecorderStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastStopTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Recording { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRecorderStatusLastStatus LastStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastStatusChangeTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigurationRecorderStatusLastStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failure = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConformancePackComplianceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
	}
	
	/// <summary>
	/// Filters the conformance pack by compliance types and AWS Config rule names.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConformancePackComplianceFilters
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public StringWithCharLimit64[] ConfigRuleNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackComplianceFiltersComplianceType ComplianceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConformancePackComplianceFiltersComplianceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
	}
	
	/// <summary>
	/// Summary includes the name and status of the conformance pack.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConformancePackComplianceSummary
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z][-a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConformancePackName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackComplianceSummaryConformancePackComplianceStatus ConformancePackComplianceStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConformancePackComplianceSummaryConformancePackComplianceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
	}
	
	/// <summary>
	/// Returns details of a conformance pack. A conformance pack is a collection of AWS Config rules and remediation actions that can be easily deployed in an account and a region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConformancePackDetail
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z][-a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConformancePackName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ConformancePackArn { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string ConformancePackId { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string DeliveryS3Bucket { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string DeliveryS3KeyPrefix { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public ConformancePackInputParameter[] ConformancePackInputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateRequestedTime { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string CreatedBy { get; set; }
	}
	
	/// <summary>
	/// Filters a conformance pack by AWS Config rule names, compliance types, AWS resource types, and resource IDs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConformancePackEvaluationFilters
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public StringWithCharLimit64[] ConfigRuleNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackEvaluationFiltersComplianceType ComplianceType { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public StringWithCharLimit256[] ResourceIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConformancePackEvaluationFiltersComplianceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
	}
	
	/// <summary>
	/// The details of a conformance pack evaluation. Provides AWS Config rule and AWS resource type that was evaluated, the compliance of the conformance pack, related time stamps, and supplementary information. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConformancePackEvaluationResult
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackEvaluationResultComplianceType ComplianceType { get; set; }
		
		/// <summary>
		/// Uniquely identifies an evaluation result.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EvaluationResultIdentifier EvaluationResultIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ConfigRuleInvokedTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ResultRecordedTime { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Annotation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConformancePackEvaluationResultComplianceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
	}
	
	/// <summary>
	/// Input parameters in the form of key-value pairs for the conformance pack, both of which you define. Keys can have a maximum character length of 128 characters, and values can have a maximum length of 256 characters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConformancePackInputParameter
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string ParameterName { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096, MinimumLength=0)]
		public string ParameterValue { get; set; }
	}
	
	/// <summary>
	/// Compliance information of one or more AWS Config rules within a conformance pack. You can filter using AWS Config rule names and compliance types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConformancePackRuleCompliance
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackRuleComplianceComplianceType ComplianceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConformancePackRuleComplianceComplianceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConformancePackState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_COMPLETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
	}
	
	/// <summary>
	/// Status details of a conformance pack.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConformancePackStatusDetail
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z][-a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConformancePackName { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string ConformancePackId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ConformancePackArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConformancePackStatusDetailConformancePackState ConformancePackState { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string StackArn { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000, MinimumLength=0)]
		public string ConformancePackStatusReason { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateRequestedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateCompletedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConformancePackStatusDetailConformancePackState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_COMPLETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
	}
	
	/// <summary>
	/// The channel through which AWS Config delivers notifications and updated configuration states.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeliveryChannel
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicARN { get; set; }
		
		/// <summary>
		/// <p>Provides options for how often AWS Config delivers configuration snapshots to the Amazon S3 bucket in your delivery channel.</p> <p>The frequency for a rule that triggers evaluations for your resources when AWS Config delivers the configuration snapshot is set by one of two values, depending on which is less frequent:</p> <ul> <li> <p>The value for the <code>deliveryFrequency</code> parameter within the delivery channel configuration, which sets how often AWS Config delivers configuration snapshots. This value also sets how often AWS Config invokes evaluations for AWS Config rules.</p> </li> <li> <p>The value for the <code>MaximumExecutionFrequency</code> parameter, which sets the maximum frequency with which AWS Config invokes evaluations for the rule. For more information, see <a>ConfigRule</a>.</p> </li> </ul> <p>If the <code>deliveryFrequency</code> value is less frequent than the <code>MaximumExecutionFrequency</code> value for a rule, AWS Config invokes the rule only as often as the <code>deliveryFrequency</code> value.</p> <ol> <li> <p>For example, you want your rule to run evaluations when AWS Config delivers the configuration snapshot.</p> </li> <li> <p>You specify the <code>MaximumExecutionFrequency</code> value for <code>Six_Hours</code>. </p> </li> <li> <p>You then specify the delivery channel <code>deliveryFrequency</code> value for <code>TwentyFour_Hours</code>.</p> </li> <li> <p>Because the value for <code>deliveryFrequency</code> is less frequent than <code>MaximumExecutionFrequency</code>, AWS Config invokes evaluations for the rule every 24 hours. </p> </li> </ol> <p>You should set the <code>MaximumExecutionFrequency</code> value to be at least as frequent as the <code>deliveryFrequency</code> value. You can view the <code>deliveryFrequency</code> value by using the <code>DescribeDeliveryChannnels</code> action.</p> <p>To update the <code>deliveryFrequency</code> with which AWS Config delivers your configuration snapshots, use the <code>PutDeliveryChannel</code> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigSnapshotDeliveryProperties ConfigSnapshotDeliveryProperties { get; set; }
	}
	
	/// <summary>
	/// <p>The status of a specified delivery channel.</p> <p>Valid values: <code>Success</code> | <code>Failure</code> </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeliveryChannelStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Provides status of the delivery of the snapshot or the configuration history to the specified Amazon S3 bucket. Also provides the status of notifications about the Amazon S3 delivery to the specified Amazon SNS topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigExportDeliveryInfo ConfigSnapshotDeliveryInfo { get; set; }
		
		/// <summary>
		/// Provides status of the delivery of the snapshot or the configuration history to the specified Amazon S3 bucket. Also provides the status of notifications about the Amazon S3 delivery to the specified Amazon SNS topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigExportDeliveryInfo ConfigHistoryDeliveryInfo { get; set; }
		
		/// <summary>
		/// A list that contains the status of the delivery of the configuration stream notification to the Amazon SNS topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigStreamDeliveryInfo ConfigStreamDeliveryInfo { get; set; }
	}
	
	/// <summary>
	/// Identifies an AWS resource and indicates whether it complies with the AWS Config rule that it was evaluated against.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Evaluation
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ComplianceResourceType { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ComplianceResourceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EvaluationComplianceType ComplianceType { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Annotation { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset OrderingTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EvaluationComplianceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_APPLICABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_DATA = 3,
	}
	
	/// <summary>
	/// The details of an AWS Config evaluation. Provides the AWS resource that was evaluated, the compliance of the resource, related time stamps, and supplementary information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EvaluationResult
	{
		
		/// <summary>
		/// Uniquely identifies an evaluation result.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EvaluationResultIdentifier EvaluationResultIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationResultComplianceType ComplianceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ResultRecordedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ConfigRuleInvokedTime { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Annotation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResultToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EvaluationResultComplianceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_APPLICABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_DATA = 3,
	}
	
	/// <summary>
	/// Identifies an AWS Config rule that evaluated an AWS resource, and provides the type and ID of the resource that the rule evaluated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EvaluationResultQualifier
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aws.config = 0,
	}
	
	/// <summary>
	/// AWS Systems Manager (SSM) specific remediation controls.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SsmControls
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> ConcurrentExecutionRatePercentage { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> ErrorPercentage { get; set; }
	}
	
	/// <summary>
	/// The controls that AWS Config uses for executing remediations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExecutionControls
	{
		
		/// <summary>
		/// AWS Systems Manager (SSM) specific remediation controls.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SsmControls SsmControls { get; set; }
	}
	
	/// <summary>
	/// List of each of the failed delete remediation exceptions with specific reasons.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FailedDeleteRemediationExceptionsBatch
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureMessage { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public RemediationExceptionResourceKey[] FailedItems { get; set; }
	}
	
	/// <summary>
	/// List of each of the failed remediations with specific reasons.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FailedRemediationBatch
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureMessage { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public RemediationConfiguration[] FailedItems { get; set; }
	}
	
	/// <summary>
	/// List of each of the failed remediation exceptions with specific reasons.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FailedRemediationExceptionBatch
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureMessage { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public RemediationException[] FailedItems { get; set; }
	}
	
	/// <summary>
	/// Details about the fields such as name of the field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FieldInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Filters the resource count based on account ID, region, and resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceCountFilters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceCountFiltersResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Region { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceCountFiltersResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::CustomerGateway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Host = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Instance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::InternetGateway = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkAcl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkInterface = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RouteTable = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::SecurityGroup = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Subnet = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudTrail::Trail = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Volume = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNConnection = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNGateway = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RegisteredHAInstance = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NatGateway = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EgressOnlyInternetGateway = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpoint = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpointService = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::FlowLog = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCPeeringConnection = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Elasticsearch::Domain = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Group = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Policy = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Role = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::User = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancingV2::LoadBalancer = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ACM::Certificate = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBInstance = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSubnetGroup = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSecurityGroup = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSnapshot = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBCluster = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBClusterSnapshot = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::EventSubscription = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::Bucket = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::AccountPublicAccessBlock = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::Cluster = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSnapshot = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterParameterGroup = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSecurityGroup = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSubnetGroup = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::EventSubscription = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::ManagedInstanceInventory = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudWatch::Alarm = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFormation::Stack = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancing::LoadBalancer = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::AutoScalingGroup = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::LaunchConfiguration = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScalingPolicy = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScheduledAction = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::DynamoDB::Table = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodeBuild::Project = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RateBasedRule = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::Rule = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RuleGroup = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::WebACL = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RateBasedRule = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::Rule = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RuleGroup = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::WebACL = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::Distribution = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::StreamingDistribution = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Lambda::Function = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Application = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::ApplicationVersion = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Environment = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::WebACL = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RuleGroup = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::IPSet = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RegexPatternSet = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::ManagedRuleSet = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::XRay::EncryptionConfig = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::AssociationCompliance = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::PatchCompliance = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Shield::Protection = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ShieldRegional::Protection = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Config::ResourceCompliance = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::Stage = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::RestApi = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Stage = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Api = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodePipeline::Pipeline = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProvisionedProduct = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProduct = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::Portfolio = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SQS::Queue = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::KMS::Key = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::QLDB::Ledger = 89,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceCountGroupKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_ID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_REGION = 2,
	}
	
	/// <summary>
	/// Status filter object to filter results based on specific member account ID or status type for an organization config rule. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StatusDetailFilters
	{
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StatusDetailFiltersMemberAccountRuleStatus MemberAccountRuleStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StatusDetailFiltersMemberAccountRuleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_SUCCESSFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 8,
	}
	
	/// <summary>
	/// Status filter object to filter results based on specific member account ID or status type for an organization conformance pack.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrganizationResourceDetailedStatusFilters
	{
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationResourceDetailedStatusFiltersStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrganizationResourceDetailedStatusFiltersStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_SUCCESSFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 8,
	}
	
	/// <summary>
	/// The count of resources that are grouped by the group name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GroupedResourceCount
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string GroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ResourceCount { get; set; }
	}
	
	/// <summary>
	/// Filters the results by resource account ID, region, resource ID, and resource name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceFilters
	{
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Region { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MemberAccountRuleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_SUCCESSFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 8,
	}
	
	/// <summary>
	/// Organization config rule creation or deletion status in each member account. This includes the name of the rule, the status, error code and error message when the rule creation or deletion failed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MemberAccountStatus
	{
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MemberAccountStatusMemberAccountRuleStatus MemberAccountRuleStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MemberAccountStatusMemberAccountRuleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_SUCCESSFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MessageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfigurationItemChangeNotification = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfigurationSnapshotDeliveryCompleted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduledNotification = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OversizedConfigurationItemChangeNotification = 3,
	}
	
	/// <summary>
	/// An object that specifies organization managed rule metadata such as resource type and ID of AWS resource along with the rule identifier. It also provides the frequency with which you want AWS Config to run evaluations for the rule if the trigger type is periodic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrganizationManagedRuleMetadata
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string RuleIdentifier { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string InputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationManagedRuleMetadataMaximumExecutionFrequency MaximumExecutionFrequency { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public StringWithCharLimit256[] ResourceTypesScope { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ResourceIdScope { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string TagKeyScope { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string TagValueScope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrganizationManagedRuleMetadataMaximumExecutionFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		One_Hour = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Three_Hours = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Six_Hours = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Twelve_Hours = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TwentyFour_Hours = 4,
	}
	
	/// <summary>
	/// An object that specifies organization custom rule metadata such as resource type, resource ID of AWS resource, Lamdba function ARN, and organization trigger types that trigger AWS Config to evaluate your AWS resources against a rule. It also provides the frequency with which you want AWS Config to run evaluations for the rule if the trigger type is periodic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrganizationCustomRuleMetadata
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string LambdaFunctionArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConfigRuleTriggerType[] OrganizationConfigRuleTriggerTypes { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string InputParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationCustomRuleMetadataMaximumExecutionFrequency MaximumExecutionFrequency { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public StringWithCharLimit256[] ResourceTypesScope { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ResourceIdScope { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string TagKeyScope { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string TagValueScope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrganizationCustomRuleMetadataMaximumExecutionFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		One_Hour = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Three_Hours = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Six_Hours = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Twelve_Hours = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TwentyFour_Hours = 4,
	}
	
	/// <summary>
	/// An organization config rule that has information about config rules that AWS Config creates in member accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrganizationConfigRule
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string OrganizationConfigRuleName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string OrganizationConfigRuleArn { get; set; }
		
		/// <summary>
		/// An object that specifies organization managed rule metadata such as resource type and ID of AWS resource along with the rule identifier. It also provides the frequency with which you want AWS Config to run evaluations for the rule if the trigger type is periodic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OrganizationManagedRuleMetadata OrganizationManagedRuleMetadata { get; set; }
		
		/// <summary>
		/// An object that specifies organization custom rule metadata such as resource type, resource ID of AWS resource, Lamdba function ARN, and organization trigger types that trigger AWS Config to evaluate your AWS resources against a rule. It also provides the frequency with which you want AWS Config to run evaluations for the rule if the trigger type is periodic.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OrganizationCustomRuleMetadata OrganizationCustomRuleMetadata { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public AccountId[] ExcludedAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrganizationRuleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_SUCCESSFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 8,
	}
	
	/// <summary>
	/// Returns the status for an organization config rule in an organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrganizationConfigRuleStatus
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string OrganizationConfigRuleName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConfigRuleStatusOrganizationRuleStatus OrganizationRuleStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrganizationConfigRuleStatusOrganizationRuleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_SUCCESSFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrganizationConfigRuleTriggerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfigurationItemChangeNotification = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OversizedConfigurationItemChangeNotification = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduledNotification = 2,
	}
	
	/// <summary>
	/// An organization conformance pack that has information about conformance packs that AWS Config creates in member accounts. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrganizationConformancePack
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z][-a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string OrganizationConformancePackName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string OrganizationConformancePackArn { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string DeliveryS3Bucket { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string DeliveryS3KeyPrefix { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public ConformancePackInputParameter[] ConformancePackInputParameters { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public AccountId[] ExcludedAccounts { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrganizationResourceDetailedStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_SUCCESSFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 8,
	}
	
	/// <summary>
	/// Organization conformance pack creation or deletion status in each member account. This includes the name of the conformance pack, the status, error code and error message when the conformance pack creation or deletion failed. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrganizationConformancePackDetailedStatus
	{
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ConformancePackName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConformancePackDetailedStatusStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrganizationConformancePackDetailedStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_SUCCESSFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrganizationResourceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_SUCCESSFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 8,
	}
	
	/// <summary>
	/// Returns the status for an organization conformance pack in an organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrganizationConformancePackStatus
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-zA-Z][-a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string OrganizationConformancePackName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OrganizationConformancePackStatusStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrganizationConformancePackStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_SUCCESSFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_SUCCESSFUL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Owner
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_LAMBDA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 1,
	}
	
	/// <summary>
	/// An object that represents the account ID and region of an aggregator account that is requesting authorization but is not yet authorized.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PendingAggregationRequest
	{
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RequesterAccountId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string RequesterAwsRegion { get; set; }
	}
	
	/// <summary>
	/// An object with the name of the retention configuration and the retention period in days. The object stores the configuration for data retention in AWS Config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RetentionConfiguration
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum: 30
		/// Maximum: 2557
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(30, 2557)]
		public int RetentionPeriodInDays { get; set; }
	}
	
	/// <summary>
	/// Details about the query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class QueryInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FieldInfo[] SelectFields { get; set; }
	}
	
	/// <summary>
	/// The relationship of the related resource to the main resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Relationship
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RelationshipResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RelationshipName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RelationshipResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::CustomerGateway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Host = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Instance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::InternetGateway = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkAcl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkInterface = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RouteTable = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::SecurityGroup = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Subnet = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudTrail::Trail = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Volume = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNConnection = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNGateway = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RegisteredHAInstance = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NatGateway = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EgressOnlyInternetGateway = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpoint = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpointService = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::FlowLog = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCPeeringConnection = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Elasticsearch::Domain = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Group = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Policy = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Role = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::User = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancingV2::LoadBalancer = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ACM::Certificate = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBInstance = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSubnetGroup = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSecurityGroup = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSnapshot = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBCluster = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBClusterSnapshot = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::EventSubscription = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::Bucket = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::AccountPublicAccessBlock = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::Cluster = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSnapshot = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterParameterGroup = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSecurityGroup = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSubnetGroup = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::EventSubscription = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::ManagedInstanceInventory = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudWatch::Alarm = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFormation::Stack = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancing::LoadBalancer = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::AutoScalingGroup = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::LaunchConfiguration = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScalingPolicy = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScheduledAction = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::DynamoDB::Table = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodeBuild::Project = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RateBasedRule = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::Rule = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RuleGroup = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::WebACL = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RateBasedRule = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::Rule = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RuleGroup = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::WebACL = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::Distribution = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::StreamingDistribution = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Lambda::Function = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Application = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::ApplicationVersion = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Environment = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::WebACL = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RuleGroup = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::IPSet = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RegexPatternSet = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::ManagedRuleSet = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::XRay::EncryptionConfig = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::AssociationCompliance = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::PatchCompliance = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Shield::Protection = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ShieldRegional::Protection = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Config::ResourceCompliance = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::Stage = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::RestApi = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Stage = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Api = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodePipeline::Pipeline = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProvisionedProduct = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProduct = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::Portfolio = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SQS::Queue = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::KMS::Key = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::QLDB::Ledger = 89,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RemediationTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSM_DOCUMENT = 0,
	}
	
	/// <summary>
	/// An object that represents the details about the remediation configuration that includes the remediation action, parameters, and data to execute the action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemediationConfiguration
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RemediationConfigurationTargetType TargetType { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string TargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationParameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Automatic { get; set; }
		
		/// <summary>
		/// The controls that AWS Config uses for executing remediations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExecutionControls ExecutionControls { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 25)]
		public System.Nullable<System.Int32> MaximumAutomaticAttempts { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2678000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2678000)]
		public System.Nullable<System.Int32> RetryAttemptSeconds { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string CreatedByService { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RemediationConfigurationTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSM_DOCUMENT = 0,
	}
	
	/// <summary>
	/// An object that represents the details about the remediation exception. The details include the rule name, an explanation of an exception, the time when the exception will be deleted, the resource ID, and resource type. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemediationException
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ConfigRuleName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationTime { get; set; }
	}
	
	/// <summary>
	/// The details that identify a resource within AWS Config, including the resource type and resource ID. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemediationExceptionResourceKey
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RemediationExecutionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// The details that identify a resource within AWS Config, including the resource type and resource ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceKey
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceKeyResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceKeyResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::CustomerGateway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Host = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Instance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::InternetGateway = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkAcl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkInterface = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RouteTable = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::SecurityGroup = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Subnet = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudTrail::Trail = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Volume = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNConnection = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNGateway = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RegisteredHAInstance = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NatGateway = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EgressOnlyInternetGateway = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpoint = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpointService = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::FlowLog = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCPeeringConnection = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Elasticsearch::Domain = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Group = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Policy = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Role = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::User = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancingV2::LoadBalancer = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ACM::Certificate = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBInstance = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSubnetGroup = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSecurityGroup = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSnapshot = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBCluster = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBClusterSnapshot = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::EventSubscription = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::Bucket = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::AccountPublicAccessBlock = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::Cluster = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSnapshot = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterParameterGroup = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSecurityGroup = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSubnetGroup = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::EventSubscription = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::ManagedInstanceInventory = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudWatch::Alarm = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFormation::Stack = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancing::LoadBalancer = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::AutoScalingGroup = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::LaunchConfiguration = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScalingPolicy = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScheduledAction = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::DynamoDB::Table = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodeBuild::Project = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RateBasedRule = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::Rule = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RuleGroup = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::WebACL = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RateBasedRule = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::Rule = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RuleGroup = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::WebACL = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::Distribution = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::StreamingDistribution = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Lambda::Function = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Application = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::ApplicationVersion = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Environment = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::WebACL = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RuleGroup = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::IPSet = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RegexPatternSet = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::ManagedRuleSet = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::XRay::EncryptionConfig = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::AssociationCompliance = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::PatchCompliance = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Shield::Protection = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ShieldRegional::Protection = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Config::ResourceCompliance = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::Stage = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::RestApi = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Stage = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Api = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodePipeline::Pipeline = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProvisionedProduct = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProduct = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::Portfolio = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SQS::Queue = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::KMS::Key = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::QLDB::Ledger = 89,
	}
	
	/// <summary>
	/// Provides details of the current status of the invoked remediation action for that resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemediationExecutionStatus
	{
		
		/// <summary>
		/// The details that identify a resource within AWS Config, including the resource type and resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceKey ResourceKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationExecutionStatusState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationExecutionStep[] StepDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> InvocationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RemediationExecutionStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RemediationExecutionStepState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	/// <summary>
	/// Name of the step from the SSM document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemediationExecutionStep
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemediationExecutionStepState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StopTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RemediationExecutionStepState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	/// <summary>
	/// The dynamic value of the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceValue
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceValueValue Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceValueValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_ID = 0,
	}
	
	/// <summary>
	/// The static value of the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StaticValue
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public StringWithCharLimit256[] Values { get; set; }
	}
	
	/// <summary>
	/// The value is either a dynamic (resource) value or a static value. You must select either a dynamic value or a static value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemediationParameterValue
	{
		
		/// <summary>
		/// The dynamic value of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceValue ResourceValue { get; set; }
		
		/// <summary>
		/// The static value of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StaticValue StaticValue { get; set; }
	}
	
	/// <summary>
	/// An object that contains the resource type and the number of resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceCountResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceCountResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::CustomerGateway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Host = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Instance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::InternetGateway = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkAcl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkInterface = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RouteTable = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::SecurityGroup = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Subnet = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudTrail::Trail = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Volume = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNConnection = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNGateway = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RegisteredHAInstance = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NatGateway = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EgressOnlyInternetGateway = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpoint = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpointService = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::FlowLog = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCPeeringConnection = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Elasticsearch::Domain = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Group = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Policy = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Role = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::User = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancingV2::LoadBalancer = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ACM::Certificate = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBInstance = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSubnetGroup = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSecurityGroup = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSnapshot = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBCluster = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBClusterSnapshot = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::EventSubscription = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::Bucket = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::AccountPublicAccessBlock = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::Cluster = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSnapshot = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterParameterGroup = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSecurityGroup = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSubnetGroup = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::EventSubscription = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::ManagedInstanceInventory = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudWatch::Alarm = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFormation::Stack = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancing::LoadBalancer = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::AutoScalingGroup = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::LaunchConfiguration = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScalingPolicy = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScheduledAction = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::DynamoDB::Table = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodeBuild::Project = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RateBasedRule = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::Rule = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RuleGroup = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::WebACL = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RateBasedRule = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::Rule = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RuleGroup = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::WebACL = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::Distribution = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::StreamingDistribution = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Lambda::Function = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Application = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::ApplicationVersion = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Environment = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::WebACL = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RuleGroup = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::IPSet = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RegexPatternSet = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::ManagedRuleSet = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::XRay::EncryptionConfig = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::AssociationCompliance = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::PatchCompliance = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Shield::Protection = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ShieldRegional::Protection = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Config::ResourceCompliance = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::Stage = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::RestApi = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Stage = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Api = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodePipeline::Pipeline = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProvisionedProduct = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProduct = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::Portfolio = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SQS::Queue = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::KMS::Key = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::QLDB::Ledger = 89,
	}
	
	/// <summary>
	/// The details that identify a resource that is discovered by AWS Config, including the resource type, ID, and (if available) the custom resource name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceIdentifier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceIdentifierResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 768
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(768, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ResourceDeletionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceIdentifierResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::CustomerGateway = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Host = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Instance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::InternetGateway = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkAcl = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NetworkInterface = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RouteTable = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::SecurityGroup = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Subnet = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudTrail::Trail = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::Volume = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPC = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNConnection = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPNGateway = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::RegisteredHAInstance = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::NatGateway = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::EgressOnlyInternetGateway = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpoint = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCEndpointService = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::FlowLog = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::EC2::VPCPeeringConnection = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Elasticsearch::Domain = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Group = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Policy = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::Role = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::IAM::User = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancingV2::LoadBalancer = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ACM::Certificate = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBInstance = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSubnetGroup = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSecurityGroup = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBSnapshot = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBCluster = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::DBClusterSnapshot = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::RDS::EventSubscription = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::Bucket = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::S3::AccountPublicAccessBlock = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::Cluster = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSnapshot = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterParameterGroup = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSecurityGroup = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::ClusterSubnetGroup = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Redshift::EventSubscription = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::ManagedInstanceInventory = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudWatch::Alarm = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFormation::Stack = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticLoadBalancing::LoadBalancer = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::AutoScalingGroup = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::LaunchConfiguration = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScalingPolicy = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::AutoScaling::ScheduledAction = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::DynamoDB::Table = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodeBuild::Project = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RateBasedRule = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::Rule = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::RuleGroup = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAF::WebACL = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RateBasedRule = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::Rule = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::RuleGroup = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFRegional::WebACL = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::Distribution = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CloudFront::StreamingDistribution = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Lambda::Function = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Application = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::ApplicationVersion = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ElasticBeanstalk::Environment = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::WebACL = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RuleGroup = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::IPSet = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::RegexPatternSet = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::WAFv2::ManagedRuleSet = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::XRay::EncryptionConfig = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::AssociationCompliance = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SSM::PatchCompliance = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Shield::Protection = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ShieldRegional::Protection = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::Config::ResourceCompliance = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::Stage = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGateway::RestApi = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Stage = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ApiGatewayV2::Api = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::CodePipeline::Pipeline = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProvisionedProduct = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::CloudFormationProduct = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::ServiceCatalog::Portfolio = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::SQS::Queue = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::KMS::Key = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS::QLDB::Ledger = 89,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_ID = 0,
	}
	
	/// <summary>
	/// Provides the source and the message types that trigger AWS Config to evaluate your AWS resources against a rule. It also provides the frequency with which you want AWS Config to run evaluations for the rule if the trigger type is periodic. You can specify the parameter values for <code>SourceDetail</code> only for custom rules. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SourceDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SourceDetailEventSource EventSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceDetailMessageType MessageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceDetailMaximumExecutionFrequency MaximumExecutionFrequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SourceDetailEventSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aws.config = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SourceDetailMessageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfigurationItemChangeNotification = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfigurationSnapshotDeliveryCompleted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduledNotification = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OversizedConfigurationItemChangeNotification = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SourceDetailMaximumExecutionFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		One_Hour = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Three_Hours = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Six_Hours = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Twelve_Hours = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TwentyFour_Hours = 4,
	}
	
	/// <summary>
	/// The tags for the resource. The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Value { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Returns the current configuration items for resources that are present in your AWS Config aggregator. The operation also returns a list of resources that are not processed in the current request. If there are no unprocessed resources, the operation returns an empty <code>unprocessedResourceIdentifiers</code> list. </p> <note> <ul> <li> <p>The API does not return results for deleted resources.</p> </li> <li> <p> The API does not return tags and relationships.</p> </li> </ul> </note>
		/// BatchGetAggregateResourceConfig /#X-Amz-Target=StarlingDoveService.BatchGetAggregateResourceConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetAggregateResourceConfigResponse> BatchGetAggregateResourceConfigAsync(BatchGetAggregateResourceConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.BatchGetAggregateResourceConfig";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchGetAggregateResourceConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the current configuration for one or more requested resources. The operation also returns a list of resources that are not processed in the current request. If there are no unprocessed resources, the operation returns an empty unprocessedResourceKeys list. </p> <note> <ul> <li> <p>The API does not return results for deleted resources.</p> </li> <li> <p> The API does not return any tags for the requested resources. This information is filtered out of the supplementaryConfiguration section of the API response.</p> </li> </ul> </note>
		/// BatchGetResourceConfig /#X-Amz-Target=StarlingDoveService.BatchGetResourceConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetResourceConfigResponse> BatchGetResourceConfigAsync(BatchGetResourceConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.BatchGetResourceConfig";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchGetResourceConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the authorization granted to the specified configuration aggregator account in a specified region.
		/// DeleteAggregationAuthorization /#X-Amz-Target=StarlingDoveService.DeleteAggregationAuthorization
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteAggregationAuthorizationAsync(DeleteAggregationAuthorizationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DeleteAggregationAuthorization";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified AWS Config rule and all of its evaluation results.</p> <p>AWS Config sets the state of a rule to <code>DELETING</code> until the deletion is complete. You cannot update a rule while it is in this state. If you make a <code>PutConfigRule</code> or <code>DeleteConfigRule</code> request for the rule, you will receive a <code>ResourceInUseException</code>.</p> <p>You can check the state of a rule by using the <code>DescribeConfigRules</code> request.</p>
		/// DeleteConfigRule /#X-Amz-Target=StarlingDoveService.DeleteConfigRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteConfigRuleAsync(DeleteConfigRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DeleteConfigRule";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified configuration aggregator and the aggregated data associated with the aggregator.
		/// DeleteConfigurationAggregator /#X-Amz-Target=StarlingDoveService.DeleteConfigurationAggregator
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteConfigurationAggregatorAsync(DeleteConfigurationAggregatorRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DeleteConfigurationAggregator";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the configuration recorder.</p> <p>After the configuration recorder is deleted, AWS Config will not record resource configuration changes until you create a new configuration recorder.</p> <p>This action does not delete the configuration information that was previously recorded. You will be able to access the previously recorded information by using the <code>GetResourceConfigHistory</code> action, but you will not be able to access this information in the AWS Config console until you create a new configuration recorder.</p>
		/// DeleteConfigurationRecorder /#X-Amz-Target=StarlingDoveService.DeleteConfigurationRecorder
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteConfigurationRecorderAsync(DeleteConfigurationRecorderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DeleteConfigurationRecorder";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified conformance pack and all the AWS Config rules, remediation actions, and all evaluation results within that conformance pack.</p> <p>AWS Config sets the conformance pack to <code>DELETE_IN_PROGRESS</code> until the deletion is complete. You cannot update a conformance pack while it is in this state.</p>
		/// DeleteConformancePack /#X-Amz-Target=StarlingDoveService.DeleteConformancePack
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteConformancePackAsync(DeleteConformancePackRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DeleteConformancePack";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the delivery channel.</p> <p>Before you can delete the delivery channel, you must stop the configuration recorder by using the <a>StopConfigurationRecorder</a> action.</p>
		/// DeleteDeliveryChannel /#X-Amz-Target=StarlingDoveService.DeleteDeliveryChannel
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteDeliveryChannelAsync(DeleteDeliveryChannelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DeleteDeliveryChannel";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the evaluation results for the specified AWS Config rule. You can specify one AWS Config rule per request. After you delete the evaluation results, you can call the <a>StartConfigRulesEvaluation</a> API to start evaluating your AWS resources against the rule.
		/// DeleteEvaluationResults /#X-Amz-Target=StarlingDoveService.DeleteEvaluationResults
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteEvaluationResultsResponse> DeleteEvaluationResultsAsync(DeleteEvaluationResultsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DeleteEvaluationResults";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteEvaluationResultsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified organization config rule and all of its evaluation results from all member accounts in that organization. Only a master account can delete an organization config rule.</p> <p>AWS Config sets the state of a rule to DELETE_IN_PROGRESS until the deletion is complete. You cannot update a rule while it is in this state.</p>
		/// DeleteOrganizationConfigRule /#X-Amz-Target=StarlingDoveService.DeleteOrganizationConfigRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteOrganizationConfigRuleAsync(DeleteOrganizationConfigRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DeleteOrganizationConfigRule";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified organization conformance pack and all of the config rules and remediation actions from all member accounts in that organization. Only a master account can delete an organization conformance pack.</p> <p>AWS Config sets the state of a conformance pack to DELETE_IN_PROGRESS until the deletion is complete. You cannot update a conformance pack while it is in this state. </p>
		/// DeleteOrganizationConformancePack /#X-Amz-Target=StarlingDoveService.DeleteOrganizationConformancePack
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteOrganizationConformancePackAsync(DeleteOrganizationConformancePackRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DeleteOrganizationConformancePack";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes pending authorization requests for a specified aggregator account in a specified region.
		/// DeletePendingAggregationRequest /#X-Amz-Target=StarlingDoveService.DeletePendingAggregationRequest
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeletePendingAggregationRequestAsync(DeletePendingAggregationRequestRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DeletePendingAggregationRequest";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the remediation configuration.
		/// DeleteRemediationConfiguration /#X-Amz-Target=StarlingDoveService.DeleteRemediationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRemediationConfigurationResponse> DeleteRemediationConfigurationAsync(DeleteRemediationConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DeleteRemediationConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteRemediationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes one or more remediation exceptions mentioned in the resource keys.
		/// DeleteRemediationExceptions /#X-Amz-Target=StarlingDoveService.DeleteRemediationExceptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRemediationExceptionsResponse> DeleteRemediationExceptionsAsync(DeleteRemediationExceptionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DeleteRemediationExceptions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteRemediationExceptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Records the configuration state for a custom resource that has been deleted. This API records a new ConfigurationItem with a ResourceDeleted status. You can retrieve the ConfigurationItems recorded for this resource in your AWS Config History.
		/// DeleteResourceConfig /#X-Amz-Target=StarlingDoveService.DeleteResourceConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteResourceConfigAsync(DeleteResourceConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DeleteResourceConfig";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the retention configuration.
		/// DeleteRetentionConfiguration /#X-Amz-Target=StarlingDoveService.DeleteRetentionConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteRetentionConfigurationAsync(DeleteRetentionConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DeleteRetentionConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Schedules delivery of a configuration snapshot to the Amazon S3 bucket in the specified delivery channel. After the delivery has started, AWS Config sends the following notifications using an Amazon SNS topic that you have specified.</p> <ul> <li> <p>Notification of the start of the delivery.</p> </li> <li> <p>Notification of the completion of the delivery, if the delivery was successfully completed.</p> </li> <li> <p>Notification of delivery failure, if the delivery failed.</p> </li> </ul>
		/// DeliverConfigSnapshot /#X-Amz-Target=StarlingDoveService.DeliverConfigSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeliverConfigSnapshotResponse> DeliverConfigSnapshotAsync(DeliverConfigSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DeliverConfigSnapshot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeliverConfigSnapshotResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of compliant and noncompliant rules with the number of resources for compliant and noncompliant rules. </p> <note> <p>The results can return an empty result page, but if you have a <code>nextToken</code>, the results are displayed on the next page.</p> </note>
		/// DescribeAggregateComplianceByConfigRules /#X-Amz-Target=StarlingDoveService.DescribeAggregateComplianceByConfigRules
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAggregateComplianceByConfigRulesResponse> DescribeAggregateComplianceByConfigRulesAsync(DescribeAggregateComplianceByConfigRulesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeAggregateComplianceByConfigRules";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAggregateComplianceByConfigRulesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of authorizations granted to various aggregator accounts and regions.
		/// DescribeAggregationAuthorizations /#X-Amz-Target=StarlingDoveService.DescribeAggregationAuthorizations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAggregationAuthorizationsResponse> DescribeAggregationAuthorizationsAsync(DescribeAggregationAuthorizationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeAggregationAuthorizations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAggregationAuthorizationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Indicates whether the specified AWS Config rules are compliant. If a rule is noncompliant, this action returns the number of AWS resources that do not comply with the rule.</p> <p>A rule is compliant if all of the evaluated resources comply with it. It is noncompliant if any of these resources do not comply.</p> <p>If AWS Config has no current evaluation results for the rule, it returns <code>INSUFFICIENT_DATA</code>. This result might indicate one of the following conditions:</p> <ul> <li> <p>AWS Config has never invoked an evaluation for the rule. To check whether it has, use the <code>DescribeConfigRuleEvaluationStatus</code> action to get the <code>LastSuccessfulInvocationTime</code> and <code>LastFailedInvocationTime</code>.</p> </li> <li> <p>The rule's AWS Lambda function is failing to send evaluation results to AWS Config. Verify that the role you assigned to your configuration recorder includes the <code>config:PutEvaluations</code> permission. If the rule is a custom rule, verify that the AWS Lambda execution role includes the <code>config:PutEvaluations</code> permission.</p> </li> <li> <p>The rule's AWS Lambda function has returned <code>NOT_APPLICABLE</code> for all evaluation results. This can occur if the resources were deleted or removed from the rule's scope.</p> </li> </ul>
		/// DescribeComplianceByConfigRule /#X-Amz-Target=StarlingDoveService.DescribeComplianceByConfigRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeComplianceByConfigRuleResponse> DescribeComplianceByConfigRuleAsync(DescribeComplianceByConfigRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeComplianceByConfigRule";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeComplianceByConfigRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Indicates whether the specified AWS resources are compliant. If a resource is noncompliant, this action returns the number of AWS Config rules that the resource does not comply with.</p> <p>A resource is compliant if it complies with all the AWS Config rules that evaluate it. It is noncompliant if it does not comply with one or more of these rules.</p> <p>If AWS Config has no current evaluation results for the resource, it returns <code>INSUFFICIENT_DATA</code>. This result might indicate one of the following conditions about the rules that evaluate the resource:</p> <ul> <li> <p>AWS Config has never invoked an evaluation for the rule. To check whether it has, use the <code>DescribeConfigRuleEvaluationStatus</code> action to get the <code>LastSuccessfulInvocationTime</code> and <code>LastFailedInvocationTime</code>.</p> </li> <li> <p>The rule's AWS Lambda function is failing to send evaluation results to AWS Config. Verify that the role that you assigned to your configuration recorder includes the <code>config:PutEvaluations</code> permission. If the rule is a custom rule, verify that the AWS Lambda execution role includes the <code>config:PutEvaluations</code> permission.</p> </li> <li> <p>The rule's AWS Lambda function has returned <code>NOT_APPLICABLE</code> for all evaluation results. This can occur if the resources were deleted or removed from the rule's scope.</p> </li> </ul>
		/// DescribeComplianceByResource /#X-Amz-Target=StarlingDoveService.DescribeComplianceByResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeComplianceByResourceResponse> DescribeComplianceByResourceAsync(DescribeComplianceByResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeComplianceByResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeComplianceByResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns status information for each of your AWS managed Config rules. The status includes information such as the last time AWS Config invoked the rule, the last time AWS Config failed to invoke the rule, and the related error for the last failure.
		/// DescribeConfigRuleEvaluationStatus /#X-Amz-Target=StarlingDoveService.DescribeConfigRuleEvaluationStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeConfigRuleEvaluationStatusResponse> DescribeConfigRuleEvaluationStatusAsync(DescribeConfigRuleEvaluationStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeConfigRuleEvaluationStatus";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeConfigRuleEvaluationStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns details about your AWS Config rules.
		/// DescribeConfigRules /#X-Amz-Target=StarlingDoveService.DescribeConfigRules
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeConfigRulesResponse> DescribeConfigRulesAsync(DescribeConfigRulesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeConfigRules";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeConfigRulesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns status information for sources within an aggregator. The status includes information about the last time AWS Config verified authorization between the source account and an aggregator account. In case of a failure, the status contains the related error code or message.
		/// DescribeConfigurationAggregatorSourcesStatus /#X-Amz-Target=StarlingDoveService.DescribeConfigurationAggregatorSourcesStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeConfigurationAggregatorSourcesStatusResponse> DescribeConfigurationAggregatorSourcesStatusAsync(DescribeConfigurationAggregatorSourcesStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeConfigurationAggregatorSourcesStatus";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeConfigurationAggregatorSourcesStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the details of one or more configuration aggregators. If the configuration aggregator is not specified, this action returns the details for all the configuration aggregators associated with the account.
		/// DescribeConfigurationAggregators /#X-Amz-Target=StarlingDoveService.DescribeConfigurationAggregators
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeConfigurationAggregatorsResponse> DescribeConfigurationAggregatorsAsync(DescribeConfigurationAggregatorsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeConfigurationAggregators";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeConfigurationAggregatorsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the current status of the specified configuration recorder. If a configuration recorder is not specified, this action returns the status of all configuration recorders associated with the account.</p> <note> <p>Currently, you can specify only one configuration recorder per region in your account.</p> </note>
		/// DescribeConfigurationRecorderStatus /#X-Amz-Target=StarlingDoveService.DescribeConfigurationRecorderStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeConfigurationRecorderStatusResponse> DescribeConfigurationRecorderStatusAsync(DescribeConfigurationRecorderStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeConfigurationRecorderStatus";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeConfigurationRecorderStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the details for the specified configuration recorders. If the configuration recorder is not specified, this action returns the details for all configuration recorders associated with the account.</p> <note> <p>Currently, you can specify only one configuration recorder per region in your account.</p> </note>
		/// DescribeConfigurationRecorders /#X-Amz-Target=StarlingDoveService.DescribeConfigurationRecorders
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeConfigurationRecordersResponse> DescribeConfigurationRecordersAsync(DescribeConfigurationRecordersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeConfigurationRecorders";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeConfigurationRecordersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns compliance details for each rule in that conformance pack.</p> <note> <p>You must provide exact rule names.</p> </note>
		/// DescribeConformancePackCompliance /#X-Amz-Target=StarlingDoveService.DescribeConformancePackCompliance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeConformancePackComplianceResponse> DescribeConformancePackComplianceAsync(DescribeConformancePackComplianceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeConformancePackCompliance";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeConformancePackComplianceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Provides one or more conformance packs deployment status.</p> <note> <p>If there are no conformance packs then you will see an empty result.</p> </note>
		/// DescribeConformancePackStatus /#X-Amz-Target=StarlingDoveService.DescribeConformancePackStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeConformancePackStatusResponse> DescribeConformancePackStatusAsync(DescribeConformancePackStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeConformancePackStatus";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeConformancePackStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of one or more conformance packs.
		/// DescribeConformancePacks /#X-Amz-Target=StarlingDoveService.DescribeConformancePacks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeConformancePacksResponse> DescribeConformancePacksAsync(DescribeConformancePacksRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeConformancePacks";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeConformancePacksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the current status of the specified delivery channel. If a delivery channel is not specified, this action returns the current status of all delivery channels associated with the account.</p> <note> <p>Currently, you can specify only one delivery channel per region in your account.</p> </note>
		/// DescribeDeliveryChannelStatus /#X-Amz-Target=StarlingDoveService.DescribeDeliveryChannelStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDeliveryChannelStatusResponse> DescribeDeliveryChannelStatusAsync(DescribeDeliveryChannelStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeDeliveryChannelStatus";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDeliveryChannelStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns details about the specified delivery channel. If a delivery channel is not specified, this action returns the details of all delivery channels associated with the account.</p> <note> <p>Currently, you can specify only one delivery channel per region in your account.</p> </note>
		/// DescribeDeliveryChannels /#X-Amz-Target=StarlingDoveService.DescribeDeliveryChannels
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDeliveryChannelsResponse> DescribeDeliveryChannelsAsync(DescribeDeliveryChannelsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeDeliveryChannels";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDeliveryChannelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Provides organization config rule deployment status for an organization.</p> <note> <p>The status is not considered successful until organization config rule is successfully deployed in all the member accounts with an exception of excluded accounts.</p> <p>When you specify the limit and the next token, you receive a paginated response. Limit and next token are not applicable if you specify organization config rule names. It is only applicable, when you request all the organization config rules.</p> <p>Only a master account can call this API.</p> </note>
		/// DescribeOrganizationConfigRuleStatuses /#X-Amz-Target=StarlingDoveService.DescribeOrganizationConfigRuleStatuses
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeOrganizationConfigRuleStatusesResponse> DescribeOrganizationConfigRuleStatusesAsync(DescribeOrganizationConfigRuleStatusesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeOrganizationConfigRuleStatuses";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeOrganizationConfigRuleStatusesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of organization config rules.</p> <note> <p>When you specify the limit and the next token, you receive a paginated response. Limit and next token are not applicable if you specify organization config rule names. It is only applicable, when you request all the organization config rules.</p> <p>Only a master account can call this API.</p> </note>
		/// DescribeOrganizationConfigRules /#X-Amz-Target=StarlingDoveService.DescribeOrganizationConfigRules
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeOrganizationConfigRulesResponse> DescribeOrganizationConfigRulesAsync(DescribeOrganizationConfigRulesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeOrganizationConfigRules";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeOrganizationConfigRulesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Provides organization conformance pack deployment status for an organization.</p> <note> <p>The status is not considered successful until organization conformance pack is successfully deployed in all the member accounts with an exception of excluded accounts.</p> <p>When you specify the limit and the next token, you receive a paginated response. Limit and next token are not applicable if you specify organization conformance pack names. They are only applicable, when you request all the organization conformance packs.</p> <p>Only a master account can call this API.</p> </note>
		/// DescribeOrganizationConformancePackStatuses /#X-Amz-Target=StarlingDoveService.DescribeOrganizationConformancePackStatuses
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeOrganizationConformancePackStatusesResponse> DescribeOrganizationConformancePackStatusesAsync(DescribeOrganizationConformancePackStatusesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeOrganizationConformancePackStatuses";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeOrganizationConformancePackStatusesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of organization conformance packs.</p> <note> <p>When you specify the limit and the next token, you receive a paginated response. </p> <p>Limit and next token are not applicable if you specify organization conformance packs names. They are only applicable, when you request all the organization conformance packs. </p> <p>Only a master account can call this API.</p> </note>
		/// DescribeOrganizationConformancePacks /#X-Amz-Target=StarlingDoveService.DescribeOrganizationConformancePacks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeOrganizationConformancePacksResponse> DescribeOrganizationConformancePacksAsync(DescribeOrganizationConformancePacksRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeOrganizationConformancePacks";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeOrganizationConformancePacksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all pending aggregation requests.
		/// DescribePendingAggregationRequests /#X-Amz-Target=StarlingDoveService.DescribePendingAggregationRequests
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribePendingAggregationRequestsResponse> DescribePendingAggregationRequestsAsync(DescribePendingAggregationRequestsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribePendingAggregationRequests";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribePendingAggregationRequestsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the details of one or more remediation configurations.
		/// DescribeRemediationConfigurations /#X-Amz-Target=StarlingDoveService.DescribeRemediationConfigurations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeRemediationConfigurationsResponse> DescribeRemediationConfigurationsAsync(DescribeRemediationConfigurationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeRemediationConfigurations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeRemediationConfigurationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the details of one or more remediation exceptions. A detailed view of a remediation exception for a set of resources that includes an explanation of an exception and the time when the exception will be deleted. When you specify the limit and the next token, you receive a paginated response. </p> <note> <p>When you specify the limit and the next token, you receive a paginated response. </p> <p>Limit and next token are not applicable if you request resources in batch. It is only applicable, when you request all resources.</p> </note>
		/// DescribeRemediationExceptions /#X-Amz-Target=StarlingDoveService.DescribeRemediationExceptions
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeRemediationExceptionsResponse> DescribeRemediationExceptionsAsync(string Limit, string NextToken, DescribeRemediationExceptionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeRemediationExceptions?Limit=" + (Limit==null? "" : Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeRemediationExceptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides a detailed view of a Remediation Execution for a set of resources including state, timestamps for when steps for the remediation execution occur, and any error messages for steps that have failed. When you specify the limit and the next token, you receive a paginated response.
		/// DescribeRemediationExecutionStatus /#X-Amz-Target=StarlingDoveService.DescribeRemediationExecutionStatus
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeRemediationExecutionStatusResponse> DescribeRemediationExecutionStatusAsync(string Limit, string NextToken, DescribeRemediationExecutionStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeRemediationExecutionStatus?Limit=" + (Limit==null? "" : Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeRemediationExecutionStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the details of one or more retention configurations. If the retention configuration name is not specified, this action returns the details for all the retention configurations for that account.</p> <note> <p>Currently, AWS Config supports only one retention configuration per region in your account.</p> </note>
		/// DescribeRetentionConfigurations /#X-Amz-Target=StarlingDoveService.DescribeRetentionConfigurations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeRetentionConfigurationsResponse> DescribeRetentionConfigurationsAsync(DescribeRetentionConfigurationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.DescribeRetentionConfigurations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeRetentionConfigurationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the evaluation results for the specified AWS Config rule for a specific resource in a rule. The results indicate which AWS resources were evaluated by the rule, when each resource was last evaluated, and whether each resource complies with the rule. </p> <note> <p>The results can return an empty result page. But if you have a <code>nextToken</code>, the results are displayed on the next page.</p> </note>
		/// GetAggregateComplianceDetailsByConfigRule /#X-Amz-Target=StarlingDoveService.GetAggregateComplianceDetailsByConfigRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAggregateComplianceDetailsByConfigRuleResponse> GetAggregateComplianceDetailsByConfigRuleAsync(GetAggregateComplianceDetailsByConfigRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.GetAggregateComplianceDetailsByConfigRule";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAggregateComplianceDetailsByConfigRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the number of compliant and noncompliant rules for one or more accounts and regions in an aggregator.</p> <note> <p>The results can return an empty result page, but if you have a nextToken, the results are displayed on the next page.</p> </note>
		/// GetAggregateConfigRuleComplianceSummary /#X-Amz-Target=StarlingDoveService.GetAggregateConfigRuleComplianceSummary
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAggregateConfigRuleComplianceSummaryResponse> GetAggregateConfigRuleComplianceSummaryAsync(GetAggregateConfigRuleComplianceSummaryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.GetAggregateConfigRuleComplianceSummary";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAggregateConfigRuleComplianceSummaryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the resource counts across accounts and regions that are present in your AWS Config aggregator. You can request the resource counts by providing filters and GroupByKey.</p> <p>For example, if the input contains accountID 12345678910 and region us-east-1 in filters, the API returns the count of resources in account ID 12345678910 and region us-east-1. If the input contains ACCOUNT_ID as a GroupByKey, the API returns resource counts for all source accounts that are present in your aggregator.</p>
		/// GetAggregateDiscoveredResourceCounts /#X-Amz-Target=StarlingDoveService.GetAggregateDiscoveredResourceCounts
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAggregateDiscoveredResourceCountsResponse> GetAggregateDiscoveredResourceCountsAsync(GetAggregateDiscoveredResourceCountsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.GetAggregateDiscoveredResourceCounts";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAggregateDiscoveredResourceCountsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns configuration item that is aggregated for your specific resource in a specific source account and region.
		/// GetAggregateResourceConfig /#X-Amz-Target=StarlingDoveService.GetAggregateResourceConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAggregateResourceConfigResponse> GetAggregateResourceConfigAsync(GetAggregateResourceConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.GetAggregateResourceConfig";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAggregateResourceConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the evaluation results for the specified AWS Config rule. The results indicate which AWS resources were evaluated by the rule, when each resource was last evaluated, and whether each resource complies with the rule.
		/// GetComplianceDetailsByConfigRule /#X-Amz-Target=StarlingDoveService.GetComplianceDetailsByConfigRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetComplianceDetailsByConfigRuleResponse> GetComplianceDetailsByConfigRuleAsync(GetComplianceDetailsByConfigRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.GetComplianceDetailsByConfigRule";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetComplianceDetailsByConfigRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the evaluation results for the specified AWS resource. The results indicate which AWS Config rules were used to evaluate the resource, when each rule was last used, and whether the resource complies with each rule.
		/// GetComplianceDetailsByResource /#X-Amz-Target=StarlingDoveService.GetComplianceDetailsByResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetComplianceDetailsByResourceResponse> GetComplianceDetailsByResourceAsync(GetComplianceDetailsByResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.GetComplianceDetailsByResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetComplianceDetailsByResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the number of AWS Config rules that are compliant and noncompliant, up to a maximum of 25 for each.
		/// GetComplianceSummaryByConfigRule /#X-Amz-Target=StarlingDoveService.GetComplianceSummaryByConfigRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetComplianceSummaryByConfigRuleResponse> GetComplianceSummaryByConfigRuleAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.GetComplianceSummaryByConfigRule";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetComplianceSummaryByConfigRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the number of resources that are compliant and the number that are noncompliant. You can specify one or more resource types to get these numbers for each resource type. The maximum number returned is 100.
		/// GetComplianceSummaryByResourceType /#X-Amz-Target=StarlingDoveService.GetComplianceSummaryByResourceType
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetComplianceSummaryByResourceTypeResponse> GetComplianceSummaryByResourceTypeAsync(GetComplianceSummaryByResourceTypeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.GetComplianceSummaryByResourceType";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetComplianceSummaryByResourceTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns compliance details of a conformance pack for all AWS resources that are monitered by conformance pack.
		/// GetConformancePackComplianceDetails /#X-Amz-Target=StarlingDoveService.GetConformancePackComplianceDetails
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetConformancePackComplianceDetailsResponse> GetConformancePackComplianceDetailsAsync(GetConformancePackComplianceDetailsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.GetConformancePackComplianceDetails";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetConformancePackComplianceDetailsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns compliance details for the conformance pack based on the cumulative compliance results of all the rules in that conformance pack.
		/// GetConformancePackComplianceSummary /#X-Amz-Target=StarlingDoveService.GetConformancePackComplianceSummary
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetConformancePackComplianceSummaryResponse> GetConformancePackComplianceSummaryAsync(GetConformancePackComplianceSummaryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.GetConformancePackComplianceSummary";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetConformancePackComplianceSummaryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the resource types, the number of each resource type, and the total number of resources that AWS Config is recording in this region for your AWS account. </p> <p class="title"> <b>Example</b> </p> <ol> <li> <p>AWS Config is recording three resource types in the US East (Ohio) Region for your account: 25 EC2 instances, 20 IAM users, and 15 S3 buckets.</p> </li> <li> <p>You make a call to the <code>GetDiscoveredResourceCounts</code> action and specify that you want all resource types. </p> </li> <li> <p>AWS Config returns the following:</p> <ul> <li> <p>The resource types (EC2 instances, IAM users, and S3 buckets).</p> </li> <li> <p>The number of each resource type (25, 20, and 15).</p> </li> <li> <p>The total number of all resources (60).</p> </li> </ul> </li> </ol> <p>The response is paginated. By default, AWS Config lists 100 <a>ResourceCount</a> objects on each page. You can customize this number with the <code>limit</code> parameter. The response includes a <code>nextToken</code> string. To get the next page of results, run the request again and specify the string for the <code>nextToken</code> parameter.</p> <note> <p>If you make a call to the <a>GetDiscoveredResourceCounts</a> action, you might not immediately receive resource counts in the following situations:</p> <ul> <li> <p>You are a new AWS Config customer.</p> </li> <li> <p>You just enabled resource recording.</p> </li> </ul> <p>It might take a few minutes for AWS Config to record and count your resources. Wait a few minutes and then retry the <a>GetDiscoveredResourceCounts</a> action. </p> </note>
		/// GetDiscoveredResourceCounts /#X-Amz-Target=StarlingDoveService.GetDiscoveredResourceCounts
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDiscoveredResourceCountsResponse> GetDiscoveredResourceCountsAsync(GetDiscoveredResourceCountsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.GetDiscoveredResourceCounts";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDiscoveredResourceCountsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns detailed status for each member account within an organization for a given organization config rule.</p> <note> <p>Only a master account can call this API.</p> </note>
		/// GetOrganizationConfigRuleDetailedStatus /#X-Amz-Target=StarlingDoveService.GetOrganizationConfigRuleDetailedStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOrganizationConfigRuleDetailedStatusResponse> GetOrganizationConfigRuleDetailedStatusAsync(GetOrganizationConfigRuleDetailedStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.GetOrganizationConfigRuleDetailedStatus";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetOrganizationConfigRuleDetailedStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns detailed status for each member account within an organization for a given organization conformance pack.</p> <p>Only a master account can call this API.</p>
		/// GetOrganizationConformancePackDetailedStatus /#X-Amz-Target=StarlingDoveService.GetOrganizationConformancePackDetailedStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOrganizationConformancePackDetailedStatusResponse> GetOrganizationConformancePackDetailedStatusAsync(GetOrganizationConformancePackDetailedStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.GetOrganizationConformancePackDetailedStatus";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetOrganizationConformancePackDetailedStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of configuration items for the specified resource. The list contains details about each state of the resource during the specified time interval. If you specified a retention period to retain your <code>ConfigurationItems</code> between a minimum of 30 days and a maximum of 7 years (2557 days), AWS Config returns the <code>ConfigurationItems</code> for the specified retention period. </p> <p>The response is paginated. By default, AWS Config returns a limit of 10 configuration items per page. You can customize this number with the <code>limit</code> parameter. The response includes a <code>nextToken</code> string. To get the next page of results, run the request again and specify the string for the <code>nextToken</code> parameter.</p> <note> <p>Each call to the API is limited to span a duration of seven days. It is likely that the number of records returned is smaller than the specified <code>limit</code>. In such cases, you can make another call, using the <code>nextToken</code>.</p> </note>
		/// GetResourceConfigHistory /#X-Amz-Target=StarlingDoveService.GetResourceConfigHistory
		/// </summary>
		/// <param name="limit">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetResourceConfigHistoryResponse> GetResourceConfigHistoryAsync(string limit, string nextToken, GetResourceConfigHistoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.GetResourceConfigHistory?limit=" + (limit==null? "" : Uri.EscapeDataString(limit))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetResourceConfigHistoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Accepts a resource type and returns a list of resource identifiers that are aggregated for a specific resource type across accounts and regions. A resource identifier includes the resource type, ID, (if available) the custom resource name, source account, and source region. You can narrow the results to include only resources that have specific resource IDs, or a resource name, or source account ID, or source region.</p> <p>For example, if the input consists of accountID 12345678910 and the region is us-east-1 for resource type <code>AWS::EC2::Instance</code> then the API returns all the EC2 instance identifiers of accountID 12345678910 and region us-east-1.</p>
		/// ListAggregateDiscoveredResources /#X-Amz-Target=StarlingDoveService.ListAggregateDiscoveredResources
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListAggregateDiscoveredResourcesResponse> ListAggregateDiscoveredResourcesAsync(ListAggregateDiscoveredResourcesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.ListAggregateDiscoveredResources";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListAggregateDiscoveredResourcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Accepts a resource type and returns a list of resource identifiers for the resources of that type. A resource identifier includes the resource type, ID, and (if available) the custom resource name. The results consist of resources that AWS Config has discovered, including those that AWS Config is not currently recording. You can narrow the results to include only resources that have specific resource IDs or a resource name.</p> <note> <p>You can specify either resource IDs or a resource name, but not both, in the same request.</p> </note> <p>The response is paginated. By default, AWS Config lists 100 resource identifiers on each page. You can customize this number with the <code>limit</code> parameter. The response includes a <code>nextToken</code> string. To get the next page of results, run the request again and specify the string for the <code>nextToken</code> parameter.</p>
		/// ListDiscoveredResources /#X-Amz-Target=StarlingDoveService.ListDiscoveredResources
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListDiscoveredResourcesResponse> ListDiscoveredResourcesAsync(ListDiscoveredResourcesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.ListDiscoveredResources";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDiscoveredResourcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the tags for AWS Config resource.
		/// ListTagsForResource /#X-Amz-Target=StarlingDoveService.ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.ListTagsForResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Authorizes the aggregator account and region to collect data from the source account and region.
		/// PutAggregationAuthorization /#X-Amz-Target=StarlingDoveService.PutAggregationAuthorization
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutAggregationAuthorizationResponse> PutAggregationAuthorizationAsync(PutAggregationAuthorizationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.PutAggregationAuthorization";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutAggregationAuthorizationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Adds or updates an AWS Config rule for evaluating whether your AWS resources comply with your desired configurations.</p> <p>You can use this action for custom AWS Config rules and AWS managed Config rules. A custom AWS Config rule is a rule that you develop and maintain. An AWS managed Config rule is a customizable, predefined rule that AWS Config provides.</p> <p>If you are adding a new custom AWS Config rule, you must first create the AWS Lambda function that the rule invokes to evaluate your resources. When you use the <code>PutConfigRule</code> action to add the rule to AWS Config, you must specify the Amazon Resource Name (ARN) that AWS Lambda assigns to the function. Specify the ARN for the <code>SourceIdentifier</code> key. This key is part of the <code>Source</code> object, which is part of the <code>ConfigRule</code> object. </p> <p>If you are adding an AWS managed Config rule, specify the rule's identifier for the <code>SourceIdentifier</code> key. To reference AWS managed Config rule identifiers, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">About AWS Managed Config Rules</a>.</p> <p>For any new rule that you add, specify the <code>ConfigRuleName</code> in the <code>ConfigRule</code> object. Do not specify the <code>ConfigRuleArn</code> or the <code>ConfigRuleId</code>. These values are generated by AWS Config for new rules.</p> <p>If you are updating a rule that you added previously, you can specify the rule by <code>ConfigRuleName</code>, <code>ConfigRuleId</code>, or <code>ConfigRuleArn</code> in the <code>ConfigRule</code> data type that you use in this request.</p> <p>The maximum number of rules that AWS Config supports is 150.</p> <p>For information about requesting a rule limit increase, see <a href="http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits_config">AWS Config Limits</a> in the <i>AWS General Reference Guide</i>.</p> <p>For more information about developing and using AWS Config rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html">Evaluating AWS Resource Configurations with AWS Config</a> in the <i>AWS Config Developer Guide</i>.</p>
		/// PutConfigRule /#X-Amz-Target=StarlingDoveService.PutConfigRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutConfigRuleAsync(PutConfigRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.PutConfigRule";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates and updates the configuration aggregator with the selected source accounts and regions. The source account can be individual account(s) or an organization.</p> <note> <p>AWS Config should be enabled in source accounts and regions you want to aggregate.</p> <p>If your source type is an organization, you must be signed in to the master account and all features must be enabled in your organization. AWS Config calls <code>EnableAwsServiceAccess</code> API to enable integration between AWS Config and AWS Organizations. </p> </note>
		/// PutConfigurationAggregator /#X-Amz-Target=StarlingDoveService.PutConfigurationAggregator
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutConfigurationAggregatorResponse> PutConfigurationAggregatorAsync(PutConfigurationAggregatorRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.PutConfigurationAggregator";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutConfigurationAggregatorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new configuration recorder to record the selected resource configurations.</p> <p>You can use this action to change the role <code>roleARN</code> or the <code>recordingGroup</code> of an existing recorder. To change the role, call the action on the existing configuration recorder and specify a role.</p> <note> <p>Currently, you can specify only one configuration recorder per region in your account.</p> <p>If <code>ConfigurationRecorder</code> does not have the <b>recordingGroup</b> parameter specified, the default is to record all supported resource types.</p> </note>
		/// PutConfigurationRecorder /#X-Amz-Target=StarlingDoveService.PutConfigurationRecorder
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutConfigurationRecorderAsync(PutConfigurationRecorderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.PutConfigurationRecorder";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates a conformance pack. A conformance pack is a collection of AWS Config rules that can be easily deployed in an account and a region and across AWS Organization.</p> <p>This API creates a service linked role <code>AWSServiceRoleForConfigConforms</code> in your account. The service linked role is created only when the role does not exist in your account. AWS Config verifies the existence of role with <code>GetRole</code> action.</p> <note> <p>You must specify either the <code>TemplateS3Uri</code> or the <code>TemplateBody</code> parameter, but not both. If you provide both AWS Config uses the <code>TemplateS3Uri</code> parameter and ignores the <code>TemplateBody</code> parameter.</p> </note>
		/// PutConformancePack /#X-Amz-Target=StarlingDoveService.PutConformancePack
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutConformancePackResponse> PutConformancePackAsync(PutConformancePackRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.PutConformancePack";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutConformancePackResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a delivery channel object to deliver configuration information to an Amazon S3 bucket and Amazon SNS topic.</p> <p>Before you can create a delivery channel, you must create a configuration recorder.</p> <p>You can use this action to change the Amazon S3 bucket or an Amazon SNS topic of the existing delivery channel. To change the Amazon S3 bucket or an Amazon SNS topic, call this action and specify the changed values for the S3 bucket and the SNS topic. If you specify a different value for either the S3 bucket or the SNS topic, this action will keep the existing value for the parameter that is not changed.</p> <note> <p>You can have only one delivery channel per region in your account.</p> </note>
		/// PutDeliveryChannel /#X-Amz-Target=StarlingDoveService.PutDeliveryChannel
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutDeliveryChannelAsync(PutDeliveryChannelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.PutDeliveryChannel";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Used by an AWS Lambda function to deliver evaluation results to AWS Config. This action is required in every AWS Lambda function that is invoked by an AWS Config rule.
		/// PutEvaluations /#X-Amz-Target=StarlingDoveService.PutEvaluations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutEvaluationsResponse> PutEvaluationsAsync(PutEvaluationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.PutEvaluations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutEvaluationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Adds or updates organization config rule for your entire organization evaluating whether your AWS resources comply with your desired configurations. Only a master account can create or update an organization config rule.</p> <p>This API enables organization service access through the <code>EnableAWSServiceAccess</code> action and creates a service linked role <code>AWSServiceRoleForConfigMultiAccountSetup</code> in the master account of your organization. The service linked role is created only when the role does not exist in the master account. AWS Config verifies the existence of role with <code>GetRole</code> action.</p> <p>You can use this action to create both custom AWS Config rules and AWS managed Config rules. If you are adding a new custom AWS Config rule, you must first create AWS Lambda function in the master account that the rule invokes to evaluate your resources. When you use the <code>PutOrganizationConfigRule</code> action to add the rule to AWS Config, you must specify the Amazon Resource Name (ARN) that AWS Lambda assigns to the function. If you are adding an AWS managed Config rule, specify the rule's identifier for the <code>RuleIdentifier</code> key.</p> <p>The maximum number of organization config rules that AWS Config supports is 150.</p> <note> <p>Specify either <code>OrganizationCustomRuleMetadata</code> or <code>OrganizationManagedRuleMetadata</code>.</p> </note>
		/// PutOrganizationConfigRule /#X-Amz-Target=StarlingDoveService.PutOrganizationConfigRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutOrganizationConfigRuleResponse> PutOrganizationConfigRuleAsync(PutOrganizationConfigRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.PutOrganizationConfigRule";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutOrganizationConfigRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deploys conformance packs across member accounts in an AWS Organization.</p> <p>This API enables organization service access for <code>config-multiaccountsetup.amazonaws.com</code> through the <code>EnableAWSServiceAccess</code> action and creates a service linked role <code>AWSServiceRoleForConfigMultiAccountSetup</code> in the master account of your organization. The service linked role is created only when the role does not exist in the master account. AWS Config verifies the existence of role with GetRole action.</p> <note> <p>You must specify either the <code>TemplateS3Uri</code> or the <code>TemplateBody</code> parameter, but not both. If you provide both AWS Config uses the <code>TemplateS3Uri</code> parameter and ignores the <code>TemplateBody</code> parameter.</p> <p>AWS Config sets the state of a conformance pack to CREATE_IN_PROGRESS and UPDATE_IN_PROGRESS until the confomance pack is created or updated. You cannot update a conformance pack while it is in this state.</p> <p>You can create 6 conformance packs with 25 AWS Config rules in each pack.</p> </note>
		/// PutOrganizationConformancePack /#X-Amz-Target=StarlingDoveService.PutOrganizationConformancePack
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutOrganizationConformancePackResponse> PutOrganizationConformancePackAsync(PutOrganizationConformancePackRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.PutOrganizationConformancePack";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutOrganizationConformancePackResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds or updates the remediation configuration with a specific AWS Config rule with the selected target or action. The API creates the <code>RemediationConfiguration</code> object for the AWS Config rule. The AWS Config rule must already exist for you to add a remediation configuration. The target (SSM document) must exist and have permissions to use the target.
		/// PutRemediationConfigurations /#X-Amz-Target=StarlingDoveService.PutRemediationConfigurations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutRemediationConfigurationsResponse> PutRemediationConfigurationsAsync(PutRemediationConfigurationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.PutRemediationConfigurations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutRemediationConfigurationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A remediation exception is when a specific resource is no longer considered for auto-remediation. This API adds a new exception or updates an exisiting exception for a specific resource with a specific AWS Config rule.
		/// PutRemediationExceptions /#X-Amz-Target=StarlingDoveService.PutRemediationExceptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutRemediationExceptionsResponse> PutRemediationExceptionsAsync(PutRemediationExceptionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.PutRemediationExceptions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutRemediationExceptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Records the configuration state for the resource provided in the request. The configuration state of a resource is represented in AWS Config as Configuration Items. Once this API records the configuration item, you can retrieve the list of configuration items for the custom resource type using existing AWS Config APIs. </p> <note> <p>The custom resource type must be registered with AWS CloudFormation. This API accepts the configuration item registered with AWS CloudFormation.</p> <p>When you call this API, AWS Config only stores configuration state of the resource provided in the request. This API does not change or remediate the configuration of the resource. </p> </note>
		/// PutResourceConfig /#X-Amz-Target=StarlingDoveService.PutResourceConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutResourceConfigAsync(PutResourceConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.PutResourceConfig";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates and updates the retention configuration with details about retention period (number of days) that AWS Config stores your historical information. The API creates the <code>RetentionConfiguration</code> object and names the object as <b>default</b>. When you have a <code>RetentionConfiguration</code> object named <b>default</b>, calling the API modifies the default object. </p> <note> <p>Currently, AWS Config supports only one retention configuration per region in your account.</p> </note>
		/// PutRetentionConfiguration /#X-Amz-Target=StarlingDoveService.PutRetentionConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutRetentionConfigurationResponse> PutRetentionConfigurationAsync(PutRetentionConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.PutRetentionConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutRetentionConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Accepts a structured query language (SQL) SELECT command and an aggregator to query configuration state of AWS resources across multiple accounts and regions, performs the corresponding search, and returns resource configurations matching the properties.</p> <p>For more information about query components, see the <a href="https://docs.aws.amazon.com/config/latest/developerguide/query-components.html"> <b>Query Components</b> </a> section in the AWS Config Developer Guide.</p>
		/// SelectAggregateResourceConfig /#X-Amz-Target=StarlingDoveService.SelectAggregateResourceConfig
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SelectAggregateResourceConfigResponse> SelectAggregateResourceConfigAsync(string MaxResults, string NextToken, SelectAggregateResourceConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.SelectAggregateResourceConfig?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SelectAggregateResourceConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Accepts a structured query language (SQL) <code>SELECT</code> command, performs the corresponding search, and returns resource configurations matching the properties.</p> <p>For more information about query components, see the <a href="https://docs.aws.amazon.com/config/latest/developerguide/query-components.html"> <b>Query Components</b> </a> section in the AWS Config Developer Guide.</p>
		/// SelectResourceConfig /#X-Amz-Target=StarlingDoveService.SelectResourceConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SelectResourceConfigResponse> SelectResourceConfigAsync(SelectResourceConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.SelectResourceConfig";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SelectResourceConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Runs an on-demand evaluation for the specified AWS Config rules against the last known configuration state of the resources. Use <code>StartConfigRulesEvaluation</code> when you want to test that a rule you updated is working as expected. <code>StartConfigRulesEvaluation</code> does not re-record the latest configuration state for your resources. It re-runs an evaluation against the last known state of your resources. </p> <p>You can specify up to 25 AWS Config rules per request. </p> <p>An existing <code>StartConfigRulesEvaluation</code> call for the specified rules must complete before you can call the API again. If you chose to have AWS Config stream to an Amazon SNS topic, you will receive a <code>ConfigRuleEvaluationStarted</code> notification when the evaluation starts.</p> <note> <p>You don't need to call the <code>StartConfigRulesEvaluation</code> API to run an evaluation for a new rule. When you create a rule, AWS Config evaluates your resources against the rule automatically. </p> </note> <p>The <code>StartConfigRulesEvaluation</code> API is useful if you want to run on-demand evaluations, such as the following example:</p> <ol> <li> <p>You have a custom rule that evaluates your IAM resources every 24 hours.</p> </li> <li> <p>You update your Lambda function to add additional conditions to your rule.</p> </li> <li> <p>Instead of waiting for the next periodic evaluation, you call the <code>StartConfigRulesEvaluation</code> API.</p> </li> <li> <p>AWS Config invokes your Lambda function and evaluates your IAM resources.</p> </li> <li> <p>Your custom rule will still run periodic evaluations every 24 hours.</p> </li> </ol>
		/// StartConfigRulesEvaluation /#X-Amz-Target=StarlingDoveService.StartConfigRulesEvaluation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartConfigRulesEvaluationResponse> StartConfigRulesEvaluationAsync(StartConfigRulesEvaluationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.StartConfigRulesEvaluation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartConfigRulesEvaluationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts recording configurations of the AWS resources you have selected to record in your AWS account.</p> <p>You must have created at least one delivery channel to successfully start the configuration recorder.</p>
		/// StartConfigurationRecorder /#X-Amz-Target=StarlingDoveService.StartConfigurationRecorder
		/// </summary>
		/// <returns>Success</returns>
		public async Task StartConfigurationRecorderAsync(StartConfigurationRecorderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.StartConfigurationRecorder";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Runs an on-demand remediation for the specified AWS Config rules against the last known remediation configuration. It runs an execution against the current state of your resources. Remediation execution is asynchronous.</p> <p>You can specify up to 100 resource keys per request. An existing StartRemediationExecution call for the specified resource keys must complete before you can call the API again.</p>
		/// StartRemediationExecution /#X-Amz-Target=StarlingDoveService.StartRemediationExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartRemediationExecutionResponse> StartRemediationExecutionAsync(StartRemediationExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.StartRemediationExecution";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartRemediationExecutionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops recording configurations of the AWS resources you have selected to record in your AWS account.
		/// StopConfigurationRecorder /#X-Amz-Target=StarlingDoveService.StopConfigurationRecorder
		/// </summary>
		/// <returns>Success</returns>
		public async Task StopConfigurationRecorderAsync(StopConfigurationRecorderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.StopConfigurationRecorder";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates the specified tags to a resource with the specified resourceArn. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are deleted as well.
		/// TagResource /#X-Amz-Target=StarlingDoveService.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task TagResourceAsync(TagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.TagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes specified tags from a resource.
		/// UntagResource /#X-Amz-Target=StarlingDoveService.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task UntagResourceAsync(UntagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=StarlingDoveService.UntagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
