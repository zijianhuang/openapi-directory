//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDetectorResponse
	{
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string DetectorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateFilterResponse
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=3)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateIPSetResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IpSetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMembersResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	/// <summary>
	/// Contains information about the account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountDetail
	{
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Email { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePublishingDestinationResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateThreatIntelSetResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ThreatIntelSetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeclineInvitationsResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteInvitationsResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteMembersResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeOrganizationConfigurationResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool AutoEnable { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool MemberAccountLimitReached { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePublishingDestinationResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationId { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DescribePublishingDestinationResponseDestinationType DestinationType { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DescribePublishingDestinationResponseStatus Status { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int PublishingFailureStartTimestamp { get; set; }
		
		/// <summary>
		/// Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DestinationProperties DestinationProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribePublishingDestinationResponseDestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribePublishingDestinationResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VERIFICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNABLE_TO_PUBLISH_FIX_DESTINATION_PROPERTY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateMembersResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDetectorResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetDetectorResponseFindingPublishingFrequency FindingPublishingFrequency { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRole { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetDetectorResponseStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetDetectorResponseFindingPublishingFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIFTEEN_MINUTES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_HOUR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIX_HOURS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetDetectorResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetFilterResponse
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetFilterResponseAction Action { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for querying findings.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FindingCriteria FindingCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetFilterResponseAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOOP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetFindingsResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Finding[] Findings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetFindingsStatisticsResponse
	{
		
		/// <summary>
		/// Contains information about finding statistics.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FindingStatistics FindingStatistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FindingStatisticType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT_BY_SEVERITY = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetIPSetResponse
	{
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetIPSetResponseFormat Format { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Location { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetIPSetResponseStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetIPSetResponseFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STIX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTX_CSV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIEN_VAULT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROOF_POINT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRE_EYE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetIPSetResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEACTIVATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInvitationsCountResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InvitationsCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMasterAccountResponse
	{
		
		/// <summary>
		/// Contains information about the master account and invitation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Master Master { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMembersResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Member[] Members { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetThreatIntelSetResponse
	{
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetThreatIntelSetResponseFormat Format { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Location { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetThreatIntelSetResponseStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetThreatIntelSetResponseFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STIX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTX_CSV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIEN_VAULT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROOF_POINT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRE_EYE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetThreatIntelSetResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEACTIVATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InviteMembersResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDetectorsResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public DetectorId[] DetectorIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListFiltersResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public FilterName[] FilterNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListFindingsResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public FindingId[] FindingIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListIPSetsResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public String[] IpSetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListInvitationsResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Invitation[] Invitations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListMembersResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Member[] Members { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListOrganizationAdminAccountsResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public AdminAccount[] AdminAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPublishingDestinationsResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Destination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListThreatIntelSetsResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public String[] ThreatIntelSetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartMonitoringMembersResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopMonitoringMembersResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public UnprocessedAccount[] UnprocessedAccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateFilterResponse
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=3)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptInvitationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MasterId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InvitationId { get; set; }
	}
	
	/// <summary>
	/// Contains information on the current access control policies for the bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccessControlList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowsPublicReadAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowsPublicWriteAccess { get; set; }
	}
	
	/// <summary>
	/// Contains information about the access keys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccessKeyDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccessKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserType { get; set; }
	}
	
	/// <summary>
	/// Contains information on how the bucker owner's S3 Block Public Access settings are being applied to the S3 bucket. See <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html">S3 Block Public Access</a> for more information. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BlockPublicAccess
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IgnorePublicAcls { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RestrictPublicBuckets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BlockPublicAcls { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BlockPublicPolicy { get; set; }
	}
	
	/// <summary>
	/// Contains information about the account level permissions on the S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountLevelPermissions
	{
		
		/// <summary>
		/// Contains information on how the bucker owner's S3 Block Public Access settings are being applied to the S3 bucket. See <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html">S3 Block Public Access</a> for more information. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BlockPublicAccess BlockPublicAccess { get; set; }
	}
	
	/// <summary>
	/// Contains information about the API operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AwsApiCallAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Api { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CallerType { get; set; }
		
		/// <summary>
		/// Contains information about the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DomainDetails DomainDetails { get; set; }
		
		/// <summary>
		/// Contains information about the remote IP address of the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RemoteIpDetails RemoteIpDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
	}
	
	/// <summary>
	/// Contains information about the DNS_REQUEST action described in this finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DnsRequestAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
	}
	
	/// <summary>
	/// Contains information about the NETWORK_CONNECTION action described in the finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkConnectionAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Blocked { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionDirection { get; set; }
		
		/// <summary>
		/// Contains information about the port for the local connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LocalPortDetails LocalPortDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Protocol { get; set; }
		
		/// <summary>
		/// Contains information about the local IP address of the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LocalIpDetails LocalIpDetails { get; set; }
		
		/// <summary>
		/// Contains information about the remote IP address of the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RemoteIpDetails RemoteIpDetails { get; set; }
		
		/// <summary>
		/// Contains information about the remote port.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RemotePortDetails RemotePortDetails { get; set; }
	}
	
	/// <summary>
	/// Contains information about the PORT_PROBE action described in the finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PortProbeAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Blocked { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PortProbeDetail[] PortProbeDetails { get; set; }
	}
	
	/// <summary>
	/// Contains information about actions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Action
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionType { get; set; }
		
		/// <summary>
		/// Contains information about the API operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AwsApiCallAction AwsApiCallAction { get; set; }
		
		/// <summary>
		/// Contains information about the DNS_REQUEST action described in this finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DnsRequestAction DnsRequestAction { get; set; }
		
		/// <summary>
		/// Contains information about the NETWORK_CONNECTION action described in the finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkConnectionAction NetworkConnectionAction { get; set; }
		
		/// <summary>
		/// Contains information about the PORT_PROBE action described in the finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PortProbeAction PortProbeAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdminStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLE_IN_PROGRESS = 1,
	}
	
	/// <summary>
	/// The account within the organization specified as the GuardDuty delegated administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminAccount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AdminAccountId { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AdminAccountAdminStatus AdminStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdminAccountAdminStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLE_IN_PROGRESS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ArchiveFindingsRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public FindingId[] FindingIds { get; set; }
	}
	
	/// <summary>
	/// Contains information about the domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
	}
	
	/// <summary>
	/// Contains information about the remote IP address of the connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoteIpDetails
	{
		
		/// <summary>
		/// Contains information about the city associated with the IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public City City { get; set; }
		
		/// <summary>
		/// Contains information about the country where the remote IP address is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Country Country { get; set; }
		
		/// <summary>
		/// Contains information about the location of the remote IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GeoLocation GeoLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddressV4 { get; set; }
		
		/// <summary>
		/// Contains information about the ISP organization of the remote IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Organization Organization { get; set; }
	}
	
	/// <summary>
	/// Contains information on the current bucket policies for the S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BucketPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowsPublicReadAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowsPublicWriteAccess { get; set; }
	}
	
	/// <summary>
	/// Contains information about the bucket level permissions for the S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BucketLevelPermissions
	{
		
		/// <summary>
		/// Contains information on the current access control policies for the bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccessControlList AccessControlList { get; set; }
		
		/// <summary>
		/// Contains information on the current bucket policies for the S3 bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BucketPolicy BucketPolicy { get; set; }
		
		/// <summary>
		/// Contains information on how the bucker owner's S3 Block Public Access settings are being applied to the S3 bucket. See <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html">S3 Block Public Access</a> for more information. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BlockPublicAccess BlockPublicAccess { get; set; }
	}
	
	/// <summary>
	/// Contains information about the city associated with the IP address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class City
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CityName { get; set; }
	}
	
	/// <summary>
	/// Contains information about the condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Condition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Eq { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Neq { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Gt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Gte { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Lt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Lte { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Equals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] NotEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GreaterThan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GreaterThanOrEqual { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LessThan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LessThanOrEqual { get; set; }
	}
	
	/// <summary>
	/// Contains information about the country where the remote IP address is located.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Country
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CountryName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FindingPublishingFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIFTEEN_MINUTES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_HOUR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIX_HOURS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDetectorRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enable { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateDetectorRequestFindingPublishingFrequency FindingPublishingFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDetectorRequestFindingPublishingFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIFTEEN_MINUTES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_HOUR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIX_HOURS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FilterAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOOP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVE = 1,
	}
	
	/// <summary>
	/// Contains information about the criteria used for querying findings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FindingCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Criterion Criterion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateFilterRequest
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateFilterRequestAction Action { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for querying findings.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FindingCriteria FindingCriteria { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateFilterRequestAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOOP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IpSetFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STIX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTX_CSV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIEN_VAULT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROOF_POINT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRE_EYE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateIPSetRequest
	{
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateIPSetRequestFormat Format { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Location { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Activate { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateIPSetRequestFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STIX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTX_CSV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIEN_VAULT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROOF_POINT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRE_EYE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMembersRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountDetail[] AccountDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
	}
	
	/// <summary>
	/// Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DestinationProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePublishingDestinationRequest
	{
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreatePublishingDestinationRequestDestinationType DestinationType { get; set; }
		
		/// <summary>
		/// Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DestinationProperties DestinationProperties { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreatePublishingDestinationRequestDestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSampleFindingsRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public FindingType[] FindingTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ThreatIntelSetFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STIX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTX_CSV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIEN_VAULT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROOF_POINT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRE_EYE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateThreatIntelSetRequest
	{
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateThreatIntelSetRequestFormat Format { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Location { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Activate { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateThreatIntelSetRequestFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STIX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTX_CSV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIEN_VAULT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROOF_POINT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRE_EYE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeclineInvitationsRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountId[] AccountIds { get; set; }
	}
	
	/// <summary>
	/// Contains information on the server side encryption method used in the S3 bucket. See <a href="https://docs.aws.amazon.com/AmazonS3/atest/dev/serv-side-encryption.html">S3 Server-Side Encryption</a> for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DefaultServerSideEncryption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsMasterKeyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteInvitationsRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountId[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteMembersRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountId[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PublishingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VERIFICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNABLE_TO_PUBLISH_FIX_DESTINATION_PROPERTY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 3,
	}
	
	/// <summary>
	/// Contains information about the publishing destination, including the ID, type, and status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Destination
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationId { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DestinationDestinationType DestinationType { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DestinationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DestinationDestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DestinationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VERIFICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLISHING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNABLE_TO_PUBLISH_FIX_DESTINATION_PROPERTY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DetectorStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableOrganizationAdminAccountRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AdminAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateMembersRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountId[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableOrganizationAdminAccountRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AdminAccountId { get; set; }
	}
	
	/// <summary>
	/// Contains information about the reason that the finding was generated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Evidence
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ThreatIntelligenceDetail[] ThreatIntelligenceDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Feedback
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USEFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_USEFUL = 1,
	}
	
	/// <summary>
	/// Contains information about the AWS resource associated with the activity that prompted GuardDuty to generate a finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Resource
	{
		
		/// <summary>
		/// Contains information about the access keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccessKeyDetails AccessKeyDetails { get; set; }
		
		/// <summary>
		/// Contains information on the S3 bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3BucketDetail[] S3BucketDetails { get; set; }
		
		/// <summary>
		/// Contains information about the details of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceDetails InstanceDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
	}
	
	/// <summary>
	/// Contains additional information about the generated finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Service
	{
		
		/// <summary>
		/// Contains information about actions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Action Action { get; set; }
		
		/// <summary>
		/// Contains information about the reason that the finding was generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Evidence Evidence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string DetectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventFirstSeen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventLastSeen { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserFeedback { get; set; }
	}
	
	/// <summary>
	/// Contains information about the finding, which is generated when abnormal or suspicious activity is detected.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Finding
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Partition { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		/// <summary>
		/// Contains information about the AWS resource associated with the activity that prompted GuardDuty to generate a finding.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Resource Resource { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemaVersion { get; set; }
		
		/// <summary>
		/// Contains additional information about the generated finding.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Service Service { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string Type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// Contains information about finding statistics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FindingStatistics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CountBySeverity CountBySeverity { get; set; }
	}
	
	/// <summary>
	/// Contains information about the location of the remote IP address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GeoLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Lon { get; set; }
	}
	
	/// <summary>
	/// Contains information about the criteria used for sorting findings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SortCriteria
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortCriteriaOrderBy OrderBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SortCriteriaOrderBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetFindingsRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public FindingId[] FindingIds { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for sorting findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SortCriteria SortCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetFindingsStatisticsRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public FindingStatisticType[] FindingStatisticTypes { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for querying findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FindingCriteria FindingCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IpSetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEACTIVATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 6,
	}
	
	/// <summary>
	/// Contains information about the master account and invitation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Master
	{
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvitationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RelationshipStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvitedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMembersRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountId[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ThreatIntelSetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEACTIVATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 6,
	}
	
	/// <summary>
	/// Contains information about the EC2 instance profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IamInstanceProfile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Contains information about the details of an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// Contains information about the EC2 instance profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IamInstanceProfile IamInstanceProfile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterface[] NetworkInterfaces { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductCode[] ProductCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Contains information about the invitation to become a member account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Invitation
	{
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvitationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RelationshipStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvitedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InviteMembersRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountId[] AccountIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableEmailNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListFindingsRequest
	{
		
		/// <summary>
		/// Contains information about the criteria used for querying findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FindingCriteria FindingCriteria { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for sorting findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SortCriteria SortCriteria { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about the local IP address of the connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LocalIpDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddressV4 { get; set; }
	}
	
	/// <summary>
	/// Contains information about the port for the local connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LocalPortDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PortName { get; set; }
	}
	
	/// <summary>
	/// Contains information about the member account. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Member
	{
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string DetectorId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MasterId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Email { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationshipStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvitedAt { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// Contains information about the remote port.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemotePortDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PortName { get; set; }
	}
	
	/// <summary>
	/// Contains information about the elastic network interface of the EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkInterface
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Ipv6Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PrivateIpAddressDetails[] PrivateIpAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroup[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// Contains information about the ISP organization of the remote IP address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Organization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Asn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AsnOrg { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Isp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Org { get; set; }
	}
	
	/// <summary>
	/// Contains information on the owner of the bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Owner
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Contains information about how permissions are configured for the S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PermissionConfiguration
	{
		
		/// <summary>
		/// Contains information about the bucket level permissions for the S3 bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BucketLevelPermissions BucketLevelPermissions { get; set; }
		
		/// <summary>
		/// Contains information about the account level permissions on the S3 bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountLevelPermissions AccountLevelPermissions { get; set; }
	}
	
	/// <summary>
	/// Contains information about the port probe details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PortProbeDetail
	{
		
		/// <summary>
		/// Contains information about the port for the local connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LocalPortDetails LocalPortDetails { get; set; }
		
		/// <summary>
		/// Contains information about the local IP address of the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LocalIpDetails LocalIpDetails { get; set; }
		
		/// <summary>
		/// Contains information about the remote IP address of the connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RemoteIpDetails RemoteIpDetails { get; set; }
	}
	
	/// <summary>
	/// Contains other private IP address information of the EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PrivateIpAddressDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
	}
	
	/// <summary>
	/// Contains information about the product code for the EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductCode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductType { get; set; }
	}
	
	/// <summary>
	/// Describes the public access policies that apply to the S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PublicAccess
	{
		
		/// <summary>
		/// Contains information about how permissions are configured for the S3 bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PermissionConfiguration PermissionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EffectivePermission { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3BucketDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Contains information on the owner of the bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Owner Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Contains information on the server side encryption method used in the S3 bucket. See <a href="https://docs.aws.amazon.com/AmazonS3/atest/dev/serv-side-encryption.html">S3 Server-Side Encryption</a> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DefaultServerSideEncryption DefaultServerSideEncryption { get; set; }
		
		/// <summary>
		/// Describes the public access policies that apply to the S3 bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PublicAccess PublicAccess { get; set; }
	}
	
	/// <summary>
	/// Contains information about the security groups associated with the EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SecurityGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartMonitoringMembersRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountId[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopMonitoringMembersRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountId[] AccountIds { get; set; }
	}
	
	/// <summary>
	/// Contains information about a tag associated with the EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// An instance of a threat intelligence detail that constitutes evidence for the finding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThreatIntelligenceDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ThreatListName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ThreatNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnarchiveFindingsRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public FindingId[] FindingIds { get; set; }
	}
	
	/// <summary>
	/// Contains information about the accounts that weren't processed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnprocessedAccount
	{
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDetectorRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateDetectorRequestFindingPublishingFrequency FindingPublishingFrequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateDetectorRequestFindingPublishingFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIFTEEN_MINUTES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_HOUR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIX_HOURS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateFilterRequest
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateFilterRequestAction Action { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for querying findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FindingCriteria FindingCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateFilterRequestAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOOP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateFindingsFeedbackRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public FindingId[] FindingIds { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateFindingsFeedbackRequestFeedback Feedback { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Comments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateFindingsFeedbackRequestFeedback
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USEFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_USEFUL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateIPSetRequest
	{
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Activate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateOrganizationConfigurationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool AutoEnable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePublishingDestinationRequest
	{
		
		/// <summary>
		/// Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DestinationProperties DestinationProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateThreatIntelSetRequest
	{
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Activate { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Accepts the invitation to be monitored by a master GuardDuty account.
		/// AcceptInvitation /detector/{detectorId}/master
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty member account.</param>
		/// <returns>Success</returns>
		public async Task<AcceptInvitationResponse> AcceptInvitationAsync(string detectorId, AcceptInvitationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/master";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AcceptInvitationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides the details for the GuardDuty master account associated with the current GuardDuty member account.
		/// GetMasterAccount /detector/{detectorId}/master
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty member account.</param>
		/// <returns>Success</returns>
		public async Task<GetMasterAccountResponse> GetMasterAccountAsync(string detectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/master";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetMasterAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Archives GuardDuty findings that are specified by the list of finding IDs.</p> <note> <p>Only the master account can archive findings. Member accounts don't have permission to archive findings from their accounts.</p> </note>
		/// ArchiveFindings /detector/{detectorId}/findings/archive
		/// </summary>
		/// <param name="detectorId">The ID of the detector that specifies the GuardDuty service whose findings you want to archive.</param>
		/// <returns>Success</returns>
		public async Task<ArchiveFindingsResponse> ArchiveFindingsAsync(string detectorId, ArchiveFindingsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/findings/archive";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ArchiveFindingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a single Amazon GuardDuty detector. A detector is a resource that represents the GuardDuty service. To start using GuardDuty, you must create a detector in each Region where you enable the service. You can have only one detector per account per Region.
		/// CreateDetector /detector
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDetectorResponse> CreateDetectorAsync(CreateDetectorBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDetectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists detectorIds of all the existing Amazon GuardDuty detector resources.
		/// ListDetectors /detector
		/// </summary>
		/// <param name="maxResults">You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.</param>
		/// <param name="nextToken">You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDetectorsResponse> ListDetectorsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDetectorsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a filter using the specified finding criteria.
		/// CreateFilter /detector/{detectorId}/filter
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty account that you want to create a filter for.</param>
		/// <returns>Success</returns>
		public async Task<CreateFilterResponse> CreateFilterAsync(string detectorId, CreateFilterBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/filter";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateFilterResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a paginated list of the current filters.
		/// ListFilters /detector/{detectorId}/filter
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the filter is associated with.</param>
		/// <param name="maxResults">You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.</param>
		/// <param name="nextToken">You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListFiltersResponse> ListFiltersAsync(string detectorId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/filter&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListFiltersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new IPSet, which is called a trusted IP list in the console user interface. An IPSet is a list of IP addresses that are trusted for secure communication with AWS infrastructure and applications. GuardDuty doesn't generate findings for IP addresses that are included in IPSets. Only users from the master account can use this operation.
		/// CreateIPSet /detector/{detectorId}/ipset
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty account that you want to create an IPSet for.</param>
		/// <returns>Success</returns>
		public async Task<CreateIPSetResponse> CreateIPSetAsync(string detectorId, CreateIPSetBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/ipset";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateIPSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the IPSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the IPSets returned are the IPSets from the associated master account.
		/// ListIPSets /detector/{detectorId}/ipset
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the IPSet is associated with.</param>
		/// <param name="maxResults">You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.</param>
		/// <param name="nextToken">You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListIPSetsResponse> ListIPSetsAsync(string detectorId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/ipset&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListIPSetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates member accounts of the current AWS account by specifying a list of AWS account IDs. The current AWS account can then invite these members to manage GuardDuty in their accounts.
		/// CreateMembers /detector/{detectorId}/member
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty account that you want to associate member accounts with.</param>
		/// <returns>Success</returns>
		public async Task<CreateMembersResponse> CreateMembersAsync(string detectorId, CreateMembersBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/member";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateMembersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists details about all member accounts for the current GuardDuty master account.
		/// ListMembers /detector/{detectorId}/member
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector the member is associated with.</param>
		/// <param name="maxResults">You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.</param>
		/// <param name="nextToken">You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</param>
		/// <param name="onlyAssociated">Specifies whether to only return associated members or to return all members (including members who haven't been invited yet or have been disassociated).</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMembersResponse> ListMembersAsync(string detectorId, int maxResults, string nextToken, string onlyAssociated, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/member&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&onlyAssociated=" + (onlyAssociated==null? "" : Uri.EscapeDataString(onlyAssociated))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListMembersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a publishing destination to export findings to. The resource to export findings to must exist before you use this operation.
		/// CreatePublishingDestination /detector/{detectorId}/publishingDestination
		/// </summary>
		/// <param name="detectorId">The ID of the GuardDuty detector associated with the publishing destination.</param>
		/// <returns>Success</returns>
		public async Task<CreatePublishingDestinationResponse> CreatePublishingDestinationAsync(string detectorId, CreatePublishingDestinationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/publishingDestination";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreatePublishingDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of publishing destinations associated with the specified <code>dectectorId</code>.
		/// ListPublishingDestinations /detector/{detectorId}/publishingDestination
		/// </summary>
		/// <param name="detectorId">The ID of the detector to retrieve publishing destinations for.</param>
		/// <param name="maxResults">The maximum number of results to return in the response.</param>
		/// <param name="nextToken">A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPublishingDestinationsResponse> ListPublishingDestinationsAsync(string detectorId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/publishingDestination&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPublishingDestinationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates example findings of types specified by the list of finding types. If 'NULL' is specified for <code>findingTypes</code>, the API generates example findings of all supported finding types.
		/// CreateSampleFindings /detector/{detectorId}/findings/create
		/// </summary>
		/// <param name="detectorId">The ID of the detector to create sample findings for.</param>
		/// <returns>Success</returns>
		public async Task<CreateSampleFindingsResponse> CreateSampleFindingsAsync(string detectorId, CreateSampleFindingsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/findings/create";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateSampleFindingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new ThreatIntelSet. ThreatIntelSets consist of known malicious IP addresses. GuardDuty generates findings based on ThreatIntelSets. Only users of the master account can use this operation.
		/// CreateThreatIntelSet /detector/{detectorId}/threatintelset
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty account that you want to create a threatIntelSet for.</param>
		/// <returns>Success</returns>
		public async Task<CreateThreatIntelSetResponse> CreateThreatIntelSetAsync(string detectorId, CreateThreatIntelSetBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/threatintelset";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateThreatIntelSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the ThreatIntelSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the ThreatIntelSets associated with the master account are returned.
		/// ListThreatIntelSets /detector/{detectorId}/threatintelset
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the threatIntelSet is associated with.</param>
		/// <param name="maxResults">You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.</param>
		/// <param name="nextToken">You can use this parameter to paginate results in the response. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListThreatIntelSetsResponse> ListThreatIntelSetsAsync(string detectorId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/threatintelset&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListThreatIntelSetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Declines invitations sent to the current member account by AWS accounts specified by their account IDs.
		/// DeclineInvitations /invitation/decline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeclineInvitationsResponse> DeclineInvitationsAsync(DeclineInvitationsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/invitation/decline";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeclineInvitationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an Amazon GuardDuty detector that is specified by the detector ID.
		/// DeleteDetector /detector/{detectorId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteDetectorResponse> DeleteDetectorAsync(string detectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDetectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves an Amazon GuardDuty detector specified by the detectorId.
		/// GetDetector /detector/{detectorId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that you want to get.</param>
		/// <returns>Success</returns>
		public async Task<GetDetectorResponse> GetDetectorAsync(string detectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDetectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Amazon GuardDuty detector specified by the detectorId.
		/// UpdateDetector /detector/{detectorId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateDetectorResponse> UpdateDetectorAsync(string detectorId, UpdateDetectorBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDetectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the filter specified by the filter name.
		/// DeleteFilter /detector/{detectorId}/filter/{filterName}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the filter is associated with.</param>
		/// <param name="filterName">The name of the filter that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteFilterResponse> DeleteFilterAsync(string detectorId, string filterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/filter/"+ (filterName==null? "" : Uri.EscapeDataString(filterName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteFilterResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the details of the filter specified by the filter name.
		/// GetFilter /detector/{detectorId}/filter/{filterName}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the filter is associated with.</param>
		/// <param name="filterName">The name of the filter you want to get.</param>
		/// <returns>Success</returns>
		public async Task<GetFilterResponse> GetFilterAsync(string detectorId, string filterName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/filter/"+ (filterName==null? "" : Uri.EscapeDataString(filterName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetFilterResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the filter specified by the filter name.
		/// UpdateFilter /detector/{detectorId}/filter/{filterName}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that specifies the GuardDuty service where you want to update a filter.</param>
		/// <param name="filterName">The name of the filter.</param>
		/// <returns>Success</returns>
		public async Task<UpdateFilterResponse> UpdateFilterAsync(string detectorId, string filterName, UpdateFilterBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/filter/"+ (filterName==null? "" : Uri.EscapeDataString(filterName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateFilterResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the IPSet specified by the <code>ipSetId</code>. IPSets are called trusted IP lists in the console user interface.
		/// DeleteIPSet /detector/{detectorId}/ipset/{ipSetId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector associated with the IPSet.</param>
		/// <param name="ipSetId">The unique ID of the IPSet to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteIPSetResponse> DeleteIPSetAsync(string detectorId, string ipSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/ipset/"+ (ipSetId==null? "" : Uri.EscapeDataString(ipSetId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteIPSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the IPSet specified by the <code>ipSetId</code>.
		/// GetIPSet /detector/{detectorId}/ipset/{ipSetId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the IPSet is associated with.</param>
		/// <param name="ipSetId">The unique ID of the IPSet to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<GetIPSetResponse> GetIPSetAsync(string detectorId, string ipSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/ipset/"+ (ipSetId==null? "" : Uri.EscapeDataString(ipSetId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetIPSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the IPSet specified by the IPSet ID.
		/// UpdateIPSet /detector/{detectorId}/ipset/{ipSetId}
		/// </summary>
		/// <param name="detectorId">The detectorID that specifies the GuardDuty service whose IPSet you want to update.</param>
		/// <param name="ipSetId">The unique ID that specifies the IPSet that you want to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateIPSetResponse> UpdateIPSetAsync(string detectorId, string ipSetId, UpdateIPSetBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/ipset/"+ (ipSetId==null? "" : Uri.EscapeDataString(ipSetId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateIPSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes invitations sent to the current member account by AWS accounts specified by their account IDs.
		/// DeleteInvitations /invitation/delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteInvitationsResponse> DeleteInvitationsAsync(DeleteInvitationsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/invitation/delete";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteInvitationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes GuardDuty member accounts (to the current GuardDuty master account) specified by the account IDs.
		/// DeleteMembers /detector/{detectorId}/member/delete
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty account whose members you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteMembersResponse> DeleteMembersAsync(string detectorId, DeleteMembersBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/member/delete";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteMembersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the publishing definition with the specified <code>destinationId</code>.
		/// DeletePublishingDestination /detector/{detectorId}/publishingDestination/{destinationId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector associated with the publishing destination to delete.</param>
		/// <param name="destinationId">The ID of the publishing destination to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeletePublishingDestinationResponse> DeletePublishingDestinationAsync(string detectorId, string destinationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/publishingDestination/"+ (destinationId==null? "" : Uri.EscapeDataString(destinationId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeletePublishingDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the publishing destination specified by the provided <code>destinationId</code>.
		/// DescribePublishingDestination /detector/{detectorId}/publishingDestination/{destinationId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector associated with the publishing destination to retrieve.</param>
		/// <param name="destinationId">The ID of the publishing destination to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<DescribePublishingDestinationResponse> DescribePublishingDestinationAsync(string detectorId, string destinationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/publishingDestination/"+ (destinationId==null? "" : Uri.EscapeDataString(destinationId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribePublishingDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates information about the publishing destination specified by the <code>destinationId</code>.
		/// UpdatePublishingDestination /detector/{detectorId}/publishingDestination/{destinationId}
		/// </summary>
		/// <param name="detectorId">The ID of the detector associated with the publishing destinations to update.</param>
		/// <param name="destinationId">The ID of the publishing destination to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdatePublishingDestinationResponse> UpdatePublishingDestinationAsync(string detectorId, string destinationId, UpdatePublishingDestinationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/publishingDestination/"+ (destinationId==null? "" : Uri.EscapeDataString(destinationId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdatePublishingDestinationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the ThreatIntelSet specified by the ThreatIntelSet ID.
		/// DeleteThreatIntelSet /detector/{detectorId}/threatintelset/{threatIntelSetId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the threatIntelSet is associated with.</param>
		/// <param name="threatIntelSetId">The unique ID of the threatIntelSet that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteThreatIntelSetResponse> DeleteThreatIntelSetAsync(string detectorId, string threatIntelSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/threatintelset/"+ (threatIntelSetId==null? "" : Uri.EscapeDataString(threatIntelSetId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteThreatIntelSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the ThreatIntelSet that is specified by the ThreatIntelSet ID.
		/// GetThreatIntelSet /detector/{detectorId}/threatintelset/{threatIntelSetId}
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector that the threatIntelSet is associated with.</param>
		/// <param name="threatIntelSetId">The unique ID of the threatIntelSet that you want to get.</param>
		/// <returns>Success</returns>
		public async Task<GetThreatIntelSetResponse> GetThreatIntelSetAsync(string detectorId, string threatIntelSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/threatintelset/"+ (threatIntelSetId==null? "" : Uri.EscapeDataString(threatIntelSetId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetThreatIntelSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the ThreatIntelSet specified by the ThreatIntelSet ID.
		/// UpdateThreatIntelSet /detector/{detectorId}/threatintelset/{threatIntelSetId}
		/// </summary>
		/// <param name="detectorId">The detectorID that specifies the GuardDuty service whose ThreatIntelSet you want to update.</param>
		/// <param name="threatIntelSetId">The unique ID that specifies the ThreatIntelSet that you want to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateThreatIntelSetResponse> UpdateThreatIntelSetAsync(string detectorId, string threatIntelSetId, UpdateThreatIntelSetBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/threatintelset/"+ (threatIntelSetId==null? "" : Uri.EscapeDataString(threatIntelSetId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateThreatIntelSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the account selected as the delegated administrator for GuardDuty.
		/// DescribeOrganizationConfiguration /detector/{detectorId}/admin
		/// </summary>
		/// <param name="detectorId">The ID of the detector to retrieve information about the delegated administrator from.</param>
		/// <returns>Success</returns>
		public async Task<DescribeOrganizationConfigurationResponse> DescribeOrganizationConfigurationAsync(string detectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/admin";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeOrganizationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the delegated administrator account with the values provided.
		/// UpdateOrganizationConfiguration /detector/{detectorId}/admin
		/// </summary>
		/// <param name="detectorId">The ID of the detector to update the delegated administrator for.</param>
		/// <returns>Success</returns>
		public async Task<UpdateOrganizationConfigurationResponse> UpdateOrganizationConfigurationAsync(string detectorId, UpdateOrganizationConfigurationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/admin";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateOrganizationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disables an AWS account within the Organization as the GuardDuty delegated administrator.
		/// DisableOrganizationAdminAccount /admin/disable
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisableOrganizationAdminAccountResponse> DisableOrganizationAdminAccountAsync(DisableOrganizationAdminAccountBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/admin/disable";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisableOrganizationAdminAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates the current GuardDuty member account from its master account.
		/// DisassociateFromMasterAccount /detector/{detectorId}/master/disassociate
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty member account.</param>
		/// <returns>Success</returns>
		public async Task<DisassociateFromMasterAccountResponse> DisassociateFromMasterAccountAsync(string detectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/master/disassociate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisassociateFromMasterAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates GuardDuty member accounts (to the current GuardDuty master account) specified by the account IDs.
		/// DisassociateMembers /detector/{detectorId}/member/disassociate
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty account whose members you want to disassociate from the master account.</param>
		/// <returns>Success</returns>
		public async Task<DisassociateMembersResponse> DisassociateMembersAsync(string detectorId, DisassociateMembersBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/member/disassociate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisassociateMembersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enables an AWS account within the organization as the GuardDuty delegated administrator.
		/// EnableOrganizationAdminAccount /admin/enable
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EnableOrganizationAdminAccountResponse> EnableOrganizationAdminAccountAsync(EnableOrganizationAdminAccountBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/admin/enable";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EnableOrganizationAdminAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes Amazon GuardDuty findings specified by finding IDs.
		/// GetFindings /detector/{detectorId}/findings/get
		/// </summary>
		/// <param name="detectorId">The ID of the detector that specifies the GuardDuty service whose findings you want to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<GetFindingsResponse> GetFindingsAsync(string detectorId, GetFindingsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/findings/get";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetFindingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists Amazon GuardDuty findings statistics for the specified detector ID.
		/// GetFindingsStatistics /detector/{detectorId}/findings/statistics
		/// </summary>
		/// <param name="detectorId">The ID of the detector that specifies the GuardDuty service whose findings' statistics you want to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<GetFindingsStatisticsResponse> GetFindingsStatisticsAsync(string detectorId, GetFindingsStatisticsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/findings/statistics";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetFindingsStatisticsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the count of all GuardDuty membership invitations that were sent to the current member account except the currently accepted invitation.
		/// GetInvitationsCount /invitation/count
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInvitationsCountResponse> GetInvitationsCountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/invitation/count";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetInvitationsCountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves GuardDuty member accounts (to the current GuardDuty master account) specified by the account IDs.
		/// GetMembers /detector/{detectorId}/member/get
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty account whose members you want to retrieve.</param>
		/// <returns>Success</returns>
		public async Task<GetMembersResponse> GetMembersAsync(string detectorId, GetMembersBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/member/get";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetMembersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Invites other AWS accounts (created as members of the current AWS account by CreateMembers) to enable GuardDuty, and allow the current AWS account to view and manage these accounts' GuardDuty findings on their behalf as the master account.
		/// InviteMembers /detector/{detectorId}/member/invite
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty account that you want to invite members with.</param>
		/// <returns>Success</returns>
		public async Task<InviteMembersResponse> InviteMembersAsync(string detectorId, InviteMembersBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/member/invite";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InviteMembersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists Amazon GuardDuty findings for the specified detector ID.
		/// ListFindings /detector/{detectorId}/findings
		/// </summary>
		/// <param name="detectorId">The ID of the detector that specifies the GuardDuty service whose findings you want to list.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListFindingsResponse> ListFindingsAsync(string detectorId, string MaxResults, string NextToken, ListFindingsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/findings&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListFindingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all GuardDuty membership invitations that were sent to the current AWS account.
		/// ListInvitations /invitation
		/// </summary>
		/// <param name="maxResults">You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.</param>
		/// <param name="nextToken">You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInvitationsResponse> ListInvitationsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/invitation?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListInvitationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the accounts configured as GuardDuty delegated administrators.
		/// ListOrganizationAdminAccounts /admin
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return in the response.</param>
		/// <param name="nextToken">A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListOrganizationAdminAccountsResponse> ListOrganizationAdminAccountsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/admin?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListOrganizationAdminAccountsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists tags for a resource. Tagging is currently supported for detectors, finding filters, IP sets, and threat intel sets, with a limit of 50 tags per resource. When invoked, this operation returns all assigned tags for a given resource.
		/// ListTagsForResource /tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) for the given GuardDuty resource. </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds tags to a resource.
		/// TagResource /tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) for the GuardDuty resource to apply a tag to.</param>
		public async Task TagResourceAsync(string resourceArn, TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Turns on GuardDuty monitoring of the specified member accounts. Use this operation to restart monitoring of accounts that you stopped monitoring with the <code>StopMonitoringMembers</code> operation.
		/// StartMonitoringMembers /detector/{detectorId}/member/start
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector of the GuardDuty master account associated with the member accounts to monitor.</param>
		/// <returns>Success</returns>
		public async Task<StartMonitoringMembersResponse> StartMonitoringMembersAsync(string detectorId, StartMonitoringMembersBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/member/start";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartMonitoringMembersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops GuardDuty monitoring for the specified member accounts. Use the <code>StartMonitoringMembers</code> operation to restart monitoring for those accounts.
		/// StopMonitoringMembers /detector/{detectorId}/member/stop
		/// </summary>
		/// <param name="detectorId">The unique ID of the detector associated with the GuardDuty master account that is monitoring member accounts.</param>
		/// <returns>Success</returns>
		public async Task<StopMonitoringMembersResponse> StopMonitoringMembersAsync(string detectorId, StopMonitoringMembersBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/member/stop";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopMonitoringMembersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unarchives GuardDuty findings specified by the <code>findingIds</code>.
		/// UnarchiveFindings /detector/{detectorId}/findings/unarchive
		/// </summary>
		/// <param name="detectorId">The ID of the detector associated with the findings to unarchive.</param>
		/// <returns>Success</returns>
		public async Task<UnarchiveFindingsResponse> UnarchiveFindingsAsync(string detectorId, UnarchiveFindingsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/findings/unarchive";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UnarchiveFindingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes tags from a resource.
		/// UntagResource /tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) for the resource to remove tags from.</param>
		/// <param name="tagKeys">The tag keys to remove from the resource.</param>
		public async Task UntagResourceAsync(string resourceArn, TagKey[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn))+"#tagKeys&"+String.Join("&", tagKeys.Select(z => $"tagKeys={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Marks the specified GuardDuty findings as useful or not useful.
		/// UpdateFindingsFeedback /detector/{detectorId}/findings/feedback
		/// </summary>
		/// <param name="detectorId">The ID of the detector associated with the findings to update feedback for.</param>
		/// <returns>Success</returns>
		public async Task<UpdateFindingsFeedbackResponse> UpdateFindingsFeedbackAsync(string detectorId, UpdateFindingsFeedbackBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/detector/"+ (detectorId==null? "" : Uri.EscapeDataString(detectorId))+"/findings/feedback";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateFindingsFeedbackResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptInvitationBody
	{
		
		/// <summary>
		/// The account ID of the master GuardDuty account whose invitation you're accepting.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MasterId { get; set; }
		
		/// <summary>
		/// The value that is used to validate the master account to the member account.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InvitationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ArchiveFindingsBody
	{
		
		/// <summary>
		/// The IDs of the findings that you want to archive.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public FindingId[] FindingIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDetectorBody
	{
		
		/// <summary>
		/// A Boolean value that specifies whether the detector is to be enabled.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enable { get; set; }
		
		/// <summary>
		/// The idempotency token for the create request.
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// An enum value that specifies how frequently updated findings are exported.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateDetectorBodyFindingPublishingFrequency FindingPublishingFrequency { get; set; }
		
		/// <summary>
		/// The tags to be added to a new detector resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDetectorBodyFindingPublishingFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIFTEEN_MINUTES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_HOUR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIX_HOURS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateFilterBody
	{
		
		/// <summary>
		/// The name of the filter.
		/// Max length: 64
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the filter.
		/// Max length: 512
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Specifies the action that is to be applied to the findings that match the filter.
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateFilterBodyAction Action { get; set; }
		
		/// <summary>
		/// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for querying findings.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FindingCriteria { get; set; }
		
		/// <summary>
		/// The idempotency token for the create request.
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The tags to be added to a new filter resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateFilterBodyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOOP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateIPSetBody
	{
		
		/// <summary>
		/// <p>The user-friendly name to identify the IPSet.</p> <p> Allowed characters are alphanumerics, spaces, hyphens (-), and underscores (_).</p>
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The format of the file that contains the IPSet.
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateIPSetBodyFormat Format { get; set; }
		
		/// <summary>
		/// The URI of the file that contains the IPSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Location { get; set; }
		
		/// <summary>
		/// A Boolean value that indicates whether GuardDuty is to start using the uploaded IPSet.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Activate { get; set; }
		
		/// <summary>
		/// The idempotency token for the create request.
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The tags to be added to a new IP set resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateIPSetBodyFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STIX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTX_CSV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIEN_VAULT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROOF_POINT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRE_EYE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMembersBody
	{
		
		/// <summary>
		/// A list of account ID and email address pairs of the accounts that you want to associate with the master GuardDuty account.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountDetail[] AccountDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePublishingDestinationBody
	{
		
		/// <summary>
		/// The type of resource for the publishing destination. Currently only Amazon S3 buckets are supported.
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreatePublishingDestinationBodyDestinationType DestinationType { get; set; }
		
		/// <summary>
		/// Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationProperties { get; set; }
		
		/// <summary>
		/// The idempotency token for the request.
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreatePublishingDestinationBodyDestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSampleFindingsBody
	{
		
		/// <summary>
		/// The types of sample findings to generate.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public FindingType[] FindingTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateThreatIntelSetBody
	{
		
		/// <summary>
		/// A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet.
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The format of the file that contains the ThreatIntelSet.
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateThreatIntelSetBodyFormat Format { get; set; }
		
		/// <summary>
		/// The URI of the file that contains the ThreatIntelSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Location { get; set; }
		
		/// <summary>
		/// A Boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Activate { get; set; }
		
		/// <summary>
		/// The idempotency token for the create request.
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The tags to be added to a new threat list resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateThreatIntelSetBodyFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STIX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTX_CSV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIEN_VAULT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROOF_POINT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRE_EYE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeclineInvitationsBody
	{
		
		/// <summary>
		/// A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to decline invitations from.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountId[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDetectorBody
	{
		
		/// <summary>
		/// Specifies whether the detector is enabled or not enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enable { get; set; }
		
		/// <summary>
		/// An enum value that specifies how frequently findings are exported, such as to CloudWatch Events.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateDetectorBodyFindingPublishingFrequency FindingPublishingFrequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateDetectorBodyFindingPublishingFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIFTEEN_MINUTES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_HOUR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIX_HOURS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateFilterBody
	{
		
		/// <summary>
		/// The description of the filter.
		/// Max length: 512
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Specifies the action that is to be applied to the findings that match the filter.
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateFilterBodyAction Action { get; set; }
		
		/// <summary>
		/// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for querying findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FindingCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateFilterBodyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOOP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateIPSetBody
	{
		
		/// <summary>
		/// The unique ID that specifies the IPSet that you want to update.
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The updated URI of the file that contains the IPSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Location { get; set; }
		
		/// <summary>
		/// The updated Boolean value that specifies whether the IPSet is active or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Activate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteInvitationsBody
	{
		
		/// <summary>
		/// A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to delete invitations from.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountId[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteMembersBody
	{
		
		/// <summary>
		/// A list of account IDs of the GuardDuty member accounts that you want to delete.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountId[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePublishingDestinationBody
	{
		
		/// <summary>
		/// Contains the Amazon Resource Name (ARN) of the resource to publish to, such as an S3 bucket, and the ARN of the KMS key to use to encrypt published findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DestinationProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateThreatIntelSetBody
	{
		
		/// <summary>
		/// The unique ID that specifies the ThreatIntelSet that you want to update.
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The updated URI of the file that contains the ThreateIntelSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.
		/// Max length: 300
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=1)]
		public string Location { get; set; }
		
		/// <summary>
		/// The updated Boolean value that specifies whether the ThreateIntelSet is active or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Activate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateOrganizationConfigurationBody
	{
		
		/// <summary>
		/// Indicates whether to automatically enable member accounts in the organization.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool AutoEnable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableOrganizationAdminAccountBody
	{
		
		/// <summary>
		/// The AWS Account ID for the organizations account to be disabled as a GuardDuty delegated administrator.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AdminAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateMembersBody
	{
		
		/// <summary>
		/// A list of account IDs of the GuardDuty member accounts that you want to disassociate from the master account.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountId[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableOrganizationAdminAccountBody
	{
		
		/// <summary>
		/// The AWS Account ID for the organization account to be enabled as a GuardDuty delegated administrator.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AdminAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetFindingsBody
	{
		
		/// <summary>
		/// The IDs of the findings that you want to retrieve.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public FindingId[] FindingIds { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for sorting findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SortCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetFindingsStatisticsBody
	{
		
		/// <summary>
		/// The types of finding statistics to retrieve.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public FindingStatisticType[] FindingStatisticTypes { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for querying findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FindingCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMembersBody
	{
		
		/// <summary>
		/// A list of account IDs of the GuardDuty member accounts that you want to describe.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountId[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InviteMembersBody
	{
		
		/// <summary>
		/// A list of account IDs of the accounts that you want to invite to GuardDuty as members.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountId[] AccountIds { get; set; }
		
		/// <summary>
		/// A Boolean value that specifies whether you want to disable email notification to the accounts that you’re inviting to GuardDuty as members.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableEmailNotification { get; set; }
		
		/// <summary>
		/// The invitation message that you want to send to the accounts that you’re inviting to GuardDuty as members.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListFindingsBody
	{
		
		/// <summary>
		/// Contains information about the criteria used for querying findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FindingCriteria { get; set; }
		
		/// <summary>
		/// Contains information about the criteria used for sorting findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SortCriteria { get; set; }
		
		/// <summary>
		/// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		/// The tags to be added to a resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartMonitoringMembersBody
	{
		
		/// <summary>
		/// A list of account IDs of the GuardDuty member accounts to start monitoring.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountId[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopMonitoringMembersBody
	{
		
		/// <summary>
		/// A list of account IDs for the member accounts to stop monitoring.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AccountId[] AccountIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnarchiveFindingsBody
	{
		
		/// <summary>
		/// The IDs of the findings to unarchive.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public FindingId[] FindingIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateFindingsFeedbackBody
	{
		
		/// <summary>
		/// The IDs of the findings that you want to mark as useful or not useful.
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public FindingId[] FindingIds { get; set; }
		
		/// <summary>
		/// The feedback for the finding.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateFindingsFeedbackBodyFeedback Feedback { get; set; }
		
		/// <summary>
		/// Additional feedback about the GuardDuty findings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Comments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateFindingsFeedbackBodyFeedback
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USEFUL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_USEFUL = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
