//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFT_PHONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESK_PHONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeUserResponse
	{
		
		/// <summary>
		/// Contains information about a user account for a Amazon Connect instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeUserHierarchyGroupResponse
	{
		
		/// <summary>
		/// Contains information about a hierarchy group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HierarchyGroup HierarchyGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeUserHierarchyStructureResponse
	{
		
		/// <summary>
		/// Contains information about a hierarchy structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HierarchyStructure HierarchyStructure { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetContactAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attributes Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCurrentMetricDataResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CurrentMetricResult[] MetricResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DataSnapshotTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Grouping
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANNEL = 1,
	}
	
	/// <summary>
	/// Contains information about a real-time metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CurrentMetric
	{
		
		/// <summary>
		/// The current metric names.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CurrentMetricName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CurrentMetricUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CurrentMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENTS_ONLINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENTS_AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENTS_ON_CALL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENTS_NON_PRODUCTIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENTS_AFTER_CONTACT_WORK = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENTS_ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENTS_STAFFED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_IN_QUEUE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OLDEST_CONTACT_AGE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_SCHEDULED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENTS_ON_CONTACT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLOTS_ACTIVE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLOTS_AVAILABLE = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CurrentMetricUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetFederationTokenResponse
	{
		
		/// <summary>
		/// Contains credentials to use for federation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Credentials Credentials { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMetricDataResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HistoricalMetricResult[] MetricResults { get; set; }
	}
	
	/// <summary>
	/// Contains information about a historical metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HistoricalMetric
	{
		
		/// <summary>
		/// The historical metric names.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HistoricalMetricName Name { get; set; }
		
		/// <summary>
		/// Contains information about the threshold for service level metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Threshold Threshold { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HistoricalMetricStatistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HistoricalMetricUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HistoricalMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_HANDLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_ABANDONED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_CONSULTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_AGENT_HUNG_UP_FIRST = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_HANDLED_INCOMING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_HANDLED_OUTBOUND = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_HOLD_ABANDONS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_TRANSFERRED_IN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_TRANSFERRED_OUT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_TRANSFERRED_IN_FROM_QUEUE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_TRANSFERRED_OUT_FROM_QUEUE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_MISSED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALLBACK_CONTACTS_HANDLED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_CONTACTS_HANDLED = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCCUPANCY = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HANDLE_TIME = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFTER_CONTACT_WORK_TIME = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED_TIME = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON_TIME = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUE_ANSWER_TIME = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOLD_TIME = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERACTION_TIME = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERACTION_AND_HOLD_TIME = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_LEVEL = 24,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HistoricalMetricStatistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVG = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HistoricalMetricUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListContactFlowsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContactFlowSummary[] ContactFlowSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContactFlowType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACT_FLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_QUEUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_HOLD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_WHISPER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_HOLD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_WHISPER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTBOUND_WHISPER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_TRANSFER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUE_TRANSFER = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListHoursOfOperationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HoursOfOperationSummary[] HoursOfOperationSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPhoneNumbersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberSummary[] PhoneNumberSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOLL_FREE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DID = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberCountryCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DZ = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AI = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AQ = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AG = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AM = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AW = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZ = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BH = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BD = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BB = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BY = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BZ = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BJ = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BM = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BT = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BO = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BA = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BW = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BR = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IO = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VG = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BN = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BG = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BF = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BI = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KH = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CM = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CV = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KY = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CF = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TD = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CL = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CX = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CC = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KM = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CK = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CR = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HR = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CU = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CW = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CY = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CZ = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CD = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DK = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DJ = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DM = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DO = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TL = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EG = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SV = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GQ = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ER = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EE = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ET = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FK = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FO = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FJ = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FR = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PF = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GA = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GM = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GE = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DE = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GH = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GI = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GR = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GL = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GD = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GU = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GT = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GG = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GN = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GW = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GY = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HT = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HN = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HK = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HU = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IR = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IQ = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IE = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IM = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IL = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IT = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CI = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JM = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JP = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JE = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JO = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KZ = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KE = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KI = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KW = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KG = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LA = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LV = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LB = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LS = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LR = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LY = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LI = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LU = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MO = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MK = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MG = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MW = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MY = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MV = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ML = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MT = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MH = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MR = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MU = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YT = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MX = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FM = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MD = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MC = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MN = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ME = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MA = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MZ = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MM = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NA = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NR = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NP = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NL = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AN = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NC = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NZ = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NI = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NE = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NG = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NU = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KP = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OM = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PK = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PW = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PA = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PG = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PY = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PE = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PH = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PN = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PL = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PT = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PR = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QA = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CG = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RE = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RO = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RW = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BL = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SH = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KN = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LC = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MF = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PM = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VC = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WS = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SM = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ST = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SA = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SN = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RS = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SC = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SL = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SG = 190,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SX = 191,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SK = 192,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SI = 193,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SB = 194,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SO = 195,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZA = 196,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KR = 197,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ES = 198,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LK = 199,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SD = 200,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SR = 201,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SJ = 202,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SZ = 203,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SE = 204,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CH = 205,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SY = 206,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TW = 207,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TJ = 208,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TZ = 209,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TH = 210,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TG = 211,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TK = 212,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TO = 213,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TT = 214,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TN = 215,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TR = 216,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TM = 217,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TC = 218,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TV = 219,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VI = 220,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UG = 221,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UA = 222,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AE = 223,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GB = 224,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US = 225,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UY = 226,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UZ = 227,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VU = 228,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VA = 229,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VE = 230,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VN = 231,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WF = 232,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EH = 233,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YE = 234,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZM = 235,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZW = 236,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListQueuesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public QueueSummary[] QueueSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum QueueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListRoutingProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RoutingProfileSummary[] RoutingProfileSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSecurityProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityProfileSummary[] SecurityProfileSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUserHierarchyGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HierarchyGroupSummary[] UserHierarchyGroupSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUsersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UserSummary[] UserSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartChatContactResponse
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ContactId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ParticipantId { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string ParticipantToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartOutboundVoiceContactResponse
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ContactId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Channel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOICE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHAT = 1,
	}
	
	/// <summary>
	/// A chat message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChatMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ContentType { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Comparison
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT = 0,
	}
	
	/// <summary>
	/// Contains summary information about a contact flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContactFlowSummary
	{
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactFlowSummaryContactFlowType ContactFlowType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContactFlowSummaryContactFlowType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACT_FLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_QUEUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_HOLD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_WHISPER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_HOLD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_WHISPER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTBOUND_WHISPER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_TRANSFER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUE_TRANSFER = 8,
	}
	
	/// <summary>
	/// Contains information about the identity of a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserIdentityInfo
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
	}
	
	/// <summary>
	/// Contains information about the phone configuration settings for a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserPhoneConfig
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UserPhoneConfigPhoneType PhoneType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoAccept { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AfterContactWorkTimeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeskPhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserPhoneConfigPhoneType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFT_PHONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESK_PHONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUserRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d\S]{8,64}$/
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		/// <summary>
		/// Contains information about the identity of a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserIdentityInfo IdentityInfo { get; set; }
		
		/// <summary>
		/// Contains information about the phone configuration settings for a user.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UserPhoneConfig PhoneConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryUserId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public SecurityProfileId[] SecurityProfileIds { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoutingProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HierarchyGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Contains credentials to use for federation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Credentials
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AccessTokenExpiration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RefreshToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RefreshTokenExpiration { get; set; }
	}
	
	/// <summary>
	/// The current metric names.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CurrentMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENTS_ONLINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENTS_AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENTS_ON_CALL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENTS_NON_PRODUCTIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENTS_AFTER_CONTACT_WORK = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENTS_ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENTS_STAFFED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_IN_QUEUE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OLDEST_CONTACT_AGE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_SCHEDULED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENTS_ON_CONTACT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLOTS_ACTIVE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLOTS_AVAILABLE = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Unit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENT = 2,
	}
	
	/// <summary>
	/// Contains the data for a real-time metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CurrentMetricData
	{
		
		/// <summary>
		/// Contains information about a real-time metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CurrentMetric Metric { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// Contains information about the dimensions for a set of metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Dimensions
	{
		
		/// <summary>
		/// Contains information about a queue resource for which metrics are returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueueReference Queue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DimensionsChannel Channel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DimensionsChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOICE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHAT = 1,
	}
	
	/// <summary>
	/// Contains information about a set of real-time metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CurrentMetricResult
	{
		
		/// <summary>
		/// Contains information about the dimensions for a set of metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Dimensions Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CurrentMetricData[] Collections { get; set; }
	}
	
	/// <summary>
	/// Contains information about a hierarchy group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HierarchyGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LevelId { get; set; }
		
		/// <summary>
		/// Contains information about the levels of a hierarchy group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HierarchyPath HierarchyPath { get; set; }
	}
	
	/// <summary>
	/// Contains information about a hierarchy structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HierarchyStructure
	{
		
		/// <summary>
		/// Contains information about a hierarchy level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HierarchyLevel LevelOne { get; set; }
		
		/// <summary>
		/// Contains information about a hierarchy level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HierarchyLevel LevelTwo { get; set; }
		
		/// <summary>
		/// Contains information about a hierarchy level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HierarchyLevel LevelThree { get; set; }
		
		/// <summary>
		/// Contains information about a hierarchy level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HierarchyLevel LevelFour { get; set; }
		
		/// <summary>
		/// Contains information about a hierarchy level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HierarchyLevel LevelFive { get; set; }
	}
	
	/// <summary>
	/// Contains information about a user account for a Amazon Connect instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Contains information about the identity of a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserIdentityInfo IdentityInfo { get; set; }
		
		/// <summary>
		/// Contains information about the phone configuration settings for a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserPhoneConfig PhoneConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryUserId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public SecurityProfileId[] SecurityProfileIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoutingProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HierarchyGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Contains information about a queue resource for which metrics are returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class QueueReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Contains the filter to apply when retrieving metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Filters
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public QueueId[] Queues { get; set; }
		
		/// <summary>
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public Channel[] Channels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCurrentMetricDataRequest
	{
		
		/// <summary>
		/// Contains the filter to apply when retrieving metrics.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Filters Filters { get; set; }
		
		/// <summary>
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public Grouping[] Groupings { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CurrentMetric[] CurrentMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMetricDataRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Contains the filter to apply when retrieving metrics.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Filters Filters { get; set; }
		
		/// <summary>
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public Grouping[] Groupings { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HistoricalMetric[] HistoricalMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Contains information about the levels of a hierarchy group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HierarchyPath
	{
		
		/// <summary>
		/// Contains summary information about a hierarchy group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HierarchyGroupSummary LevelOne { get; set; }
		
		/// <summary>
		/// Contains summary information about a hierarchy group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HierarchyGroupSummary LevelTwo { get; set; }
		
		/// <summary>
		/// Contains summary information about a hierarchy group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HierarchyGroupSummary LevelThree { get; set; }
		
		/// <summary>
		/// Contains summary information about a hierarchy group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HierarchyGroupSummary LevelFour { get; set; }
		
		/// <summary>
		/// Contains summary information about a hierarchy group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HierarchyGroupSummary LevelFive { get; set; }
	}
	
	/// <summary>
	/// Contains summary information about a hierarchy group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HierarchyGroupSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Contains information about a hierarchy level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HierarchyLevel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The historical metric names.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HistoricalMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_HANDLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_ABANDONED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_CONSULTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_AGENT_HUNG_UP_FIRST = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_HANDLED_INCOMING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_HANDLED_OUTBOUND = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_HOLD_ABANDONS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_TRANSFERRED_IN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_TRANSFERRED_OUT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_TRANSFERRED_IN_FROM_QUEUE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_TRANSFERRED_OUT_FROM_QUEUE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_MISSED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALLBACK_CONTACTS_HANDLED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_CONTACTS_HANDLED = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCCUPANCY = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HANDLE_TIME = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFTER_CONTACT_WORK_TIME = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED_TIME = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON_TIME = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUE_ANSWER_TIME = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOLD_TIME = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERACTION_TIME = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERACTION_AND_HOLD_TIME = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_LEVEL = 24,
	}
	
	/// <summary>
	/// Contains information about the threshold for service level metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Threshold
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ThresholdComparison Comparison { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ThresholdValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ThresholdComparison
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Statistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVG = 2,
	}
	
	/// <summary>
	/// Contains the data for a historical metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HistoricalMetricData
	{
		
		/// <summary>
		/// Contains information about a historical metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HistoricalMetric Metric { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// Contains information about the historical metrics retrieved.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HistoricalMetricResult
	{
		
		/// <summary>
		/// Contains information about the dimensions for a set of metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Dimensions Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HistoricalMetricData[] Collections { get; set; }
	}
	
	/// <summary>
	/// Contains summary information about hours of operation for a contact center.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HoursOfOperationSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The customer's details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ParticipantDetails
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Contains summary information about a phone number for a contact center.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PhoneNumberSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberSummaryPhoneNumberType PhoneNumberType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberSummaryPhoneNumberCountryCode PhoneNumberCountryCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberSummaryPhoneNumberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOLL_FREE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DID = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberSummaryPhoneNumberCountryCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DZ = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AI = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AQ = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AG = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AM = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AW = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AU = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZ = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BH = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BD = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BB = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BY = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BZ = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BJ = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BM = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BT = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BO = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BA = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BW = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BR = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IO = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VG = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BN = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BG = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BF = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BI = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KH = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CM = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CV = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KY = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CF = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TD = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CL = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CN = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CX = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CC = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CO = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KM = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CK = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CR = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HR = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CU = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CW = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CY = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CZ = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CD = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DK = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DJ = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DM = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DO = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TL = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EG = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SV = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GQ = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ER = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EE = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ET = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FK = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FO = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FJ = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FI = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FR = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PF = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GA = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GM = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GE = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DE = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GH = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GI = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GR = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GL = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GD = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GU = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GT = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GG = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GN = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GW = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GY = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HT = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HN = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HK = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HU = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IR = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IQ = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IE = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IM = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IL = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IT = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CI = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JM = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JP = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JE = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JO = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KZ = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KE = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KI = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KW = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KG = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LA = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LV = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LB = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LS = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LR = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LY = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LI = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LU = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MO = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MK = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MG = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MW = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MY = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MV = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ML = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MT = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MH = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MR = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MU = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YT = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MX = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FM = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MD = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MC = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MN = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ME = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MA = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MZ = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MM = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NA = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NR = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NP = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NL = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AN = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NC = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NZ = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NI = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NE = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NG = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NU = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KP = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OM = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PK = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PW = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PA = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PG = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PY = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PE = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PH = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PN = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PL = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PT = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PR = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QA = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CG = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RE = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RO = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RU = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RW = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BL = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SH = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KN = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LC = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MF = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PM = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VC = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WS = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SM = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ST = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SA = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SN = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RS = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SC = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SL = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SG = 190,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SX = 191,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SK = 192,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SI = 193,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SB = 194,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SO = 195,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZA = 196,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KR = 197,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ES = 198,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LK = 199,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SD = 200,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SR = 201,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SJ = 202,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SZ = 203,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SE = 204,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CH = 205,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SY = 206,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TW = 207,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TJ = 208,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TZ = 209,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TH = 210,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TG = 211,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TK = 212,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TO = 213,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TT = 214,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TN = 215,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TR = 216,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TM = 217,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TC = 218,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TV = 219,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VI = 220,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UG = 221,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UA = 222,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AE = 223,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GB = 224,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US = 225,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UY = 226,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UZ = 227,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VU = 228,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VA = 229,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VE = 230,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VN = 231,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WF = 232,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EH = 233,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YE = 234,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZM = 235,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZW = 236,
	}
	
	/// <summary>
	/// Contains summary information about a queue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class QueueSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QueueSummaryQueueType QueueType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum QueueSummaryQueueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT = 1,
	}
	
	/// <summary>
	/// Contains summary information about a routing profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RoutingProfileSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Contains information about a security profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SecurityProfileSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartChatContactRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string ContactFlowId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attributes Attributes { get; set; }
		
		/// <summary>
		/// The customer's details.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ParticipantDetails ParticipantDetails { get; set; }
		
		/// <summary>
		/// A chat message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChatMessage InitialMessage { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartOutboundVoiceContactRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationPhoneNumber { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string ContactFlowId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourcePhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QueueId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attributes Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopContactRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ContactId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string InstanceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateContactAttributesRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string InitialContactId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string InstanceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Attributes Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserHierarchyRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HierarchyGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserIdentityInfoRequest
	{
		
		/// <summary>
		/// Contains information about the identity of a user.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UserIdentityInfo IdentityInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserPhoneConfigRequest
	{
		
		/// <summary>
		/// Contains information about the phone configuration settings for a user.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UserPhoneConfig PhoneConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserRoutingProfileRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoutingProfileId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserSecurityProfilesRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public SecurityProfileId[] SecurityProfileIds { get; set; }
	}
	
	/// <summary>
	/// Contains summary information about a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Username { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a user account for the specified Amazon Connect instance.
		/// CreateUser /users/{InstanceId}
		/// </summary>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <returns>Success</returns>
		public async Task<CreateUserResponse> CreateUserAsync(string InstanceId, CreateUserBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/users/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a user account from the specified Amazon Connect instance.
		/// DeleteUser /users/{InstanceId}/{UserId}
		/// </summary>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <param name="UserId">The identifier of the user.</param>
		/// <returns>Success</returns>
		public async Task DeleteUserAsync(string InstanceId, string UserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/users/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"/"+ (UserId==null? "" : Uri.EscapeDataString(UserId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified user account. You can find the instance ID in the console (it’s the final part of the ARN). The console does not display the user IDs. Instead, list the users and note the IDs provided in the output.
		/// DescribeUser /users/{InstanceId}/{UserId}
		/// </summary>
		/// <param name="UserId">The identifier of the user account.</param>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <returns>Success</returns>
		public async Task<DescribeUserResponse> DescribeUserAsync(string UserId, string InstanceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/users/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"/"+ (UserId==null? "" : Uri.EscapeDataString(UserId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified hierarchy group.
		/// DescribeUserHierarchyGroup /user-hierarchy-groups/{InstanceId}/{HierarchyGroupId}
		/// </summary>
		/// <param name="HierarchyGroupId">The identifier of the hierarchy group.</param>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <returns>Success</returns>
		public async Task<DescribeUserHierarchyGroupResponse> DescribeUserHierarchyGroupAsync(string HierarchyGroupId, string InstanceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/user-hierarchy-groups/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"/"+ (HierarchyGroupId==null? "" : Uri.EscapeDataString(HierarchyGroupId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeUserHierarchyGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the hierarchy structure of the specified Amazon Connect instance.
		/// DescribeUserHierarchyStructure /user-hierarchy-structure/{InstanceId}
		/// </summary>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <returns>Success</returns>
		public async Task<DescribeUserHierarchyStructureResponse> DescribeUserHierarchyStructureAsync(string InstanceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/user-hierarchy-structure/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeUserHierarchyStructureResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the contact attributes for the specified contact.
		/// GetContactAttributes /contact/attributes/{InstanceId}/{InitialContactId}
		/// </summary>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <param name="InitialContactId">The identifier of the initial contact.</param>
		/// <returns>Success</returns>
		public async Task<GetContactAttributesResponse> GetContactAttributesAsync(string InstanceId, string InitialContactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/contact/attributes/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"/"+ (InitialContactId==null? "" : Uri.EscapeDataString(InitialContactId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetContactAttributesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the real-time metric data from the specified Amazon Connect instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/real-time-metrics-reports.html">Real-time Metrics Reports</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
		/// GetCurrentMetricData /metrics/current/{InstanceId}
		/// </summary>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetCurrentMetricDataResponse> GetCurrentMetricDataAsync(string InstanceId, string MaxResults, string NextToken, GetCurrentMetricDataBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/metrics/current/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetCurrentMetricDataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a token for federation.
		/// GetFederationToken /user/federate/{InstanceId}
		/// </summary>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <returns>Success</returns>
		public async Task<GetFederationTokenResponse> GetFederationTokenAsync(string InstanceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/user/federate/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetFederationTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets historical metric data from the specified Amazon Connect instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/historical-metrics.html">Historical Metrics Reports</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
		/// GetMetricData /metrics/historical/{InstanceId}
		/// </summary>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetMetricDataResponse> GetMetricDataAsync(string InstanceId, string MaxResults, string NextToken, GetMetricDataBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/metrics/historical/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetMetricDataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides information about the contact flows for the specified Amazon Connect instance.
		/// ListContactFlows /contact-flows-summary/{InstanceId}
		/// </summary>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <param name="contactFlowTypes">The type of contact flow.</param>
		/// <param name="nextToken">The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximimum number of results to return per page.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListContactFlowsResponse> ListContactFlowsAsync(string InstanceId, ContactFlowType[] contactFlowTypes, string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/contact-flows-summary/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&"+String.Join("&", contactFlowTypes.Select(z => $"contactFlowTypes={z}"))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListContactFlowsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides information about the hours of operation for the specified Amazon Connect instance.
		/// ListHoursOfOperations /hours-of-operations-summary/{InstanceId}
		/// </summary>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <param name="nextToken">The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximimum number of results to return per page.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListHoursOfOperationsResponse> ListHoursOfOperationsAsync(string InstanceId, string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/hours-of-operations-summary/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListHoursOfOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides information about the phone numbers for the specified Amazon Connect instance.
		/// ListPhoneNumbers /phone-numbers-summary/{InstanceId}
		/// </summary>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <param name="phoneNumberTypes">The type of phone number.</param>
		/// <param name="phoneNumberCountryCodes">The ISO country code.</param>
		/// <param name="nextToken">The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximimum number of results to return per page.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPhoneNumbersResponse> ListPhoneNumbersAsync(string InstanceId, PhoneNumberType[] phoneNumberTypes, PhoneNumberCountryCode[] phoneNumberCountryCodes, string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/phone-numbers-summary/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&"+String.Join("&", phoneNumberTypes.Select(z => $"phoneNumberTypes={z}"))+"&"+String.Join("&", phoneNumberCountryCodes.Select(z => $"phoneNumberCountryCodes={z}"))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPhoneNumbersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides information about the queues for the specified Amazon Connect instance.
		/// ListQueues /queues-summary/{InstanceId}
		/// </summary>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <param name="queueTypes">The type of queue.</param>
		/// <param name="nextToken">The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximimum number of results to return per page.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListQueuesResponse> ListQueuesAsync(string InstanceId, QueueType[] queueTypes, string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/queues-summary/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&"+String.Join("&", queueTypes.Select(z => $"queueTypes={z}"))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListQueuesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides summary information about the routing profiles for the specified Amazon Connect instance.
		/// ListRoutingProfiles /routing-profiles-summary/{InstanceId}
		/// </summary>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <param name="nextToken">The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximimum number of results to return per page.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRoutingProfilesResponse> ListRoutingProfilesAsync(string InstanceId, string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/routing-profiles-summary/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListRoutingProfilesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides summary information about the security profiles for the specified Amazon Connect instance.
		/// ListSecurityProfiles /security-profiles-summary/{InstanceId}
		/// </summary>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <param name="nextToken">The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximimum number of results to return per page.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSecurityProfilesResponse> ListSecurityProfilesAsync(string InstanceId, string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/security-profiles-summary/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListSecurityProfilesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags for the specified resource.
		/// ListTagsForResource /tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds the specified tags to the specified resource.</p> <p>The supported resource type is users.</p>
		/// TagResource /tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <returns>Success</returns>
		public async Task TagResourceAsync(string resourceArn, TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides summary information about the hierarchy groups for the specified Amazon Connect instance.
		/// ListUserHierarchyGroups /user-hierarchy-groups-summary/{InstanceId}
		/// </summary>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <param name="nextToken">The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximimum number of results to return per page.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListUserHierarchyGroupsResponse> ListUserHierarchyGroupsAsync(string InstanceId, string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/user-hierarchy-groups-summary/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListUserHierarchyGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides summary information about the users for the specified Amazon Connect instance.
		/// ListUsers /users-summary/{InstanceId}
		/// </summary>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <param name="nextToken">The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</param>
		/// <param name="maxResults">The maximimum number of results to return per page.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListUsersResponse> ListUsersAsync(string InstanceId, string nextToken, int maxResults, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/users-summary/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListUsersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Initiates a contact flow to start a new chat for the customer. Response of this API provides a token required to obtain credentials from the <a href="https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html">CreateParticipantConnection</a> API in the Amazon Connect Participant Service.</p> <p>When a new chat contact is successfully created, clients need to subscribe to the participant’s connection for the created chat within 5 minutes. This is achieved by invoking <a href="https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_CreateParticipantConnection.html">CreateParticipantConnection</a> with WEBSOCKET and CONNECTION_CREDENTIALS. </p>
		/// StartChatContact /contact/chat
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartChatContactResponse> StartChatContactAsync(StartChatContactBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/contact/chat";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartChatContactResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Initiates a contact flow to place an outbound call to a customer.</p> <p>There is a 60 second dialing timeout for this operation. If the call is not connected after 60 seconds, it fails.</p>
		/// StartOutboundVoiceContact /contact/outbound-voice
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartOutboundVoiceContactResponse> StartOutboundVoiceContactAsync(StartOutboundVoiceContactBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/contact/outbound-voice";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartOutboundVoiceContactResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Ends the specified contact.
		/// StopContact /contact/stop
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopContactResponse> StopContactAsync(StopContactBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/contact/stop";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopContactResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from the specified resource.
		/// UntagResource /tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <param name="tagKeys">The tag keys.</param>
		/// <returns>Success</returns>
		public async Task UntagResourceAsync(string resourceArn, TagKey[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn))+"#tagKeys&"+String.Join("&", tagKeys.Select(z => $"tagKeys={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates the contact attributes associated with the specified contact.</p> <p>You can add or update attributes for both ongoing and completed contacts. For example, you can update the customer's name or the reason the customer called while the call is active, or add notes about steps that the agent took during the call that are displayed to the next agent that takes the call. You can also update attributes for a contact using data from your CRM application and save the data with the contact in Amazon Connect. You could also flag calls for additional analysis, such as legal review or identifying abusive callers.</p> <p>Contact attributes are available in Amazon Connect for 24 months, and are then deleted.</p> <p> <b>Important:</b> You cannot use the operation to update attributes for contacts that occurred prior to the release of the API, September 12, 2018. You can update attributes only for contacts that started after the release of the API. If you attempt to update attributes for a contact that occurred prior to the release of the API, a 400 error is returned. This applies also to queued callbacks that were initiated prior to the release of the API but are still active in your instance.</p>
		/// UpdateContactAttributes /contact/attributes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateContactAttributesResponse> UpdateContactAttributesAsync(UpdateContactAttributesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/contact/attributes";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateContactAttributesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Assigns the specified hierarchy group to the specified user.
		/// UpdateUserHierarchy /users/{InstanceId}/{UserId}/hierarchy
		/// </summary>
		/// <param name="UserId">The identifier of the user account.</param>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <returns>Success</returns>
		public async Task UpdateUserHierarchyAsync(string UserId, string InstanceId, UpdateUserHierarchyBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/users/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"/"+ (UserId==null? "" : Uri.EscapeDataString(UserId))+"/hierarchy";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the identity information for the specified user.
		/// UpdateUserIdentityInfo /users/{InstanceId}/{UserId}/identity-info
		/// </summary>
		/// <param name="UserId">The identifier of the user account.</param>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <returns>Success</returns>
		public async Task UpdateUserIdentityInfoAsync(string UserId, string InstanceId, UpdateUserIdentityInfoBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/users/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"/"+ (UserId==null? "" : Uri.EscapeDataString(UserId))+"/identity-info";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the phone configuration settings for the specified user.
		/// UpdateUserPhoneConfig /users/{InstanceId}/{UserId}/phone-config
		/// </summary>
		/// <param name="UserId">The identifier of the user account.</param>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <returns>Success</returns>
		public async Task UpdateUserPhoneConfigAsync(string UserId, string InstanceId, UpdateUserPhoneConfigBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/users/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"/"+ (UserId==null? "" : Uri.EscapeDataString(UserId))+"/phone-config";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Assigns the specified routing profile to the specified user.
		/// UpdateUserRoutingProfile /users/{InstanceId}/{UserId}/routing-profile
		/// </summary>
		/// <param name="UserId">The identifier of the user account.</param>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <returns>Success</returns>
		public async Task UpdateUserRoutingProfileAsync(string UserId, string InstanceId, UpdateUserRoutingProfileBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/users/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"/"+ (UserId==null? "" : Uri.EscapeDataString(UserId))+"/routing-profile";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Assigns the specified security profiles to the specified user.
		/// UpdateUserSecurityProfiles /users/{InstanceId}/{UserId}/security-profiles
		/// </summary>
		/// <param name="UserId">The identifier of the user account.</param>
		/// <param name="InstanceId">The identifier of the Amazon Connect instance.</param>
		/// <returns>Success</returns>
		public async Task UpdateUserSecurityProfilesAsync(string UserId, string InstanceId, UpdateUserSecurityProfilesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/users/"+ (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"/"+ (UserId==null? "" : Uri.EscapeDataString(UserId))+"/security-profiles";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUserBody
	{
		
		/// <summary>
		/// The user name for the account. For instances not using SAML for identity management, the user name can include up to 20 characters. If you are using SAML for identity management, the user name can include up to 64 characters from [a-zA-Z0-9_-.\@]+.
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.
		/// Pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d\S]{8,64}$/
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		/// <summary>
		/// Contains information about the identity of a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IdentityInfo { get; set; }
		
		/// <summary>
		/// Contains information about the phone configuration settings for a user.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhoneConfig { get; set; }
		
		/// <summary>
		/// <p>The identifier of the user account in the directory used for identity management. If Amazon Connect cannot access the directory, you can specify this identifier to authenticate users. If you include the identifier, we assume that Amazon Connect cannot access the directory. Otherwise, the identity information is used to authenticate users from your directory.</p> <p>This parameter is required if you are using an existing directory for identity management in Amazon Connect when Amazon Connect cannot access your directory to authenticate users. If you are using SAML for identity management and include this parameter, an error is returned.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryUserId { get; set; }
		
		/// <summary>
		/// The identifier of the security profile for the user.
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public SecurityProfileId[] SecurityProfileIds { get; set; }
		
		/// <summary>
		/// The identifier of the routing profile for the user.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoutingProfileId { get; set; }
		
		/// <summary>
		/// The identifier of the hierarchy group for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HierarchyGroupId { get; set; }
		
		/// <summary>
		/// One or more tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCurrentMetricDataBody
	{
		
		/// <summary>
		/// Contains the filter to apply when retrieving metrics.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Filters { get; set; }
		
		/// <summary>
		/// <p>The grouping applied to the metrics returned. For example, when grouped by <code>QUEUE</code>, the metrics returned apply to each queue rather than aggregated for all queues. If you group by <code>CHANNEL</code>, you should include a Channels filter. The only supported channel is <code>VOICE</code>.</p> <p>If no <code>Grouping</code> is included in the request, a summary of metrics is returned.</p>
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public Grouping[] Groupings { get; set; }
		
		/// <summary>
		/// <p>The metrics to retrieve. Specify the name and unit for each metric. The following metrics are available:</p> <dl> <dt>AGENTS_AFTER_CONTACT_WORK</dt> <dd> <p>Unit: COUNT</p> </dd> <dt>AGENTS_AVAILABLE</dt> <dd> <p>Unit: COUNT</p> </dd> <dt>AGENTS_ERROR</dt> <dd> <p>Unit: COUNT</p> </dd> <dt>AGENTS_NON_PRODUCTIVE</dt> <dd> <p>Unit: COUNT</p> </dd> <dt>AGENTS_ON_CALL</dt> <dd> <p>Unit: COUNT</p> </dd> <dt>AGENTS_ON_CONTACT</dt> <dd> <p>Unit: COUNT</p> </dd> <dt>AGENTS_ONLINE</dt> <dd> <p>Unit: COUNT</p> </dd> <dt>AGENTS_STAFFED</dt> <dd> <p>Unit: COUNT</p> </dd> <dt>CONTACTS_IN_QUEUE</dt> <dd> <p>Unit: COUNT</p> </dd> <dt>CONTACTS_SCHEDULED</dt> <dd> <p>Unit: COUNT</p> </dd> <dt>OLDEST_CONTACT_AGE</dt> <dd> <p>Unit: SECONDS</p> </dd> <dt>SLOTS_ACTIVE</dt> <dd> <p>Unit: COUNT</p> </dd> <dt>SLOTS_AVAILABLE</dt> <dd> <p>Unit: COUNT</p> </dd> </dl>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CurrentMetric[] CurrentMetrics { get; set; }
		
		/// <summary>
		/// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p> <p>The token expires after 5 minutes from the time it is created. Subsequent requests that use the token must use the same request parameters as the request that generated the token.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximimum number of results to return per page.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMetricDataBody
	{
		
		/// <summary>
		/// <p>The timestamp, in UNIX Epoch time format, at which to start the reporting interval for the retrieval of historical metrics data. The time must be specified using a multiple of 5 minutes, such as 10:05, 10:10, 10:15.</p> <p>The start time cannot be earlier than 24 hours before the time of the request. Historical metrics are available only for 24 hours.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// <p>The timestamp, in UNIX Epoch time format, at which to end the reporting interval for the retrieval of historical metrics data. The time must be specified using an interval of 5 minutes, such as 11:00, 11:05, 11:10, and must be later than the start time timestamp.</p> <p>The time range between the start and end time must be less than 24 hours.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Contains the filter to apply when retrieving metrics.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Filters { get; set; }
		
		/// <summary>
		/// <p>The grouping applied to the metrics returned. For example, when results are grouped by queue, the metrics returned are grouped by queue. The values returned apply to the metrics for each queue rather than aggregated for all queues.</p> <p>The only supported grouping is <code>QUEUE</code>.</p> <p>If no grouping is specified, a summary of metrics for all queues is returned.</p>
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public Grouping[] Groupings { get; set; }
		
		/// <summary>
		/// <p>The metrics to retrieve. Specify the name, unit, and statistic for each metric. The following historical metrics are available:</p> <dl> <dt>ABANDON_TIME</dt> <dd> <p>Unit: SECONDS</p> <p>Statistic: AVG</p> </dd> <dt>AFTER_CONTACT_WORK_TIME</dt> <dd> <p>Unit: SECONDS</p> <p>Statistic: AVG</p> </dd> <dt>API_CONTACTS_HANDLED</dt> <dd> <p>Unit: COUNT</p> <p>Statistic: SUM</p> </dd> <dt>CALLBACK_CONTACTS_HANDLED</dt> <dd> <p>Unit: COUNT</p> <p>Statistic: SUM</p> </dd> <dt>CONTACTS_ABANDONED</dt> <dd> <p>Unit: COUNT</p> <p>Statistic: SUM</p> </dd> <dt>CONTACTS_AGENT_HUNG_UP_FIRST</dt> <dd> <p>Unit: COUNT</p> <p>Statistic: SUM</p> </dd> <dt>CONTACTS_CONSULTED</dt> <dd> <p>Unit: COUNT</p> <p>Statistic: SUM</p> </dd> <dt>CONTACTS_HANDLED</dt> <dd> <p>Unit: COUNT</p> <p>Statistic: SUM</p> </dd> <dt>CONTACTS_HANDLED_INCOMING</dt> <dd> <p>Unit: COUNT</p> <p>Statistic: SUM</p> </dd> <dt>CONTACTS_HANDLED_OUTBOUND</dt> <dd> <p>Unit: COUNT</p> <p>Statistic: SUM</p> </dd> <dt>CONTACTS_HOLD_ABANDONS</dt> <dd> <p>Unit: COUNT</p> <p>Statistic: SUM</p> </dd> <dt>CONTACTS_MISSED</dt> <dd> <p>Unit: COUNT</p> <p>Statistic: SUM</p> </dd> <dt>CONTACTS_QUEUED</dt> <dd> <p>Unit: COUNT</p> <p>Statistic: SUM</p> </dd> <dt>CONTACTS_TRANSFERRED_IN</dt> <dd> <p>Unit: COUNT</p> <p>Statistic: SUM</p> </dd> <dt>CONTACTS_TRANSFERRED_IN_FROM_QUEUE</dt> <dd> <p>Unit: COUNT</p> <p>Statistic: SUM</p> </dd> <dt>CONTACTS_TRANSFERRED_OUT</dt> <dd> <p>Unit: COUNT</p> <p>Statistic: SUM</p> </dd> <dt>CONTACTS_TRANSFERRED_OUT_FROM_QUEUE</dt> <dd> <p>Unit: COUNT</p> <p>Statistic: SUM</p> </dd> <dt>HANDLE_TIME</dt> <dd> <p>Unit: SECONDS</p> <p>Statistic: AVG</p> </dd> <dt>HOLD_TIME</dt> <dd> <p>Unit: SECONDS</p> <p>Statistic: AVG</p> </dd> <dt>INTERACTION_AND_HOLD_TIME</dt> <dd> <p>Unit: SECONDS</p> <p>Statistic: AVG</p> </dd> <dt>INTERACTION_TIME</dt> <dd> <p>Unit: SECONDS</p> <p>Statistic: AVG</p> </dd> <dt>OCCUPANCY</dt> <dd> <p>Unit: PERCENT</p> <p>Statistic: AVG</p> </dd> <dt>QUEUE_ANSWER_TIME</dt> <dd> <p>Unit: SECONDS</p> <p>Statistic: AVG</p> </dd> <dt>QUEUED_TIME</dt> <dd> <p>Unit: SECONDS</p> <p>Statistic: MAX</p> </dd> <dt>SERVICE_LEVEL</dt> <dd> <p>Unit: PERCENT</p> <p>Statistic: AVG</p> <p>Threshold: Only "Less than" comparisons are supported, with the following service level thresholds: 15, 20, 25, 30, 45, 60, 90, 120, 180, 240, 300, 600</p> </dd> </dl>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HistoricalMetric[] HistoricalMetrics { get; set; }
		
		/// <summary>
		/// The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximimum number of results to return per page.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		/// One or more tags. For example, { "tags": {"key1":"value1", "key2":"value2"} }.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartChatContactBody
	{
		
		/// <summary>
		/// The identifier of the Amazon Connect instance.
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// The identifier of the contact flow for the chat.
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string ContactFlowId { get; set; }
		
		/// <summary>
		/// <p>A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes. </p> <p>There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys can include only alphanumeric, dash, and underscore characters.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Attributes { get; set; }
		
		/// <summary>
		/// The customer's details.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParticipantDetails { get; set; }
		
		/// <summary>
		/// A chat message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InitialMessage { get; set; }
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartOutboundVoiceContactBody
	{
		
		/// <summary>
		/// The phone number of the customer, in E.164 format.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationPhoneNumber { get; set; }
		
		/// <summary>
		/// The identifier of the contact flow for the outbound call.
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string ContactFlowId { get; set; }
		
		/// <summary>
		/// The identifier of the Amazon Connect instance.
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. The token is valid for 7 days after creation. If a contact is already started, the contact ID is returned. If the contact is disconnected, a new contact is started.
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourcePhoneNumber { get; set; }
		
		/// <summary>
		/// The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the contact flow is used. If you do not specify a queue, you must specify a source phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string QueueId { get; set; }
		
		/// <summary>
		/// <p>A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.</p> <p>There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys can include only alphanumeric, dash, and underscore characters.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopContactBody
	{
		
		/// <summary>
		/// The ID of the contact.
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ContactId { get; set; }
		
		/// <summary>
		/// The identifier of the Amazon Connect instance.
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string InstanceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateContactAttributesBody
	{
		
		/// <summary>
		/// The identifier of the contact. This is the identifier of the contact associated with the first interaction with the contact center.
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string InitialContactId { get; set; }
		
		/// <summary>
		/// The identifier of the Amazon Connect instance.
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// <p>The Amazon Connect attributes. These attributes can be accessed in contact flows just like any other contact attributes.</p> <p>You can have up to 32,768 UTF-8 bytes across all attributes for a contact. Attribute keys can include only alphanumeric, dash, and underscore characters.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserHierarchyBody
	{
		
		/// <summary>
		/// The identifier of the hierarchy group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HierarchyGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserIdentityInfoBody
	{
		
		/// <summary>
		/// Contains information about the identity of a user.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IdentityInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserPhoneConfigBody
	{
		
		/// <summary>
		/// Contains information about the phone configuration settings for a user.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhoneConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserRoutingProfileBody
	{
		
		/// <summary>
		/// The identifier of the routing profile for the user.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoutingProfileId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserSecurityProfilesBody
	{
		
		/// <summary>
		/// The identifiers of the security profiles for the user.
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public SecurityProfileId[] SecurityProfileIds { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
