//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An object representing an Amazon Cognito identity pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IdentityPool
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w\s+=,.@-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IdentityPoolName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool AllowUnauthenticatedIdentities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowClassicFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityProviders SupportedLoginProviders { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DeveloperProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ARNString[] OpenIdConnectProviderARNs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CognitoIdentityProvider[] CognitoIdentityProviders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ARNString[] SamlProviderARNs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityPoolTagsType IdentityPoolTags { get; set; }
	}
	
	/// <summary>
	/// Input to the CreateIdentityPool action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateIdentityPoolInput
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w\s+=,.@-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IdentityPoolName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool AllowUnauthenticatedIdentities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowClassicFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityProviders SupportedLoginProviders { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DeveloperProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ARNString[] OpenIdConnectProviderARNs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CognitoIdentityProvider[] CognitoIdentityProviders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ARNString[] SamlProviderARNs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityPoolTagsType IdentityPoolTags { get; set; }
	}
	
	/// <summary>
	/// Returned in response to a successful <code>DeleteIdentities</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteIdentitiesResponse
	{
		
		/// <summary>
		/// Maximum items: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public UnprocessedIdentityId[] UnprocessedIdentityIds { get; set; }
	}
	
	/// <summary>
	/// Input to the <code>DeleteIdentities</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteIdentitiesInput
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 60
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public IdentityId[] IdentityIdsToDelete { get; set; }
	}
	
	/// <summary>
	/// Input to the DeleteIdentityPool action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteIdentityPoolInput
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityPoolId { get; set; }
	}
	
	/// <summary>
	/// A description of the identity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IdentityDescription
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityProviderName[] Logins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
	}
	
	/// <summary>
	/// Input to the <code>DescribeIdentity</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIdentityInput
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityId { get; set; }
	}
	
	/// <summary>
	/// Input to the DescribeIdentityPool action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIdentityPoolInput
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityPoolId { get; set; }
	}
	
	/// <summary>
	/// Returned in response to a successful <code>GetCredentialsForIdentity</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCredentialsForIdentityResponse
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityId { get; set; }
		
		/// <summary>
		/// Credentials for the provided identity ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Credentials Credentials { get; set; }
	}
	
	/// <summary>
	/// Input to the <code>GetCredentialsForIdentity</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCredentialsForIdentityInput
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoginsMap Logins { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CustomRoleArn { get; set; }
	}
	
	/// <summary>
	/// Returned in response to a GetId request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetIdResponse
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityId { get; set; }
	}
	
	/// <summary>
	/// Input to the GetId action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetIdInput
	{
		
		/// <summary>
		/// Max length: 15
		/// Min length: 1
		/// Pattern: \d+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(15, MinimumLength=1)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoginsMap Logins { get; set; }
	}
	
	/// <summary>
	/// Returned in response to a successful <code>GetIdentityPoolRoles</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetIdentityPoolRolesResponse
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RolesMap Roles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RoleMappingMap RoleMappings { get; set; }
	}
	
	/// <summary>
	/// Input to the <code>GetIdentityPoolRoles</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetIdentityPoolRolesInput
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityPoolId { get; set; }
	}
	
	/// <summary>
	/// Returned in response to a successful GetOpenIdToken request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOpenIdTokenResponse
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// Input to the GetOpenIdToken action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOpenIdTokenInput
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoginsMap Logins { get; set; }
	}
	
	/// <summary>
	/// Returned in response to a successful <code>GetOpenIdTokenForDeveloperIdentity</code> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOpenIdTokenForDeveloperIdentityResponse
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// Input to the <code>GetOpenIdTokenForDeveloperIdentity</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOpenIdTokenForDeveloperIdentityInput
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityPoolId { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoginsMap Logins { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 86400
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 86400)]
		public System.Nullable<System.Int32> TokenDuration { get; set; }
	}
	
	/// <summary>
	/// The response to a ListIdentities request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListIdentitiesResponse
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityDescription[] Identities { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Input to the ListIdentities action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListIdentitiesInput
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityPoolId { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 60
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 60)]
		public int MaxResults { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HideDisabled { get; set; }
	}
	
	/// <summary>
	/// The result of a successful ListIdentityPools action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListIdentityPoolsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityPoolShortDescription[] IdentityPools { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Input to the ListIdentityPools action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListIdentityPoolsInput
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 60
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 60)]
		public int MaxResults { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityPoolTagsType Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceInput
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ResourceArn { get; set; }
	}
	
	/// <summary>
	/// Returned in response to a successful <code>LookupDeveloperIdentity</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LookupDeveloperIdentityResponse
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeveloperUserIdentifier[] DeveloperUserIdentifierList { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Input to the <code>LookupDeveloperIdentityInput</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LookupDeveloperIdentityInput
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityPoolId { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityId { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string DeveloperUserIdentifier { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 60)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returned in response to a successful <code>MergeDeveloperIdentities</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MergeDeveloperIdentitiesResponse
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityId { get; set; }
	}
	
	/// <summary>
	/// Input to the <code>MergeDeveloperIdentities</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MergeDeveloperIdentitiesInput
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string SourceUserIdentifier { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string DestinationUserIdentifier { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DeveloperProviderName { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityPoolId { get; set; }
	}
	
	/// <summary>
	/// Input to the <code>SetIdentityPoolRoles</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetIdentityPoolRolesInput
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityPoolId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RolesMap Roles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RoleMappingMap RoleMappings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceInput
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ResourceArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IdentityPoolTagsType Tags { get; set; }
	}
	
	/// <summary>
	/// Input to the <code>UnlinkDeveloperIdentity</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnlinkDeveloperIdentityInput
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityId { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DeveloperProviderName { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string DeveloperUserIdentifier { get; set; }
	}
	
	/// <summary>
	/// Input to the UnlinkIdentity action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnlinkIdentityInput
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoginsMap Logins { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IdentityProviderName[] LoginsToRemove { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceInput
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ResourceArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagKeysType[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AmbiguousRoleResolutionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AuthenticatedRole = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deny = 1,
	}
	
	/// <summary>
	/// A provider representing an Amazon Cognito user pool and its client ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CognitoIdentityProvider
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w._:/-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ServerSideTokenCheck { get; set; }
	}
	
	/// <summary>
	/// Credentials for the provided identity ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Credentials
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccessKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecretKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SessionToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Expiration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccessDenied = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalServerError = 1,
	}
	
	/// <summary>
	/// A description of the identity pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IdentityPoolShortDescription
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w\s+=,.@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IdentityPoolName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MappingRuleMatchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equals = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Contains = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartsWith = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotEqual = 3,
	}
	
	/// <summary>
	/// A rule that maps a claim name, a claim value, and a match type to a role ARN.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MappingRule
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Claim { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MappingRuleMatchType MatchType { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Value { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MappingRuleMatchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equals = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Contains = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartsWith = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotEqual = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RoleMappingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Token = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rules = 1,
	}
	
	/// <summary>
	/// A container for rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RulesConfigurationType
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public MappingRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// A role mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RoleMapping
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RoleMappingType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RoleMappingAmbiguousRoleResolution AmbiguousRoleResolution { get; set; }
		
		/// <summary>
		/// A container for rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RulesConfigurationType RulesConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RoleMappingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Token = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rules = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RoleMappingAmbiguousRoleResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AuthenticatedRole = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deny = 1,
	}
	
	/// <summary>
	/// An array of UnprocessedIdentityId objects, each of which contains an ErrorCode and IdentityId.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnprocessedIdentityId
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+:[0-9a-f-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string IdentityId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UnprocessedIdentityIdErrorCode ErrorCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UnprocessedIdentityIdErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccessDenied = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalServerError = 1,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Creates a new identity pool. The identity pool is a store of user identity information that is specific to your AWS account. The keys for <code>SupportedLoginProviders</code> are as follows:</p> <ul> <li> <p>Facebook: <code>graph.facebook.com</code> </p> </li> <li> <p>Google: <code>accounts.google.com</code> </p> </li> <li> <p>Amazon: <code>www.amazon.com</code> </p> </li> <li> <p>Twitter: <code>api.twitter.com</code> </p> </li> <li> <p>Digits: <code>www.digits.com</code> </p> </li> </ul> <p>You must use AWS Developer credentials to call this API.</p>
		/// CreateIdentityPool /#X-Amz-Target=AWSCognitoIdentityService.CreateIdentityPool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<IdentityPool> CreateIdentityPoolAsync(CreateIdentityPoolInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.CreateIdentityPool";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<IdentityPool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes identities from an identity pool. You can specify a list of 1-60 identities that you want to delete.</p> <p>You must use AWS Developer credentials to call this API.</p>
		/// DeleteIdentities /#X-Amz-Target=AWSCognitoIdentityService.DeleteIdentities
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteIdentitiesResponse> DeleteIdentitiesAsync(DeleteIdentitiesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.DeleteIdentities";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteIdentitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an identity pool. Once a pool is deleted, users will not be able to authenticate with the pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
		/// DeleteIdentityPool /#X-Amz-Target=AWSCognitoIdentityService.DeleteIdentityPool
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteIdentityPoolAsync(DeleteIdentityPoolInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.DeleteIdentityPool";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns metadata related to the given identity, including when the identity was created and any associated linked logins.</p> <p>You must use AWS Developer credentials to call this API.</p>
		/// DescribeIdentity /#X-Amz-Target=AWSCognitoIdentityService.DescribeIdentity
		/// </summary>
		/// <returns>Success</returns>
		public async Task<IdentityDescription> DescribeIdentityAsync(DescribeIdentityInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.DescribeIdentity";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<IdentityDescription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets details about a particular identity pool, including the pool name, ID description, creation date, and current number of users.</p> <p>You must use AWS Developer credentials to call this API.</p>
		/// DescribeIdentityPool /#X-Amz-Target=AWSCognitoIdentityService.DescribeIdentityPool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<IdentityPool> DescribeIdentityPoolAsync(DescribeIdentityPoolInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.DescribeIdentityPool";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<IdentityPool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns credentials for the provided identity ID. Any provided logins will be validated against supported login providers. If the token is for cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service with the appropriate role for the token.</p> <p>This is a public API. You do not need any credentials to call this API.</p>
		/// GetCredentialsForIdentity /#X-Amz-Target=AWSCognitoIdentityService.GetCredentialsForIdentity
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCredentialsForIdentityResponse> GetCredentialsForIdentityAsync(GetCredentialsForIdentityInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.GetCredentialsForIdentity";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetCredentialsForIdentityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an implicit linked account.</p> <p>This is a public API. You do not need any credentials to call this API.</p>
		/// GetId /#X-Amz-Target=AWSCognitoIdentityService.GetId
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetIdResponse> GetIdAsync(GetIdInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.GetId";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the roles for an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
		/// GetIdentityPoolRoles /#X-Amz-Target=AWSCognitoIdentityService.GetIdentityPoolRoles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetIdentityPoolRolesResponse> GetIdentityPoolRolesAsync(GetIdentityPoolRolesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.GetIdentityPoolRoles";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetIdentityPoolRolesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets an OpenID token, using a known Cognito ID. This known Cognito ID is returned by <a>GetId</a>. You can optionally add additional logins for the identity. Supplying multiple logins creates an implicit link.</p> <p>The OpenId token is valid for 10 minutes.</p> <p>This is a public API. You do not need any credentials to call this API.</p>
		/// GetOpenIdToken /#X-Amz-Target=AWSCognitoIdentityService.GetOpenIdToken
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOpenIdTokenResponse> GetOpenIdTokenAsync(GetOpenIdTokenInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.GetOpenIdToken";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetOpenIdTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect token for a user authenticated by your backend authentication process. Supplying multiple logins will create an implicit linked account. You can only specify one developer provider as part of the <code>Logins</code> map, which is linked to the identity pool. The developer provider is the "domain" by which Cognito will refer to your users.</p> <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity and to link new logins (that is, user credentials issued by a public provider or developer provider) to an existing identity. When you want to create a new identity, the <code>IdentityId</code> should be null. When you want to associate a new login with an existing authenticated/unauthenticated identity, you can do so by providing the existing <code>IdentityId</code>. This API will create the identity in the specified <code>IdentityPoolId</code>.</p> <p>You must use AWS Developer credentials to call this API.</p>
		/// GetOpenIdTokenForDeveloperIdentity /#X-Amz-Target=AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOpenIdTokenForDeveloperIdentityResponse> GetOpenIdTokenForDeveloperIdentityAsync(GetOpenIdTokenForDeveloperIdentityInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetOpenIdTokenForDeveloperIdentityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the identities in an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
		/// ListIdentities /#X-Amz-Target=AWSCognitoIdentityService.ListIdentities
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListIdentitiesResponse> ListIdentitiesAsync(ListIdentitiesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.ListIdentities";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListIdentitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all of the Cognito identity pools registered for your account.</p> <p>You must use AWS Developer credentials to call this API.</p>
		/// ListIdentityPools /#X-Amz-Target=AWSCognitoIdentityService.ListIdentityPools
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListIdentityPoolsResponse> ListIdentityPoolsAsync(ListIdentityPoolsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.ListIdentityPools";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListIdentityPoolsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the tags that are assigned to an Amazon Cognito identity pool.</p> <p>A tag is a label that you can apply to identity pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.</p> <p>You can use this action up to 10 times per second, per account.</p>
		/// ListTagsForResource /#X-Amz-Target=AWSCognitoIdentityService.ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.ListTagsForResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the <code>IdentityID</code> associated with a <code>DeveloperUserIdentifier</code> or the list of <code>DeveloperUserIdentifier</code> values associated with an <code>IdentityId</code> for an existing identity. Either <code>IdentityID</code> or <code>DeveloperUserIdentifier</code> must not be null. If you supply only one of these values, the other value will be searched in the database and returned as a part of the response. If you supply both, <code>DeveloperUserIdentifier</code> will be matched against <code>IdentityID</code>. If the values are verified against the database, the response returns both values and is the same as the request. Otherwise a <code>ResourceConflictException</code> is thrown.</p> <p> <code>LookupDeveloperIdentity</code> is intended for low-throughput control plane operations: for example, to enable customer service to locate an identity ID by username. If you are using it for higher-volume operations such as user authentication, your requests are likely to be throttled. <a>GetOpenIdTokenForDeveloperIdentity</a> is a better option for higher-volume operations for user authentication.</p> <p>You must use AWS Developer credentials to call this API.</p>
		/// LookupDeveloperIdentity /#X-Amz-Target=AWSCognitoIdentityService.LookupDeveloperIdentity
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LookupDeveloperIdentityResponse> LookupDeveloperIdentityAsync(LookupDeveloperIdentityInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.LookupDeveloperIdentity";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<LookupDeveloperIdentityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Merges two users having different <code>IdentityId</code>s, existing in the same identity pool, and identified by the same developer provider. You can use this action to request that discrete users be merged and identified as a single user in the Cognito environment. Cognito associates the given source user (<code>SourceUserIdentifier</code>) with the <code>IdentityId</code> of the <code>DestinationUserIdentifier</code>. Only developer-authenticated users can be merged. If the users to be merged are associated with the same public provider, but as two different users, an exception will be thrown.</p> <p>The number of linked logins is limited to 20. So, the number of linked logins for the source user, <code>SourceUserIdentifier</code>, and the destination user, <code>DestinationUserIdentifier</code>, together should not be larger than 20. Otherwise, an exception will be thrown.</p> <p>You must use AWS Developer credentials to call this API.</p>
		/// MergeDeveloperIdentities /#X-Amz-Target=AWSCognitoIdentityService.MergeDeveloperIdentities
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MergeDeveloperIdentitiesResponse> MergeDeveloperIdentitiesAsync(MergeDeveloperIdentitiesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.MergeDeveloperIdentities";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MergeDeveloperIdentitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the roles for an identity pool. These roles are used when making calls to <a>GetCredentialsForIdentity</a> action.</p> <p>You must use AWS Developer credentials to call this API.</p>
		/// SetIdentityPoolRoles /#X-Amz-Target=AWSCognitoIdentityService.SetIdentityPoolRoles
		/// </summary>
		/// <returns>Success</returns>
		public async Task SetIdentityPoolRolesAsync(SetIdentityPoolRolesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.SetIdentityPoolRoles";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Assigns a set of tags to an Amazon Cognito identity pool. A tag is a label that you can use to categorize and manage identity pools in different ways, such as by purpose, owner, environment, or other criteria.</p> <p>Each tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of an identity pool, one for testing and another for production, you might assign an <code>Environment</code> tag key to both identity pools. The value of this key might be <code>Test</code> for one identity pool and <code>Production</code> for the other.</p> <p>Tags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your identity pools. In an IAM policy, you can constrain permissions for identity pools based on specific tags or tag values.</p> <p>You can use this action up to 5 times per second, per account. An identity pool can have as many as 50 tags.</p>
		/// TagResource /#X-Amz-Target=AWSCognitoIdentityService.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.TagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Unlinks a <code>DeveloperUserIdentifier</code> from an existing identity. Unlinked developer users will be considered new identities next time they are seen. If, for a given Cognito identity, you remove all federated identities as well as the developer user identifier, the Cognito identity becomes inaccessible.</p> <p>You must use AWS Developer credentials to call this API.</p>
		/// UnlinkDeveloperIdentity /#X-Amz-Target=AWSCognitoIdentityService.UnlinkDeveloperIdentity
		/// </summary>
		/// <returns>Success</returns>
		public async Task UnlinkDeveloperIdentityAsync(UnlinkDeveloperIdentityInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.UnlinkDeveloperIdentity";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Unlinks a federated identity from an existing account. Unlinked logins will be considered new identities next time they are seen. Removing the last linked login will make this identity inaccessible.</p> <p>This is a public API. You do not need any credentials to call this API.</p>
		/// UnlinkIdentity /#X-Amz-Target=AWSCognitoIdentityService.UnlinkIdentity
		/// </summary>
		/// <returns>Success</returns>
		public async Task UnlinkIdentityAsync(UnlinkIdentityInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.UnlinkIdentity";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from an Amazon Cognito identity pool. You can use this action up to 5 times per second, per account
		/// UntagResource /#X-Amz-Target=AWSCognitoIdentityService.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(UntagResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.UntagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
		/// UpdateIdentityPool /#X-Amz-Target=AWSCognitoIdentityService.UpdateIdentityPool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<IdentityPool> UpdateIdentityPoolAsync(IdentityPool requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityService.UpdateIdentityPool";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<IdentityPool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
