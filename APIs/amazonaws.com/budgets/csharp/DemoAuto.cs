//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	///  Request of CreateBudget 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBudgetRequest
	{
		
		/// <summary>
		/// The account ID of the user. It should be a 12-digit number.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// <p>Represents the output of the <code>CreateBudget</code> operation. The content consists of the detailed metadata and data file information, and the current status of the <code>budget</code> object.</p> <p>This is the ARN pattern for a budget: </p> <p> <code>arn:aws:budgetservice::AccountId:budget/budgetName</code> </p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Budget Budget { get; set; }
		
		/// <summary>
		///  A list of notifications, each with a list of subscribers.
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public NotificationWithSubscribers[] NotificationsWithSubscribers { get; set; }
	}
	
	/// <summary>
	///  Request of CreateNotification 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNotificationRequest
	{
		
		/// <summary>
		/// The account ID of the user. It should be a 12-digit number.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		/// <summary>
		///  A string that represents the budget name. The ":" and "\" characters aren't allowed.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [^:\\]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string BudgetName { get; set; }
		
		/// <summary>
		/// <p>A notification that is associated with a budget. A budget can have up to five notifications. </p> <p>Each notification must have at least one subscriber. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.</p> <p>For example, if you have a budget for 200 dollars and you want to be notified when you go over 160 dollars, create a notification with the following parameters:</p> <ul> <li> <p>A notificationType of <code>ACTUAL</code> </p> </li> <li> <p>A <code>thresholdType</code> of <code>PERCENTAGE</code> </p> </li> <li> <p>A <code>comparisonOperator</code> of <code>GREATER_THAN</code> </p> </li> <li> <p>A notification <code>threshold</code> of <code>80</code> </p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		/// <summary>
		///  A list of subscribers.
		/// Minimum items: 1
		/// Maximum items: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public Subscriber[] Subscribers { get; set; }
	}
	
	/// <summary>
	///  Request of CreateSubscriber 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSubscriberRequest
	{
		
		/// <summary>
		/// The account ID of the user. It should be a 12-digit number.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		/// <summary>
		///  A string that represents the budget name. The ":" and "\" characters aren't allowed.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [^:\\]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string BudgetName { get; set; }
		
		/// <summary>
		/// <p>A notification that is associated with a budget. A budget can have up to five notifications. </p> <p>Each notification must have at least one subscriber. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.</p> <p>For example, if you have a budget for 200 dollars and you want to be notified when you go over 160 dollars, create a notification with the following parameters:</p> <ul> <li> <p>A notificationType of <code>ACTUAL</code> </p> </li> <li> <p>A <code>thresholdType</code> of <code>PERCENTAGE</code> </p> </li> <li> <p>A <code>comparisonOperator</code> of <code>GREATER_THAN</code> </p> </li> <li> <p>A notification <code>threshold</code> of <code>80</code> </p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		/// <summary>
		/// <p>The subscriber to a budget notification. The subscriber consists of a subscription type and either an Amazon SNS topic or an email address.</p> <p>For example, an email subscriber would have the following parameters:</p> <ul> <li> <p>A <code>subscriptionType</code> of <code>EMAIL</code> </p> </li> <li> <p>An <code>address</code> of <code>example@example.com</code> </p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Subscriber Subscriber { get; set; }
	}
	
	/// <summary>
	///  Request of DeleteBudget 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteBudgetRequest
	{
		
		/// <summary>
		/// The account ID of the user. It should be a 12-digit number.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		/// <summary>
		///  A string that represents the budget name. The ":" and "\" characters aren't allowed.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [^:\\]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string BudgetName { get; set; }
	}
	
	/// <summary>
	///  Request of DeleteNotification 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteNotificationRequest
	{
		
		/// <summary>
		/// The account ID of the user. It should be a 12-digit number.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		/// <summary>
		///  A string that represents the budget name. The ":" and "\" characters aren't allowed.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [^:\\]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string BudgetName { get; set; }
		
		/// <summary>
		/// <p>A notification that is associated with a budget. A budget can have up to five notifications. </p> <p>Each notification must have at least one subscriber. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.</p> <p>For example, if you have a budget for 200 dollars and you want to be notified when you go over 160 dollars, create a notification with the following parameters:</p> <ul> <li> <p>A notificationType of <code>ACTUAL</code> </p> </li> <li> <p>A <code>thresholdType</code> of <code>PERCENTAGE</code> </p> </li> <li> <p>A <code>comparisonOperator</code> of <code>GREATER_THAN</code> </p> </li> <li> <p>A notification <code>threshold</code> of <code>80</code> </p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
	}
	
	/// <summary>
	///  Request of DeleteSubscriber 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteSubscriberRequest
	{
		
		/// <summary>
		/// The account ID of the user. It should be a 12-digit number.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		/// <summary>
		///  A string that represents the budget name. The ":" and "\" characters aren't allowed.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [^:\\]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string BudgetName { get; set; }
		
		/// <summary>
		/// <p>A notification that is associated with a budget. A budget can have up to five notifications. </p> <p>Each notification must have at least one subscriber. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.</p> <p>For example, if you have a budget for 200 dollars and you want to be notified when you go over 160 dollars, create a notification with the following parameters:</p> <ul> <li> <p>A notificationType of <code>ACTUAL</code> </p> </li> <li> <p>A <code>thresholdType</code> of <code>PERCENTAGE</code> </p> </li> <li> <p>A <code>comparisonOperator</code> of <code>GREATER_THAN</code> </p> </li> <li> <p>A notification <code>threshold</code> of <code>80</code> </p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		/// <summary>
		/// <p>The subscriber to a budget notification. The subscriber consists of a subscription type and either an Amazon SNS topic or an email address.</p> <p>For example, an email subscriber would have the following parameters:</p> <ul> <li> <p>A <code>subscriptionType</code> of <code>EMAIL</code> </p> </li> <li> <p>An <code>address</code> of <code>example@example.com</code> </p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Subscriber Subscriber { get; set; }
	}
	
	/// <summary>
	///  Response of DescribeBudget 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeBudgetResponse
	{
		
		/// <summary>
		/// <p>Represents the output of the <code>CreateBudget</code> operation. The content consists of the detailed metadata and data file information, and the current status of the <code>budget</code> object.</p> <p>This is the ARN pattern for a budget: </p> <p> <code>arn:aws:budgetservice::AccountId:budget/budgetName</code> </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Budget Budget { get; set; }
	}
	
	/// <summary>
	///  Request of DescribeBudget 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeBudgetRequest
	{
		
		/// <summary>
		/// The account ID of the user. It should be a 12-digit number.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		/// <summary>
		///  A string that represents the budget name. The ":" and "\" characters aren't allowed.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [^:\\]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string BudgetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeBudgetPerformanceHistoryResponse
	{
		
		/// <summary>
		/// A history of the state of a budget at the end of the budget's specified time period.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BudgetPerformanceHistory BudgetPerformanceHistory { get; set; }
		
		/// <summary>
		///  A generic string.
		/// Max length: 2147483647
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2147483647, MinimumLength=0)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeBudgetPerformanceHistoryRequest
	{
		
		/// <summary>
		/// The account ID of the user. It should be a 12-digit number.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		/// <summary>
		///  A string that represents the budget name. The ":" and "\" characters aren't allowed.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [^:\\]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string BudgetName { get; set; }
		
		/// <summary>
		/// The period of time that is covered by a budget. The period has a start date and an end date. The start date must come before the end date. There are no restrictions on the end date. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimePeriod TimePeriod { get; set; }
		
		/// <summary>
		///  An integer that represents how many entries a paginated response contains. The maximum is 100.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		///  A generic string.
		/// Max length: 2147483647
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2147483647, MinimumLength=0)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Response of DescribeBudgets 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeBudgetsResponse
	{
		
		/// <summary>
		///  A list of budgets.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Budget[] Budgets { get; set; }
		
		/// <summary>
		///  A generic string.
		/// Max length: 2147483647
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2147483647, MinimumLength=0)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Request of DescribeBudgets 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeBudgetsRequest
	{
		
		/// <summary>
		/// The account ID of the user. It should be a 12-digit number.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		/// <summary>
		///  An integer that represents how many entries a paginated response contains. The maximum is 100.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		///  A generic string.
		/// Max length: 2147483647
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2147483647, MinimumLength=0)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Response of GetNotificationsForBudget 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeNotificationsForBudgetResponse
	{
		
		/// <summary>
		///  A list of notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Notification[] Notifications { get; set; }
		
		/// <summary>
		///  A generic string.
		/// Max length: 2147483647
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2147483647, MinimumLength=0)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Request of DescribeNotificationsForBudget 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeNotificationsForBudgetRequest
	{
		
		/// <summary>
		/// The account ID of the user. It should be a 12-digit number.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		/// <summary>
		///  A string that represents the budget name. The ":" and "\" characters aren't allowed.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [^:\\]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string BudgetName { get; set; }
		
		/// <summary>
		///  An integer that represents how many entries a paginated response contains. The maximum is 100.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		///  A generic string.
		/// Max length: 2147483647
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2147483647, MinimumLength=0)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Response of DescribeSubscribersForNotification 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSubscribersForNotificationResponse
	{
		
		/// <summary>
		///  A list of subscribers.
		/// Minimum items: 1
		/// Maximum items: 11
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public Subscriber[] Subscribers { get; set; }
		
		/// <summary>
		///  A generic string.
		/// Max length: 2147483647
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2147483647, MinimumLength=0)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Request of DescribeSubscribersForNotification 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSubscribersForNotificationRequest
	{
		
		/// <summary>
		/// The account ID of the user. It should be a 12-digit number.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		/// <summary>
		///  A string that represents the budget name. The ":" and "\" characters aren't allowed.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [^:\\]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string BudgetName { get; set; }
		
		/// <summary>
		/// <p>A notification that is associated with a budget. A budget can have up to five notifications. </p> <p>Each notification must have at least one subscriber. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.</p> <p>For example, if you have a budget for 200 dollars and you want to be notified when you go over 160 dollars, create a notification with the following parameters:</p> <ul> <li> <p>A notificationType of <code>ACTUAL</code> </p> </li> <li> <p>A <code>thresholdType</code> of <code>PERCENTAGE</code> </p> </li> <li> <p>A <code>comparisonOperator</code> of <code>GREATER_THAN</code> </p> </li> <li> <p>A notification <code>threshold</code> of <code>80</code> </p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		/// <summary>
		///  An integer that represents how many entries a paginated response contains. The maximum is 100.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		///  A generic string.
		/// Max length: 2147483647
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2147483647, MinimumLength=0)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Request of UpdateBudget 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateBudgetRequest
	{
		
		/// <summary>
		/// The account ID of the user. It should be a 12-digit number.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// <p>Represents the output of the <code>CreateBudget</code> operation. The content consists of the detailed metadata and data file information, and the current status of the <code>budget</code> object.</p> <p>This is the ARN pattern for a budget: </p> <p> <code>arn:aws:budgetservice::AccountId:budget/budgetName</code> </p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Budget NewBudget { get; set; }
	}
	
	/// <summary>
	///  Request of UpdateNotification 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateNotificationRequest
	{
		
		/// <summary>
		/// The account ID of the user. It should be a 12-digit number.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		/// <summary>
		///  A string that represents the budget name. The ":" and "\" characters aren't allowed.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [^:\\]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string BudgetName { get; set; }
		
		/// <summary>
		/// <p>A notification that is associated with a budget. A budget can have up to five notifications. </p> <p>Each notification must have at least one subscriber. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.</p> <p>For example, if you have a budget for 200 dollars and you want to be notified when you go over 160 dollars, create a notification with the following parameters:</p> <ul> <li> <p>A notificationType of <code>ACTUAL</code> </p> </li> <li> <p>A <code>thresholdType</code> of <code>PERCENTAGE</code> </p> </li> <li> <p>A <code>comparisonOperator</code> of <code>GREATER_THAN</code> </p> </li> <li> <p>A notification <code>threshold</code> of <code>80</code> </p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Notification OldNotification { get; set; }
		
		/// <summary>
		/// <p>A notification that is associated with a budget. A budget can have up to five notifications. </p> <p>Each notification must have at least one subscriber. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.</p> <p>For example, if you have a budget for 200 dollars and you want to be notified when you go over 160 dollars, create a notification with the following parameters:</p> <ul> <li> <p>A notificationType of <code>ACTUAL</code> </p> </li> <li> <p>A <code>thresholdType</code> of <code>PERCENTAGE</code> </p> </li> <li> <p>A <code>comparisonOperator</code> of <code>GREATER_THAN</code> </p> </li> <li> <p>A notification <code>threshold</code> of <code>80</code> </p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Notification NewNotification { get; set; }
	}
	
	/// <summary>
	///  Request of UpdateSubscriber 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSubscriberRequest
	{
		
		/// <summary>
		/// The account ID of the user. It should be a 12-digit number.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: \d{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AccountId { get; set; }
		
		/// <summary>
		///  A string that represents the budget name. The ":" and "\" characters aren't allowed.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [^:\\]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string BudgetName { get; set; }
		
		/// <summary>
		/// <p>A notification that is associated with a budget. A budget can have up to five notifications. </p> <p>Each notification must have at least one subscriber. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.</p> <p>For example, if you have a budget for 200 dollars and you want to be notified when you go over 160 dollars, create a notification with the following parameters:</p> <ul> <li> <p>A notificationType of <code>ACTUAL</code> </p> </li> <li> <p>A <code>thresholdType</code> of <code>PERCENTAGE</code> </p> </li> <li> <p>A <code>comparisonOperator</code> of <code>GREATER_THAN</code> </p> </li> <li> <p>A notification <code>threshold</code> of <code>80</code> </p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		/// <summary>
		/// <p>The subscriber to a budget notification. The subscriber consists of a subscription type and either an Amazon SNS topic or an email address.</p> <p>For example, an email subscriber would have the following parameters:</p> <ul> <li> <p>A <code>subscriptionType</code> of <code>EMAIL</code> </p> </li> <li> <p>An <code>address</code> of <code>example@example.com</code> </p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Subscriber OldSubscriber { get; set; }
		
		/// <summary>
		/// <p>The subscriber to a budget notification. The subscriber consists of a subscription type and either an Amazon SNS topic or an email address.</p> <p>For example, an email subscriber would have the following parameters:</p> <ul> <li> <p>A <code>subscriptionType</code> of <code>EMAIL</code> </p> </li> <li> <p>An <code>address</code> of <code>example@example.com</code> </p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Subscriber NewSubscriber { get; set; }
	}
	
	/// <summary>
	/// <p>The amount of cost or usage that is measured for a budget.</p> <p>For example, a <code>Spend</code> for <code>3 GB</code> of S3 usage would have the following parameters:</p> <ul> <li> <p>An <code>Amount</code> of <code>3</code> </p> </li> <li> <p>A <code>unit</code> of <code>GB</code> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Spend
	{
		
		/// <summary>
		///  A string that represents a numeric value.
		/// Max length: 2147483647
		/// Min length: 1
		/// Pattern: ([0-9]*\.)?[0-9]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2147483647, MinimumLength=1)]
		public string Amount { get; set; }
		
		/// <summary>
		///  A string that represents the spend unit of a budget. It can't be null or empty.
		/// Max length: 2147483647
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2147483647, MinimumLength=1)]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// <p>The types of cost that are included in a <code>COST</code> budget, such as tax and subscriptions.</p> <p> <code>USAGE</code>, <code>RI_UTILIZATION</code>, and <code>RI_COVERAGE</code> budgets do not have <code>CostTypes</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CostTypes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeTax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeSubscription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseBlended { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeRefund { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeCredit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeUpfront { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeRecurring { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeOtherSubscription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeSupport { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeDiscount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseAmortized { get; set; }
	}
	
	/// <summary>
	///  The time unit of the budget, such as MONTHLY or QUARTERLY.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TimeUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUARTERLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNUALLY = 3,
	}
	
	/// <summary>
	/// The period of time that is covered by a budget. The period has a start date and an end date. The start date must come before the end date. There are no restrictions on the end date. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimePeriod
	{
		
		/// <summary>
		///  A generic time stamp. In Java, it is transformed to a <code>Date</code> object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
		
		/// <summary>
		///  A generic time stamp. In Java, it is transformed to a <code>Date</code> object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
	}
	
	/// <summary>
	/// <p>The spend objects that are associated with this budget. The <code>actualSpend</code> tracks how much you've used, cost, usage, or RI units, and the <code>forecastedSpend</code> tracks how much you are predicted to spend if your current usage remains steady.</p> <p>For example, if it is the 20th of the month and you have spent <code>50</code> dollars on Amazon EC2, your <code>actualSpend</code> is <code>50 USD</code>, and your <code>forecastedSpend</code> is <code>75 USD</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CalculatedSpend
	{
		
		/// <summary>
		/// <p>The amount of cost or usage that is measured for a budget.</p> <p>For example, a <code>Spend</code> for <code>3 GB</code> of S3 usage would have the following parameters:</p> <ul> <li> <p>An <code>Amount</code> of <code>3</code> </p> </li> <li> <p>A <code>unit</code> of <code>GB</code> </p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Spend ActualSpend { get; set; }
		
		/// <summary>
		/// <p>The amount of cost or usage that is measured for a budget.</p> <p>For example, a <code>Spend</code> for <code>3 GB</code> of S3 usage would have the following parameters:</p> <ul> <li> <p>An <code>Amount</code> of <code>3</code> </p> </li> <li> <p>A <code>unit</code> of <code>GB</code> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Spend ForecastedSpend { get; set; }
	}
	
	/// <summary>
	/// <p> The type of a budget. It must be one of the following types: </p> <p> <code>COST</code>, <code>USAGE</code>, <code>RI_UTILIZATION</code>, or <code>RI_COVERAGE</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BudgetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RI_UTILIZATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RI_COVERAGE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS_PLANS_UTILIZATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS_PLANS_COVERAGE = 5,
	}
	
	/// <summary>
	/// <p>Represents the output of the <code>CreateBudget</code> operation. The content consists of the detailed metadata and data file information, and the current status of the <code>budget</code> object.</p> <p>This is the ARN pattern for a budget: </p> <p> <code>arn:aws:budgetservice::AccountId:budget/budgetName</code> </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Budget
	{
		
		/// <summary>
		///  A string that represents the budget name. The ":" and "\" characters aren't allowed.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [^:\\]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string BudgetName { get; set; }
		
		/// <summary>
		/// <p>The amount of cost or usage that is measured for a budget.</p> <p>For example, a <code>Spend</code> for <code>3 GB</code> of S3 usage would have the following parameters:</p> <ul> <li> <p>An <code>Amount</code> of <code>3</code> </p> </li> <li> <p>A <code>unit</code> of <code>GB</code> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Spend BudgetLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlannedBudgetLimits PlannedBudgetLimits { get; set; }
		
		/// <summary>
		///  A map that represents the cost filters that are applied to the budget.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CostFilters CostFilters { get; set; }
		
		/// <summary>
		/// <p>The types of cost that are included in a <code>COST</code> budget, such as tax and subscriptions.</p> <p> <code>USAGE</code>, <code>RI_UTILIZATION</code>, and <code>RI_COVERAGE</code> budgets do not have <code>CostTypes</code>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CostTypes CostTypes { get; set; }
		
		/// <summary>
		///  The time unit of the budget, such as MONTHLY or QUARTERLY.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BudgetTimeUnit TimeUnit { get; set; }
		
		/// <summary>
		/// The period of time that is covered by a budget. The period has a start date and an end date. The start date must come before the end date. There are no restrictions on the end date. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimePeriod TimePeriod { get; set; }
		
		/// <summary>
		/// <p>The spend objects that are associated with this budget. The <code>actualSpend</code> tracks how much you've used, cost, usage, or RI units, and the <code>forecastedSpend</code> tracks how much you are predicted to spend if your current usage remains steady.</p> <p>For example, if it is the 20th of the month and you have spent <code>50</code> dollars on Amazon EC2, your <code>actualSpend</code> is <code>50 USD</code>, and your <code>forecastedSpend</code> is <code>75 USD</code>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CalculatedSpend CalculatedSpend { get; set; }
		
		/// <summary>
		/// <p> The type of a budget. It must be one of the following types: </p> <p> <code>COST</code>, <code>USAGE</code>, <code>RI_UTILIZATION</code>, or <code>RI_COVERAGE</code>.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BudgetBudgetType BudgetType { get; set; }
		
		/// <summary>
		///  A generic time stamp. In Java, it is transformed to a <code>Date</code> object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BudgetTimeUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUARTERLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNUALLY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BudgetBudgetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RI_UTILIZATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RI_COVERAGE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS_PLANS_UTILIZATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS_PLANS_COVERAGE = 5,
	}
	
	/// <summary>
	/// A history of the state of a budget at the end of the budget's specified time period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BudgetPerformanceHistory
	{
		
		/// <summary>
		///  A string that represents the budget name. The ":" and "\" characters aren't allowed.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [^:\\]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string BudgetName { get; set; }
		
		/// <summary>
		/// <p> The type of a budget. It must be one of the following types: </p> <p> <code>COST</code>, <code>USAGE</code>, <code>RI_UTILIZATION</code>, or <code>RI_COVERAGE</code>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BudgetPerformanceHistoryBudgetType BudgetType { get; set; }
		
		/// <summary>
		///  A map that represents the cost filters that are applied to the budget.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CostFilters CostFilters { get; set; }
		
		/// <summary>
		/// <p>The types of cost that are included in a <code>COST</code> budget, such as tax and subscriptions.</p> <p> <code>USAGE</code>, <code>RI_UTILIZATION</code>, and <code>RI_COVERAGE</code> budgets do not have <code>CostTypes</code>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CostTypes CostTypes { get; set; }
		
		/// <summary>
		///  The time unit of the budget, such as MONTHLY or QUARTERLY.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BudgetPerformanceHistoryTimeUnit TimeUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BudgetedAndActualAmounts[] BudgetedAndActualAmountsList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BudgetPerformanceHistoryBudgetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RI_UTILIZATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RI_COVERAGE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS_PLANS_UTILIZATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS_PLANS_COVERAGE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BudgetPerformanceHistoryTimeUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUARTERLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNUALLY = 3,
	}
	
	/// <summary>
	/// The amount of cost or usage that you created the budget for, compared to your actual costs or usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BudgetedAndActualAmounts
	{
		
		/// <summary>
		/// <p>The amount of cost or usage that is measured for a budget.</p> <p>For example, a <code>Spend</code> for <code>3 GB</code> of S3 usage would have the following parameters:</p> <ul> <li> <p>An <code>Amount</code> of <code>3</code> </p> </li> <li> <p>A <code>unit</code> of <code>GB</code> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Spend BudgetedAmount { get; set; }
		
		/// <summary>
		/// <p>The amount of cost or usage that is measured for a budget.</p> <p>For example, a <code>Spend</code> for <code>3 GB</code> of S3 usage would have the following parameters:</p> <ul> <li> <p>An <code>Amount</code> of <code>3</code> </p> </li> <li> <p>A <code>unit</code> of <code>GB</code> </p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Spend ActualAmount { get; set; }
		
		/// <summary>
		/// The period of time that is covered by a budget. The period has a start date and an end date. The start date must come before the end date. There are no restrictions on the end date. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimePeriod TimePeriod { get; set; }
	}
	
	/// <summary>
	/// <p> The comparison operator of a notification. Currently the service supports the following operators:</p> <p> <code>GREATER_THAN</code>, <code>LESS_THAN</code>, <code>EQUAL_TO</code> </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComparisonOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL_TO = 2,
	}
	
	/// <summary>
	/// <p>A notification that is associated with a budget. A budget can have up to five notifications. </p> <p>Each notification must have at least one subscriber. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.</p> <p>For example, if you have a budget for 200 dollars and you want to be notified when you go over 160 dollars, create a notification with the following parameters:</p> <ul> <li> <p>A notificationType of <code>ACTUAL</code> </p> </li> <li> <p>A <code>thresholdType</code> of <code>PERCENTAGE</code> </p> </li> <li> <p>A <code>comparisonOperator</code> of <code>GREATER_THAN</code> </p> </li> <li> <p>A notification <code>threshold</code> of <code>80</code> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Notification
	{
		
		/// <summary>
		///  The type of a notification. It must be ACTUAL or FORECASTED.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NotificationNotificationType NotificationType { get; set; }
		
		/// <summary>
		/// <p> The comparison operator of a notification. Currently the service supports the following operators:</p> <p> <code>GREATER_THAN</code>, <code>LESS_THAN</code>, <code>EQUAL_TO</code> </p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NotificationComparisonOperator ComparisonOperator { get; set; }
		
		/// <summary>
		///  The threshold of a notification. It must be a number between 0 and 1,000,000,000.
		/// Minimum: 0
		/// Maximum: 1000000000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000000000)]
		public double Threshold { get; set; }
		
		/// <summary>
		///  The type of threshold for a notification. It can be PERCENTAGE or ABSOLUTE_VALUE.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NotificationThresholdType ThresholdType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationNotificationState NotificationState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NotificationNotificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORECASTED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NotificationComparisonOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL_TO = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NotificationThresholdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENTAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABSOLUTE_VALUE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NotificationNotificationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALARM = 1,
	}
	
	/// <summary>
	/// <p>The subscriber to a budget notification. The subscriber consists of a subscription type and either an Amazon SNS topic or an email address.</p> <p>For example, an email subscriber would have the following parameters:</p> <ul> <li> <p>A <code>subscriptionType</code> of <code>EMAIL</code> </p> </li> <li> <p>An <code>address</code> of <code>example@example.com</code> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Subscriber
	{
		
		/// <summary>
		///  The subscription type of the subscriber. It can be SMS or EMAIL.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SubscriberSubscriptionType SubscriptionType { get; set; }
		
		/// <summary>
		///  A string that contains an email address or SNS topic for the subscriber's address.
		/// Max length: 2147483647
		/// Min length: 1
		/// Pattern: (.*[\n\r\t\f\ ]?)*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2147483647, MinimumLength=1)]
		public string Address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SubscriberSubscriptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 1,
	}
	
	/// <summary>
	///  The type of a notification. It must be ACTUAL or FORECASTED.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NotificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORECASTED = 1,
	}
	
	/// <summary>
	///  The type of threshold for a notification. It can be PERCENTAGE or ABSOLUTE_VALUE.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ThresholdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENTAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABSOLUTE_VALUE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NotificationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALARM = 1,
	}
	
	/// <summary>
	/// A notification with subscribers. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NotificationWithSubscribers
	{
		
		/// <summary>
		/// <p>A notification that is associated with a budget. A budget can have up to five notifications. </p> <p>Each notification must have at least one subscriber. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.</p> <p>For example, if you have a budget for 200 dollars and you want to be notified when you go over 160 dollars, create a notification with the following parameters:</p> <ul> <li> <p>A notificationType of <code>ACTUAL</code> </p> </li> <li> <p>A <code>thresholdType</code> of <code>PERCENTAGE</code> </p> </li> <li> <p>A <code>comparisonOperator</code> of <code>GREATER_THAN</code> </p> </li> <li> <p>A notification <code>threshold</code> of <code>80</code> </p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		/// <summary>
		///  A list of subscribers.
		/// Minimum items: 1
		/// Maximum items: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public Subscriber[] Subscribers { get; set; }
	}
	
	/// <summary>
	///  The subscription type of the subscriber. It can be SMS or EMAIL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SubscriptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 1,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Creates a budget and, if included, notifications and subscribers. </p> <important> <p>Only one of <code>BudgetLimit</code> or <code>PlannedBudgetLimits</code> can be present in the syntax at one time. Use the syntax that matches your case. The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_CreateBudget.html#API_CreateBudget_Examples">Examples</a> section. </p> </important>
		/// CreateBudget /#X-Amz-Target=AWSBudgetServiceGateway.CreateBudget
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateBudgetResponse> CreateBudgetAsync(CreateBudgetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSBudgetServiceGateway.CreateBudget";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateBudgetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a notification. You must create the budget before you create the associated notification.
		/// CreateNotification /#X-Amz-Target=AWSBudgetServiceGateway.CreateNotification
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateNotificationResponse> CreateNotificationAsync(CreateNotificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSBudgetServiceGateway.CreateNotification";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateNotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a subscriber. You must create the associated budget and notification before you create the subscriber.
		/// CreateSubscriber /#X-Amz-Target=AWSBudgetServiceGateway.CreateSubscriber
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSubscriberResponse> CreateSubscriberAsync(CreateSubscriberRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSBudgetServiceGateway.CreateSubscriber";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateSubscriberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a budget. You can delete your budget at any time.</p> <important> <p>Deleting a budget also deletes the notifications and subscribers that are associated with that budget.</p> </important>
		/// DeleteBudget /#X-Amz-Target=AWSBudgetServiceGateway.DeleteBudget
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteBudgetResponse> DeleteBudgetAsync(DeleteBudgetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSBudgetServiceGateway.DeleteBudget";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteBudgetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a notification.</p> <important> <p>Deleting a notification also deletes the subscribers that are associated with the notification.</p> </important>
		/// DeleteNotification /#X-Amz-Target=AWSBudgetServiceGateway.DeleteNotification
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteNotificationResponse> DeleteNotificationAsync(DeleteNotificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSBudgetServiceGateway.DeleteNotification";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteNotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a subscriber.</p> <important> <p>Deleting the last subscriber to a notification also deletes the notification.</p> </important>
		/// DeleteSubscriber /#X-Amz-Target=AWSBudgetServiceGateway.DeleteSubscriber
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteSubscriberResponse> DeleteSubscriberAsync(DeleteSubscriberRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSBudgetServiceGateway.DeleteSubscriber";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteSubscriberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes a budget.</p> <important> <p>The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_DescribeBudget.html#API_DescribeBudget_Examples">Examples</a> section. </p> </important>
		/// DescribeBudget /#X-Amz-Target=AWSBudgetServiceGateway.DescribeBudget
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeBudgetResponse> DescribeBudgetAsync(DescribeBudgetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSBudgetServiceGateway.DescribeBudget";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeBudgetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the history for <code>DAILY</code>, <code>MONTHLY</code>, and <code>QUARTERLY</code> budgets. Budget history isn't available for <code>ANNUAL</code> budgets.
		/// DescribeBudgetPerformanceHistory /#X-Amz-Target=AWSBudgetServiceGateway.DescribeBudgetPerformanceHistory
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeBudgetPerformanceHistoryResponse> DescribeBudgetPerformanceHistoryAsync(DescribeBudgetPerformanceHistoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSBudgetServiceGateway.DescribeBudgetPerformanceHistory";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeBudgetPerformanceHistoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the budgets that are associated with an account.</p> <important> <p>The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_DescribeBudgets.html#API_DescribeBudgets_Examples">Examples</a> section. </p> </important>
		/// DescribeBudgets /#X-Amz-Target=AWSBudgetServiceGateway.DescribeBudgets
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeBudgetsResponse> DescribeBudgetsAsync(DescribeBudgetsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSBudgetServiceGateway.DescribeBudgets";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeBudgetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the notifications that are associated with a budget.
		/// DescribeNotificationsForBudget /#X-Amz-Target=AWSBudgetServiceGateway.DescribeNotificationsForBudget
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeNotificationsForBudgetResponse> DescribeNotificationsForBudgetAsync(DescribeNotificationsForBudgetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSBudgetServiceGateway.DescribeNotificationsForBudget";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeNotificationsForBudgetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the subscribers that are associated with a notification.
		/// DescribeSubscribersForNotification /#X-Amz-Target=AWSBudgetServiceGateway.DescribeSubscribersForNotification
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeSubscribersForNotificationResponse> DescribeSubscribersForNotificationAsync(DescribeSubscribersForNotificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSBudgetServiceGateway.DescribeSubscribersForNotification";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeSubscribersForNotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates a budget. You can change every part of a budget except for the <code>budgetName</code> and the <code>calculatedSpend</code>. When you modify a budget, the <code>calculatedSpend</code> drops to zero until AWS has new usage data to use for forecasting.</p> <important> <p>Only one of <code>BudgetLimit</code> or <code>PlannedBudgetLimits</code> can be present in the syntax at one time. Use the syntax that matches your case. The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_UpdateBudget.html#API_UpdateBudget_Examples">Examples</a> section. </p> </important>
		/// UpdateBudget /#X-Amz-Target=AWSBudgetServiceGateway.UpdateBudget
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateBudgetResponse> UpdateBudgetAsync(UpdateBudgetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSBudgetServiceGateway.UpdateBudget";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateBudgetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a notification.
		/// UpdateNotification /#X-Amz-Target=AWSBudgetServiceGateway.UpdateNotification
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateNotificationResponse> UpdateNotificationAsync(UpdateNotificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSBudgetServiceGateway.UpdateNotification";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateNotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a subscriber.
		/// UpdateSubscriber /#X-Amz-Target=AWSBudgetServiceGateway.UpdateSubscriber
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateSubscriberResponse> UpdateSubscriberAsync(UpdateSubscriberRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSBudgetServiceGateway.UpdateSubscriber";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateSubscriberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
