//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Information about a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Contains the output of ApplySecurityGroupsToLoadBalancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplySecurityGroupsToLoadBalancerOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroupId[] SecurityGroups { get; set; }
	}
	
	/// <summary>
	/// Contains the output of AttachLoadBalancerToSubnets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachLoadBalancerToSubnetsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetId[] Subnets { get; set; }
	}
	
	/// <summary>
	/// Contains the output of ConfigureHealthCheck.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigureHealthCheckOutput
	{
		
		/// <summary>
		/// Information about a health check.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HealthCheck HealthCheck { get; set; }
	}
	
	/// <summary>
	/// Contains the output for CreateLoadBalancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAccessPointOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DNSName { get; set; }
	}
	
	/// <summary>
	/// <p>Information about a listener.</p> <p>For information about the protocols and the ports supported by Elastic Load Balancing, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html">Listeners for Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Listener
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Protocol { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int LoadBalancerPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceProtocol { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public int InstancePort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SSLCertificateId { get; set; }
	}
	
	/// <summary>
	/// Information about a policy attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PolicyAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeValue { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DeregisterInstancesFromLoadBalancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterEndPointsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Instance[] Instances { get; set; }
	}
	
	/// <summary>
	/// The ID of an EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Instance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAccountLimitsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Limit[] Limits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// Contains the output for DescribeInstanceHealth.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEndPointStateOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceState[] InstanceStates { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeLoadBalancerAttributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLoadBalancerAttributesOutput
	{
		
		/// <summary>
		/// The attributes for a load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerAttributes LoadBalancerAttributes { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeLoadBalancerPolicies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLoadBalancerPoliciesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyDescription[] PolicyDescriptions { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeLoadBalancerPolicyTypes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLoadBalancerPolicyTypesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyTypeDescription[] PolicyTypeDescriptions { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeLoadBalancers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAccessPointsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerDescription[] LoadBalancerDescriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// Contains the output for DescribeTags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTagsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagDescription[] TagDescriptions { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DetachLoadBalancerFromSubnets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetachLoadBalancerFromSubnetsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetId[] Subnets { get; set; }
	}
	
	/// <summary>
	/// Contains the output for DisableAvailabilityZonesForLoadBalancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveAvailabilityZonesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
	}
	
	/// <summary>
	/// Contains the output of EnableAvailabilityZonesForLoadBalancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddAvailabilityZonesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
	}
	
	/// <summary>
	/// Contains the output of ModifyLoadBalancerAttributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyLoadBalancerAttributesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		/// <summary>
		/// The attributes for a load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerAttributes LoadBalancerAttributes { get; set; }
	}
	
	/// <summary>
	/// Information about the <code>CrossZoneLoadBalancing</code> attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CrossZoneLoadBalancing
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enabled { get; set; }
	}
	
	/// <summary>
	/// Information about the <code>AccessLog</code> attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccessLog
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EmitInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3BucketPrefix { get; set; }
	}
	
	/// <summary>
	/// Information about the <code>ConnectionDraining</code> attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConnectionDraining
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Timeout { get; set; }
	}
	
	/// <summary>
	/// Information about the <code>ConnectionSettings</code> attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConnectionSettings
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 3600
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 3600)]
		public int IdleTimeout { get; set; }
	}
	
	/// <summary>
	/// Contains the output of RegisterInstancesWithLoadBalancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterEndPointsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Instance[] Instances { get; set; }
	}
	
	/// <summary>
	/// The key of a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagKeyOnly
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for EnableAvailabilityZonesForLoadBalancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddAvailabilityZonesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for AddTags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddTagsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccessPointName[] LoadBalancerNames { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// This data type is reserved.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdditionalAttribute
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9.]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Information about a policy for application-controlled session stickiness.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AppCookieStickinessPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CookieName { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for ApplySecurityGroupsToLoadBalancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplySecurityGroupsToLoadBalancerInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroupId[] SecurityGroups { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for AttachLoaBalancerToSubnets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachLoadBalancerToSubnetsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SubnetId[] Subnets { get; set; }
	}
	
	/// <summary>
	/// Information about the configuration of an EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BackendServerDescription
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public System.Nullable<System.Int32> InstancePort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyName[] PolicyNames { get; set; }
	}
	
	/// <summary>
	/// Information about a health check.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HealthCheck
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 300
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 300)]
		public int Interval { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 60
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 60)]
		public int Timeout { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 10)]
		public int UnhealthyThreshold { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 10)]
		public int HealthyThreshold { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for ConfigureHealthCheck.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigureHealthCheckInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		/// <summary>
		/// Information about a health check.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HealthCheck HealthCheck { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CreateLoadBalancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAccessPointInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Listener[] Listeners { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetId[] Subnets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroupId[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Scheme { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CreateAppCookieStickinessPolicy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAppCookieStickinessPolicyInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CookieName { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CreateLBCookieStickinessPolicy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLBCookieStickinessPolicyInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CookieExpirationPeriod { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CreateLoadBalancerListeners.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLoadBalancerListenerInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Listener[] Listeners { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CreateLoadBalancerPolicy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLoadBalancerPolicyInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyAttribute[] PolicyAttributes { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DeleteLoadBalancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteAccessPointInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DeleteLoadBalancerListeners.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLoadBalancerListenerInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccessPointPort[] LoadBalancerPorts { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DeleteLoadBalancerPolicy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLoadBalancerPolicyInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DeregisterInstancesFromLoadBalancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterEndPointsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Instance[] Instances { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeLoadBalancers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAccessPointsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccessPointName[] LoadBalancerNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 400
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 400)]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAccountLimitsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 400
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 400)]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeInstanceHealth.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEndPointStateInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Instance[] Instances { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeLoadBalancerAttributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLoadBalancerAttributesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
	}
	
	/// <summary>
	/// The attributes for a load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadBalancerAttributes
	{
		
		/// <summary>
		/// Information about the <code>CrossZoneLoadBalancing</code> attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CrossZoneLoadBalancing CrossZoneLoadBalancing { get; set; }
		
		/// <summary>
		/// Information about the <code>AccessLog</code> attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccessLog AccessLog { get; set; }
		
		/// <summary>
		/// Information about the <code>ConnectionDraining</code> attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConnectionDraining ConnectionDraining { get; set; }
		
		/// <summary>
		/// Information about the <code>ConnectionSettings</code> attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConnectionSettings ConnectionSettings { get; set; }
		
		/// <summary>
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public AdditionalAttribute[] AdditionalAttributes { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeLoadBalancerPolicies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLoadBalancerPoliciesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyName[] PolicyNames { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeLoadBalancerPolicyTypes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLoadBalancerPolicyTypesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyTypeName[] PolicyTypeNames { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeTags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTagsInput
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public AccessPointName[] LoadBalancerNames { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DetachLoadBalancerFromSubnets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetachLoadBalancerFromSubnetsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SubnetId[] Subnets { get; set; }
	}
	
	/// <summary>
	/// Information about the state of an EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceState
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReasonCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Information about a policy for duration-based session stickiness.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LBCookieStickinessPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CookieExpirationPeriod { get; set; }
	}
	
	/// <summary>
	/// Information about an Elastic Load Balancing resource limit for your AWS account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Limit
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Max { get; set; }
	}
	
	/// <summary>
	/// The policies enabled for a listener.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListenerDescription
	{
		
		/// <summary>
		/// <p>Information about a listener.</p> <p>For information about the protocols and the ports supported by Elastic Load Balancing, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html">Listeners for Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Listener Listener { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyName[] PolicyNames { get; set; }
	}
	
	/// <summary>
	/// The policies for a load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Policies
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppCookieStickinessPolicy[] AppCookieStickinessPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LBCookieStickinessPolicy[] LBCookieStickinessPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyName[] OtherPolicies { get; set; }
	}
	
	/// <summary>
	/// Information about a source security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SourceSecurityGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
	}
	
	/// <summary>
	/// Information about a load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadBalancerDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DNSName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CanonicalHostedZoneName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CanonicalHostedZoneNameID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListenerDescription[] ListenerDescriptions { get; set; }
		
		/// <summary>
		/// The policies for a load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Policies Policies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BackendServerDescription[] BackendServerDescriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetId[] Subnets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VPCId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Instance[] Instances { get; set; }
		
		/// <summary>
		/// Information about a health check.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HealthCheck HealthCheck { get; set; }
		
		/// <summary>
		/// Information about a source security group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SourceSecurityGroup SourceSecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroupId[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Scheme { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for ModifyLoadBalancerAttributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyLoadBalancerAttributesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		/// <summary>
		/// The attributes for a load balancer.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerAttributes LoadBalancerAttributes { get; set; }
	}
	
	/// <summary>
	/// Information about a policy attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PolicyAttributeDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeValue { get; set; }
	}
	
	/// <summary>
	/// Information about a policy attribute type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PolicyAttributeTypeDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Cardinality { get; set; }
	}
	
	/// <summary>
	/// Information about a policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PolicyDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyAttributeDescription[] PolicyAttributeDescriptions { get; set; }
	}
	
	/// <summary>
	/// Information about a policy type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PolicyTypeDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyAttributeTypeDescription[] PolicyAttributeTypeDescriptions { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for RegisterInstancesWithLoadBalancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterEndPointsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Instance[] Instances { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DisableAvailabilityZonesForLoadBalancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveAvailabilityZonesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for RemoveTags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveTagsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccessPointName[] LoadBalancerNames { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public TagKeyOnly[] Tags { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for SetLoadBalancerListenerSSLCertificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetLoadBalancerListenerSSLCertificateInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int LoadBalancerPort { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SSLCertificateId { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for SetLoadBalancerPoliciesForBackendServer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetLoadBalancerPoliciesForBackendServerInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InstancePort { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PolicyName[] PolicyNames { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for SetLoadBalancePoliciesOfListener.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetLoadBalancerPoliciesOfListenerInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int LoadBalancerPort { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PolicyName[] PolicyNames { get; set; }
	}
	
	/// <summary>
	/// The tags associated with a load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Adds the specified tags to the specified load balancer. Each load balancer can have a maximum of 10 tags.</p> <p>Each tag consists of a key and an optional value. If a tag with the same key is already associated with the load balancer, <code>AddTags</code> updates its value.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html">Tag Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// GET_AddTags /#Action=AddTags
		/// </summary>
		/// <param name="LoadBalancerNames">The name of the load balancer. You can specify one load balancer only.</param>
		/// <param name="Tags">The tags.</param>
		/// <returns>Success</returns>
		public async Task GET_AddTagsAsync(AccessPointName[] LoadBalancerNames, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=AddTags?"+String.Join("&", LoadBalancerNames.Select(z => $"LoadBalancerNames={z}"))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates one or more security groups with your load balancer in a virtual private cloud (VPC). The specified security groups override the previously associated security groups.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-groups.html#elb-vpc-security-groups">Security Groups for Load Balancers in a VPC</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// GET_ApplySecurityGroupsToLoadBalancer /#Action=ApplySecurityGroupsToLoadBalancer
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="SecurityGroups">The IDs of the security groups to associate with the load balancer. Note that you cannot specify the name of the security group.</param>
		/// <returns>Success</returns>
		public async Task GET_ApplySecurityGroupsToLoadBalancerAsync(string LoadBalancerName, SecurityGroupId[] SecurityGroups, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ApplySecurityGroupsToLoadBalancer?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&"+String.Join("&", SecurityGroups.Select(z => $"SecurityGroups={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds one or more subnets to the set of configured subnets for the specified load balancer.</p> <p>The load balancer evenly distributes requests across all registered subnets. For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-manage-subnets.html">Add or Remove Subnets for Your Load Balancer in a VPC</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// GET_AttachLoadBalancerToSubnets /#Action=AttachLoadBalancerToSubnets
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="Subnets">The IDs of the subnets to add. You can add only one subnet per Availability Zone.</param>
		/// <returns>Success</returns>
		public async Task GET_AttachLoadBalancerToSubnetsAsync(string LoadBalancerName, SubnetId[] Subnets, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=AttachLoadBalancerToSubnets?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&"+String.Join("&", Subnets.Select(z => $"Subnets={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Specifies the health check settings to use when evaluating the health state of your EC2 instances.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-healthchecks.html">Configure Health Checks for Your Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// GET_ConfigureHealthCheck /#Action=ConfigureHealthCheck
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="HealthCheck">The configuration information.</param>
		/// <returns>Success</returns>
		public async Task GET_ConfigureHealthCheckAsync(string LoadBalancerName, string HealthCheck, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ConfigureHealthCheck?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&HealthCheck=" + (HealthCheck==null? "" : Uri.EscapeDataString(HealthCheck))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Generates a stickiness policy with sticky session lifetimes that follow that of an application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners.</p> <p>This policy is similar to the policy created by <a>CreateLBCookieStickinessPolicy</a>, except that the lifetime of the special Elastic Load Balancing cookie, <code>AWSELB</code>, follows the lifetime of the application-generated cookie specified in the policy configuration. The load balancer only inserts a new stickiness cookie when the application response includes a new application cookie.</p> <p>If the application cookie is explicitly removed or expires, the session stops being sticky until a new application cookie is issued.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application">Application-Controlled Session Stickiness</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// GET_CreateAppCookieStickinessPolicy /#Action=CreateAppCookieStickinessPolicy
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="PolicyName">The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer.</param>
		/// <param name="CookieName">The name of the application cookie used for stickiness.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateAppCookieStickinessPolicyAsync(string LoadBalancerName, string PolicyName, string CookieName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateAppCookieStickinessPolicy?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&PolicyName=" + (PolicyName==null? "" : Uri.EscapeDataString(PolicyName))+"&CookieName=" + (CookieName==null? "" : Uri.EscapeDataString(CookieName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.</p> <p>When a load balancer implements this policy, the load balancer uses a special cookie to track the instance for each request. When the load balancer receives a request, it first checks to see if this cookie is present in the request. If so, the load balancer sends the request to the application server specified in the cookie. If not, the load balancer sends the request to a server that is chosen based on the existing load-balancing algorithm.</p> <p>A cookie is inserted into the response for binding subsequent requests from the same user to that server. The validity of the cookie is based on the cookie expiration time, which is specified in the policy configuration.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration">Duration-Based Session Stickiness</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// GET_CreateLBCookieStickinessPolicy /#Action=CreateLBCookieStickinessPolicy
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="PolicyName">The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer.</param>
		/// <param name="CookieExpirationPeriod">The time period, in seconds, after which the cookie should be considered stale. If you do not specify this parameter, the default value is 0, which indicates that the sticky session should last for the duration of the browser session.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateLBCookieStickinessPolicyAsync(string LoadBalancerName, string PolicyName, int CookieExpirationPeriod, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateLBCookieStickinessPolicy?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&PolicyName=" + (PolicyName==null? "" : Uri.EscapeDataString(PolicyName))+"&CookieExpirationPeriod="+CookieExpirationPeriod+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Classic Load Balancer.</p> <p>You can add listeners, security groups, subnets, and tags when you create your load balancer, or you can add them later using <a>CreateLoadBalancerListeners</a>, <a>ApplySecurityGroupsToLoadBalancer</a>, <a>AttachLoadBalancerToSubnets</a>, and <a>AddTags</a>.</p> <p>To describe your current load balancers, see <a>DescribeLoadBalancers</a>. When you are finished with a load balancer, you can delete it using <a>DeleteLoadBalancer</a>.</p> <p>You can create up to 20 load balancers per region per account. You can request an increase for the number of load balancers for your account. For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html">Limits for Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// GET_CreateLoadBalancer /#Action=CreateLoadBalancer
		/// </summary>
		/// <param name="LoadBalancerName"><p>The name of the load balancer.</p> <p>This name must be unique within your set of load balancers for the region, must have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and cannot begin or end with a hyphen.</p></param>
		/// <param name="Listeners"><p>The listeners.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html">Listeners for Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p></param>
		/// <param name="AvailabilityZones"><p>One or more Availability Zones from the same region as the load balancer.</p> <p>You must specify at least one Availability Zone.</p> <p>You can add more Availability Zones after you create the load balancer using <a>EnableAvailabilityZonesForLoadBalancer</a>.</p></param>
		/// <param name="Subnets">The IDs of the subnets in your VPC to attach to the load balancer. Specify one subnet per Availability Zone specified in <code>AvailabilityZones</code>.</param>
		/// <param name="SecurityGroups">The IDs of the security groups to assign to the load balancer.</param>
		/// <param name="Scheme"><p>The type of a load balancer. Valid only for load balancers in a VPC.</p> <p>By default, Elastic Load Balancing creates an Internet-facing load balancer with a DNS name that resolves to public IP addresses. For more information about Internet-facing and Internal load balancers, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/how-elastic-load-balancing-works.html#load-balancer-scheme">Load Balancer Scheme</a> in the <i>Elastic Load Balancing User Guide</i>.</p> <p>Specify <code>internal</code> to create a load balancer with a DNS name that resolves to private IP addresses.</p></param>
		/// <param name="Tags"><p>A list of tags to assign to the load balancer.</p> <p>For more information about tagging your load balancer, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html">Tag Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreateLoadBalancerAsync(string LoadBalancerName, Listener[] Listeners, AvailabilityZone[] AvailabilityZones, SubnetId[] Subnets, SecurityGroupId[] SecurityGroups, string Scheme, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateLoadBalancer?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&"+String.Join("&", Listeners.Select(z => $"Listeners={z}"))+"&"+String.Join("&", AvailabilityZones.Select(z => $"AvailabilityZones={z}"))+"&"+String.Join("&", Subnets.Select(z => $"Subnets={z}"))+"&"+String.Join("&", SecurityGroups.Select(z => $"SecurityGroups={z}"))+"&Scheme=" + (Scheme==null? "" : Uri.EscapeDataString(Scheme))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates one or more listeners for the specified load balancer. If a listener with the specified port does not already exist, it is created; otherwise, the properties of the new listener must match the properties of the existing listener.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html">Listeners for Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// GET_CreateLoadBalancerListeners /#Action=CreateLoadBalancerListeners
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="Listeners">The listeners.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateLoadBalancerListenersAsync(string LoadBalancerName, Listener[] Listeners, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateLoadBalancerListeners?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&"+String.Join("&", Listeners.Select(z => $"Listeners={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a policy with the specified attributes for the specified load balancer.</p> <p>Policies are settings that are saved for your load balancer and that can be applied to the listener or the application server, depending on the policy type.</p>
		/// GET_CreateLoadBalancerPolicy /#Action=CreateLoadBalancerPolicy
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="PolicyName">The name of the load balancer policy to be created. This name must be unique within the set of policies for this load balancer.</param>
		/// <param name="PolicyTypeName">The name of the base policy type. To get the list of policy types, use <a>DescribeLoadBalancerPolicyTypes</a>.</param>
		/// <param name="PolicyAttributes">The policy attributes.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateLoadBalancerPolicyAsync(string LoadBalancerName, string PolicyName, string PolicyTypeName, PolicyAttribute[] PolicyAttributes, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateLoadBalancerPolicy?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&PolicyName=" + (PolicyName==null? "" : Uri.EscapeDataString(PolicyName))+"&PolicyTypeName=" + (PolicyTypeName==null? "" : Uri.EscapeDataString(PolicyTypeName))+"&"+String.Join("&", PolicyAttributes.Select(z => $"PolicyAttributes={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified load balancer.</p> <p>If you are attempting to recreate a load balancer, you must reconfigure all settings. The DNS name associated with a deleted load balancer are no longer usable. The name and associated DNS record of the deleted load balancer no longer exist and traffic sent to any of its IP addresses is no longer delivered to your instances.</p> <p>If the load balancer does not exist or has already been deleted, the call to <code>DeleteLoadBalancer</code> still succeeds.</p>
		/// GET_DeleteLoadBalancer /#Action=DeleteLoadBalancer
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteLoadBalancerAsync(string LoadBalancerName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteLoadBalancer?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified listeners from the specified load balancer.
		/// GET_DeleteLoadBalancerListeners /#Action=DeleteLoadBalancerListeners
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="LoadBalancerPorts">The client port numbers of the listeners.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteLoadBalancerListenersAsync(string LoadBalancerName, AccessPointPort[] LoadBalancerPorts, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteLoadBalancerListeners?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&"+String.Join("&", LoadBalancerPorts.Select(z => $"LoadBalancerPorts={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified policy from the specified load balancer. This policy must not be enabled for any listeners.
		/// GET_DeleteLoadBalancerPolicy /#Action=DeleteLoadBalancerPolicy
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="PolicyName">The name of the policy.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteLoadBalancerPolicyAsync(string LoadBalancerName, string PolicyName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteLoadBalancerPolicy?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&PolicyName=" + (PolicyName==null? "" : Uri.EscapeDataString(PolicyName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deregisters the specified instances from the specified load balancer. After the instance is deregistered, it no longer receives traffic from the load balancer.</p> <p>You can use <a>DescribeLoadBalancers</a> to verify that the instance is deregistered from the load balancer.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html">Register or De-Register EC2 Instances</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// GET_DeregisterInstancesFromLoadBalancer /#Action=DeregisterInstancesFromLoadBalancer
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="Instances">The IDs of the instances.</param>
		/// <returns>Success</returns>
		public async Task GET_DeregisterInstancesFromLoadBalancerAsync(string LoadBalancerName, Instance[] Instances, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeregisterInstancesFromLoadBalancer?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&"+String.Join("&", Instances.Select(z => $"Instances={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the current Elastic Load Balancing resource limits for your AWS account.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html">Limits for Your Classic Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// GET_DescribeAccountLimits /#Action=DescribeAccountLimits
		/// </summary>
		/// <param name="Marker">The marker for the next set of results. (You received this marker from a previous call.)</param>
		/// <param name="PageSize">The maximum number of results to return with this call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAccountLimitsAsync(string Marker, int PageSize, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeAccountLimits?Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&PageSize="+PageSize+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the state of the specified instances with respect to the specified load balancer. If no instances are specified, the call describes the state of all instances that are currently registered with the load balancer. If instances are specified, their state is returned even if they are no longer registered with the load balancer. The state of terminated instances is not returned.
		/// GET_DescribeInstanceHealth /#Action=DescribeInstanceHealth
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="Instances">The IDs of the instances.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeInstanceHealthAsync(string LoadBalancerName, Instance[] Instances, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeInstanceHealth?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&"+String.Join("&", Instances.Select(z => $"Instances={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the attributes for the specified load balancer.
		/// GET_DescribeLoadBalancerAttributes /#Action=DescribeLoadBalancerAttributes
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLoadBalancerAttributesAsync(string LoadBalancerName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeLoadBalancerAttributes?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified policies.</p> <p>If you specify a load balancer name, the action returns the descriptions of all policies created for the load balancer. If you specify a policy name associated with your load balancer, the action returns the description of that policy. If you don't specify a load balancer name, the action returns descriptions of the specified sample policies, or descriptions of all sample policies. The names of the sample policies have the <code>ELBSample-</code> prefix.</p>
		/// GET_DescribeLoadBalancerPolicies /#Action=DescribeLoadBalancerPolicies
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="PolicyNames">The names of the policies.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLoadBalancerPoliciesAsync(string LoadBalancerName, PolicyName[] PolicyNames, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeLoadBalancerPolicies?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&"+String.Join("&", PolicyNames.Select(z => $"PolicyNames={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified load balancer policy types or all load balancer policy types.</p> <p>The description of each type indicates how it can be used. For example, some policies can be used only with layer 7 listeners, some policies can be used only with layer 4 listeners, and some policies can be used only with your EC2 instances.</p> <p>You can use <a>CreateLoadBalancerPolicy</a> to create a policy configuration for any of these policy types. Then, depending on the policy type, use either <a>SetLoadBalancerPoliciesOfListener</a> or <a>SetLoadBalancerPoliciesForBackendServer</a> to set the policy.</p>
		/// GET_DescribeLoadBalancerPolicyTypes /#Action=DescribeLoadBalancerPolicyTypes
		/// </summary>
		/// <param name="PolicyTypeNames">The names of the policy types. If no names are specified, describes all policy types defined by Elastic Load Balancing.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLoadBalancerPolicyTypesAsync(PolicyTypeName[] PolicyTypeNames, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeLoadBalancerPolicyTypes?"+String.Join("&", PolicyTypeNames.Select(z => $"PolicyTypeNames={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified the load balancers. If no load balancers are specified, the call describes all of your load balancers.
		/// GET_DescribeLoadBalancers /#Action=DescribeLoadBalancers
		/// </summary>
		/// <param name="LoadBalancerNames">The names of the load balancers.</param>
		/// <param name="Marker">The marker for the next set of results. (You received this marker from a previous call.)</param>
		/// <param name="PageSize">The maximum number of results to return with this call (a number from 1 to 400). The default is 400.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLoadBalancersAsync(AccessPointName[] LoadBalancerNames, string Marker, int PageSize, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeLoadBalancers?"+String.Join("&", LoadBalancerNames.Select(z => $"LoadBalancerNames={z}"))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&PageSize="+PageSize+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the tags associated with the specified load balancers.
		/// GET_DescribeTags /#Action=DescribeTags
		/// </summary>
		/// <param name="LoadBalancerNames">The names of the load balancers.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTagsAsync(AccessPointName[] LoadBalancerNames, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeTags?"+String.Join("&", LoadBalancerNames.Select(z => $"LoadBalancerNames={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified subnets from the set of configured subnets for the load balancer.</p> <p>After a subnet is removed, all EC2 instances registered with the load balancer in the removed subnet go into the <code>OutOfService</code> state. Then, the load balancer balances the traffic among the remaining routable subnets.</p>
		/// GET_DetachLoadBalancerFromSubnets /#Action=DetachLoadBalancerFromSubnets
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="Subnets">The IDs of the subnets.</param>
		/// <returns>Success</returns>
		public async Task GET_DetachLoadBalancerFromSubnetsAsync(string LoadBalancerName, SubnetId[] Subnets, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DetachLoadBalancerFromSubnets?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&"+String.Join("&", Subnets.Select(z => $"Subnets={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified Availability Zones from the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.</p> <p>For load balancers in a non-default VPC, use <a>DetachLoadBalancerFromSubnets</a>.</p> <p>There must be at least one Availability Zone registered with a load balancer at all times. After an Availability Zone is removed, all instances registered with the load balancer that are in the removed Availability Zone go into the <code>OutOfService</code> state. Then, the load balancer attempts to equally balance the traffic among its remaining Availability Zones.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html">Add or Remove Availability Zones</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// GET_DisableAvailabilityZonesForLoadBalancer /#Action=DisableAvailabilityZonesForLoadBalancer
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="AvailabilityZones">The Availability Zones.</param>
		/// <returns>Success</returns>
		public async Task GET_DisableAvailabilityZonesForLoadBalancerAsync(string LoadBalancerName, AvailabilityZone[] AvailabilityZones, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DisableAvailabilityZonesForLoadBalancer?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&"+String.Join("&", AvailabilityZones.Select(z => $"AvailabilityZones={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds the specified Availability Zones to the set of Availability Zones for the specified load balancer in EC2-Classic or a default VPC.</p> <p>For load balancers in a non-default VPC, use <a>AttachLoadBalancerToSubnets</a>.</p> <p>The load balancer evenly distributes requests across all its registered Availability Zones that contain instances. For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html">Add or Remove Availability Zones</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// GET_EnableAvailabilityZonesForLoadBalancer /#Action=EnableAvailabilityZonesForLoadBalancer
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="AvailabilityZones">The Availability Zones. These must be in the same region as the load balancer.</param>
		/// <returns>Success</returns>
		public async Task GET_EnableAvailabilityZonesForLoadBalancerAsync(string LoadBalancerName, AvailabilityZone[] AvailabilityZones, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=EnableAvailabilityZonesForLoadBalancer?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&"+String.Join("&", AvailabilityZones.Select(z => $"AvailabilityZones={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the attributes of the specified load balancer.</p> <p>You can modify the load balancer attributes, such as <code>AccessLogs</code>, <code>ConnectionDraining</code>, and <code>CrossZoneLoadBalancing</code> by either enabling or disabling them. Or, you can modify the load balancer attribute <code>ConnectionSettings</code> by specifying an idle connection timeout value for your load balancer.</p> <p>For more information, see the following in the <i>Classic Load Balancers Guide</i>:</p> <ul> <li> <p> <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html">Cross-Zone Load Balancing</a> </p> </li> <li> <p> <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html">Connection Draining</a> </p> </li> <li> <p> <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html">Access Logs</a> </p> </li> <li> <p> <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html">Idle Connection Timeout</a> </p> </li> </ul>
		/// GET_ModifyLoadBalancerAttributes /#Action=ModifyLoadBalancerAttributes
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="LoadBalancerAttributes">The attributes for the load balancer.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyLoadBalancerAttributesAsync(string LoadBalancerName, string LoadBalancerAttributes, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyLoadBalancerAttributes?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&LoadBalancerAttributes=" + (LoadBalancerAttributes==null? "" : Uri.EscapeDataString(LoadBalancerAttributes))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds the specified instances to the specified load balancer.</p> <p>The instance must be a running instance in the same network as the load balancer (EC2-Classic or the same VPC). If you have EC2-Classic instances and a load balancer in a VPC with ClassicLink enabled, you can link the EC2-Classic instances to that VPC and then register the linked EC2-Classic instances with the load balancer in the VPC.</p> <p>Note that <code>RegisterInstanceWithLoadBalancer</code> completes when the request has been registered. Instance registration takes a little time to complete. To check the state of the registered instances, use <a>DescribeLoadBalancers</a> or <a>DescribeInstanceHealth</a>.</p> <p>After the instance is registered, it starts receiving traffic and requests from the load balancer. Any instance that is not in one of the Availability Zones registered for the load balancer is moved to the <code>OutOfService</code> state. If an Availability Zone is added to the load balancer later, any instances registered with the load balancer move to the <code>InService</code> state.</p> <p>To deregister instances from a load balancer, use <a>DeregisterInstancesFromLoadBalancer</a>.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html">Register or De-Register EC2 Instances</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// GET_RegisterInstancesWithLoadBalancer /#Action=RegisterInstancesWithLoadBalancer
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="Instances">The IDs of the instances.</param>
		/// <returns>Success</returns>
		public async Task GET_RegisterInstancesWithLoadBalancerAsync(string LoadBalancerName, Instance[] Instances, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RegisterInstancesWithLoadBalancer?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&"+String.Join("&", Instances.Select(z => $"Instances={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes one or more tags from the specified load balancer.
		/// GET_RemoveTags /#Action=RemoveTags
		/// </summary>
		/// <param name="LoadBalancerNames">The name of the load balancer. You can specify a maximum of one load balancer name.</param>
		/// <param name="Tags">The list of tag keys to remove.</param>
		/// <returns>Success</returns>
		public async Task GET_RemoveTagsAsync(AccessPointName[] LoadBalancerNames, TagKeyOnly[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RemoveTags?"+String.Join("&", LoadBalancerNames.Select(z => $"LoadBalancerNames={z}"))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the certificate that terminates the specified listener's SSL connections. The specified certificate replaces any prior certificate that was used on the same load balancer and port.</p> <p>For more information about updating your SSL certificate, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-update-ssl-cert.html">Replace the SSL Certificate for Your Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// GET_SetLoadBalancerListenerSSLCertificate /#Action=SetLoadBalancerListenerSSLCertificate
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="LoadBalancerPort">The port that uses the specified SSL certificate.</param>
		/// <param name="SSLCertificateId">The Amazon Resource Name (ARN) of the SSL certificate.</param>
		/// <returns>Success</returns>
		public async Task GET_SetLoadBalancerListenerSSLCertificateAsync(string LoadBalancerName, int LoadBalancerPort, string SSLCertificateId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=SetLoadBalancerListenerSSLCertificate?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&LoadBalancerPort="+LoadBalancerPort+"&SSLCertificateId=" + (SSLCertificateId==null? "" : Uri.EscapeDataString(SSLCertificateId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Replaces the set of policies associated with the specified port on which the EC2 instance is listening with a new set of policies. At this time, only the back-end server authentication policy type can be applied to the instance ports; this policy type is composed of multiple public key policies.</p> <p>Each time you use <code>SetLoadBalancerPoliciesForBackendServer</code> to enable the policies, use the <code>PolicyNames</code> parameter to list the policies that you want to enable.</p> <p>You can use <a>DescribeLoadBalancers</a> or <a>DescribeLoadBalancerPolicies</a> to verify that the policy is associated with the EC2 instance.</p> <p>For more information about enabling back-end instance authentication, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-create-https-ssl-load-balancer.html#configure_backendauth_clt">Configure Back-end Instance Authentication</a> in the <i>Classic Load Balancers Guide</i>. For more information about Proxy Protocol, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-proxy-protocol.html">Configure Proxy Protocol Support</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// GET_SetLoadBalancerPoliciesForBackendServer /#Action=SetLoadBalancerPoliciesForBackendServer
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="InstancePort">The port number associated with the EC2 instance.</param>
		/// <param name="PolicyNames">The names of the policies. If the list is empty, then all current polices are removed from the EC2 instance.</param>
		/// <returns>Success</returns>
		public async Task GET_SetLoadBalancerPoliciesForBackendServerAsync(string LoadBalancerName, int InstancePort, PolicyName[] PolicyNames, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=SetLoadBalancerPoliciesForBackendServer?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&InstancePort="+InstancePort+"&"+String.Join("&", PolicyNames.Select(z => $"PolicyNames={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Replaces the current set of policies for the specified load balancer port with the specified set of policies.</p> <p>To enable back-end server authentication, use <a>SetLoadBalancerPoliciesForBackendServer</a>.</p> <p>For more information about setting policies, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/ssl-config-update.html">Update the SSL Negotiation Configuration</a>, <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration">Duration-Based Session Stickiness</a>, and <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application">Application-Controlled Session Stickiness</a> in the <i>Classic Load Balancers Guide</i>.</p>
		/// GET_SetLoadBalancerPoliciesOfListener /#Action=SetLoadBalancerPoliciesOfListener
		/// </summary>
		/// <param name="LoadBalancerName">The name of the load balancer.</param>
		/// <param name="LoadBalancerPort">The external port of the load balancer.</param>
		/// <param name="PolicyNames">The names of the policies. This list must include all policies to be enabled. If you omit a policy that is currently enabled, it is disabled. If the list is empty, all current policies are disabled.</param>
		/// <returns>Success</returns>
		public async Task GET_SetLoadBalancerPoliciesOfListenerAsync(string LoadBalancerName, int LoadBalancerPort, PolicyName[] PolicyNames, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=SetLoadBalancerPoliciesOfListener?LoadBalancerName=" + (LoadBalancerName==null? "" : Uri.EscapeDataString(LoadBalancerName))+"&LoadBalancerPort="+LoadBalancerPort+"&"+String.Join("&", PolicyNames.Select(z => $"PolicyNames={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
