//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContactIdResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContactId { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigIdResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigIdResponseConfigType ConfigType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigIdResponseConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		antenna-downlink = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		antenna-downlink-demod-decode = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		antenna-uplink = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dataflow-endpoint = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tracking = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uplink-echo = 5,
	}
	
	/// <summary>
	/// Information about how AWS Ground Station should configure an antenna for downlink during a contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AntennaDownlinkConfig
	{
		
		/// <summary>
		/// Object that describes a spectral <code>Config</code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SpectrumConfig SpectrumConfig { get; set; }
	}
	
	/// <summary>
	/// Information about how AWS Ground Station should conÔ¨Ågure an antenna for downlink demod decode during a contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AntennaDownlinkDemodDecodeConfig
	{
		
		/// <summary>
		/// Information about the decode <code>Config</code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DecodeConfig DecodeConfig { get; set; }
		
		/// <summary>
		/// Information about the demodulation <code>Config</code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DemodulationConfig DemodulationConfig { get; set; }
		
		/// <summary>
		/// Object that describes a spectral <code>Config</code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SpectrumConfig SpectrumConfig { get; set; }
	}
	
	/// <summary>
	/// Information about the uplink <code>Config</code> of an antenna.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AntennaUplinkConfig
	{
		
		/// <summary>
		/// Information about the uplink spectral <code>Config</code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UplinkSpectrumConfig SpectrumConfig { get; set; }
		
		/// <summary>
		/// Object that represents EIRP.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Eirp TargetEirp { get; set; }
	}
	
	/// <summary>
	/// Information about the dataflow endpoint <code>Config</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataflowEndpointConfig
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataflowEndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataflowEndpointRegion { get; set; }
	}
	
	/// <summary>
	/// Object that determines whether tracking should be used during a contact executed with this <code>Config</code> in the mission profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TrackingConfig
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TrackingConfigAutotrack Autotrack { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TrackingConfigAutotrack
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFERRED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRED = 2,
	}
	
	/// <summary>
	/// <p>Information about an uplink echo <code>Config</code>.</p> <p>Parameters from the <code>AntennaUplinkConfig</code>, corresponding to the specified <code>AntennaUplinkConfigArn</code>, are used when this <code>UplinkEchoConfig</code> is used in a contact.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UplinkEchoConfig
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AntennaUplinkConfigArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enabled { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataflowEndpointGroupIdResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DataflowEndpointGroupId { get; set; }
	}
	
	/// <summary>
	/// Information about the endpoint details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EndpointDetails
	{
		
		/// <summary>
		/// Information about a dataflow endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataflowEndpoint Endpoint { get; set; }
		
		/// <summary>
		/// Information about endpoints.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SecurityDetails SecurityDetails { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MissionProfileIdResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MissionProfileId { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeContactResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContactId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeContactResponseContactStatus ContactStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroundStation { get; set; }
		
		/// <summary>
		/// Elevation angle of the satellite in the sky during a contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Elevation MaximumElevation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MissionProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PostPassEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PrePassStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SatelliteArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeContactResponseContactStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_CANCELLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_SCHEDULE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTPASS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPASS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULING = 11,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetConfigResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigArn { get; set; }
		
		/// <summary>
		/// <p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConfigTypeData ConfigData { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetConfigResponseConfigType ConfigType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetConfigResponseConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		antenna-downlink = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		antenna-downlink-demod-decode = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		antenna-uplink = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dataflow-endpoint = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tracking = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uplink-echo = 5,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDataflowEndpointGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DataflowEndpointGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataflowEndpointGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointDetails[] EndpointsDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMinuteUsageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EstimatedMinutesRemaining { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsReservedMinutesCustomer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalReservedMinuteAllocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalScheduledMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UpcomingMinutesScheduled { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMissionProfileResponse
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public System.Nullable<System.Int32> ContactPostPassDurationSeconds { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public System.Nullable<System.Int32> ContactPrePassDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataflowEdge[] DataflowEdges { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public System.Nullable<System.Int32> MinimumViableContactDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MissionProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MissionProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagsMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrackingConfigArn { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSatelliteResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] GroundStations { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 99999
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 99999)]
		public System.Nullable<System.Int32> NoradSatelliteID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SatelliteArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string SatelliteId { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListConfigsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigListItem[] ConfigList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListContactsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContactData[] ContactList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContactStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_CANCELLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_SCHEDULE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTPASS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPASS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULING = 11,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDataflowEndpointGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DataflowEndpointListItem[] DataflowEndpointGroupList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListGroundStationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroundStationData[] GroundStationList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListMissionProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MissionProfileListItem[] MissionProfileList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSatellitesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SatelliteListItem[] Satellites { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AngleUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEGREE_ANGLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RADIAN = 1,
	}
	
	/// <summary>
	/// Object that describes a spectral <code>Config</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpectrumConfig
	{
		
		/// <summary>
		/// Object that describes the frequency bandwidth.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FrequencyBandwidth Bandwidth { get; set; }
		
		/// <summary>
		/// Object that describes the frequency.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Frequency CenterFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SpectrumConfigPolarization Polarization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SpectrumConfigPolarization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_HAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_HAND = 2,
	}
	
	/// <summary>
	/// Information about the decode <code>Config</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DecodeConfig
	{
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 2
		/// Pattern: ^[{}\[\]:.,"0-9A-z\-_\s]{2,8192}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=2)]
		public string UnvalidatedJSON { get; set; }
	}
	
	/// <summary>
	/// Information about the demodulation <code>Config</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DemodulationConfig
	{
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 2
		/// Pattern: ^[{}\[\]:.,"0-9A-z\-_\s]{2,8192}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=2)]
		public string UnvalidatedJSON { get; set; }
	}
	
	/// <summary>
	/// Information about the uplink spectral <code>Config</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UplinkSpectrumConfig
	{
		
		/// <summary>
		/// Object that describes the frequency.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Frequency CenterFrequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UplinkSpectrumConfigPolarization Polarization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UplinkSpectrumConfigPolarization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_HAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_HAND = 2,
	}
	
	/// <summary>
	/// Object that represents EIRP.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Eirp
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EirpUnits Units { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EirpUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dBW = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BandwidthUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GHz = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MHz = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kHz = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigCapabilityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		antenna-downlink = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		antenna-downlink-demod-decode = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		antenna-uplink = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dataflow-endpoint = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tracking = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uplink-echo = 5,
	}
	
	/// <summary>
	/// An item in a list of <code>Config</code> objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigListItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigListItemConfigType ConfigType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigListItemConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		antenna-downlink = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		antenna-downlink-demod-decode = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		antenna-uplink = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dataflow-endpoint = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tracking = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uplink-echo = 5,
	}
	
	/// <summary>
	/// <p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigTypeData
	{
		
		/// <summary>
		/// Information about how AWS Ground Station should configure an antenna for downlink during a contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AntennaDownlinkConfig AntennaDownlinkConfig { get; set; }
		
		/// <summary>
		/// Information about how AWS Ground Station should conÔ¨Ågure an antenna for downlink demod decode during a contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AntennaDownlinkDemodDecodeConfig AntennaDownlinkDemodDecodeConfig { get; set; }
		
		/// <summary>
		/// Information about the uplink <code>Config</code> of an antenna.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AntennaUplinkConfig AntennaUplinkConfig { get; set; }
		
		/// <summary>
		/// Information about the dataflow endpoint <code>Config</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataflowEndpointConfig DataflowEndpointConfig { get; set; }
		
		/// <summary>
		/// Object that determines whether tracking should be used during a contact executed with this <code>Config</code> in the mission profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrackingConfig TrackingConfig { get; set; }
		
		/// <summary>
		/// <p>Information about an uplink echo <code>Config</code>.</p> <p>Parameters from the <code>AntennaUplinkConfig</code>, corresponding to the specified <code>AntennaUplinkConfigArn</code>, are used when this <code>UplinkEchoConfig</code> is used in a contact.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UplinkEchoConfig UplinkEchoConfig { get; set; }
	}
	
	/// <summary>
	/// Elevation angle of the satellite in the sky during a contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Elevation
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ElevationUnit Unit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ElevationUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEGREE_ANGLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RADIAN = 1,
	}
	
	/// <summary>
	/// Data describing a contact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContactData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContactId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactDataContactStatus ContactStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroundStation { get; set; }
		
		/// <summary>
		/// Elevation angle of the satellite in the sky during a contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Elevation MaximumElevation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MissionProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PostPassEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PrePassStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SatelliteArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagsMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContactDataContactStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_CANCELLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_TO_SCHEDULE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTPASS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPASS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULING = 11,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateConfigRequest
	{
		
		/// <summary>
		/// <p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConfigTypeData ConfigData { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[ a-zA-Z0-9_:-]{1,256}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDataflowEndpointGroupRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EndpointDetails[] EndpointDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMissionProfileRequest
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public System.Nullable<System.Int32> ContactPostPassDurationSeconds { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public System.Nullable<System.Int32> ContactPrePassDurationSeconds { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataflowEdge[] DataflowEdges { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public int MinimumViableContactDurationSeconds { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[ a-zA-Z0-9_:-]{1,256}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagsMap Tags { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrackingConfigArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Criticality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFERRED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUIRED = 2,
	}
	
	/// <summary>
	/// Information about the socket address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SocketAddress
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Port { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EndpointStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 4,
	}
	
	/// <summary>
	/// Information about a dataflow endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataflowEndpoint
	{
		
		/// <summary>
		/// Information about the socket address.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SocketAddress Address { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[ a-zA-Z0-9_:-]{1,256}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataflowEndpointStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataflowEndpointStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 4,
	}
	
	/// <summary>
	/// Item in a list of <code>DataflowEndpoint</code> groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataflowEndpointListItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DataflowEndpointGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataflowEndpointGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EirpUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dBW = 0,
	}
	
	/// <summary>
	/// Information about endpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SecurityDetails
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] SecurityGroupIds { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] SubnetIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FrequencyUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GHz = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MHz = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kHz = 2,
	}
	
	/// <summary>
	/// Object that describes the frequency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Frequency
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FrequencyUnits Units { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FrequencyUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GHz = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MHz = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kHz = 2,
	}
	
	/// <summary>
	/// Object that describes the frequency bandwidth.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FrequencyBandwidth
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FrequencyBandwidthUnits Units { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FrequencyBandwidthUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GHz = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MHz = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kHz = 2,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMinuteUsageRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Month { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Year { get; set; }
	}
	
	/// <summary>
	/// Information about the ground station data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GroundStationData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroundStationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroundStationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListContactsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroundStation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MissionProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SatelliteArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactStatus[] StatusList { get; set; }
	}
	
	/// <summary>
	/// Item in a list of mission profiles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MissionProfileListItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MissionProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MissionProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Polarization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_HAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_HAND = 2,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReserveContactRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroundStation { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MissionProfileArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SatelliteArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// Item in a list of satellites.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SatelliteListItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] GroundStations { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 99999
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 99999)]
		public System.Nullable<System.Int32> NoradSatelliteID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SatelliteArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string SatelliteId { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagsMap Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateConfigRequest
	{
		
		/// <summary>
		/// <p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConfigTypeData ConfigData { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[ a-zA-Z0-9_:-]{1,256}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMissionProfileRequest
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public System.Nullable<System.Int32> ContactPostPassDurationSeconds { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public System.Nullable<System.Int32> ContactPrePassDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataflowEdge[] DataflowEdges { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public System.Nullable<System.Int32> MinimumViableContactDurationSeconds { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[ a-zA-Z0-9_:-]{1,256}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrackingConfigArn { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Cancels a contact with a specified contact ID.
		/// CancelContact /contact/{contactId}
		/// </summary>
		/// <param name="contactId">UUID of a contact.</param>
		/// <returns>Success</returns>
		public async Task<ContactIdResponse> CancelContactAsync(string contactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/contact/"+ (contactId==null? "" : Uri.EscapeDataString(contactId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ContactIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes an existing contact.
		/// DescribeContact /contact/{contactId}
		/// </summary>
		/// <param name="contactId">UUID of a contact.</param>
		/// <returns>Success</returns>
		public async Task<DescribeContactResponse> DescribeContactAsync(string contactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/contact/"+ (contactId==null? "" : Uri.EscapeDataString(contactId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeContactResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a <code>Config</code> with the specified <code>configData</code> parameters.</p> <p>Only one type of <code>configData</code> can be specified.</p>
		/// CreateConfig /config
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ConfigIdResponse> CreateConfigAsync(CreateConfigBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/config";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConfigIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <code>Config</code> objects.
		/// ListConfigs /config
		/// </summary>
		/// <param name="maxResults">Maximum number of <code>Configs</code> returned.</param>
		/// <param name="nextToken">Next token returned in the request of a previous <code>ListConfigs</code> call. Used to get the next page of results.</param>
		/// <returns>Success</returns>
		public async Task<ListConfigsResponse> ListConfigsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/config?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListConfigsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a <code>DataflowEndpoint</code> group containing the specified list of <code>DataflowEndpoint</code> objects.</p> <p>The <code>name</code> field in each endpoint is used in your mission profile <code>DataflowEndpointConfig</code> to specify which endpoints to use during a contact.</p> <p>When a contact uses multiple <code>DataflowEndpointConfig</code> objects, each <code>Config</code> must match a <code>DataflowEndpoint</code> in the same group.</p>
		/// CreateDataflowEndpointGroup /dataflowEndpointGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DataflowEndpointGroupIdResponse> CreateDataflowEndpointGroupAsync(CreateDataflowEndpointGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/dataflowEndpointGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DataflowEndpointGroupIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <code>DataflowEndpoint</code> groups.
		/// ListDataflowEndpointGroups /dataflowEndpointGroup
		/// </summary>
		/// <param name="maxResults">Maximum number of dataflow endpoint groups returned.</param>
		/// <param name="nextToken">Next token returned in the request of a previous <code>ListDataflowEndpointGroups</code> call. Used to get the next page of results.</param>
		/// <returns>Success</returns>
		public async Task<ListDataflowEndpointGroupsResponse> ListDataflowEndpointGroupsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/dataflowEndpointGroup?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDataflowEndpointGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a mission profile.</p> <p> <code>dataflowEdges</code> is a list of lists of strings. Each lower level list of strings has two elements: a <i>from</i> ARN and a <i>to</i> ARN.</p>
		/// CreateMissionProfile /missionprofile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<MissionProfileIdResponse> CreateMissionProfileAsync(CreateMissionProfileBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/missionprofile";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MissionProfileIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of mission profiles.
		/// ListMissionProfiles /missionprofile
		/// </summary>
		/// <param name="maxResults">Maximum number of mission profiles returned.</param>
		/// <param name="nextToken">Next token returned in the request of a previous <code>ListMissionProfiles</code> call. Used to get the next page of results.</param>
		/// <returns>Success</returns>
		public async Task<ListMissionProfilesResponse> ListMissionProfilesAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/missionprofile?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListMissionProfilesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a <code>Config</code>.
		/// DeleteConfig /config/{configType}/{configId}
		/// </summary>
		/// <param name="configId">UUID of a <code>Config</code>.</param>
		/// <param name="configType">Type of a <code>Config</code>.</param>
		/// <returns>Success</returns>
		public async Task<ConfigIdResponse> DeleteConfigAsync(string configId, ConfigIdResponseConfigType configType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/config/"+configType+"/"+ (configId==null? "" : Uri.EscapeDataString(configId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConfigIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns <code>Config</code> information.</p> <p>Only one <code>Config</code> response can be returned.</p>
		/// GetConfig /config/{configType}/{configId}
		/// </summary>
		/// <param name="configId">UUID of a <code>Config</code>.</param>
		/// <param name="configType">Type of a <code>Config</code>.</param>
		/// <returns>Success</returns>
		public async Task<GetConfigResponse> GetConfigAsync(string configId, ConfigIdResponseConfigType configType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/config/"+configType+"/"+ (configId==null? "" : Uri.EscapeDataString(configId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the <code>Config</code> used when scheduling contacts.</p> <p>Updating a <code>Config</code> will not update the execution parameters for existing future contacts scheduled with this <code>Config</code>.</p>
		/// UpdateConfig /config/{configType}/{configId}
		/// </summary>
		/// <param name="configId">UUID of a <code>Config</code>.</param>
		/// <param name="configType">Type of a <code>Config</code>.</param>
		/// <returns>Success</returns>
		public async Task<ConfigIdResponse> UpdateConfigAsync(string configId, string configType, UpdateConfigBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/config/"+configType+"/"+ (configId==null? "" : Uri.EscapeDataString(configId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConfigIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a dataflow endpoint group.
		/// DeleteDataflowEndpointGroup /dataflowEndpointGroup/{dataflowEndpointGroupId}
		/// </summary>
		/// <param name="dataflowEndpointGroupId">UUID of a dataflow endpoint group.</param>
		/// <returns>Success</returns>
		public async Task<DataflowEndpointGroupIdResponse> DeleteDataflowEndpointGroupAsync(string dataflowEndpointGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/dataflowEndpointGroup/"+ (dataflowEndpointGroupId==null? "" : Uri.EscapeDataString(dataflowEndpointGroupId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DataflowEndpointGroupIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the dataflow endpoint group.
		/// GetDataflowEndpointGroup /dataflowEndpointGroup/{dataflowEndpointGroupId}
		/// </summary>
		/// <param name="dataflowEndpointGroupId">UUID of a dataflow endpoint group.</param>
		/// <returns>Success</returns>
		public async Task<GetDataflowEndpointGroupResponse> GetDataflowEndpointGroupAsync(string dataflowEndpointGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/dataflowEndpointGroup/"+ (dataflowEndpointGroupId==null? "" : Uri.EscapeDataString(dataflowEndpointGroupId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDataflowEndpointGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a mission profile.
		/// DeleteMissionProfile /missionprofile/{missionProfileId}
		/// </summary>
		/// <param name="missionProfileId">UUID of a mission profile.</param>
		/// <returns>Success</returns>
		public async Task<MissionProfileIdResponse> DeleteMissionProfileAsync(string missionProfileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/missionprofile/"+ (missionProfileId==null? "" : Uri.EscapeDataString(missionProfileId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MissionProfileIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a mission profile.
		/// GetMissionProfile /missionprofile/{missionProfileId}
		/// </summary>
		/// <param name="missionProfileId">UUID of a mission profile.</param>
		/// <returns>Success</returns>
		public async Task<GetMissionProfileResponse> GetMissionProfileAsync(string missionProfileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/missionprofile/"+ (missionProfileId==null? "" : Uri.EscapeDataString(missionProfileId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetMissionProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates a mission profile.</p> <p>Updating a mission profile will not update the execution parameters for existing future contacts.</p>
		/// UpdateMissionProfile /missionprofile/{missionProfileId}
		/// </summary>
		/// <param name="missionProfileId">UUID of a mission profile.</param>
		/// <returns>Success</returns>
		public async Task<MissionProfileIdResponse> UpdateMissionProfileAsync(string missionProfileId, UpdateMissionProfileBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/missionprofile/"+ (missionProfileId==null? "" : Uri.EscapeDataString(missionProfileId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MissionProfileIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the number of minutes used by account.
		/// GetMinuteUsage /minute-usage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetMinuteUsageResponse> GetMinuteUsageAsync(GetMinuteUsageBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/minute-usage";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetMinuteUsageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a satellite.
		/// GetSatellite /satellite/{satelliteId}
		/// </summary>
		/// <param name="satelliteId">UUID of a satellite.</param>
		/// <returns>Success</returns>
		public async Task<GetSatelliteResponse> GetSatelliteAsync(string satelliteId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/satellite/"+ (satelliteId==null? "" : Uri.EscapeDataString(satelliteId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetSatelliteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of contacts.</p> <p>If <code>statusList</code> contains AVAILABLE, the request must include <code>groundStation</code>, <code>missionprofileArn</code>, and <code>satelliteArn</code>. </p>
		/// ListContacts /contacts
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListContactsResponse> ListContactsAsync(string maxResults, string nextToken, ListContactsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/contacts?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListContactsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of ground stations.
		/// ListGroundStations /groundstation
		/// </summary>
		/// <param name="maxResults">Maximum number of ground stations returned.</param>
		/// <param name="nextToken">Next token that can be supplied in the next call to get the next page of ground stations.</param>
		/// <param name="satelliteId">Satellite ID to retrieve on-boarded ground stations.</param>
		/// <returns>Success</returns>
		public async Task<ListGroundStationsResponse> ListGroundStationsAsync(int maxResults, string nextToken, string satelliteId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/groundstation?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&satelliteId=" + (satelliteId==null? "" : Uri.EscapeDataString(satelliteId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListGroundStationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of satellites.
		/// ListSatellites /satellite
		/// </summary>
		/// <param name="maxResults">Maximum number of satellites returned.</param>
		/// <param name="nextToken">Next token that can be supplied in the next call to get the next page of satellites.</param>
		/// <returns>Success</returns>
		public async Task<ListSatellitesResponse> ListSatellitesAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/satellite?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListSatellitesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of tags for a specified resource.
		/// ListTagsForResource /tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">ARN of a resource.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assigns a tag to a resource.
		/// TagResource /tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">ARN of a resource tag.</param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reserves a contact using specified parameters.
		/// ReserveContact /contact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ContactIdResponse> ReserveContactAsync(ReserveContactBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/contact";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ContactIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deassigns a resource tag.
		/// UntagResource /tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">ARN of a resource.</param>
		/// <param name="tagKeys">Keys of a resource tag.</param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, String[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn))+"#tagKeys&"+String.Join("&", tagKeys.Select(z => $"tagKeys={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateConfigBody
	{
		
		/// <summary>
		/// <p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigData { get; set; }
		
		/// <summary>
		/// Name of a <code>Config</code>.
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[ a-zA-Z0-9_:-]{1,256}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Tags assigned to a <code>Config</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDataflowEndpointGroupBody
	{
		
		/// <summary>
		/// Endpoint details of each endpoint in the dataflow endpoint group.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EndpointDetails[] EndpointDetails { get; set; }
		
		/// <summary>
		/// Tags of a dataflow endpoint group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMissionProfileBody
	{
		
		/// <summary>
		/// Amount of time after a contact ends that you‚Äôd like to receive a CloudWatch event indicating the pass has finished.
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public System.Nullable<System.Int32> ContactPostPassDurationSeconds { get; set; }
		
		/// <summary>
		/// Amount of time prior to contact start you‚Äôd like to receive a CloudWatch event indicating an upcoming pass.
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public System.Nullable<System.Int32> ContactPrePassDurationSeconds { get; set; }
		
		/// <summary>
		/// A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataflowEdge[] DataflowEdges { get; set; }
		
		/// <summary>
		/// Smallest amount of time in seconds that you‚Äôd like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public int MinimumViableContactDurationSeconds { get; set; }
		
		/// <summary>
		/// Name of a mission profile.
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[ a-zA-Z0-9_:-]{1,256}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Tags assigned to a mission profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
		
		/// <summary>
		/// ARN of a tracking <code>Config</code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrackingConfigArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateConfigBody
	{
		
		/// <summary>
		/// <p>Object containing the parameters of a <code>Config</code>.</p> <p>See the subtype definitions for what each type of <code>Config</code> contains.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConfigData { get; set; }
		
		/// <summary>
		/// Name of a <code>Config</code>.
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[ a-zA-Z0-9_:-]{1,256}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMissionProfileBody
	{
		
		/// <summary>
		/// Amount of time after a contact ends that you‚Äôd like to receive a CloudWatch event indicating the pass has finished.
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public System.Nullable<System.Int32> ContactPostPassDurationSeconds { get; set; }
		
		/// <summary>
		/// Amount of time after a contact ends that you‚Äôd like to receive a CloudWatch event indicating the pass has finished.
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public System.Nullable<System.Int32> ContactPrePassDurationSeconds { get; set; }
		
		/// <summary>
		/// A list of lists of ARNs. Each list of ARNs is an edge, with a <i>from</i> <code>Config</code> and a <i>to</i> <code>Config</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataflowEdge[] DataflowEdges { get; set; }
		
		/// <summary>
		/// Smallest amount of time in seconds that you‚Äôd like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
		/// Minimum: 1
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 21600)]
		public System.Nullable<System.Int32> MinimumViableContactDurationSeconds { get; set; }
		
		/// <summary>
		/// Name of a mission profile.
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^[ a-zA-Z0-9_:-]{1,256}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// ARN of a tracking <code>Config</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TrackingConfigArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMinuteUsageBody
	{
		
		/// <summary>
		/// The month being requested, with a value of 1-12.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Month { get; set; }
		
		/// <summary>
		/// The year being requested, in the format of YYYY.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListContactsBody
	{
		
		/// <summary>
		/// End time of a contact.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Name of a ground station.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GroundStation { get; set; }
		
		/// <summary>
		/// Maximum number of contacts returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// ARN of a mission profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MissionProfileArn { get; set; }
		
		/// <summary>
		/// Next token returned in the request of a previous <code>ListContacts</code> call. Used to get the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// ARN of a satellite.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SatelliteArn { get; set; }
		
		/// <summary>
		/// Start time of a contact.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Status of a contact reservation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContactStatus[] StatusList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		/// Tags assigned to a resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReserveContactBody
	{
		
		/// <summary>
		/// End time of a contact.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Name of a ground station.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroundStation { get; set; }
		
		/// <summary>
		/// ARN of a mission profile.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MissionProfileArn { get; set; }
		
		/// <summary>
		/// ARN of a satellite
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SatelliteArn { get; set; }
		
		/// <summary>
		/// Start time of a contact.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Tags assigned to a contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
