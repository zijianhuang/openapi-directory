//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAppResponse
	{
		
		/// <summary>
		/// Information about the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AppSummary AppSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServerGroup[] ServerGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAppRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServerGroup[] ServerGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateReplicationJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationJobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateReplicationJobRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServerId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SeedReplicationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RunOnce { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateReplicationJobRequestLicenseType LicenseType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfRecentAmisToKeep { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateReplicationJobRequestLicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYOL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteAppRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceStopAppReplication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceTerminateApp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteAppLaunchConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteAppReplicationConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteReplicationJobRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationJobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateConnectorRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GenerateChangeSetResponse
	{
		
		/// <summary>
		/// Location of the Amazon S3 object in the customer's account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Location S3Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GenerateChangeSetRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GenerateChangeSetRequestChangesetFormat ChangesetFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GenerateChangeSetRequestChangesetFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YAML = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GenerateTemplateResponse
	{
		
		/// <summary>
		/// Location of the Amazon S3 object in the customer's account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Location S3Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GenerateTemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GenerateTemplateRequestTemplateFormat TemplateFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GenerateTemplateRequestTemplateFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YAML = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAppResponse
	{
		
		/// <summary>
		/// Information about the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AppSummary AppSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServerGroup[] ServerGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAppRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAppLaunchConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServerGroupLaunchConfiguration[] ServerGroupLaunchConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAppLaunchConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAppReplicationConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ServerGroupReplicationConfiguration[] ServerGroupReplicationConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAppReplicationConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetConnectorsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Connector[] ConnectorList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetConnectorsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetReplicationJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReplicationJob[] ReplicationJobList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetReplicationJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetReplicationRunsResponse
	{
		
		/// <summary>
		/// Represents a replication job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReplicationJob ReplicationJob { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReplicationRun[] ReplicationRunList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetReplicationRunsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetServersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetServersResponseServerCatalogStatus ServerCatalogStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Server[] ServerList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetServersResponseServerCatalogStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_IMPORTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORTING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetServersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VmServerAddress[] VmServerAddressList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchAppRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAppsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppSummary[] Apps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAppsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AppId[] AppIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutAppLaunchConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServerGroupLaunchConfiguration[] ServerGroupLaunchConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutAppReplicationConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServerGroupReplicationConfiguration[] ServerGroupReplicationConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartAppReplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartOnDemandReplicationRunResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationRunId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartOnDemandReplicationRunRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopAppReplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TerminateAppRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAppResponse
	{
		
		/// <summary>
		/// Information about the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AppSummary AppSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServerGroup[] ServerGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAppRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServerGroup[] ServerGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateReplicationJobRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NextReplicationRunStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateReplicationJobRequestLicenseType LicenseType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfRecentAmisToKeep { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateReplicationJobRequestLicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYOL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AppLaunchStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_FOR_CONFIGURATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURATION_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURATION_INVALID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_FOR_LAUNCH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_IN_PROGRESS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCHED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELTA_LAUNCH_IN_PROGRESS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELTA_LAUNCH_FAILED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_FAILED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_IN_PROGRESS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_FAILED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AppReplicationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_FOR_CONFIGURATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURATION_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURATION_INVALID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_FOR_REPLICATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_IN_PROGRESS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELTA_REPLICATION_IN_PROGRESS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELTA_REPLICATED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELTA_REPLICATION_FAILED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_FAILED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_STOPPING = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_STOP_FAILED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_STOPPED = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AppStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 5,
	}
	
	/// <summary>
	/// Details about the latest launch of an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LatestLaunchTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StackId { get; set; }
	}
	
	/// <summary>
	/// Information about the application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AppSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AppId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppSummaryReplicationStatus ReplicationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LatestReplicationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AppSummaryLaunchStatus LaunchStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchStatusMessage { get; set; }
		
		/// <summary>
		/// Details about the latest launch of an application.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchDetails LaunchDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalServerGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalServers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AppSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_FAILED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AppSummaryReplicationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_FOR_CONFIGURATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURATION_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURATION_INVALID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_FOR_REPLICATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_IN_PROGRESS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELTA_REPLICATION_IN_PROGRESS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELTA_REPLICATED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELTA_REPLICATION_FAILED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_FAILED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_STOPPING = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_STOP_FAILED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICATION_STOPPED = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AppSummaryLaunchStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_FOR_CONFIGURATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURATION_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURATION_INVALID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_FOR_LAUNCH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_IN_PROGRESS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCHED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELTA_LAUNCH_IN_PROGRESS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELTA_LAUNCH_FAILED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAUNCH_FAILED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_IN_PROGRESS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_FAILED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConnectorStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTHY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHEALTHY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VmManagerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VSPHERE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCVMM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPERV-MANAGER = 2,
	}
	
	/// <summary>
	/// Represents a connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Connector
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectorStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectorCapability[] CapabilityList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VmManagerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectorVmManagerType VmManagerType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VmManagerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MacAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AssociatedOn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConnectorStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTHY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHEALTHY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConnectorVmManagerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VSPHERE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCVMM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPERV-MANAGER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConnectorCapability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VSPHERE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCVMM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPERV-MANAGER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPSHOT_BATCHING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYOL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OutputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YAML = 1,
	}
	
	/// <summary>
	/// Location of the Amazon S3 object in the customer's account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3Location
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
	}
	
	/// <summary>
	/// Represents a replication job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplicationJob
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReplicationJobServerType ServerType { get; set; }
		
		/// <summary>
		/// Represents a VM server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VmServer VmServer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SeedReplicationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RunOnce { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NextReplicationRunStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReplicationJobLicenseType LicenseType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestAmiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReplicationJobState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfRecentAmisToKeep { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReplicationRun[] ReplicationRunList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReplicationJobServerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRTUAL_MACHINE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReplicationJobLicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYOL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReplicationJobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED_ON_FAILURE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILING = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ServerCatalogStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_IMPORTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORTING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ServerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRTUAL_MACHINE = 0,
	}
	
	/// <summary>
	/// Represents a VM server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VmServer
	{
		
		/// <summary>
		/// Represents a VM server location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VmServerAddress VmServerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VmName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VmManagerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VmServerVmManagerType VmManagerType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VmPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VmServerVmManagerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VSPHERE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCVMM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPERV-MANAGER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReplicationJobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED_ON_FAILURE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILING = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReplicationRunState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReplicationRunType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATIC = 1,
	}
	
	/// <summary>
	/// Details of the current stage of a replication run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplicationRunStageDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Stage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StageProgress { get; set; }
	}
	
	/// <summary>
	/// Represents a replication run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplicationRun
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationRunId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReplicationRunState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReplicationRunType Type { get; set; }
		
		/// <summary>
		/// Details of the current stage of a replication run.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReplicationRunStageDetails StageDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AmiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ScheduledStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReplicationRunState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReplicationRunType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATIC = 1,
	}
	
	/// <summary>
	/// Represents a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Server
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServerServerType ServerType { get; set; }
		
		/// <summary>
		/// Represents a VM server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VmServer VmServer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationJobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReplicationJobTerminated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ServerServerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRTUAL_MACHINE = 0,
	}
	
	/// <summary>
	/// A logical grouping of servers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServerGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Server[] ServerList { get; set; }
	}
	
	/// <summary>
	/// Launch configuration for a server group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServerGroupLaunchConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LaunchOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServerLaunchConfiguration[] ServerLaunchConfigurations { get; set; }
	}
	
	/// <summary>
	/// Replication configuration for a server group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServerGroupReplicationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServerReplicationConfiguration[] ServerReplicationConfigurations { get; set; }
	}
	
	/// <summary>
	/// A script that runs on first launch of an Amazon EC2 instance. Used for configuring the server during launch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserData
	{
		
		/// <summary>
		/// Location of the Amazon S3 object in the customer's account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Location S3Location { get; set; }
	}
	
	/// <summary>
	/// Launch configuration for a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServerLaunchConfiguration
	{
		
		/// <summary>
		/// Represents a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Server Server { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogicalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Vpc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Subnet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ec2KeyName { get; set; }
		
		/// <summary>
		/// A script that runs on first launch of an Amazon EC2 instance. Used for configuring the server during launch.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserData UserData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AssociatePublicIpAddress { get; set; }
	}
	
	/// <summary>
	/// Replication parameters for replicating a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServerReplicationParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SeedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RunOnce { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServerReplicationParametersLicenseType LicenseType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfRecentAmisToKeep { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ServerReplicationParametersLicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYOL = 1,
	}
	
	/// <summary>
	/// Replication configuration of a server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServerReplicationConfiguration
	{
		
		/// <summary>
		/// Represents a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Server Server { get; set; }
		
		/// <summary>
		/// Replication parameters for replicating a server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServerReplicationParameters ServerReplicationParameters { get; set; }
	}
	
	/// <summary>
	/// A label that can be assigned to an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represents a VM server location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VmServerAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VmManagerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VmId { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates an application. An application consists of one or more server groups. Each server group contain one or more servers.
		/// CreateApp /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.CreateApp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAppResponse> CreateAppAsync(CreateAppRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.CreateApp";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateAppResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a replication job. The replication job schedules periodic replication runs to replicate your server to AWS. Each replication run creates an Amazon Machine Image (AMI).
		/// CreateReplicationJob /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.CreateReplicationJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateReplicationJobResponse> CreateReplicationJobAsync(CreateReplicationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.CreateReplicationJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateReplicationJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing application. Optionally deletes the launched stack associated with the application and all AWS SMS replication jobs for servers in the application.
		/// DeleteApp /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteApp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAppResponse> DeleteAppAsync(DeleteAppRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteApp";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteAppResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes existing launch configuration for an application.
		/// DeleteAppLaunchConfiguration /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteAppLaunchConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAppLaunchConfigurationResponse> DeleteAppLaunchConfigurationAsync(DeleteAppLaunchConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteAppLaunchConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteAppLaunchConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes existing replication configuration for an application.
		/// DeleteAppReplicationConfiguration /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteAppReplicationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAppReplicationConfigurationResponse> DeleteAppReplicationConfigurationAsync(DeleteAppReplicationConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteAppReplicationConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteAppReplicationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified replication job.</p> <p>After you delete a replication job, there are no further replication runs. AWS deletes the contents of the Amazon S3 bucket used to store AWS SMS artifacts. The AMIs created by the replication runs are not deleted.</p>
		/// DeleteReplicationJob /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteReplicationJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteReplicationJobResponse> DeleteReplicationJobAsync(DeleteReplicationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteReplicationJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteReplicationJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes all servers from your server catalog.
		/// DeleteServerCatalog /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteServerCatalog
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteServerCatalogResponse> DeleteServerCatalogAsync(DeleteServerCatalogRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteServerCatalog";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteServerCatalogResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates the specified connector from AWS SMS.</p> <p>After you disassociate a connector, it is no longer available to support replication jobs.</p>
		/// DisassociateConnector /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DisassociateConnector
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateConnectorResponse> DisassociateConnectorAsync(DisassociateConnectorRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DisassociateConnector";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisassociateConnectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generates a target change set for a currently launched stack and writes it to an Amazon S3 object in the customer’s Amazon S3 bucket.
		/// GenerateChangeSet /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GenerateChangeSet
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GenerateChangeSetResponse> GenerateChangeSetAsync(GenerateChangeSetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GenerateChangeSet";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GenerateChangeSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generates an Amazon CloudFormation template based on the current launch configuration and writes it to an Amazon S3 object in the customer’s Amazon S3 bucket.
		/// GenerateTemplate /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GenerateTemplate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GenerateTemplateResponse> GenerateTemplateAsync(GenerateTemplateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GenerateTemplate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GenerateTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve information about an application.
		/// GetApp /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetApp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAppResponse> GetAppAsync(GetAppRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetApp";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAppResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the application launch configuration associated with an application.
		/// GetAppLaunchConfiguration /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppLaunchConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAppLaunchConfigurationResponse> GetAppLaunchConfigurationAsync(GetAppLaunchConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppLaunchConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAppLaunchConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves an application replication configuration associatd with an application.
		/// GetAppReplicationConfiguration /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppReplicationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAppReplicationConfigurationResponse> GetAppReplicationConfigurationAsync(GetAppReplicationConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppReplicationConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAppReplicationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the connectors registered with the AWS SMS.
		/// GetConnectors /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetConnectors
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetConnectorsResponse> GetConnectorsAsync(string maxResults, string nextToken, GetConnectorsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetConnectors?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetConnectorsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the specified replication job or all of your replication jobs.
		/// GetReplicationJobs /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetReplicationJobs
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetReplicationJobsResponse> GetReplicationJobsAsync(string maxResults, string nextToken, GetReplicationJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetReplicationJobs?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetReplicationJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the replication runs for the specified replication job.
		/// GetReplicationRuns /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetReplicationRuns
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetReplicationRunsResponse> GetReplicationRunsAsync(string maxResults, string nextToken, GetReplicationRunsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetReplicationRuns?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetReplicationRunsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the servers in your server catalog.</p> <p>Before you can describe your servers, you must import them using <a>ImportServerCatalog</a>.</p>
		/// GetServers /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetServers
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetServersResponse> GetServersAsync(string maxResults, string nextToken, GetServersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetServers?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetServersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gathers a complete list of on-premises servers. Connectors must be installed and monitoring all servers that you want to import.</p> <p>This call returns immediately, but might take additional time to retrieve all the servers.</p>
		/// ImportServerCatalog /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.ImportServerCatalog
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ImportServerCatalogResponse> ImportServerCatalogAsync(ImportServerCatalogRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.ImportServerCatalog";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ImportServerCatalogResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Launches an application stack.
		/// LaunchApp /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.LaunchApp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LaunchAppResponse> LaunchAppAsync(LaunchAppRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.LaunchApp";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<LaunchAppResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of summaries for all applications.
		/// ListApps /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.ListApps
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListAppsResponse> ListAppsAsync(ListAppsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.ListApps";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListAppsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a launch configuration for an application.
		/// PutAppLaunchConfiguration /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.PutAppLaunchConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutAppLaunchConfigurationResponse> PutAppLaunchConfigurationAsync(PutAppLaunchConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.PutAppLaunchConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutAppLaunchConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a replication configuration for an application.
		/// PutAppReplicationConfiguration /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.PutAppReplicationConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutAppReplicationConfigurationResponse> PutAppReplicationConfigurationAsync(PutAppReplicationConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.PutAppReplicationConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutAppReplicationConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts replicating an application.
		/// StartAppReplication /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StartAppReplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartAppReplicationResponse> StartAppReplicationAsync(StartAppReplicationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StartAppReplication";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartAppReplicationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts an on-demand replication run for the specified replication job. This replication run starts immediately. This replication run is in addition to the ones already scheduled.</p> <p>There is a limit on the number of on-demand replications runs you can request in a 24-hour period.</p>
		/// StartOnDemandReplicationRun /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StartOnDemandReplicationRun
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartOnDemandReplicationRunResponse> StartOnDemandReplicationRunAsync(StartOnDemandReplicationRunRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StartOnDemandReplicationRun";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartOnDemandReplicationRunResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops replicating an application.
		/// StopAppReplication /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StopAppReplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopAppReplicationResponse> StopAppReplicationAsync(StopAppReplicationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StopAppReplication";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopAppReplicationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Terminates the stack for an application.
		/// TerminateApp /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.TerminateApp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TerminateAppResponse> TerminateAppAsync(TerminateAppRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.TerminateApp";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TerminateAppResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an application.
		/// UpdateApp /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.UpdateApp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateAppResponse> UpdateAppAsync(UpdateAppRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.UpdateApp";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateAppResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the specified settings for the specified replication job.
		/// UpdateReplicationJob /#X-Amz-Target=AWSServerMigrationService_V2016_10_24.UpdateReplicationJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateReplicationJobResponse> UpdateReplicationJobAsync(UpdateReplicationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.UpdateReplicationJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateReplicationJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
