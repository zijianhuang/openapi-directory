//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddTagsToCertificateRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteCertificateRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeCertificateResponse
	{
		
		/// <summary>
		/// Contains metadata about an ACM certificate. This structure is returned in the response to a <a>DescribeCertificate</a> request. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CertificateDetail Certificate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeCertificateRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportCertificateResponse
	{
		
		/// <summary>
		/// Max length: 32768
		/// Min length: 1
		/// Pattern: -{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768, MinimumLength=1)]
		public string Certificate { get; set; }
		
		/// <summary>
		/// Max length: 2097152
		/// Min length: 1
		/// Pattern: (-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}\u000D?\u000A)*-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2097152, MinimumLength=1)]
		public string CertificateChain { get; set; }
		
		/// <summary>
		/// Max length: 524288
		/// Min length: 1
		/// Pattern: -{5}BEGIN PRIVATE KEY-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END PRIVATE KEY-{5}(\u000D?\u000A)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(524288, MinimumLength=1)]
		public string PrivateKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportCertificateRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=4)]
		public string Passphrase { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCertificateResponse
	{
		
		/// <summary>
		/// Max length: 32768
		/// Min length: 1
		/// Pattern: -{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768, MinimumLength=1)]
		public string Certificate { get; set; }
		
		/// <summary>
		/// Max length: 2097152
		/// Min length: 1
		/// Pattern: (-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}\u000D?\u000A)*-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2097152, MinimumLength=1)]
		public string CertificateChain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCertificateRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportCertificateResponse
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportCertificateRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768, MinimumLength=1)]
		public string Certificate { get; set; }
		
		/// <summary>
		/// Max length: 5120
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(5120, MinimumLength=1)]
		public string PrivateKey { get; set; }
		
		/// <summary>
		/// Max length: 2097152
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2097152, MinimumLength=1)]
		public string CertificateChain { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListCertificatesResponse
	{
		
		/// <summary>
		/// Max length: 10000
		/// Min length: 1
		/// Pattern: [\u0009\u000A\u000D\u0020-\u00FF]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10000, MinimumLength=1)]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CertificateSummary[] CertificateSummaryList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListCertificatesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CertificateStatus[] CertificateStatuses { get; set; }
		
		/// <summary>
		/// This structure can be used in the <a>ListCertificates</a> action to filter the output of the certificate list. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Filters Includes { get; set; }
		
		/// <summary>
		/// Max length: 10000
		/// Min length: 1
		/// Pattern: [\u0009\u000A\u000D\u0020-\u00FF]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10000, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForCertificateResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForCertificateRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveTagsFromCertificateRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RenewCertificateRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestCertificateResponse
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestCertificateRequest
	{
		
		/// <summary>
		/// Max length: 253
		/// Min length: 1
		/// Pattern: ^(\*\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(253, MinimumLength=1)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RequestCertificateRequestValidationMethod ValidationMethod { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DomainNameString[] SubjectAlternativeNames { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: \w+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string IdempotencyToken { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DomainValidationOption[] DomainValidationOptions { get; set; }
		
		/// <summary>
		/// Structure that contains options for your certificate. Currently, you can use this only to specify whether to opt in to or out of certificate transparency logging. Some browsers require that public certificates issued for your domain be recorded in a log. Certificates that are not logged typically generate a browser error. Transparency makes it possible for you to detect SSL/TLS certificates that have been mistakenly or maliciously issued for your domain. For general information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency">Certificate Transparency Logging</a>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CertificateOptions Options { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateAuthorityArn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RequestCertificateRequestValidationMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResendValidationEmailRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Max length: 253
		/// Min length: 1
		/// Pattern: ^(\*\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(253, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Max length: 253
		/// Min length: 1
		/// Pattern: ^(\*\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(253, MinimumLength=1)]
		public string ValidationDomain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateCertificateOptionsRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Structure that contains options for your certificate. Currently, you can use this only to specify whether to opt in to or out of certificate transparency logging. Some browsers require that public certificates issued for your domain be recorded in a log. Certificates that are not logged typically generate a browser error. Transparency makes it possible for you to detect SSL/TLS certificates that have been mistakenly or maliciously issued for your domain. For general information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency">Certificate Transparency Logging</a>. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CertificateOptions Options { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CertificateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VALIDATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISSUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVOKED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RevocationReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_COMPROMISE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_COMPROMISE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFFILIATION_CHANGED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPERCEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CESSATION_OF_OPERATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERTIFICATE_HOLD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE_FROM_CRL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGE_WITHDRAWN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A_A_COMPROMISE = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum KeyAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_2048 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_1024 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_4096 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC_prime256v1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC_secp384r1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC_secp521r1 = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FailureReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_AVAILABLE_CONTACTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITIONAL_VERIFICATION_REQUIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_NOT_ALLOWED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_PUBLIC_DOMAIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_VALIDATION_DENIED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAA_ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_LIMIT_EXCEEDED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_INVALID_ARN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_INVALID_STATE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_REQUEST_FAILED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_NAME_CONSTRAINTS_VALIDATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_RESOURCE_NOT_FOUND = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_INVALID_ARGS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_INVALID_DURATION = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_ACCESS_DENIED = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CertificateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_ISSUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 2,
	}
	
	/// <summary>
	/// Contains information about the status of ACM's <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for the certificate. This structure exists only when the certificate type is <code>AMAZON_ISSUED</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RenewalSummary
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RenewalSummaryRenewalStatus RenewalStatus { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public DomainValidation[] DomainValidationOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RenewalSummaryRenewalStatusReason RenewalStatusReason { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RenewalSummaryRenewalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_AUTO_RENEWAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VALIDATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RenewalSummaryRenewalStatusReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_AVAILABLE_CONTACTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITIONAL_VERIFICATION_REQUIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_NOT_ALLOWED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_PUBLIC_DOMAIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_VALIDATION_DENIED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAA_ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_LIMIT_EXCEEDED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_INVALID_ARN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_INVALID_STATE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_REQUEST_FAILED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_NAME_CONSTRAINTS_VALIDATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_RESOURCE_NOT_FOUND = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_INVALID_ARGS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_INVALID_DURATION = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_ACCESS_DENIED = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RenewalEligibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELIGIBLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INELIGIBLE = 1,
	}
	
	/// <summary>
	/// Structure that contains options for your certificate. Currently, you can use this only to specify whether to opt in to or out of certificate transparency logging. Some browsers require that public certificates issued for your domain be recorded in a log. Certificates that are not logged typically generate a browser error. Transparency makes it possible for you to detect SSL/TLS certificates that have been mistakenly or maliciously issued for your domain. For general information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency">Certificate Transparency Logging</a>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CertificateOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CertificateOptionsCertificateTransparencyLoggingPreference CertificateTransparencyLoggingPreference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CertificateOptionsCertificateTransparencyLoggingPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Contains metadata about an ACM certificate. This structure is returned in the response to a <a>DescribeCertificate</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CertificateDetail
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Max length: 253
		/// Min length: 1
		/// Pattern: ^(\*\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(253, MinimumLength=1)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DomainNameString[] SubjectAlternativeNames { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public DomainValidation[] DomainValidationOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Serial { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Issuer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> IssuedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ImportedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CertificateDetailStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RevokedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CertificateDetailRevocationReason RevocationReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NotBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NotAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CertificateDetailKeyAlgorithm KeyAlgorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SignatureAlgorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] InUseBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CertificateDetailFailureReason FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CertificateDetailType Type { get; set; }
		
		/// <summary>
		/// Contains information about the status of ACM's <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for the certificate. This structure exists only when the certificate type is <code>AMAZON_ISSUED</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RenewalSummary RenewalSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeyUsage[] KeyUsages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExtendedKeyUsage[] ExtendedKeyUsages { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateAuthorityArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CertificateDetailRenewalEligibility RenewalEligibility { get; set; }
		
		/// <summary>
		/// Structure that contains options for your certificate. Currently, you can use this only to specify whether to opt in to or out of certificate transparency logging. Some browsers require that public certificates issued for your domain be recorded in a log. Certificates that are not logged typically generate a browser error. Transparency makes it possible for you to detect SSL/TLS certificates that have been mistakenly or maliciously issued for your domain. For general information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency">Certificate Transparency Logging</a>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CertificateOptions Options { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CertificateDetailStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VALIDATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISSUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVOKED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CertificateDetailRevocationReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_COMPROMISE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_COMPROMISE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFFILIATION_CHANGED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPERCEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CESSATION_OF_OPERATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERTIFICATE_HOLD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE_FROM_CRL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGE_WITHDRAWN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A_A_COMPROMISE = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CertificateDetailKeyAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_2048 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_1024 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_4096 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC_prime256v1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC_secp384r1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC_secp521r1 = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CertificateDetailFailureReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_AVAILABLE_CONTACTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITIONAL_VERIFICATION_REQUIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_NOT_ALLOWED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_PUBLIC_DOMAIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_VALIDATION_DENIED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAA_ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_LIMIT_EXCEEDED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_INVALID_ARN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_INVALID_STATE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_REQUEST_FAILED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_NAME_CONSTRAINTS_VALIDATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_RESOURCE_NOT_FOUND = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_INVALID_ARGS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_INVALID_DURATION = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCA_ACCESS_DENIED = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CertificateDetailType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_ISSUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CertificateDetailRenewalEligibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELIGIBLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INELIGIBLE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CertificateTransparencyLoggingPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// This structure is returned in the response object of <a>ListCertificates</a> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CertificateSummary
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// Max length: 253
		/// Min length: 1
		/// Pattern: ^(\*\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(253, MinimumLength=1)]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VALIDATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	/// <summary>
	/// Contains a DNS record value that you can use to can use to validate ownership or control of a domain. This is used by the <a>DescribeCertificate</a> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceRecord
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceRecordType Type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceRecordType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CNAME = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ValidationMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS = 1,
	}
	
	/// <summary>
	/// Contains information about the validation of each domain name in the certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainValidation
	{
		
		/// <summary>
		/// Max length: 253
		/// Min length: 1
		/// Pattern: ^(\*\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(253, MinimumLength=1)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ValidationEmails { get; set; }
		
		/// <summary>
		/// Max length: 253
		/// Min length: 1
		/// Pattern: ^(\*\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(253, MinimumLength=1)]
		public string ValidationDomain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainValidationValidationStatus ValidationStatus { get; set; }
		
		/// <summary>
		/// Contains a DNS record value that you can use to can use to validate ownership or control of a domain. This is used by the <a>DescribeCertificate</a> action. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceRecord ResourceRecord { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainValidationValidationMethod ValidationMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainValidationValidationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VALIDATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainValidationValidationMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNS = 1,
	}
	
	/// <summary>
	/// Contains information about the domain names that you want ACM to use to send you emails that enable you to validate domain ownership.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainValidationOption
	{
		
		/// <summary>
		/// Max length: 253
		/// Min length: 1
		/// Pattern: ^(\*\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(253, MinimumLength=1)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Max length: 253
		/// Min length: 1
		/// Pattern: ^(\*\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(253, MinimumLength=1)]
		public string ValidationDomain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExtendedKeyUsageName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS_WEB_SERVER_AUTHENTICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS_WEB_CLIENT_AUTHENTICATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODE_SIGNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL_PROTECTION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_STAMPING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCSP_SIGNING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPSEC_END_SYSTEM = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPSEC_TUNNEL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPSEC_USER = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 11,
	}
	
	/// <summary>
	/// The Extended Key Usage X.509 v3 extension defines one or more purposes for which the public key can be used. This is in addition to or in place of the basic purposes specified by the Key Usage extension. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExtendedKeyUsage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExtendedKeyUsageName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExtendedKeyUsageName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS_WEB_SERVER_AUTHENTICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS_WEB_CLIENT_AUTHENTICATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODE_SIGNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL_PROTECTION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_STAMPING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCSP_SIGNING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPSEC_END_SYSTEM = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPSEC_TUNNEL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPSEC_USER = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 11,
	}
	
	/// <summary>
	/// This structure can be used in the <a>ListCertificates</a> action to filter the output of the certificate list. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Filters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExtendedKeyUsageName[] ExtendedKeyUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeyUsageName[] KeyUsage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeyAlgorithm[] KeyTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum KeyUsageName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIGITAL_SIGNATURE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_REPUDIATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_ENCIPHERMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_ENCIPHERMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_AGREEMENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERTIFICATE_SIGNING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRL_SIGNING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCIPHER_ONLY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECIPHER_ONLY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 10,
	}
	
	/// <summary>
	/// The Key Usage X.509 v3 extension defines the purpose of the public key contained in the certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KeyUsage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public KeyUsageName Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum KeyUsageName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIGITAL_SIGNATURE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_REPUDIATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_ENCIPHERMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_ENCIPHERMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_AGREEMENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERTIFICATE_SIGNING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRL_SIGNING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCIPHER_ONLY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECIPHER_ONLY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RecordType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CNAME = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RenewalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_AUTO_RENEWAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VALIDATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// A key-value pair that identifies or specifies metadata about an ACM resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{Z}\p{N}_.:\/=+\-@]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\p{L}\p{Z}\p{N}_.:\/=+\-@]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Value { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Adds one or more tags to an ACM certificate. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a <code>key</code> and an optional <code>value</code>. You specify the certificate on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. </p> <p>You can apply a tag to just one certificate if you want to identify a specific characteristic of that certificate, or you can apply the same tag to multiple certificates if you want to filter for a common relationship among those certificates. Similarly, you can apply the same tag to multiple resources if you want to specify a relationship among those resources. For example, you can add the same tag to an ACM certificate and an Elastic Load Balancing load balancer to indicate that they are both used by the same website. For more information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/tags.html">Tagging ACM certificates</a>. </p> <p>To remove one or more tags, use the <a>RemoveTagsFromCertificate</a> action. To view all of the tags that have been applied to the certificate, use the <a>ListTagsForCertificate</a> action. </p>
		/// AddTagsToCertificate #X-Amz-Target=CertificateManager.AddTagsToCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task AddTagsToCertificateAsync(AddTagsToCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CertificateManager.AddTagsToCertificate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a certificate and its associated private key. If this action succeeds, the certificate no longer appears in the list that can be displayed by calling the <a>ListCertificates</a> action or be retrieved by calling the <a>GetCertificate</a> action. The certificate will not be available for use by AWS services integrated with ACM. </p> <note> <p>You cannot delete an ACM certificate that is being used by another AWS service. To delete a certificate that is in use, the certificate association must first be removed.</p> </note>
		/// DeleteCertificate #X-Amz-Target=CertificateManager.DeleteCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteCertificateAsync(DeleteCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CertificateManager.DeleteCertificate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns detailed metadata about the specified ACM certificate.
		/// DescribeCertificate #X-Amz-Target=CertificateManager.DescribeCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeCertificateResponse> DescribeCertificateAsync(DescribeCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CertificateManager.DescribeCertificate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeCertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Exports a private certificate issued by a private certificate authority (CA) for use anywhere. The exported file contains the certificate, the certificate chain, and the encrypted private 2048-bit RSA key associated with the public key that is embedded in the certificate. For security, you must assign a passphrase for the private key when exporting it. </p> <p>For information about exporting and formatting a certificate using the ACM console or CLI, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-export-private.html">Export a Private Certificate</a>.</p>
		/// ExportCertificate #X-Amz-Target=CertificateManager.ExportCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ExportCertificateResponse> ExportCertificateAsync(ExportCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CertificateManager.ExportCertificate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ExportCertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves an Amazon-issued certificate and its certificate chain. The chain consists of the certificate of the issuing CA and the intermediate certificates of any other subordinate CAs. All of the certificates are base64 encoded. You can use <a href="https://wiki.openssl.org/index.php/Command_Line_Utilities">OpenSSL</a> to decode the certificates and inspect individual fields.
		/// GetCertificate #X-Amz-Target=CertificateManager.GetCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCertificateResponse> GetCertificateAsync(GetCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CertificateManager.GetCertificate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetCertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Imports a certificate into AWS Certificate Manager (ACM) to use with services that are integrated with ACM. Note that <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-services.html">integrated services</a> allow only certificate types and keys they support to be associated with their resources. Further, their support differs depending on whether the certificate is imported into IAM or into ACM. For more information, see the documentation for each service. For more information about importing certificates into ACM, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html">Importing Certificates</a> in the <i>AWS Certificate Manager User Guide</i>. </p> <note> <p>ACM does not provide <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html">managed renewal</a> for certificates that you import.</p> </note> <p>Note the following guidelines when importing third party certificates:</p> <ul> <li> <p>You must enter the private key that matches the certificate you are importing.</p> </li> <li> <p>The private key must be unencrypted. You cannot import a private key that is protected by a password or a passphrase.</p> </li> <li> <p>If the certificate you are importing is not self-signed, you must enter its certificate chain.</p> </li> <li> <p>If a certificate chain is included, the issuer must be the subject of one of the certificates in the chain.</p> </li> <li> <p>The certificate, private key, and certificate chain must be PEM-encoded.</p> </li> <li> <p>The current time must be between the <code>Not Before</code> and <code>Not After</code> certificate fields.</p> </li> <li> <p>The <code>Issuer</code> field must not be empty.</p> </li> <li> <p>The OCSP authority URL, if present, must not exceed 1000 characters.</p> </li> <li> <p>To import a new certificate, omit the <code>CertificateArn</code> argument. Include this argument only when you want to replace a previously imported certifica</p> </li> <li> <p>When you import a certificate by using the CLI, you must specify the certificate, the certificate chain, and the private key by their file names preceded by <code>file://</code>. For example, you can specify a certificate saved in the <code>C:\temp</code> folder as <code>file://C:\temp\certificate_to_import.pem</code>. If you are making an HTTP or HTTPS Query request, include these arguments as BLOBs. </p> </li> <li> <p>When you import a certificate by using an SDK, you must specify the certificate, the certificate chain, and the private key files in the manner required by the programming language you're using. </p> </li> <li> <p>The cryptographic algorithm of an imported certificate must match the algorithm of the signing CA. For example, if the signing CA key type is RSA, then the certificate key type must also be RSA.</p> </li> </ul> <p>This operation returns the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of the imported certificate.</p>
		/// ImportCertificate #X-Amz-Target=CertificateManager.ImportCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ImportCertificateResponse> ImportCertificateAsync(ImportCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CertificateManager.ImportCertificate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ImportCertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of certificate ARNs and domain names. You can request that only certificates that match a specific status be listed. You can also filter by specific attributes of the certificate. Default filtering returns only <code>RSA_2048</code> certificates. For more information, see <a>Filters</a>.
		/// ListCertificates #X-Amz-Target=CertificateManager.ListCertificates
		/// </summary>
		/// <param name="MaxItems">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListCertificatesResponse> ListCertificatesAsync(string MaxItems, string NextToken, ListCertificatesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CertificateManager.ListCertificates?MaxItems=" + (MaxItems==null? "" : Uri.EscapeDataString(MaxItems))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListCertificatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the tags that have been applied to the ACM certificate. Use the certificate's Amazon Resource Name (ARN) to specify the certificate. To add a tag to an ACM certificate, use the <a>AddTagsToCertificate</a> action. To delete a tag, use the <a>RemoveTagsFromCertificate</a> action.
		/// ListTagsForCertificate #X-Amz-Target=CertificateManager.ListTagsForCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForCertificateResponse> ListTagsForCertificateAsync(ListTagsForCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CertificateManager.ListTagsForCertificate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForCertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Remove one or more tags from an ACM certificate. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this function, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. </p> <p>To add tags to a certificate, use the <a>AddTagsToCertificate</a> action. To view all of the tags that have been applied to a specific ACM certificate, use the <a>ListTagsForCertificate</a> action. </p>
		/// RemoveTagsFromCertificate #X-Amz-Target=CertificateManager.RemoveTagsFromCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task RemoveTagsFromCertificateAsync(RemoveTagsFromCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CertificateManager.RemoveTagsFromCertificate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Renews an eligable ACM certificate. At this time, only exported private certificates can be renewed with this operation. In order to renew your ACM PCA certificates with ACM, you must first <a href="https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaPermissions.html">grant the ACM service principal permission to do so</a>. For more information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/manual-renewal.html">Testing Managed Renewal</a> in the ACM User Guide.
		/// RenewCertificate #X-Amz-Target=CertificateManager.RenewCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task RenewCertificateAsync(RenewCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CertificateManager.RenewCertificate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Requests an ACM certificate for use with other AWS services. To request an ACM certificate, you must specify a fully qualified domain name (FQDN) in the <code>DomainName</code> parameter. You can also specify additional FQDNs in the <code>SubjectAlternativeNames</code> parameter. </p> <p>If you are requesting a private certificate, domain validation is not required. If you are requesting a public certificate, each domain name that you specify must be validated to verify that you own or control the domain. You can use <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html">DNS validation</a> or <a href="https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-email.html">email validation</a>. We recommend that you use DNS validation. ACM issues public certificates after receiving approval from the domain owner. </p>
		/// RequestCertificate #X-Amz-Target=CertificateManager.RequestCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RequestCertificateResponse> RequestCertificateAsync(RequestCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CertificateManager.RequestCertificate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RequestCertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resends the email that requests domain ownership validation. The domain owner or an authorized representative must approve the ACM certificate before it can be issued. The certificate can be approved by clicking a link in the mail to navigate to the Amazon certificate approval website and then clicking <b>I Approve</b>. However, the validation email can be blocked by spam filters. Therefore, if you do not receive the original mail, you can request that the mail be resent within 72 hours of requesting the ACM certificate. If more than 72 hours have elapsed since your original request or since your last attempt to resend validation mail, you must request a new certificate. For more information about setting up your contact email addresses, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/setup-email.html">Configure Email for your Domain</a>.
		/// ResendValidationEmail #X-Amz-Target=CertificateManager.ResendValidationEmail
		/// </summary>
		/// <returns>Success</returns>
		public async Task ResendValidationEmailAsync(ResendValidationEmailRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CertificateManager.ResendValidationEmail";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a certificate. Currently, you can use this function to specify whether to opt in to or out of recording your certificate in a certificate transparency log. For more information, see <a href="https://docs.aws.amazon.com/acm/latest/userguide/acm-bestpractices.html#best-practices-transparency"> Opting Out of Certificate Transparency Logging</a>.
		/// UpdateCertificateOptions #X-Amz-Target=CertificateManager.UpdateCertificateOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdateCertificateOptionsAsync(UpdateCertificateOptionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CertificateManager.UpdateCertificateOptions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
