//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDataSetResponse
	{
		
		/// <summary>
		/// An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// The type of file your data is stored in. Currently, the supported asset type is S3_SNAPSHOT.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateDataSetResponseAssetType AssetType { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// A description of a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers). When an owned data set is published in a product, AWS Data Exchange creates a copy of the data set. Subscribers can access that copy of the data set as an entitled data set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateDataSetResponseOrigin Origin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OriginDetails OriginDetails { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOf__string Tags { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDataSetResponseAssetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_SNAPSHOT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDataSetResponseOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobResponse
	{
		
		/// <summary>
		/// An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Details for the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResponseDetails Details { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobError[] Errors { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateJobResponseState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateJobResponseType Type { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAITING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_ASSETS_FROM_S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_ASSET_FROM_SIGNED_URL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT_ASSETS_TO_S3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT_ASSET_TO_SIGNED_URL = 3,
	}
	
	/// <summary>
	/// Details of the operation to be performed by the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportAssetToSignedUrlRequestDetails
	{
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssetId { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// Details of the operation to be performed by the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportAssetsToS3RequestDetails
	{
		
		/// <summary>
		/// The destination where the assets will be exported.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AssetDestinationEntry[] AssetDestinations { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Encryption configuration of the export job. Includes the encryption type as well as the AWS KMS key. The KMS key is only necessary if you chose the KMS encryption type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportServerSideEncryption Encryption { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// Details of the operation to be performed by the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportAssetFromSignedUrlRequestDetails
	{
		
		/// <summary>
		/// The name of the asset. When importing from Amazon S3, the S3 object key is used as the asset name. When exporting to Amazon S3, the asset name is used as default target S3 object key.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssetName { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Max length: 24
		/// Min length: 24
		/// Pattern: /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(24, MinimumLength=24)]
		public string Md5Hash { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// Details of the operation to be performed by the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportAssetsFromS3RequestDetails
	{
		
		/// <summary>
		/// The list of sources for the assets.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AssetSourceEntry[] AssetSources { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRevisionResponse
	{
		
		/// <summary>
		/// An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Comment { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Finalized { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOf__string Tags { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAssetResponse
	{
		
		/// <summary>
		/// An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssetDetails AssetDetails { get; set; }
		
		/// <summary>
		/// The type of file your data is stored in. Currently, the supported asset type is S3_SNAPSHOT.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GetAssetResponseAssetType AssetType { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the asset. When importing from Amazon S3, the S3 object key is used as the asset name. When exporting to Amazon S3, the asset name is used as default target S3 object key.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceId { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetAssetResponseAssetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_SNAPSHOT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDataSetResponse
	{
		
		/// <summary>
		/// An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// The type of file your data is stored in. Currently, the supported asset type is S3_SNAPSHOT.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GetDataSetResponseAssetType AssetType { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// A description of a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers). When an owned data set is published in a product, AWS Data Exchange creates a copy of the data set. Subscribers can access that copy of the data set as an entitled data set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GetDataSetResponseOrigin Origin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OriginDetails OriginDetails { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOf__string Tags { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetDataSetResponseAssetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_SNAPSHOT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetDataSetResponseOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetJobResponse
	{
		
		/// <summary>
		/// An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Details for the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResponseDetails Details { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobError[] Errors { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetJobResponseState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetJobResponseType Type { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetJobResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAITING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetJobResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_ASSETS_FROM_S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_ASSET_FROM_SIGNED_URL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT_ASSETS_TO_S3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT_ASSET_TO_SIGNED_URL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRevisionResponse
	{
		
		/// <summary>
		/// An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Comment { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Finalized { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOf__string Tags { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDataSetRevisionsResponse
	{
		
		/// <summary>
		/// The token value retrieved from a previous call to access the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RevisionEntry[] Revisions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDataSetsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DataSetEntry[] DataSets { get; set; }
		
		/// <summary>
		/// The token value retrieved from a previous call to access the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JobEntry[] Jobs { get; set; }
		
		/// <summary>
		/// The token value retrieved from a previous call to access the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListRevisionAssetsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AssetEntry[] Assets { get; set; }
		
		/// <summary>
		/// The token value retrieved from a previous call to access the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MapOf__string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAssetResponse
	{
		
		/// <summary>
		/// An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssetDetails AssetDetails { get; set; }
		
		/// <summary>
		/// The type of file your data is stored in. Currently, the supported asset type is S3_SNAPSHOT.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateAssetResponseAssetType AssetType { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the asset. When importing from Amazon S3, the S3 object key is used as the asset name. When exporting to Amazon S3, the asset name is used as default target S3 object key.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceId { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateAssetResponseAssetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_SNAPSHOT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDataSetResponse
	{
		
		/// <summary>
		/// An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// The type of file your data is stored in. Currently, the supported asset type is S3_SNAPSHOT.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateDataSetResponseAssetType AssetType { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// A description of a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers). When an owned data set is published in a product, AWS Data Exchange creates a copy of the data set. Subscribers can access that copy of the data set as an entitled data set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateDataSetResponseOrigin Origin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OriginDetails OriginDetails { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceId { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateDataSetResponseAssetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_SNAPSHOT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateDataSetResponseOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRevisionResponse
	{
		
		/// <summary>
		/// An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Comment { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Finalized { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceId { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// The destination for the asset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssetDestinationEntry
	{
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssetId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
	}
	
	/// <summary>
	/// The S3 object that is the asset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3SnapshotAsset
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssetDetails
	{
		
		/// <summary>
		/// The S3 object that is the asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3SnapshotAsset S3SnapshotAsset { get; set; }
	}
	
	/// <summary>
	/// The type of file your data is stored in. Currently, the supported asset type is S3_SNAPSHOT.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_SNAPSHOT = 0,
	}
	
	/// <summary>
	/// An asset in AWS Data Exchange is a piece of data that can be stored as an S3 object. The asset can be a structured data file, an image file, or some other data file. When you create an import job for your files, you create an asset in AWS Data Exchange for each of those files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssetEntry
	{
		
		/// <summary>
		/// An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AssetDetails AssetDetails { get; set; }
		
		/// <summary>
		/// The type of file your data is stored in. Currently, the supported asset type is S3_SNAPSHOT.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AssetEntryAssetType AssetType { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the asset. When importing from Amazon S3, the S3 object key is used as the asset name. When exporting to Amazon S3, the asset name is used as default target S3 object key.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceId { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssetEntryAssetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_SNAPSHOT = 0,
	}
	
	/// <summary>
	/// The source of the assets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssetSourceEntry
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_DENIED_EXCEPTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_SERVER_EXCEPTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALWARE_DETECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_NOT_FOUND_EXCEPTION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_QUOTA_EXCEEDED_EXCEPTION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_EXCEPTION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALWARE_SCAN_ENCRYPTED_FILE = 6,
	}
	
	/// <summary>
	/// The request body for CreateDataSet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDataSetRequest
	{
		
		/// <summary>
		/// The type of file your data is stored in. Currently, the supported asset type is S3_SNAPSHOT.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateDataSetRequestAssetType AssetType { get; set; }
		
		/// <summary>
		/// A description of a resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the model.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOf__string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDataSetRequestAssetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_SNAPSHOT = 0,
	}
	
	/// <summary>
	/// A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers). When an owned data set is published in a product, AWS Data Exchange creates a copy of the data set. Subscribers can access that copy of the data set as an entitled data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Origin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OriginDetails
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
	}
	
	/// <summary>
	/// The details for the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestDetails
	{
		
		/// <summary>
		/// Details of the operation to be performed by the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportAssetToSignedUrlRequestDetails ExportAssetToSignedUrl { get; set; }
		
		/// <summary>
		/// Details of the operation to be performed by the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportAssetsToS3RequestDetails ExportAssetsToS3 { get; set; }
		
		/// <summary>
		/// Details of the operation to be performed by the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ImportAssetFromSignedUrlRequestDetails ImportAssetFromSignedUrl { get; set; }
		
		/// <summary>
		/// Details of the operation to be performed by the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ImportAssetsFromS3RequestDetails ImportAssetsFromS3 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_ASSETS_FROM_S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_ASSET_FROM_SIGNED_URL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT_ASSETS_TO_S3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT_ASSET_TO_SIGNED_URL = 3,
	}
	
	/// <summary>
	/// The request body for CreateJob.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobRequest
	{
		
		/// <summary>
		/// The details for the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RequestDetails Details { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateJobRequestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_ASSETS_FROM_S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_ASSET_FROM_SIGNED_URL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT_ASSETS_TO_S3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT_ASSET_TO_SIGNED_URL = 3,
	}
	
	/// <summary>
	/// Details for the response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResponseDetails
	{
		
		/// <summary>
		/// The details of the export to signed URL response.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportAssetToSignedUrlResponseDetails ExportAssetToSignedUrl { get; set; }
		
		/// <summary>
		/// Details about the export to Amazon S3 response.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportAssetsToS3ResponseDetails ExportAssetsToS3 { get; set; }
		
		/// <summary>
		/// The details in the response for an import request, including the signed URL and other information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ImportAssetFromSignedUrlResponseDetails ImportAssetFromSignedUrl { get; set; }
		
		/// <summary>
		/// Details from an import from Amazon S3 response.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ImportAssetsFromS3ResponseDetails ImportAssetsFromS3 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum State
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAITING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 5,
	}
	
	/// <summary>
	/// The request body for CreateRevision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRevisionRequest
	{
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOf__string Tags { get; set; }
	}
	
	/// <summary>
	/// A data set is an AWS resource with one or more revisions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSetEntry
	{
		
		/// <summary>
		/// An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// The type of file your data is stored in. Currently, the supported asset type is S3_SNAPSHOT.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataSetEntryAssetType AssetType { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// A description of a resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the model.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers). When an owned data set is published in a product, AWS Data Exchange creates a copy of the data set. Subscribers can access that copy of the data set as an entitled data set.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataSetEntryOrigin Origin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OriginDetails OriginDetails { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceId { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSetEntryAssetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_SNAPSHOT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSetEntryOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportAssetFromSignedUrlJobErrorDetails
	{
		
		/// <summary>
		/// The name of the asset. When importing from Amazon S3, the S3 object key is used as the asset name. When exporting to Amazon S3, the asset name is used as default target S3 object key.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Details
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ImportAssetFromSignedUrlJobErrorDetails ImportAssetFromSignedUrlJobErrorDetails { get; set; }
		
		/// <summary>
		/// The list of sources for the assets.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AssetSourceEntry[] ImportAssetsFromS3JobErrorDetails { get; set; }
	}
	
	/// <summary>
	/// The details of the export to signed URL response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportAssetToSignedUrlResponseDetails
	{
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssetId { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SignedUrl { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SignedUrlExpiresAt { get; set; }
	}
	
	/// <summary>
	/// Encryption configuration of the export job. Includes the encryption type as well as the AWS KMS key. The KMS key is only necessary if you chose the KMS encryption type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportServerSideEncryption
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyArn { get; set; }
		
		/// <summary>
		/// The types of encryption supported in export jobs to Amazon S3.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExportServerSideEncryptionType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExportServerSideEncryptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aws:kms = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES256 = 1,
	}
	
	/// <summary>
	/// Details about the export to Amazon S3 response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportAssetsToS3ResponseDetails
	{
		
		/// <summary>
		/// The destination where the assets will be exported.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AssetDestinationEntry[] AssetDestinations { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Encryption configuration of the export job. Includes the encryption type as well as the AWS KMS key. The KMS key is only necessary if you chose the KMS encryption type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportServerSideEncryption Encryption { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// The types of encryption supported in export jobs to Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ServerSideEncryptionTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aws:kms = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES256 = 1,
	}
	
	/// <summary>
	/// The details in the response for an import request, including the signed URL and other information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportAssetFromSignedUrlResponseDetails
	{
		
		/// <summary>
		/// The name of the asset. When importing from Amazon S3, the S3 object key is used as the asset name. When exporting to Amazon S3, the asset name is used as default target S3 object key.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssetName { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Max length: 24
		/// Min length: 24
		/// Pattern: /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(24, MinimumLength=24)]
		public string Md5Hash { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SignedUrl { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SignedUrlExpiresAt { get; set; }
	}
	
	/// <summary>
	/// Details from an import from Amazon S3 response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportAssetsFromS3ResponseDetails
	{
		
		/// <summary>
		/// The list of sources for the assets.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AssetSourceEntry[] AssetSources { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// AWS Data Exchange Jobs are asynchronous import or export operations used to create or copy assets. A data set owner can both import and export as they see fit. Someone with an entitlement to a data set can only export. Jobs are deleted 90 days after they are created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobEntry
	{
		
		/// <summary>
		/// An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Details for the response.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResponseDetails Details { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobError[] Errors { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobEntryState State { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobEntryType Type { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobEntryState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAITING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobEntryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_ASSETS_FROM_S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_ASSET_FROM_SIGNED_URL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT_ASSETS_TO_S3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT_ASSET_TO_SIGNED_URL = 3,
	}
	
	/// <summary>
	/// The name of the limit that was reached.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobErrorLimitName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Assets per revision = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Asset size in GB = 1,
	}
	
	/// <summary>
	/// The types of resource which the job error can apply to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobErrorResourceTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVISION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET = 1,
	}
	
	/// <summary>
	/// An error that occurred with the job request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobError
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobErrorCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Details Details { get; set; }
		
		/// <summary>
		/// The name of the limit that was reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobErrorLimitName LimitName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LimitValue { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// The types of resource which the job error can apply to.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobErrorResourceType ResourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_DENIED_EXCEPTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_SERVER_EXCEPTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALWARE_DETECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_NOT_FOUND_EXCEPTION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_QUOTA_EXCEEDED_EXCEPTION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_EXCEPTION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALWARE_SCAN_ENCRYPTED_FILE = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobErrorLimitName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Assets per revision = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Asset size in GB = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobErrorResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVISION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET = 1,
	}
	
	/// <summary>
	/// A revision is a container for one or more assets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RevisionEntry
	{
		
		/// <summary>
		/// An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Comment { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Finalized { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// A unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceId { get; set; }
		
		/// <summary>
		/// Dates and times in AWS Data Exchange are recorded in ISO 8601 format.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// The request body for TagResource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MapOf__string Tags { get; set; }
	}
	
	/// <summary>
	/// The request body for UpdateAsset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAssetRequest
	{
		
		/// <summary>
		/// The name of the asset. When importing from Amazon S3, the S3 object key is used as the asset name. When exporting to Amazon S3, the asset name is used as default target S3 object key.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The request body for UpdateDataSet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDataSetRequest
	{
		
		/// <summary>
		/// A description of a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The request body for UpdateRevision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRevisionRequest
	{
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Finalized { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// This operation cancels a job. Jobs can be cancelled only when they are in the WAITING state.
		/// CancelJob /v1/jobs/{JobId}
		/// </summary>
		/// <param name="JobId">The unique identifier for a job.</param>
		public async Task CancelJobAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/jobs/"+ (JobId==null? "" : Uri.EscapeDataString(JobId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation returns information about a job.
		/// GetJob /v1/jobs/{JobId}
		/// </summary>
		/// <param name="JobId">The unique identifier for a job.</param>
		/// <returns>Success</returns>
		public async Task<GetJobResponse> GetJobAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/jobs/"+ (JobId==null? "" : Uri.EscapeDataString(JobId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation creates a data set.
		/// CreateDataSet /v1/data-sets
		/// </summary>
		public async Task CreateDataSetAsync(CreateDataSetBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/data-sets";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation lists your data sets. When listing by origin OWNED, results are sorted by CreatedAt in descending order. When listing by origin ENTITLED, there is no order and the maxResults parameter is ignored.
		/// ListDataSets /v1/data-sets
		/// </summary>
		/// <param name="maxResults">The maximum number of results returned by a single call.</param>
		/// <param name="nextToken">The token value retrieved from a previous call to access the next page of results.</param>
		/// <param name="origin">A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers).</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDataSetsResponse> ListDataSetsAsync(int maxResults, string nextToken, string origin, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/data-sets?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&origin=" + (origin==null? "" : Uri.EscapeDataString(origin))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDataSetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation creates a job.
		/// CreateJob /v1/jobs
		/// </summary>
		public async Task CreateJobAsync(CreateJobBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/jobs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation lists your jobs sorted by CreatedAt in descending order.
		/// ListJobs /v1/jobs
		/// </summary>
		/// <param name="dataSetId">The unique identifier for a data set.</param>
		/// <param name="maxResults">The maximum number of results returned by a single call.</param>
		/// <param name="nextToken">The token value retrieved from a previous call to access the next page of results.</param>
		/// <param name="revisionId">The unique identifier for a revision.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListJobsResponse> ListJobsAsync(string dataSetId, int maxResults, string nextToken, string revisionId, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/jobs?dataSetId=" + (dataSetId==null? "" : Uri.EscapeDataString(dataSetId))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&revisionId=" + (revisionId==null? "" : Uri.EscapeDataString(revisionId))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation creates a revision for a data set.
		/// CreateRevision /v1/data-sets/{DataSetId}/revisions
		/// </summary>
		/// <param name="DataSetId">The unique identifier for a data set.</param>
		public async Task CreateRevisionAsync(string DataSetId, CreateRevisionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId))+"/revisions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation lists a data set's revisions sorted by CreatedAt in descending order.
		/// ListDataSetRevisions /v1/data-sets/{DataSetId}/revisions
		/// </summary>
		/// <param name="DataSetId">The unique identifier for a data set.</param>
		/// <param name="maxResults">The maximum number of results returned by a single call.</param>
		/// <param name="nextToken">The token value retrieved from a previous call to access the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDataSetRevisionsResponse> ListDataSetRevisionsAsync(string DataSetId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId))+"/revisions&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDataSetRevisionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation deletes an asset.
		/// DeleteAsset /v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}
		/// </summary>
		/// <param name="AssetId">The unique identifier for an asset.</param>
		/// <param name="DataSetId">The unique identifier for a data set.</param>
		/// <param name="RevisionId">The unique identifier for a revision.</param>
		public async Task DeleteAssetAsync(string AssetId, string DataSetId, string RevisionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId))+"/revisions/"+ (RevisionId==null? "" : Uri.EscapeDataString(RevisionId))+"/assets/"+ (AssetId==null? "" : Uri.EscapeDataString(AssetId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation returns information about an asset.
		/// GetAsset /v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}
		/// </summary>
		/// <param name="AssetId">The unique identifier for an asset.</param>
		/// <param name="DataSetId">The unique identifier for a data set.</param>
		/// <param name="RevisionId">The unique identifier for a revision.</param>
		/// <returns>Success</returns>
		public async Task<GetAssetResponse> GetAssetAsync(string AssetId, string DataSetId, string RevisionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId))+"/revisions/"+ (RevisionId==null? "" : Uri.EscapeDataString(RevisionId))+"/assets/"+ (AssetId==null? "" : Uri.EscapeDataString(AssetId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAssetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation deletes a data set.
		/// DeleteDataSet /v1/data-sets/{DataSetId}
		/// </summary>
		/// <param name="DataSetId">The unique identifier for a data set.</param>
		public async Task DeleteDataSetAsync(string DataSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation returns information about a data set.
		/// GetDataSet /v1/data-sets/{DataSetId}
		/// </summary>
		/// <param name="DataSetId">The unique identifier for a data set.</param>
		/// <returns>Success</returns>
		public async Task<GetDataSetResponse> GetDataSetAsync(string DataSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDataSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation deletes a revision.
		/// DeleteRevision /v1/data-sets/{DataSetId}/revisions/{RevisionId}
		/// </summary>
		/// <param name="DataSetId">The unique identifier for a data set.</param>
		/// <param name="RevisionId">The unique identifier for a revision.</param>
		public async Task DeleteRevisionAsync(string DataSetId, string RevisionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId))+"/revisions/"+ (RevisionId==null? "" : Uri.EscapeDataString(RevisionId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation returns information about a revision.
		/// GetRevision /v1/data-sets/{DataSetId}/revisions/{RevisionId}
		/// </summary>
		/// <param name="DataSetId">The unique identifier for a data set.</param>
		/// <param name="RevisionId">The unique identifier for a revision.</param>
		/// <returns>Success</returns>
		public async Task<GetRevisionResponse> GetRevisionAsync(string DataSetId, string RevisionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId))+"/revisions/"+ (RevisionId==null? "" : Uri.EscapeDataString(RevisionId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRevisionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation lists a revision's assets sorted alphabetically in descending order.
		/// ListRevisionAssets /v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets
		/// </summary>
		/// <param name="DataSetId">The unique identifier for a data set.</param>
		/// <param name="maxResults">The maximum number of results returned by a single call.</param>
		/// <param name="nextToken">The token value retrieved from a previous call to access the next page of results.</param>
		/// <param name="RevisionId">The unique identifier for a revision.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRevisionAssetsResponse> ListRevisionAssetsAsync(string DataSetId, int maxResults, string nextToken, string RevisionId, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId))+"/revisions/"+ (RevisionId==null? "" : Uri.EscapeDataString(RevisionId))+"/assets&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListRevisionAssetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation lists the tags on the resource.
		/// ListTagsForResource /tags/{resource_arn}
		/// </summary>
		/// <param name="resource_arn">An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resource_arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resource_arn==null? "" : Uri.EscapeDataString(resource_arn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation tags a resource.
		/// TagResource /tags/{resource_arn}
		/// </summary>
		/// <param name="resource_arn">An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.</param>
		public async Task TagResourceAsync(string resource_arn, TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resource_arn==null? "" : Uri.EscapeDataString(resource_arn));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This operation removes one or more tags from a resource.
		/// UntagResource /tags/{resource_arn}#tagKeys
		/// </summary>
		/// <param name="resource_arn">An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.</param>
		/// <param name="tagKeys">The key tags.</param>
		public async Task UntagResourceAsync(string resource_arn, @__string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resource_arn==null? "" : Uri.EscapeDataString(resource_arn))+"#tagKeys&"+String.Join("&", tagKeys.Select(z => $"tagKeys={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDataSetBody
	{
		
		/// <summary>
		/// The type of file your data is stored in. Currently, the supported asset type is S3_SNAPSHOT.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateDataSetBodyAssetType AssetType { get; set; }
		
		/// <summary>
		/// A description of a resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the model.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// A data set tag is an optional label that you can assign to a data set when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to these data sets and revisions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDataSetBodyAssetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_SNAPSHOT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobBody
	{
		
		/// <summary>
		/// The details for the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Details { get; set; }
		
		/// <summary>
		/// The type of job to be created.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateJobBodyType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobBodyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_ASSETS_FROM_S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT_ASSET_FROM_SIGNED_URL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT_ASSETS_TO_S3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT_ASSET_TO_SIGNED_URL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRevisionBody
	{
		
		/// <summary>
		/// An optional comment about the revision.
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Comment { get; set; }
		
		/// <summary>
		/// A revision tag is an optional label that you can assign to a revision when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to these data sets and revisions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		/// A label that consists of a customer-defined key and an optional value.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
