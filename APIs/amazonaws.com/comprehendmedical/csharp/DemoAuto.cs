//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEntitiesDetectionV2JobResponse
	{
		
		/// <summary>
		/// Provides information about a detection job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties ComprehendMedicalAsyncJobProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEntitiesDetectionV2JobRequest
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeICD10CMInferenceJobResponse
	{
		
		/// <summary>
		/// Provides information about a detection job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties ComprehendMedicalAsyncJobProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeICD10CMInferenceJobRequest
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePHIDetectionJobResponse
	{
		
		/// <summary>
		/// Provides information about a detection job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties ComprehendMedicalAsyncJobProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePHIDetectionJobRequest
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRxNormInferenceJobResponse
	{
		
		/// <summary>
		/// Provides information about a detection job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties ComprehendMedicalAsyncJobProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRxNormInferenceJobRequest
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetectEntitiesResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Entity[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UnmappedAttribute[] UnmappedAttributes { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PaginationToken { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ModelVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetectEntitiesRequest
	{
		
		/// <summary>
		/// Max length: 20000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20000, MinimumLength=1)]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetectEntitiesV2Response
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Entity[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UnmappedAttribute[] UnmappedAttributes { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PaginationToken { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ModelVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetectEntitiesV2Request
	{
		
		/// <summary>
		/// Max length: 20000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20000, MinimumLength=1)]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetectPHIResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Entity[] Entities { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PaginationToken { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ModelVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetectPHIRequest
	{
		
		/// <summary>
		/// Max length: 20000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20000, MinimumLength=1)]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InferICD10CMResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMEntity[] Entities { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PaginationToken { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ModelVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InferICD10CMRequest
	{
		
		/// <summary>
		/// Max length: 10000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10000, MinimumLength=1)]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InferRxNormResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RxNormEntity[] Entities { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PaginationToken { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ModelVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InferRxNormRequest
	{
		
		/// <summary>
		/// Max length: 10000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10000, MinimumLength=1)]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListEntitiesDetectionV2JobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties[] ComprehendMedicalAsyncJobPropertiesList { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListEntitiesDetectionV2JobsRequest
	{
		
		/// <summary>
		/// Provides information for filtering a list of detection jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobFilter Filter { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListICD10CMInferenceJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties[] ComprehendMedicalAsyncJobPropertiesList { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListICD10CMInferenceJobsRequest
	{
		
		/// <summary>
		/// Provides information for filtering a list of detection jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobFilter Filter { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPHIDetectionJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties[] ComprehendMedicalAsyncJobPropertiesList { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPHIDetectionJobsRequest
	{
		
		/// <summary>
		/// Provides information for filtering a list of detection jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobFilter Filter { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListRxNormInferenceJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobProperties[] ComprehendMedicalAsyncJobPropertiesList { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListRxNormInferenceJobsRequest
	{
		
		/// <summary>
		/// Provides information for filtering a list of detection jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobFilter Filter { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartEntitiesDetectionV2JobResponse
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartEntitiesDetectionV2JobRequest
	{
		
		/// <summary>
		/// The input properties for an entities detection job. This includes the name of the S3 bucket and the path to the files to be analyzed. See <a>batch-manifest</a> for more information. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// The output properties for a detection job.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string DataAccessRoleArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string JobName { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string KMSKey { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartEntitiesDetectionV2JobRequestLanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartEntitiesDetectionV2JobRequestLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartICD10CMInferenceJobResponse
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartICD10CMInferenceJobRequest
	{
		
		/// <summary>
		/// The input properties for an entities detection job. This includes the name of the S3 bucket and the path to the files to be analyzed. See <a>batch-manifest</a> for more information. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// The output properties for a detection job.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string DataAccessRoleArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string JobName { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string KMSKey { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartICD10CMInferenceJobRequestLanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartICD10CMInferenceJobRequestLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartPHIDetectionJobResponse
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartPHIDetectionJobRequest
	{
		
		/// <summary>
		/// The input properties for an entities detection job. This includes the name of the S3 bucket and the path to the files to be analyzed. See <a>batch-manifest</a> for more information. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// The output properties for a detection job.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string DataAccessRoleArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string JobName { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string KMSKey { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartPHIDetectionJobRequestLanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartPHIDetectionJobRequestLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartRxNormInferenceJobResponse
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartRxNormInferenceJobRequest
	{
		
		/// <summary>
		/// The input properties for an entities detection job. This includes the name of the S3 bucket and the path to the files to be analyzed. See <a>batch-manifest</a> for more information. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// The output properties for a detection job.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string DataAccessRoleArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string JobName { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string KMSKey { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartRxNormInferenceJobRequestLanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartRxNormInferenceJobRequestLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopEntitiesDetectionV2JobResponse
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopEntitiesDetectionV2JobRequest
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopICD10CMInferenceJobResponse
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopICD10CMInferenceJobRequest
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopPHIDetectionJobResponse
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopPHIDetectionJobRequest
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopRxNormInferenceJobResponse
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopRxNormInferenceJobRequest
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EntitySubType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOSAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUTE_OR_MODE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREQUENCY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DURATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_NAME = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRAND_NAME = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RATE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACUITY = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_NAME = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_VALUE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_UNITS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCEDURE_NAME = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TREATMENT_NAME = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACT_POINT = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDENTIFIER = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDRESS = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFESSION = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_ORGAN_SITE = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECTION = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUALITY = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUANTITY = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_EXPRESSION = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_MEDICATION_NAME = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_DX_NAME = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_TEST_NAME = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_PROCEDURE_NAME = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_TREATMENT_NAME = 33,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RelationshipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVERY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITH_DOSAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMINISTERED_VIA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEGATIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERLAP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOSAGE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUTE_OR_MODE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREQUENCY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DURATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RATE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACUITY = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_VALUE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_UNITS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECTION = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICAL_CONDITION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROTECTED_HEALTH_INFORMATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_TREATMENT_PROCEDURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANATOMY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_EXPRESSION = 5,
	}
	
	/// <summary>
	///  An extracted segment of the text that is an attribute of an entity, or otherwise related to an entity, such as the dosage of a medication taken. It contains information about the attribute such as id, begin and end offset within the input text, and the segment of the input text. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Attribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> RelationshipScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeRelationshipType RelationshipType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Trait[] Traits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOSAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUTE_OR_MODE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREQUENCY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DURATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_NAME = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRAND_NAME = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RATE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACUITY = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_NAME = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_VALUE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_UNITS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCEDURE_NAME = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TREATMENT_NAME = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACT_POINT = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDENTIFIER = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDRESS = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFESSION = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_ORGAN_SITE = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECTION = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUALITY = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUANTITY = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_EXPRESSION = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_MEDICATION_NAME = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_DX_NAME = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_TEST_NAME = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_PROCEDURE_NAME = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_TREATMENT_NAME = 33,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AttributeRelationshipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVERY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITH_DOSAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMINISTERED_VIA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEGATIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERLAP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOSAGE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUTE_OR_MODE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREQUENCY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DURATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RATE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACUITY = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_VALUE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_UNITS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECTION = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AttributeCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICAL_CONDITION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROTECTED_HEALTH_INFORMATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_TREATMENT_PROCEDURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANATOMY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_EXPRESSION = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYMPTOM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIAGNOSIS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEGATION = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL_SUCCESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP_REQUESTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 6,
	}
	
	/// <summary>
	/// Provides information for filtering a list of detection jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ComprehendMedicalAsyncJobFilter
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobFilterJobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SubmitTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SubmitTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComprehendMedicalAsyncJobFilterJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL_SUCCESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP_REQUESTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 6,
	}
	
	/// <summary>
	/// The input properties for an entities detection job. This includes the name of the S3 bucket and the path to the files to be analyzed. See <a>batch-manifest</a> for more information. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputDataConfig
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// Pattern: ^[0-9a-z\.\-_]*(?!\.)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string S3Bucket { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024)]
		public string S3Key { get; set; }
	}
	
	/// <summary>
	/// The output properties for a detection job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputDataConfig
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// Pattern: ^[0-9a-z\.\-_]*(?!\.)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string S3Bucket { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024)]
		public string S3Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 0,
	}
	
	/// <summary>
	/// Provides information about a detection job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ComprehendMedicalAsyncJobProperties
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string JobId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobPropertiesJobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SubmitTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationTime { get; set; }
		
		/// <summary>
		/// The input properties for an entities detection job. This includes the name of the S3 bucket and the path to the files to be analyzed. See <a>batch-manifest</a> for more information. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// The output properties for a detection job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComprehendMedicalAsyncJobPropertiesLanguageCode LanguageCode { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string DataAccessRoleArn { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096, MinimumLength=1)]
		public string ManifestFilePath { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string KMSKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComprehendMedicalAsyncJobPropertiesJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL_SUCCESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP_REQUESTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComprehendMedicalAsyncJobPropertiesLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 0,
	}
	
	/// <summary>
	///  Provides information about an extracted medical entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Entity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Score { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Trait[] Traits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attribute[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EntityCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICAL_CONDITION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROTECTED_HEALTH_INFORMATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_TREATMENT_PROCEDURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANATOMY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_EXPRESSION = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOSAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUTE_OR_MODE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREQUENCY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DURATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_NAME = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRAND_NAME = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RATE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACUITY = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_NAME = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_VALUE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_UNITS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCEDURE_NAME = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TREATMENT_NAME = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACT_POINT = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDENTIFIER = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDRESS = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFESSION = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_ORGAN_SITE = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECTION = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUALITY = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUANTITY = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_EXPRESSION = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_MEDICATION_NAME = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_DX_NAME = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_TEST_NAME = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_PROCEDURE_NAME = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_TO_TREATMENT_NAME = 33,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ICD10CMAttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACUITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_ORGAN_SITE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUALITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUANTITY = 4,
	}
	
	/// <summary>
	/// The detected attributes that relate to an entity. This includes an extracted segment of the text that is an attribute of an entity, or otherwise related to an entity. InferICD10CM detects the following attributes: <code>Direction</code>, <code>System, Organ or Site</code>, and <code>Acuity</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ICD10CMAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMAttributeType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> RelationshipScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMTrait[] Traits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ICD10CMAttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACUITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_ORGAN_SITE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUALITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUANTITY = 4,
	}
	
	/// <summary>
	///  The ICD-10-CM concepts that the entity could refer to, along with a score indicating the likelihood of the match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ICD10CMConcept
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ICD10CMEntityCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICAL_CONDITION = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ICD10CMEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DX_NAME = 0,
	}
	
	/// <summary>
	/// The collection of medical entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence that Amazon Comprehend Medical has in the detection and analysis. Attributes and traits of the entity are also returned. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ICD10CMEntity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Max length: 10000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10000, MinimumLength=1)]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMEntityCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMEntityType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMAttribute[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMTrait[] Traits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMConcept[] ICD10CMConcepts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ICD10CMEntityCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICAL_CONDITION = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ICD10CMEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DX_NAME = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ICD10CMTraitName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEGATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIAGNOSIS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYMPTOM = 3,
	}
	
	/// <summary>
	/// Contextual information for the entity. The traits recognized by InferICD10CM are <code>DIAGNOSIS</code>, <code>SIGN</code>, <code>SYMPTOM</code>, and <code>NEGATION</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ICD10CMTrait
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ICD10CMTraitName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ICD10CMTraitName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEGATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIAGNOSIS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYMPTOM = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RxNormAttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOSAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DURATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREQUENCY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RATE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUTE_OR_MODE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH = 6,
	}
	
	/// <summary>
	/// The extracted attributes that relate to this entity. The attributes recognized by InferRxNorm are <code>DOSAGE</code>, <code>DURATION</code>, <code>FORM</code>, <code>FREQUENCY</code>, <code>RATE</code>, <code>ROUTE_OR_MODE</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RxNormAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RxNormAttributeType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> RelationshipScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RxNormTrait[] Traits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RxNormAttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOSAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DURATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREQUENCY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RATE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUTE_OR_MODE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH = 6,
	}
	
	/// <summary>
	/// The RxNorm concept that the entity could refer to, along with a score indicating the likelihood of the match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RxNormConcept
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RxNormEntityCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICATION = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RxNormEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRAND_NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_NAME = 1,
	}
	
	/// <summary>
	/// The collection of medical entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence that Amazon Comprehend Medical has in the detection and analysis. Attributes and traits of the entity are also returned. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RxNormEntity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Max length: 10000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10000, MinimumLength=1)]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RxNormEntityCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RxNormEntityType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RxNormAttribute[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RxNormTrait[] Traits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RxNormConcept[] RxNormConcepts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RxNormEntityCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICATION = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RxNormEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRAND_NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_NAME = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RxNormTraitName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEGATION = 0,
	}
	
	/// <summary>
	/// The contextual information for the entity. InferRxNorm recognizes the trait <code>NEGATION</code>, which is any indication that the patient is not taking a medication. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RxNormTrait
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RxNormTraitName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RxNormTraitName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEGATION = 0,
	}
	
	/// <summary>
	///  Provides contextual information about the extracted entity. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Trait
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TraitName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TraitName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYMPTOM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIAGNOSIS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEGATION = 3,
	}
	
	/// <summary>
	///  An attribute that we extracted, but were unable to relate to an entity. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnmappedAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UnmappedAttributeType Type { get; set; }
		
		/// <summary>
		///  An extracted segment of the text that is an attribute of an entity, or otherwise related to an entity, such as the dosage of a medication taken. It contains information about the attribute such as id, begin and end offset within the input text, and the segment of the input text. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Attribute Attribute { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UnmappedAttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICAL_CONDITION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROTECTED_HEALTH_INFORMATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST_TREATMENT_PROCEDURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANATOMY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_EXPRESSION = 5,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets the properties associated with a medical entities detection job. Use this operation to get the status of a detection job.
		/// DescribeEntitiesDetectionV2Job /#X-Amz-Target=ComprehendMedical_20181030.DescribeEntitiesDetectionV2Job
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeEntitiesDetectionV2JobResponse> DescribeEntitiesDetectionV2JobAsync(DescribeEntitiesDetectionV2JobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.DescribeEntitiesDetectionV2Job";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeEntitiesDetectionV2JobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with an InferICD10CM job. Use this operation to get the status of an inference job.
		/// DescribeICD10CMInferenceJob /#X-Amz-Target=ComprehendMedical_20181030.DescribeICD10CMInferenceJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeICD10CMInferenceJobResponse> DescribeICD10CMInferenceJobAsync(DescribeICD10CMInferenceJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.DescribeICD10CMInferenceJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeICD10CMInferenceJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with a protected health information (PHI) detection job. Use this operation to get the status of a detection job.
		/// DescribePHIDetectionJob /#X-Amz-Target=ComprehendMedical_20181030.DescribePHIDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribePHIDetectionJobResponse> DescribePHIDetectionJobAsync(DescribePHIDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.DescribePHIDetectionJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribePHIDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with an InferRxNorm job. Use this operation to get the status of an inference job.
		/// DescribeRxNormInferenceJob /#X-Amz-Target=ComprehendMedical_20181030.DescribeRxNormInferenceJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeRxNormInferenceJobResponse> DescribeRxNormInferenceJobAsync(DescribeRxNormInferenceJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.DescribeRxNormInferenceJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeRxNormInferenceJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>The <code>DetectEntities</code> operation is deprecated. You should use the <a>DetectEntitiesV2</a> operation instead.</p> <p> Inspects the clinical text for a variety of medical entities and returns specific information about them such as entity category, location, and confidence score on that information .</p>
		/// DetectEntities /#X-Amz-Target=ComprehendMedical_20181030.DetectEntities
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetectEntitiesResponse> DetectEntitiesAsync(DetectEntitiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.DetectEntities";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DetectEntitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Inspects the clinical text for a variety of medical entities and returns specific information about them such as entity category, location, and confidence score on that information. Amazon Comprehend Medical only detects medical entities in English language texts.</p> <p>The <code>DetectEntitiesV2</code> operation replaces the <a>DetectEntities</a> operation. This new action uses a different model for determining the entities in your medical text and changes the way that some entities are returned in the output. You should use the <code>DetectEntitiesV2</code> operation in all new applications.</p> <p>The <code>DetectEntitiesV2</code> operation returns the <code>Acuity</code> and <code>Direction</code> entities as attributes instead of types. </p>
		/// DetectEntitiesV2 /#X-Amz-Target=ComprehendMedical_20181030.DetectEntitiesV2
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetectEntitiesV2Response> DetectEntitiesV2Async(DetectEntitiesV2Request requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.DetectEntitiesV2";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DetectEntitiesV2Response>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Inspects the clinical text for protected health information (PHI) entities and returns the entity category, location, and confidence score for each entity. Amazon Comprehend Medical only detects entities in English language texts.
		/// DetectPHI /#X-Amz-Target=ComprehendMedical_20181030.DetectPHI
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetectPHIResponse> DetectPHIAsync(DetectPHIRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.DetectPHI";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DetectPHIResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// InferICD10CM detects medical conditions as entities listed in a patient record and links those entities to normalized concept identifiers in the ICD-10-CM knowledge base from the Centers for Disease Control. Amazon Comprehend Medical only detects medical entities in English language texts.
		/// InferICD10CM /#X-Amz-Target=ComprehendMedical_20181030.InferICD10CM
		/// </summary>
		/// <returns>Success</returns>
		public async Task<InferICD10CMResponse> InferICD10CMAsync(InferICD10CMRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.InferICD10CM";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InferICD10CMResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// InferRxNorm detects medications as entities listed in a patient record and links to the normalized concept identifiers in the RxNorm database from the National Library of Medicine. Amazon Comprehend Medical only detects medical entities in English language texts.
		/// InferRxNorm /#X-Amz-Target=ComprehendMedical_20181030.InferRxNorm
		/// </summary>
		/// <returns>Success</returns>
		public async Task<InferRxNormResponse> InferRxNormAsync(InferRxNormRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.InferRxNorm";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InferRxNormResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of medical entity detection jobs that you have submitted.
		/// ListEntitiesDetectionV2Jobs /#X-Amz-Target=ComprehendMedical_20181030.ListEntitiesDetectionV2Jobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListEntitiesDetectionV2JobsResponse> ListEntitiesDetectionV2JobsAsync(ListEntitiesDetectionV2JobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.ListEntitiesDetectionV2Jobs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListEntitiesDetectionV2JobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of InferICD10CM jobs that you have submitted.
		/// ListICD10CMInferenceJobs /#X-Amz-Target=ComprehendMedical_20181030.ListICD10CMInferenceJobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListICD10CMInferenceJobsResponse> ListICD10CMInferenceJobsAsync(ListICD10CMInferenceJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.ListICD10CMInferenceJobs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListICD10CMInferenceJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of protected health information (PHI) detection jobs that you have submitted.
		/// ListPHIDetectionJobs /#X-Amz-Target=ComprehendMedical_20181030.ListPHIDetectionJobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListPHIDetectionJobsResponse> ListPHIDetectionJobsAsync(ListPHIDetectionJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.ListPHIDetectionJobs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPHIDetectionJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of InferRxNorm jobs that you have submitted.
		/// ListRxNormInferenceJobs /#X-Amz-Target=ComprehendMedical_20181030.ListRxNormInferenceJobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListRxNormInferenceJobsResponse> ListRxNormInferenceJobsAsync(ListRxNormInferenceJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.ListRxNormInferenceJobs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListRxNormInferenceJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous medical entity detection job for a collection of documents. Use the <code>DescribeEntitiesDetectionV2Job</code> operation to track the status of a job.
		/// StartEntitiesDetectionV2Job /#X-Amz-Target=ComprehendMedical_20181030.StartEntitiesDetectionV2Job
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartEntitiesDetectionV2JobResponse> StartEntitiesDetectionV2JobAsync(StartEntitiesDetectionV2JobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.StartEntitiesDetectionV2Job";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartEntitiesDetectionV2JobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous job to detect medical conditions and link them to the ICD-10-CM ontology. Use the <code>DescribeICD10CMInferenceJob</code> operation to track the status of a job.
		/// StartICD10CMInferenceJob /#X-Amz-Target=ComprehendMedical_20181030.StartICD10CMInferenceJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartICD10CMInferenceJobResponse> StartICD10CMInferenceJobAsync(StartICD10CMInferenceJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.StartICD10CMInferenceJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartICD10CMInferenceJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous job to detect protected health information (PHI). Use the <code>DescribePHIDetectionJob</code> operation to track the status of a job.
		/// StartPHIDetectionJob /#X-Amz-Target=ComprehendMedical_20181030.StartPHIDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartPHIDetectionJobResponse> StartPHIDetectionJobAsync(StartPHIDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.StartPHIDetectionJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartPHIDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous job to detect medication entities and link them to the RxNorm ontology. Use the <code>DescribeRxNormInferenceJob</code> operation to track the status of a job.
		/// StartRxNormInferenceJob /#X-Amz-Target=ComprehendMedical_20181030.StartRxNormInferenceJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartRxNormInferenceJobResponse> StartRxNormInferenceJobAsync(StartRxNormInferenceJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.StartRxNormInferenceJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartRxNormInferenceJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops a medical entities detection job in progress.
		/// StopEntitiesDetectionV2Job /#X-Amz-Target=ComprehendMedical_20181030.StopEntitiesDetectionV2Job
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopEntitiesDetectionV2JobResponse> StopEntitiesDetectionV2JobAsync(StopEntitiesDetectionV2JobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.StopEntitiesDetectionV2Job";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopEntitiesDetectionV2JobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops an InferICD10CM inference job in progress.
		/// StopICD10CMInferenceJob /#X-Amz-Target=ComprehendMedical_20181030.StopICD10CMInferenceJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopICD10CMInferenceJobResponse> StopICD10CMInferenceJobAsync(StopICD10CMInferenceJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.StopICD10CMInferenceJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopICD10CMInferenceJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops a protected health information (PHI) detection job in progress.
		/// StopPHIDetectionJob /#X-Amz-Target=ComprehendMedical_20181030.StopPHIDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopPHIDetectionJobResponse> StopPHIDetectionJobAsync(StopPHIDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.StopPHIDetectionJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopPHIDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops an InferRxNorm inference job in progress.
		/// StopRxNormInferenceJob /#X-Amz-Target=ComprehendMedical_20181030.StopRxNormInferenceJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopRxNormInferenceJobResponse> StopRxNormInferenceJobAsync(StopRxNormInferenceJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ComprehendMedical_20181030.StopRxNormInferenceJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopRxNormInferenceJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
