//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchPutMessageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchPutMessageErrorEntry[] BatchPutMessageErrorEntries { get; set; }
	}
	
	/// <summary>
	/// Information about a message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Message
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string MessageId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Payload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateChannelResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ChannelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelArn { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RetentionPeriod RetentionPeriod { get; set; }
	}
	
	/// <summary>
	/// Use this to store channel data in an S3 bucket that you manage. If customer managed storage is selected, the "retentionPeriod" parameter is ignored. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomerManagedChannelS3Storage
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9.\-_]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=3)]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9!_.*'()/{}:-]*/$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string KeyPrefix { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// A set of key/value pairs which are used to manage the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDatasetResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatasetArn { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RetentionPeriod RetentionPeriod { get; set; }
	}
	
	/// <summary>
	/// A "DatasetAction" object that specifies how data set contents are automatically created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatasetAction
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ActionName { get; set; }
		
		/// <summary>
		/// The SQL query to modify the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SqlQueryDatasetAction QueryAction { get; set; }
		
		/// <summary>
		/// Information needed to run the "containerAction" to produce data set contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContainerDatasetAction ContainerAction { get; set; }
	}
	
	/// <summary>
	/// The "DatasetTrigger" that specifies when the data set is automatically updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatasetTrigger
	{
		
		/// <summary>
		/// The schedule for when to trigger an update.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Schedule Schedule { get; set; }
		
		/// <summary>
		/// Information about the data set whose content generation triggers the new data set content generation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TriggeringDataset Dataset { get; set; }
	}
	
	/// <summary>
	/// When data set contents are created they are delivered to destination specified here.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatasetContentDeliveryRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EntryName { get; set; }
		
		/// <summary>
		/// The destination to which data set contents are delivered.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DatasetContentDeliveryDestination Destination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDatasetContentResponse
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=7)]
		public string VersionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDatastoreResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DatastoreName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatastoreArn { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RetentionPeriod RetentionPeriod { get; set; }
	}
	
	/// <summary>
	/// Use this to store data store data in an S3 bucket that you manage. When customer managed storage is selected, the "retentionPeriod" parameter is ignored. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomerManagedDatastoreS3Storage
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9.\-_]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=3)]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9!_.*'()/{}:-]*/$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string KeyPrefix { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePipelineResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string PipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PipelineArn { get; set; }
	}
	
	/// <summary>
	/// An activity that performs a transformation on a message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PipelineActivity
	{
		
		/// <summary>
		/// The activity that determines the source of the messages to be processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelActivity Channel { get; set; }
		
		/// <summary>
		/// An activity that runs a Lambda function to modify the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LambdaActivity Lambda { get; set; }
		
		/// <summary>
		/// The 'datastore' activity that specifies where to store the processed data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DatastoreActivity Datastore { get; set; }
		
		/// <summary>
		/// An activity that adds other attributes based on existing attributes in the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AddAttributesActivity AddAttributes { get; set; }
		
		/// <summary>
		/// An activity that removes attributes from a message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RemoveAttributesActivity RemoveAttributes { get; set; }
		
		/// <summary>
		/// Creates a new message using only the specified attributes from the original message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SelectAttributesActivity SelectAttributes { get; set; }
		
		/// <summary>
		/// An activity that filters a message based on its attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FilterActivity Filter { get; set; }
		
		/// <summary>
		/// An activity that computes an arithmetic expression using the message's attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MathActivity Math { get; set; }
		
		/// <summary>
		/// An activity that adds data from the AWS IoT device registry to your message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceRegistryEnrichActivity DeviceRegistryEnrich { get; set; }
		
		/// <summary>
		/// An activity that adds information from the AWS IoT Device Shadows service to a message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceShadowEnrichActivity DeviceShadowEnrich { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeChannelResponse
	{
		
		/// <summary>
		/// A collection of data from an MQTT topic. Channels archive the raw, unprocessed messages before publishing the data to a pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Channel Channel { get; set; }
		
		/// <summary>
		/// Statistics information about the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelStatistics Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDatasetResponse
	{
		
		/// <summary>
		/// Information about a data set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Dataset Dataset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDatastoreResponse
	{
		
		/// <summary>
		/// Information about a data store.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Datastore Datastore { get; set; }
		
		/// <summary>
		/// Statistical information about the data store.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DatastoreStatistics Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLoggingOptionsResponse
	{
		
		/// <summary>
		/// Information about logging options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoggingOptions LoggingOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePipelineResponse
	{
		
		/// <summary>
		/// Contains information about a pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Pipeline Pipeline { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDatasetContentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetEntry[] Entries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		/// <summary>
		/// The state of the data set contents and the reason they are in this state.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DatasetContentStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListChannelsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelSummary[] ChannelSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDatasetContentsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetContentSummary[] DatasetContentSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDatasetsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetSummary[] DatasetSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDatastoresResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DatastoreSummary[] DatastoreSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPipelinesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PipelineSummary[] PipelineSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoggingLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RunPipelineActivityResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public MessagePayload[] Payloads { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogResult { get; set; }
	}
	
	/// <summary>
	/// The activity that determines the source of the messages to be processed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChannelActivity
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ChannelName { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Next { get; set; }
	}
	
	/// <summary>
	/// An activity that runs a Lambda function to modify the message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LambdaActivity
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string LambdaName { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public int BatchSize { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Next { get; set; }
	}
	
	/// <summary>
	/// The 'datastore' activity that specifies where to store the processed data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatastoreActivity
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DatastoreName { get; set; }
	}
	
	/// <summary>
	/// An activity that adds other attributes based on existing attributes in the message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddAttributesActivity
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeNameMapping Attributes { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Next { get; set; }
	}
	
	/// <summary>
	/// An activity that removes attributes from a message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveAttributesActivity
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AttributeName[] Attributes { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Next { get; set; }
	}
	
	/// <summary>
	/// Creates a new message using only the specified attributes from the original message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SelectAttributesActivity
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public AttributeName[] Attributes { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Next { get; set; }
	}
	
	/// <summary>
	/// An activity that filters a message based on its attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FilterActivity
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Filter { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Next { get; set; }
	}
	
	/// <summary>
	/// An activity that computes an arithmetic expression using the message's attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MathActivity
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Attribute { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Math { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Next { get; set; }
	}
	
	/// <summary>
	/// An activity that adds data from the AWS IoT device registry to your message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeviceRegistryEnrichActivity
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Attribute { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ThingName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Next { get; set; }
	}
	
	/// <summary>
	/// An activity that adds information from the AWS IoT Device Shadows service to a message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeviceShadowEnrichActivity
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Attribute { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ThingName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Next { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SampleChannelDataResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public MessagePayload[] Payloads { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartPipelineReprocessingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReprocessingId { get; set; }
	}
	
	/// <summary>
	/// Contains informations about errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchPutMessageErrorEntry
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string MessageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchPutMessageRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ChannelName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Message[] Messages { get; set; }
	}
	
	/// <summary>
	/// Where channel data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after creation of the channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChannelStorage
	{
		
		/// <summary>
		/// Use this to store channel data in an S3 bucket managed by the AWS IoT Analytics service. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceManagedChannelS3Storage ServiceManagedS3 { get; set; }
		
		/// <summary>
		/// Use this to store channel data in an S3 bucket that you manage. If customer managed storage is selected, the "retentionPeriod" parameter is ignored. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomerManagedChannelS3Storage CustomerManagedS3 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChannelStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
	}
	
	/// <summary>
	/// How long, in days, message data is kept.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RetentionPeriod
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Unlimited { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> NumberOfDays { get; set; }
	}
	
	/// <summary>
	/// A collection of data from an MQTT topic. Channels archive the raw, unprocessed messages before publishing the data to a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Channel
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Where channel data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after creation of the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelStorage Storage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelStatus Status { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RetentionPeriod RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChannelStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
	}
	
	/// <summary>
	/// The estimated size of the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EstimatedResourceSize
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EstimatedSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EstimatedOn { get; set; }
	}
	
	/// <summary>
	/// Statistics information about the channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChannelStatistics
	{
		
		/// <summary>
		/// The estimated size of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EstimatedResourceSize Size { get; set; }
	}
	
	/// <summary>
	/// Used to store channel data in an S3 bucket that you manage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomerManagedChannelS3StorageSummary
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9.\-_]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=3)]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9!_.*'()/{}:-]*/$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string KeyPrefix { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Where channel data is stored.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChannelStorageSummary
	{
		
		/// <summary>
		/// Used to store channel data in an S3 bucket managed by the AWS IoT Analytics service.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceManagedChannelS3StorageSummary ServiceManagedS3 { get; set; }
		
		/// <summary>
		/// Used to store channel data in an S3 bucket that you manage.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomerManagedChannelS3StorageSummary CustomerManagedS3 { get; set; }
	}
	
	/// <summary>
	/// A summary of information about a channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChannelSummary
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ChannelName { get; set; }
		
		/// <summary>
		/// Where channel data is stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelStorageSummary ChannelStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChannelSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChannelSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComputeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACU_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACU_2 = 1,
	}
	
	/// <summary>
	/// The configuration of the resource used to execute the "containerAction".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceConfigurationComputeType ComputeType { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public int VolumeSizeInGB { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceConfigurationComputeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACU_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACU_2 = 1,
	}
	
	/// <summary>
	/// Information needed to run the "containerAction" to produce data set contents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContainerDatasetAction
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Image { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ExecutionRoleArn { get; set; }
		
		/// <summary>
		/// The configuration of the resource used to execute the "containerAction".
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceConfiguration ResourceConfiguration { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Variable[] Variables { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateChannelRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ChannelName { get; set; }
		
		/// <summary>
		/// Where channel data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after creation of the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelStorage ChannelStorage { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RetentionPeriod RetentionPeriod { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Information about the versioning of data set contents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VersioningConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Unlimited { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDatasetRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DatasetName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public DatasetAction[] Actions { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public DatasetTrigger[] Triggers { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public DatasetContentDeliveryRule[] ContentDeliveryRules { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RetentionPeriod RetentionPeriod { get; set; }
		
		/// <summary>
		/// Information about the versioning of data set contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VersioningConfiguration VersioningConfiguration { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Where data store data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after the data store is created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatastoreStorage
	{
		
		/// <summary>
		/// Use this to store data store data in an S3 bucket managed by the AWS IoT Analytics service. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceManagedDatastoreS3Storage ServiceManagedS3 { get; set; }
		
		/// <summary>
		/// Use this to store data store data in an S3 bucket that you manage. When customer managed storage is selected, the "retentionPeriod" parameter is ignored. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomerManagedDatastoreS3Storage CustomerManagedS3 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDatastoreRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DatastoreName { get; set; }
		
		/// <summary>
		/// Where data store data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after the data store is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DatastoreStorage DatastoreStorage { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RetentionPeriod RetentionPeriod { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePipelineRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string PipelineName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public PipelineActivity[] PipelineActivities { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Used to store data store data in an S3 bucket that you manage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomerManagedDatastoreS3StorageSummary
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9.\-_]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=3)]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9!_.*'()/{}:-]*/$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string KeyPrefix { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DatasetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
	}
	
	/// <summary>
	/// Information about a data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Dataset
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public DatasetAction[] Actions { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public DatasetTrigger[] Triggers { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public DatasetContentDeliveryRule[] ContentDeliveryRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RetentionPeriod RetentionPeriod { get; set; }
		
		/// <summary>
		/// Information about the versioning of data set contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VersioningConfiguration VersioningConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DatasetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
	}
	
	/// <summary>
	/// The SQL query to modify the message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SqlQueryDatasetAction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SqlQuery { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public QueryFilter[] Filters { get; set; }
	}
	
	/// <summary>
	/// Information about the action which automatically creates the data set's contents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatasetActionSummary
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetActionSummaryActionType ActionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DatasetActionSummaryActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DatasetActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINER = 1,
	}
	
	/// <summary>
	/// Configuration information for delivery of data set contents to AWS IoT Events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IotEventsDestinationConfiguration
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string InputName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Configuration information for delivery of data set contents to Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3DestinationConfiguration
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9.\-_]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=3)]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9!_.*'()/{}:-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Configuration information for coordination with the AWS Glue ETL (extract, transform and load) service.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlueConfiguration GlueConfiguration { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// The destination to which data set contents are delivered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatasetContentDeliveryDestination
	{
		
		/// <summary>
		/// Configuration information for delivery of data set contents to AWS IoT Events.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IotEventsDestinationConfiguration IotEventsDestinationConfiguration { get; set; }
		
		/// <summary>
		/// Configuration information for delivery of data set contents to Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationConfiguration S3DestinationConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DatasetContentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	/// <summary>
	/// The state of the data set contents and the reason they are in this state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatasetContentStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetContentStatusState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DatasetContentStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	/// <summary>
	/// Summary information about data set contents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatasetContentSummary
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=7)]
		public string Version { get; set; }
		
		/// <summary>
		/// The state of the data set contents and the reason they are in this state.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DatasetContentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ScheduleTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionTime { get; set; }
	}
	
	/// <summary>
	/// The data set whose latest contents are used as input to the notebook or application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatasetContentVersionValue
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DatasetName { get; set; }
	}
	
	/// <summary>
	/// The reference to a data set entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatasetEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EntryName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataURI { get; set; }
	}
	
	/// <summary>
	/// A summary of information about a data set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatasetSummary
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public DatasetTrigger[] Triggers { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public DatasetActionSummary[] Actions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DatasetSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
	}
	
	/// <summary>
	/// The schedule for when to trigger an update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Schedule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
	}
	
	/// <summary>
	/// Information about the data set whose content generation triggers the new data set content generation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TriggeringDataset
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DatastoreStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
	}
	
	/// <summary>
	/// Information about a data store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Datastore
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Where data store data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after the data store is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DatastoreStorage Storage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatastoreStatus Status { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RetentionPeriod RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DatastoreStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
	}
	
	/// <summary>
	/// Statistical information about the data store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatastoreStatistics
	{
		
		/// <summary>
		/// The estimated size of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EstimatedResourceSize Size { get; set; }
	}
	
	/// <summary>
	/// Where data store data is stored.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatastoreStorageSummary
	{
		
		/// <summary>
		/// Used to store data store data in an S3 bucket managed by the AWS IoT Analytics service.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceManagedDatastoreS3StorageSummary ServiceManagedS3 { get; set; }
		
		/// <summary>
		/// Used to store data store data in an S3 bucket that you manage.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomerManagedDatastoreS3StorageSummary CustomerManagedS3 { get; set; }
	}
	
	/// <summary>
	/// A summary of information about a data store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatastoreSummary
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DatastoreName { get; set; }
		
		/// <summary>
		/// Where data store data is stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DatastoreStorageSummary DatastoreStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatastoreSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DatastoreSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
	}
	
	/// <summary>
	/// Used to limit data to that which has arrived since the last execution of the action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeltaTime
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int OffsetSeconds { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TimeExpression { get; set; }
	}
	
	/// <summary>
	/// Information about logging options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoggingOptions
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoggingOptionsLevel Level { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoggingOptionsLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 0,
	}
	
	/// <summary>
	/// Contains information about a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Pipeline
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public PipelineActivity[] Activities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReprocessingSummary[] ReprocessingSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
	}
	
	/// <summary>
	/// Configuration information for coordination with the AWS Glue ETL (extract, transform and load) service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GlueConfiguration
	{
		
		/// <summary>
		/// Max length: 150
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength=1)]
		public string TableName { get; set; }
		
		/// <summary>
		/// Max length: 150
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength=1)]
		public string DatabaseName { get; set; }
	}
	
	/// <summary>
	/// The value of the variable as a structure that specifies an output file URI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputFileUriValue
	{
		
		/// <summary>
		/// Pattern: [\w\.-]{1,255}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FileName { get; set; }
	}
	
	/// <summary>
	/// A summary of information about a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PipelineSummary
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string PipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReprocessingSummary[] ReprocessingSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutLoggingOptionsRequest
	{
		
		/// <summary>
		/// Information about logging options.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoggingOptions LoggingOptions { get; set; }
	}
	
	/// <summary>
	/// Information which is used to filter message data, to segregate it according to the time frame in which it arrives.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class QueryFilter
	{
		
		/// <summary>
		/// Used to limit data to that which has arrived since the last execution of the action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeltaTime DeltaTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReprocessingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// Information about pipeline reprocessing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReprocessingSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReprocessingSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReprocessingSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RunPipelineActivityRequest
	{
		
		/// <summary>
		/// An activity that performs a transformation on a message.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PipelineActivity PipelineActivity { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public MessagePayload[] Payloads { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartPipelineReprocessingRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateChannelRequest
	{
		
		/// <summary>
		/// Where channel data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after creation of the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelStorage ChannelStorage { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RetentionPeriod RetentionPeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDatasetRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public DatasetAction[] Actions { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public DatasetTrigger[] Triggers { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public DatasetContentDeliveryRule[] ContentDeliveryRules { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RetentionPeriod RetentionPeriod { get; set; }
		
		/// <summary>
		/// Information about the versioning of data set contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VersioningConfiguration VersioningConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDatastoreRequest
	{
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RetentionPeriod RetentionPeriod { get; set; }
		
		/// <summary>
		/// Where data store data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after the data store is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DatastoreStorage DatastoreStorage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePipelineRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public PipelineActivity[] PipelineActivities { get; set; }
	}
	
	/// <summary>
	/// An instance of a variable to be passed to the "containerAction" execution. Each variable must have a name and a value given by one of "stringValue", "datasetContentVersionValue", or "outputFileUriValue".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Variable
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string StringValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DoubleValue { get; set; }
		
		/// <summary>
		/// The data set whose latest contents are used as input to the notebook or application.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DatasetContentVersionValue DatasetContentVersionValue { get; set; }
		
		/// <summary>
		/// The value of the variable as a structure that specifies an output file URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputFileUriValue OutputFileUriValue { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Sends messages to a channel.
		/// BatchPutMessage /messages/batch
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchPutMessageResponse> BatchPutMessageAsync(BatchPutMessageBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/messages/batch";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchPutMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancels the reprocessing of data through the pipeline.
		/// CancelPipelineReprocessing /pipelines/{pipelineName}/reprocessing/{reprocessingId}
		/// </summary>
		/// <param name="pipelineName">The name of pipeline for which data reprocessing is canceled.</param>
		/// <param name="reprocessingId">The ID of the reprocessing task (returned by "StartPipelineReprocessing").</param>
		/// <returns>Success</returns>
		public async Task<CancelPipelineReprocessingResponse> CancelPipelineReprocessingAsync(string pipelineName, string reprocessingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/pipelines/"+ (pipelineName==null? "" : Uri.EscapeDataString(pipelineName))+"/reprocessing/"+ (reprocessingId==null? "" : Uri.EscapeDataString(reprocessingId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CancelPipelineReprocessingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a channel. A channel collects data from an MQTT topic and archives the raw, unprocessed messages before publishing the data to a pipeline.
		/// CreateChannel /channels
		/// </summary>
		public async Task CreateChannelAsync(CreateChannelBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/channels";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of channels.
		/// ListChannels /channels
		/// </summary>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults"><p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p></param>
		/// <returns>Success</returns>
		public async Task<ListChannelsResponse> ListChannelsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/channels?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListChannelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a data set. A data set stores data retrieved from a data store by applying a "queryAction" (a SQL query) or a "containerAction" (executing a containerized application). This operation creates the skeleton of a data set. The data set can be populated manually by calling "CreateDatasetContent" or automatically according to a "trigger" you specify.
		/// CreateDataset /datasets
		/// </summary>
		public async Task CreateDatasetAsync(CreateDatasetBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/datasets";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about data sets.
		/// ListDatasets /datasets
		/// </summary>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults"><p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p></param>
		/// <returns>Success</returns>
		public async Task<ListDatasetsResponse> ListDatasetsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/datasets?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDatasetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates the content of a data set by applying a "queryAction" (a SQL query) or a "containerAction" (executing a containerized application).
		/// CreateDatasetContent /datasets/{datasetName}/content
		/// </summary>
		/// <param name="datasetName">The name of the data set.</param>
		/// <returns>Success</returns>
		public async Task<CreateDatasetContentResponse> CreateDatasetContentAsync(string datasetName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/datasets/"+ (datasetName==null? "" : Uri.EscapeDataString(datasetName))+"/content";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDatasetContentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the content of the specified data set.
		/// DeleteDatasetContent /datasets/{datasetName}/content
		/// </summary>
		/// <param name="datasetName">The name of the data set whose content is deleted.</param>
		/// <param name="versionId">The version of the data set whose content is deleted. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to delete the latest or latest successfully completed data set. If not specified, "$LATEST_SUCCEEDED" is the default.</param>
		public async Task DeleteDatasetContentAsync(string datasetName, string versionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/datasets/"+ (datasetName==null? "" : Uri.EscapeDataString(datasetName))+"/content&versionId=" + (versionId==null? "" : Uri.EscapeDataString(versionId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the contents of a data set as pre-signed URIs.
		/// GetDatasetContent /datasets/{datasetName}/content
		/// </summary>
		/// <param name="datasetName">The name of the data set whose contents are retrieved.</param>
		/// <param name="versionId">The version of the data set whose contents are retrieved. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to retrieve the contents of the latest or latest successfully completed data set. If not specified, "$LATEST_SUCCEEDED" is the default.</param>
		/// <returns>Success</returns>
		public async Task<GetDatasetContentResponse> GetDatasetContentAsync(string datasetName, string versionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/datasets/"+ (datasetName==null? "" : Uri.EscapeDataString(datasetName))+"/content&versionId=" + (versionId==null? "" : Uri.EscapeDataString(versionId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDatasetContentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a data store, which is a repository for messages.
		/// CreateDatastore /datastores
		/// </summary>
		public async Task CreateDatastoreAsync(CreateDatastoreBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/datastores";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of data stores.
		/// ListDatastores /datastores
		/// </summary>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults"><p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p></param>
		/// <returns>Success</returns>
		public async Task<ListDatastoresResponse> ListDatastoresAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/datastores?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDatastoresResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a pipeline. A pipeline consumes messages from a channel and allows you to process the messages before storing them in a data store. You must specify both a <code>channel</code> and a <code>datastore</code> activity and, optionally, as many as 23 additional activities in the <code>pipelineActivities</code> array.
		/// CreatePipeline /pipelines
		/// </summary>
		public async Task CreatePipelineAsync(CreatePipelineBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/pipelines";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of pipelines.
		/// ListPipelines /pipelines
		/// </summary>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults"><p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p></param>
		/// <returns>Success</returns>
		public async Task<ListPipelinesResponse> ListPipelinesAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/pipelines?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPipelinesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified channel.
		/// DeleteChannel /channels/{channelName}
		/// </summary>
		/// <param name="channelName">The name of the channel to delete.</param>
		public async Task DeleteChannelAsync(string channelName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/channels/"+ (channelName==null? "" : Uri.EscapeDataString(channelName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a channel.
		/// DescribeChannel /channels/{channelName}
		/// </summary>
		/// <param name="channelName">The name of the channel whose information is retrieved.</param>
		/// <param name="includeStatistics">If true, additional statistical information about the channel is included in the response. This feature cannot be used with a channel whose S3 storage is customer-managed.</param>
		/// <returns>Success</returns>
		public async Task<DescribeChannelResponse> DescribeChannelAsync(string channelName, bool includeStatistics, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/channels/"+ (channelName==null? "" : Uri.EscapeDataString(channelName))+"&includeStatistics="+includeStatistics;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the settings of a channel.
		/// UpdateChannel /channels/{channelName}
		/// </summary>
		/// <param name="channelName">The name of the channel to be updated.</param>
		/// <returns>Success</returns>
		public async Task UpdateChannelAsync(string channelName, UpdateChannelBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/channels/"+ (channelName==null? "" : Uri.EscapeDataString(channelName));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified data set.</p> <p>You do not have to delete the content of the data set before you perform this operation.</p>
		/// DeleteDataset /datasets/{datasetName}
		/// </summary>
		/// <param name="datasetName">The name of the data set to delete.</param>
		public async Task DeleteDatasetAsync(string datasetName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/datasets/"+ (datasetName==null? "" : Uri.EscapeDataString(datasetName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a data set.
		/// DescribeDataset /datasets/{datasetName}
		/// </summary>
		/// <param name="datasetName">The name of the data set whose information is retrieved.</param>
		/// <returns>Success</returns>
		public async Task<DescribeDatasetResponse> DescribeDatasetAsync(string datasetName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/datasets/"+ (datasetName==null? "" : Uri.EscapeDataString(datasetName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDatasetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the settings of a data set.
		/// UpdateDataset /datasets/{datasetName}
		/// </summary>
		/// <param name="datasetName">The name of the data set to update.</param>
		/// <returns>Success</returns>
		public async Task UpdateDatasetAsync(string datasetName, UpdateDatasetBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/datasets/"+ (datasetName==null? "" : Uri.EscapeDataString(datasetName));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified data store.
		/// DeleteDatastore /datastores/{datastoreName}
		/// </summary>
		/// <param name="datastoreName">The name of the data store to delete.</param>
		public async Task DeleteDatastoreAsync(string datastoreName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/datastores/"+ (datastoreName==null? "" : Uri.EscapeDataString(datastoreName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a data store.
		/// DescribeDatastore /datastores/{datastoreName}
		/// </summary>
		/// <param name="datastoreName">The name of the data store</param>
		/// <param name="includeStatistics">If true, additional statistical information about the data store is included in the response. This feature cannot be used with a data store whose S3 storage is customer-managed.</param>
		/// <returns>Success</returns>
		public async Task<DescribeDatastoreResponse> DescribeDatastoreAsync(string datastoreName, bool includeStatistics, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/datastores/"+ (datastoreName==null? "" : Uri.EscapeDataString(datastoreName))+"&includeStatistics="+includeStatistics;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDatastoreResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the settings of a data store.
		/// UpdateDatastore /datastores/{datastoreName}
		/// </summary>
		/// <param name="datastoreName">The name of the data store to be updated.</param>
		/// <returns>Success</returns>
		public async Task UpdateDatastoreAsync(string datastoreName, UpdateDatastoreBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/datastores/"+ (datastoreName==null? "" : Uri.EscapeDataString(datastoreName));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified pipeline.
		/// DeletePipeline /pipelines/{pipelineName}
		/// </summary>
		/// <param name="pipelineName">The name of the pipeline to delete.</param>
		public async Task DeletePipelineAsync(string pipelineName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/pipelines/"+ (pipelineName==null? "" : Uri.EscapeDataString(pipelineName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a pipeline.
		/// DescribePipeline /pipelines/{pipelineName}
		/// </summary>
		/// <param name="pipelineName">The name of the pipeline whose information is retrieved.</param>
		/// <returns>Success</returns>
		public async Task<DescribePipelineResponse> DescribePipelineAsync(string pipelineName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/pipelines/"+ (pipelineName==null? "" : Uri.EscapeDataString(pipelineName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribePipelineResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the settings of a pipeline. You must specify both a <code>channel</code> and a <code>datastore</code> activity and, optionally, as many as 23 additional activities in the <code>pipelineActivities</code> array.
		/// UpdatePipeline /pipelines/{pipelineName}
		/// </summary>
		/// <param name="pipelineName">The name of the pipeline to update.</param>
		/// <returns>Success</returns>
		public async Task UpdatePipelineAsync(string pipelineName, UpdatePipelineBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/pipelines/"+ (pipelineName==null? "" : Uri.EscapeDataString(pipelineName));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the current settings of the AWS IoT Analytics logging options.
		/// DescribeLoggingOptions /logging
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeLoggingOptionsResponse> DescribeLoggingOptionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/logging";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeLoggingOptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets or updates the AWS IoT Analytics logging options.</p> <p>Note that if you update the value of any <code>loggingOptions</code> field, it takes up to one minute for the change to take effect. Also, if you change the policy attached to the role you specified in the roleArn field (for example, to correct an invalid policy) it takes up to 5 minutes for that change to take effect. </p>
		/// PutLoggingOptions /logging
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutLoggingOptionsAsync(PutLoggingOptionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/logging";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists information about data set contents that have been created.
		/// ListDatasetContents /datasets/{datasetName}/contents
		/// </summary>
		/// <param name="datasetName">The name of the data set whose contents information you want to list.</param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return in this request.</param>
		/// <param name="scheduledOnOrAfter">A filter to limit results to those data set contents whose creation is scheduled on or after the given time. See the field <code>triggers.schedule</code> in the CreateDataset request. (timestamp)</param>
		/// <param name="scheduledBefore">A filter to limit results to those data set contents whose creation is scheduled before the given time. See the field <code>triggers.schedule</code> in the CreateDataset request. (timestamp)</param>
		/// <returns>Success</returns>
		public async Task<ListDatasetContentsResponse> ListDatasetContentsAsync(string datasetName, string nextToken, int maxResults, System.DateTimeOffset scheduledOnOrAfter, System.DateTimeOffset scheduledBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/datasets/"+ (datasetName==null? "" : Uri.EscapeDataString(datasetName))+"/contents&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&scheduledOnOrAfter=" + scheduledOnOrAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&scheduledBefore=" + scheduledBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDatasetContentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags (metadata) which you have assigned to the resource.
		/// ListTagsForResource /tags#resourceArn
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource whose tags you want to list.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags#resourceArn?resourceArn=" + (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.
		/// TagResource /tags#resourceArn
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource whose tags you want to modify.</param>
		public async Task TagResourceAsync(string resourceArn, TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags#resourceArn?resourceArn=" + (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Simulates the results of running a pipeline activity on a message payload.
		/// RunPipelineActivity /pipelineactivities/run
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RunPipelineActivityResponse> RunPipelineActivityAsync(RunPipelineActivityBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/pipelineactivities/run";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RunPipelineActivityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a sample of messages from the specified channel ingested during the specified timeframe. Up to 10 messages can be retrieved.
		/// SampleChannelData /channels/{channelName}/sample
		/// </summary>
		/// <param name="channelName">The name of the channel whose message samples are retrieved.</param>
		/// <param name="maxMessages">The number of sample messages to be retrieved. The limit is 10, the default is also 10.</param>
		/// <param name="startTime">The start of the time window from which sample messages are retrieved.</param>
		/// <param name="endTime">The end of the time window from which sample messages are retrieved.</param>
		/// <returns>Success</returns>
		public async Task<SampleChannelDataResponse> SampleChannelDataAsync(string channelName, int maxMessages, System.DateTimeOffset startTime, System.DateTimeOffset endTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/channels/"+ (channelName==null? "" : Uri.EscapeDataString(channelName))+"/sample&maxMessages="+maxMessages+"&startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SampleChannelDataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts the reprocessing of raw message data through the pipeline.
		/// StartPipelineReprocessing /pipelines/{pipelineName}/reprocessing
		/// </summary>
		/// <param name="pipelineName">The name of the pipeline on which to start reprocessing.</param>
		/// <returns>Success</returns>
		public async Task<StartPipelineReprocessingResponse> StartPipelineReprocessingAsync(string pipelineName, StartPipelineReprocessingBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/pipelines/"+ (pipelineName==null? "" : Uri.EscapeDataString(pipelineName))+"/reprocessing";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartPipelineReprocessingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the given tags (metadata) from the resource.
		/// UntagResource /tags#resourceArn&tagKeys
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource whose tags you want to remove.</param>
		/// <param name="tagKeys">The keys of those tags which you want to remove.</param>
		public async Task UntagResourceAsync(string resourceArn, TagKey[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags#resourceArn&tagKeys?resourceArn=" + (resourceArn==null? "" : Uri.EscapeDataString(resourceArn))+"&"+String.Join("&", tagKeys.Select(z => $"tagKeys={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchPutMessageBody
	{
		
		/// <summary>
		/// The name of the channel where the messages are sent.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ChannelName { get; set; }
		
		/// <summary>
		/// <p>The list of messages to be sent. Each message has format: '{ "messageId": "string", "payload": "string"}'.</p> <p>Note that the field names of message payloads (data) that you send to AWS IoT Analytics:</p> <ul> <li> <p>Must contain only alphanumeric characters and undescores (_); no other special characters are allowed.</p> </li> <li> <p>Must begin with an alphabetic character or single underscore (_).</p> </li> <li> <p>Cannot contain hyphens (-).</p> </li> <li> <p>In regular expression terms: "^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$". </p> </li> <li> <p>Cannot be greater than 255 characters.</p> </li> <li> <p>Are case-insensitive. (Fields named "foo" and "FOO" in the same payload are considered duplicates.)</p> </li> </ul> <p>For example, {"temp_01": 29} or {"_temp_01": 29} are valid, but {"temp-01": 29}, {"01_temp": 29} or {"__temp_01": 29} are invalid in message payloads. </p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Message[] Messages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateChannelBody
	{
		
		/// <summary>
		/// The name of the channel.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ChannelName { get; set; }
		
		/// <summary>
		/// Where channel data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after creation of the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ChannelStorage { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RetentionPeriod { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the channel.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDatasetBody
	{
		
		/// <summary>
		/// The name of the data set.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DatasetName { get; set; }
		
		/// <summary>
		/// A list of actions that create the data set contents.
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public DatasetAction[] Actions { get; set; }
		
		/// <summary>
		/// A list of triggers. A trigger causes data set contents to be populated at a specified time interval or when another data set's contents are created. The list of triggers can be empty or contain up to five <b>DataSetTrigger</b> objects.
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public DatasetTrigger[] Triggers { get; set; }
		
		/// <summary>
		/// When data set contents are created they are delivered to destinations specified here.
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public DatasetContentDeliveryRule[] ContentDeliveryRules { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RetentionPeriod { get; set; }
		
		/// <summary>
		/// Information about the versioning of data set contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VersioningConfiguration { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the data set.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDatastoreBody
	{
		
		/// <summary>
		/// The name of the data store.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DatastoreName { get; set; }
		
		/// <summary>
		/// Where data store data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after the data store is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DatastoreStorage { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RetentionPeriod { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the data store.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePipelineBody
	{
		
		/// <summary>
		/// The name of the pipeline.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string PipelineName { get; set; }
		
		/// <summary>
		/// <p>A list of "PipelineActivity" objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.</p> <p>The list can be 2-25 <b>PipelineActivity</b> objects and must contain both a <code>channel</code> and a <code>datastore</code> activity. Each entry in the list must contain only one activity, for example:</p> <p> <code>pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]</code> </p>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public PipelineActivity[] PipelineActivities { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the pipeline.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateChannelBody
	{
		
		/// <summary>
		/// Where channel data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after creation of the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ChannelStorage { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RetentionPeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDatasetBody
	{
		
		/// <summary>
		/// A list of "DatasetAction" objects.
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public DatasetAction[] Actions { get; set; }
		
		/// <summary>
		/// A list of "DatasetTrigger" objects. The list can be empty or can contain up to five <b>DataSetTrigger</b> objects.
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public DatasetTrigger[] Triggers { get; set; }
		
		/// <summary>
		/// When data set contents are created they are delivered to destinations specified here.
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public DatasetContentDeliveryRule[] ContentDeliveryRules { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RetentionPeriod { get; set; }
		
		/// <summary>
		/// Information about the versioning of data set contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VersioningConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDatastoreBody
	{
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RetentionPeriod { get; set; }
		
		/// <summary>
		/// Where data store data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after the data store is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DatastoreStorage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePipelineBody
	{
		
		/// <summary>
		/// <p>A list of "PipelineActivity" objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.</p> <p>The list can be 2-25 <b>PipelineActivity</b> objects and must contain both a <code>channel</code> and a <code>datastore</code> activity. Each entry in the list must contain only one activity, for example:</p> <p> <code>pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]</code> </p>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public PipelineActivity[] PipelineActivities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutLoggingOptionsBody
	{
		
		/// <summary>
		/// Information about logging options.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoggingOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		/// The new or modified tags for the resource.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RunPipelineActivityBody
	{
		
		/// <summary>
		/// An activity that performs a transformation on a message.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PipelineActivity { get; set; }
		
		/// <summary>
		/// The sample message payloads on which the pipeline activity is run.
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public MessagePayload[] Payloads { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartPipelineReprocessingBody
	{
		
		/// <summary>
		/// The start time (inclusive) of raw message data that is reprocessed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// The end time (exclusive) of raw message data that is reprocessed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
