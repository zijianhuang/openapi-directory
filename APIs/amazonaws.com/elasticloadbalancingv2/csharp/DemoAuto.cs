//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddListenerCertificatesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
	}
	
	/// <summary>
	/// Information about an SSL server certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Certificate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
	}
	
	/// <summary>
	/// Information about a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateListenerOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Listener[] Listeners { get; set; }
	}
	
	/// <summary>
	/// Information about an action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Action
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActionType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
		
		/// <summary>
		/// Request parameters when using an identity provider (IdP) that is compliant with OpenID Connect (OIDC) to authenticate users.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthenticateOidcActionConfig AuthenticateOidcConfig { get; set; }
		
		/// <summary>
		/// Request parameters to use when integrating with Amazon Cognito to authenticate users.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthenticateCognitoActionConfig AuthenticateCognitoConfig { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50000)]
		public System.Nullable<System.Int32> Order { get; set; }
		
		/// <summary>
		/// <p>Information about a redirect action.</p> <p>A URI consists of the following components: protocol://hostname:port/path?query. You must modify at least one of the following components to avoid a redirect loop: protocol, hostname, port, or path. Any components that you do not modify retain their original values.</p> <p>You can reuse URI components using the following reserved keywords:</p> <ul> <li> <p>#{protocol}</p> </li> <li> <p>#{host}</p> </li> <li> <p>#{port}</p> </li> <li> <p>#{path} (the leading "/" is removed)</p> </li> <li> <p>#{query}</p> </li> </ul> <p>For example, you can change the path to "/new/#{path}", the hostname to "example.#{host}", or the query to "#{query}&amp;value=xyz".</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RedirectActionConfig RedirectConfig { get; set; }
		
		/// <summary>
		/// Information about an action that returns a custom HTTP response.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FixedResponseActionConfig FixedResponseConfig { get; set; }
		
		/// <summary>
		/// Information about a forward action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ForwardActionConfig ForwardConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		forward = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticate-oidc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticate-cognito = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		redirect = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fixed-response = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLoadBalancerOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancer[] LoadBalancers { get; set; }
	}
	
	/// <summary>
	/// Information about a subnet mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SubnetMapping
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIPv4Address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRuleOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Rule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Information about a condition for a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RuleCondition
	{
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringValue[] Values { get; set; }
		
		/// <summary>
		/// Information about a host header condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HostHeaderConditionConfig HostHeaderConfig { get; set; }
		
		/// <summary>
		/// Information about a path pattern condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PathPatternConditionConfig PathPatternConfig { get; set; }
		
		/// <summary>
		/// <p>Information about an HTTP header condition.</p> <p>There is a set of standard HTTP header fields. You can also define custom HTTP header fields.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HttpHeaderConditionConfig HttpHeaderConfig { get; set; }
		
		/// <summary>
		/// <p>Information about a query string condition.</p> <p>The query string component of a URI starts after the first '?' character and is terminated by either a '#' character or the end of the URI. A typical query string contains key/value pairs separated by '&amp;' characters. The allowed characters are specified by RFC 3986. Any character can be percentage encoded.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueryStringConditionConfig QueryStringConfig { get; set; }
		
		/// <summary>
		/// <p>Information about an HTTP method condition.</p> <p>HTTP defines a set of request methods, also referred to as HTTP verbs. For more information, see the <a href="https://www.iana.org/assignments/http-methods/http-methods.xhtml">HTTP Method Registry</a>. You can also define custom HTTP methods.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HttpRequestMethodConditionConfig HttpRequestMethodConfig { get; set; }
		
		/// <summary>
		/// <p>Information about a source IP condition.</p> <p>You can use this condition to route based on the IP address of the source that connects to the load balancer. If a client is behind a proxy, this is the IP address of the proxy not the IP address of the client.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SourceIpConditionConfig SourceIpConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTargetGroupOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroup[] TargetGroups { get; set; }
	}
	
	/// <summary>
	/// Information about a target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetDescription
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAccountLimitsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Limit[] Limits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeListenerCertificatesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeListenersOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Listener[] Listeners { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLoadBalancerAttributesOutput
	{
		
		/// <summary>
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public LoadBalancerAttribute[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLoadBalancersOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancer[] LoadBalancers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRulesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Rule[] Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSSLPoliciesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SslPolicy[] SslPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTagsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagDescription[] TagDescriptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTargetGroupAttributesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupAttribute[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTargetGroupsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroup[] TargetGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTargetHealthOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetHealthDescription[] TargetHealthDescriptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyListenerOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Listener[] Listeners { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyLoadBalancerAttributesOutput
	{
		
		/// <summary>
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public LoadBalancerAttribute[] Attributes { get; set; }
	}
	
	/// <summary>
	/// Information about a load balancer attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadBalancerAttribute
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9._]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyRuleOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Rule[] Rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyTargetGroupOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroup[] TargetGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyTargetGroupAttributesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupAttribute[] Attributes { get; set; }
	}
	
	/// <summary>
	/// Information about a target group attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetGroupAttribute
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9._]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetIpAddressTypeOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SetIpAddressTypeOutputIpAddressType IpAddressType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SetIpAddressTypeOutputIpAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dualstack = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetRulePrioritiesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Rule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Information about the priorities for the rules for a listener.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RulePriorityPair
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RuleArn { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50000)]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetSecurityGroupsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroupId[] SecurityGroupIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetSubnetsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ActionTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		forward = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticate-oidc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticate-cognito = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		redirect = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fixed-response = 4,
	}
	
	/// <summary>
	/// Request parameters when using an identity provider (IdP) that is compliant with OpenID Connect (OIDC) to authenticate users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthenticateOidcActionConfig
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Issuer { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizationEndpoint { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TokenEndpoint { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserInfoEndpoint { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientSecret { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SessionCookieName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SessionTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticateOidcActionAuthenticationRequestExtraParams AuthenticationRequestExtraParams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticateOidcActionConfigOnUnauthenticatedRequest OnUnauthenticatedRequest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseExistingClientSecret { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthenticateOidcActionConfigOnUnauthenticatedRequest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deny = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allow = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticate = 2,
	}
	
	/// <summary>
	/// Request parameters to use when integrating with Amazon Cognito to authenticate users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthenticateCognitoActionConfig
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserPoolArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserPoolClientId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserPoolDomain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SessionCookieName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SessionTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticateCognitoActionAuthenticationRequestExtraParams AuthenticationRequestExtraParams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticateCognitoActionConfigOnUnauthenticatedRequest OnUnauthenticatedRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthenticateCognitoActionConfigOnUnauthenticatedRequest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deny = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allow = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticate = 2,
	}
	
	/// <summary>
	/// <p>Information about a redirect action.</p> <p>A URI consists of the following components: protocol://hostname:port/path?query. You must modify at least one of the following components to avoid a redirect loop: protocol, hostname, port, or path. Any components that you do not modify retain their original values.</p> <p>You can reuse URI components using the following reserved keywords:</p> <ul> <li> <p>#{protocol}</p> </li> <li> <p>#{host}</p> </li> <li> <p>#{port}</p> </li> <li> <p>#{path} (the leading "/" is removed)</p> </li> <li> <p>#{query}</p> </li> </ul> <p>For example, you can change the path to "/new/#{path}", the hostname to "example.#{host}", or the query to "#{query}&amp;value=xyz".</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RedirectActionConfig
	{
		
		/// <summary>
		/// Pattern: ^(HTTPS?|#\{protocol\})$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Port { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Host { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Path { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=0)]
		public string Query { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RedirectActionConfigStatusCode StatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RedirectActionConfigStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP_301 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP_302 = 1,
	}
	
	/// <summary>
	/// Information about an action that returns a custom HTTP response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FixedResponseActionConfig
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string MessageBody { get; set; }
		
		/// <summary>
		/// Pattern: ^(2|4|5)\d\d$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StatusCode { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=0)]
		public string ContentType { get; set; }
	}
	
	/// <summary>
	/// Information about a forward action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ForwardActionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupTuple[] TargetGroups { get; set; }
		
		/// <summary>
		/// Information about the target group stickiness for a rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupStickinessConfig TargetGroupStickinessConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddListenerCertificatesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListenerArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddTagsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceArn[] ResourceArns { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthenticateCognitoActionConditionalBehaviorEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deny = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allow = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticate = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthenticateOidcActionConditionalBehaviorEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deny = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allow = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticate = 2,
	}
	
	/// <summary>
	/// Information about an Availability Zone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailabilityZone
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ZoneName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerAddress[] LoadBalancerAddresses { get; set; }
	}
	
	/// <summary>
	/// Information about a cipher used in a policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Cipher
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProtocolEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP_UDP = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateListenerInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateListenerInputProtocol Protocol { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public int Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SslPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Action[] DefaultActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlpnPolicyValue[] AlpnPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateListenerInputProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP_UDP = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerSchemeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		internet-facing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@internal = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		application = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		network = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IpAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dualstack = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLoadBalancerInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetId[] Subnets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetMapping[] SubnetMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroupId[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateLoadBalancerInputScheme Scheme { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateLoadBalancerInputType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateLoadBalancerInputIpAddressType IpAddressType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateLoadBalancerInputScheme
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		internet-facing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@internal = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateLoadBalancerInputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		application = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		network = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateLoadBalancerInputIpAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dualstack = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRuleInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListenerArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RuleCondition[] Conditions { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50000)]
		public int Priority { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Action[] Actions { get; set; }
	}
	
	/// <summary>
	/// Information to use when checking for a successful response from a target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Matcher
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HttpCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TargetTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ip = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lambda = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTargetGroupInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateTargetGroupInputProtocol Protocol { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateTargetGroupInputHealthCheckProtocol HealthCheckProtocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HealthCheckPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HealthCheckEnabled { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string HealthCheckPath { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 300)]
		public System.Nullable<System.Int32> HealthCheckIntervalSeconds { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 120
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 120)]
		public System.Nullable<System.Int32> HealthCheckTimeoutSeconds { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 10)]
		public System.Nullable<System.Int32> HealthyThresholdCount { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 10)]
		public System.Nullable<System.Int32> UnhealthyThresholdCount { get; set; }
		
		/// <summary>
		/// Information to use when checking for a successful response from a target.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Matcher Matcher { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateTargetGroupInputTargetType TargetType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateTargetGroupInputProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP_UDP = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateTargetGroupInputHealthCheckProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP_UDP = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateTargetGroupInputTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ip = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lambda = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteListenerInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListenerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLoadBalancerInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteRuleInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTargetGroupInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterTargetsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TargetDescription[] Targets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAccountLimitsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 400
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 400)]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeListenerCertificatesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListenerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 400
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 400)]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeListenersInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListenerArn[] ListenerArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 400
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 400)]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLoadBalancerAttributesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLoadBalancersInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerArn[] LoadBalancerArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerName[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 400
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 400)]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRulesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ListenerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleArn[] RuleArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 400
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 400)]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSSLPoliciesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SslPolicyName[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 400
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 400)]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTagsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceArn[] ResourceArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTargetGroupAttributesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTargetGroupsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupArn[] TargetGroupArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupName[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 400
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 400)]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTargetHealthInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetDescription[] Targets { get; set; }
	}
	
	/// <summary>
	/// Information about the target group stickiness for a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetGroupStickinessConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationSeconds { get; set; }
	}
	
	/// <summary>
	/// Information about a host header condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HostHeaderConditionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StringValue[] Values { get; set; }
	}
	
	/// <summary>
	/// <p>Information about an HTTP header condition.</p> <p>There is a set of standard HTTP header fields. You can also define custom HTTP header fields.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HttpHeaderConditionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HttpHeaderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringValue[] Values { get; set; }
	}
	
	/// <summary>
	/// <p>Information about an HTTP method condition.</p> <p>HTTP defines a set of request methods, also referred to as HTTP verbs. For more information, see the <a href="https://www.iana.org/assignments/http-methods/http-methods.xhtml">HTTP Method Registry</a>. You can also define custom HTTP methods.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HttpRequestMethodConditionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StringValue[] Values { get; set; }
	}
	
	/// <summary>
	/// Information about an Elastic Load Balancing resource limit for your AWS account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Limit
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Max { get; set; }
	}
	
	/// <summary>
	/// Information about a listener.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Listener
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ListenerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListenerProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SslPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Action[] DefaultActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlpnPolicyValue[] AlpnPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListenerProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP_UDP = 5,
	}
	
	/// <summary>
	/// Information about the state of the load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadBalancerState
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerStateCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provisioning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active_impaired = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
	}
	
	/// <summary>
	/// Information about a load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadBalancer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DNSName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CanonicalHostedZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerScheme Scheme { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		/// <summary>
		/// Information about the state of the load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroupId[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerIpAddressType IpAddressType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerScheme
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		internet-facing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@internal = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		application = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		network = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerIpAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dualstack = 1,
	}
	
	/// <summary>
	/// Information about a static IP address for a load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadBalancerAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIPv4Address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerStateEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provisioning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active_impaired = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyListenerInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListenerArn { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModifyListenerInputProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SslPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Action[] DefaultActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlpnPolicyValue[] AlpnPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ModifyListenerInputProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP_UDP = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyLoadBalancerAttributesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		/// <summary>
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public LoadBalancerAttribute[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyRuleInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RuleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleCondition[] Conditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Action[] Actions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyTargetGroupAttributesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupAttribute[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyTargetGroupInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModifyTargetGroupInputHealthCheckProtocol HealthCheckProtocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HealthCheckPort { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string HealthCheckPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HealthCheckEnabled { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 300)]
		public System.Nullable<System.Int32> HealthCheckIntervalSeconds { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 120
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 120)]
		public System.Nullable<System.Int32> HealthCheckTimeoutSeconds { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 10)]
		public System.Nullable<System.Int32> HealthyThresholdCount { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 10)]
		public System.Nullable<System.Int32> UnhealthyThresholdCount { get; set; }
		
		/// <summary>
		/// Information to use when checking for a successful response from a target.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Matcher Matcher { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ModifyTargetGroupInputHealthCheckProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP_UDP = 5,
	}
	
	/// <summary>
	/// Information about a path pattern condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PathPatternConditionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StringValue[] Values { get; set; }
	}
	
	/// <summary>
	/// <p>Information about a query string condition.</p> <p>The query string component of a URI starts after the first '?' character and is terminated by either a '#' character or the end of the URI. A typical query string contains key/value pairs separated by '&amp;' characters. The allowed characters are specified by RFC 3986. Any character can be percentage encoded.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class QueryStringConditionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public QueryStringKeyValuePair[] Values { get; set; }
	}
	
	/// <summary>
	/// Information about a key/value pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class QueryStringKeyValuePair
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RedirectActionStatusCodeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP_301 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP_302 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterTargetsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TargetDescription[] Targets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveListenerCertificatesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ListenerArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveTagsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceArn[] ResourceArns { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagKey[] TagKeys { get; set; }
	}
	
	/// <summary>
	/// Information about a rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Rule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RuleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleCondition[] Conditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Action[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
	}
	
	/// <summary>
	/// <p>Information about a source IP condition.</p> <p>You can use this condition to route based on the IP address of the source that connects to the load balancer. If a client is behind a proxy, this is the IP address of the proxy not the IP address of the client.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SourceIpConditionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StringValue[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetIpAddressTypeInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SetIpAddressTypeInputIpAddressType IpAddressType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SetIpAddressTypeInputIpAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipv4 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dualstack = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetRulePrioritiesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RulePriorityPair[] RulePriorities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetSecurityGroupsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroupId[] SecurityGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetSubnetsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetId[] Subnets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetMapping[] SubnetMappings { get; set; }
	}
	
	/// <summary>
	/// Information about a policy used for SSL negotiation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SslPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SslProtocol[] SslProtocols { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cipher[] Ciphers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The tags associated with a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Information about a target group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupProtocol Protocol { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupHealthCheckProtocol HealthCheckProtocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HealthCheckPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HealthCheckEnabled { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 300)]
		public System.Nullable<System.Int32> HealthCheckIntervalSeconds { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 120
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 120)]
		public System.Nullable<System.Int32> HealthCheckTimeoutSeconds { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 10)]
		public System.Nullable<System.Int32> HealthyThresholdCount { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 10)]
		public System.Nullable<System.Int32> UnhealthyThresholdCount { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string HealthCheckPath { get; set; }
		
		/// <summary>
		/// Information to use when checking for a successful response from a target.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Matcher Matcher { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerArn[] LoadBalancerArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupTargetType TargetType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TargetGroupProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP_UDP = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TargetGroupHealthCheckProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP_UDP = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TargetGroupTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ip = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lambda = 2,
	}
	
	/// <summary>
	/// Information about how traffic will be distributed between multiple target groups in a forward rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetGroupTuple
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TargetHealthStateEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		initial = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		healthy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unhealthy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unused = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		draining = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unavailable = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TargetHealthReasonEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Elb.RegistrationInProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Elb.InitialHealthChecking = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.ResponseCodeMismatch = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.Timeout = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.FailedHealthChecks = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.NotRegistered = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.NotInUse = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.DeregistrationInProgress = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.InvalidState = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.IpUnusable = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.HealthCheckDisabled = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Elb.InternalError = 11,
	}
	
	/// <summary>
	/// Information about the current health of a target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetHealth
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetHealthState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetHealthReason Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TargetHealthState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		initial = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		healthy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unhealthy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unused = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		draining = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unavailable = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TargetHealthReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Elb.RegistrationInProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Elb.InitialHealthChecking = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.ResponseCodeMismatch = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.Timeout = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.FailedHealthChecks = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.NotRegistered = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.NotInUse = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.DeregistrationInProgress = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.InvalidState = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.IpUnusable = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target.HealthCheckDisabled = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Elb.InternalError = 11,
	}
	
	/// <summary>
	/// Information about the health of a target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetHealthDescription
	{
		
		/// <summary>
		/// Information about a target.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TargetDescription Target { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HealthCheckPort { get; set; }
		
		/// <summary>
		/// Information about the current health of a target.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TargetHealth TargetHealth { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Adds the specified SSL server certificate to the certificate list for the specified HTTPS or TLS listener.</p> <p>If the certificate in already in the certificate list, the call is successful but the certificate is not added again.</p> <p>To get the certificate list for a listener, use <a>DescribeListenerCertificates</a>. To remove certificates from the certificate list for a listener, use <a>RemoveListenerCertificates</a>. To replace the default certificate for a listener, use <a>ModifyListener</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#https-listener-certificates">SSL Certificates</a> in the <i>Application Load Balancers Guide</i>.</p>
		/// GET_AddListenerCertificates /#Action=AddListenerCertificates
		/// </summary>
		/// <param name="ListenerArn">The Amazon Resource Name (ARN) of the listener.</param>
		/// <param name="Certificates">The certificate to add. You can specify one certificate per call. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_AddListenerCertificatesAsync(string ListenerArn, Certificate[] Certificates, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=AddListenerCertificates?ListenerArn=" + (ListenerArn==null? "" : Uri.EscapeDataString(ListenerArn))+"&"+String.Join("&", Certificates.Select(z => $"Certificates={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds the specified tags to the specified Elastic Load Balancing resource. You can tag your Application Load Balancers, Network Load Balancers, and your target groups.</p> <p>Each tag consists of a key and an optional value. If a resource already has a tag with the same key, <code>AddTags</code> updates its value.</p> <p>To list the current tags for your resources, use <a>DescribeTags</a>. To remove tags from your resources, use <a>RemoveTags</a>.</p>
		/// GET_AddTags /#Action=AddTags
		/// </summary>
		/// <param name="ResourceArns">The Amazon Resource Name (ARN) of the resource.</param>
		/// <param name="Tags">The tags.</param>
		/// <returns>Success</returns>
		public async Task GET_AddTagsAsync(ResourceArn[] ResourceArns, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=AddTags?"+String.Join("&", ResourceArns.Select(z => $"ResourceArns={z}"))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a listener for the specified Application Load Balancer or Network Load Balancer.</p> <p>To update a listener, use <a>ModifyListener</a>. When you are finished with a listener, you can delete it using <a>DeleteListener</a>. If you are finished with both the listener and the load balancer, you can delete them both using <a>DeleteLoadBalancer</a>.</p> <p>This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple listeners with the same settings, each call succeeds.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html">Listeners for Your Application Load Balancers</a> in the <i>Application Load Balancers Guide</i> and <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-listeners.html">Listeners for Your Network Load Balancers</a> in the <i>Network Load Balancers Guide</i>.</p>
		/// GET_CreateListener /#Action=CreateListener
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <param name="Protocol">The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP.</param>
		/// <param name="Port">The port on which the load balancer is listening.</param>
		/// <param name="SslPolicy"><p>[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported. The following are the possible values:</p> <ul> <li> <p> <code>ELBSecurityPolicy-2016-08</code> </p> </li> <li> <p> <code>ELBSecurityPolicy-TLS-1-0-2015-04</code> </p> </li> <li> <p> <code>ELBSecurityPolicy-TLS-1-1-2017-01</code> </p> </li> <li> <p> <code>ELBSecurityPolicy-TLS-1-2-2017-01</code> </p> </li> <li> <p> <code>ELBSecurityPolicy-TLS-1-2-Ext-2018-06</code> </p> </li> <li> <p> <code>ELBSecurityPolicy-FS-2018-06</code> </p> </li> <li> <p> <code>ELBSecurityPolicy-FS-1-1-2019-08</code> </p> </li> <li> <p> <code>ELBSecurityPolicy-FS-1-2-2019-08</code> </p> </li> <li> <p> <code>ELBSecurityPolicy-FS-1-2-Res-2019-08</code> </p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security Policies</a> in the <i>Application Load Balancers Guide</i> and <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies">Security Policies</a> in the <i>Network Load Balancers Guide</i>.</p></param>
		/// <param name="Certificates"><p>[HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</p> <p>To create a certificate list for the listener, use <a>AddListenerCertificates</a>.</p></param>
		/// <param name="DefaultActions"><p>The actions for the default rule. The rule must include one forward action or one or more fixed-response actions.</p> <p>If the action type is <code>forward</code>, you specify one or more target groups. The protocol of the target group must be HTTP or HTTPS for an Application Load Balancer. The protocol of the target group must be TCP, TLS, UDP, or TCP_UDP for a Network Load Balancer.</p> <p>[HTTPS listeners] If the action type is <code>authenticate-oidc</code>, you authenticate users through an identity provider that is OpenID Connect (OIDC) compliant.</p> <p>[HTTPS listeners] If the action type is <code>authenticate-cognito</code>, you authenticate users through the user pools supported by Amazon Cognito.</p> <p>[Application Load Balancer] If the action type is <code>redirect</code>, you redirect specified client requests from one URL to another.</p> <p>[Application Load Balancer] If the action type is <code>fixed-response</code>, you drop specified client requests and return a custom HTTP response.</p></param>
		/// <param name="AlpnPolicy"><p>[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:</p> <ul> <li> <p> <code>HTTP1Only</code> </p> </li> <li> <p> <code>HTTP2Only</code> </p> </li> <li> <p> <code>HTTP2Optional</code> </p> </li> <li> <p> <code>HTTP2Preferred</code> </p> </li> <li> <p> <code>None</code> </p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies">ALPN Policies</a> in the <i>Network Load Balancers Guide</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreateListenerAsync(string LoadBalancerArn, ProtocolEnum Protocol, int Port, string SslPolicy, Certificate[] Certificates, Action[] DefaultActions, AlpnPolicyValue[] AlpnPolicy, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateListener?LoadBalancerArn=" + (LoadBalancerArn==null? "" : Uri.EscapeDataString(LoadBalancerArn))+"&Protocol=" + Protocol+"&Port="+Port+"&SslPolicy=" + (SslPolicy==null? "" : Uri.EscapeDataString(SslPolicy))+"&"+String.Join("&", Certificates.Select(z => $"Certificates={z}"))+"&"+String.Join("&", DefaultActions.Select(z => $"DefaultActions={z}"))+"&"+String.Join("&", AlpnPolicy.Select(z => $"AlpnPolicy={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Application Load Balancer or a Network Load Balancer.</p> <p>When you create a load balancer, you can specify security groups, public subnets, IP address type, and tags. Otherwise, you could do so later using <a>SetSecurityGroups</a>, <a>SetSubnets</a>, <a>SetIpAddressType</a>, and <a>AddTags</a>.</p> <p>To create listeners for your load balancer, use <a>CreateListener</a>. To describe your current load balancers, see <a>DescribeLoadBalancers</a>. When you are finished with a load balancer, you can delete it using <a>DeleteLoadBalancer</a>.</p> <p>For limit information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html">Limits for Your Application Load Balancer</a> in the <i>Application Load Balancers Guide</i> and <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html">Limits for Your Network Load Balancer</a> in the <i>Network Load Balancers Guide</i>.</p> <p>This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple load balancers with the same settings, each call succeeds.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html">Application Load Balancers</a> in the <i>Application Load Balancers Guide</i> and <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html">Network Load Balancers</a> in the <i>Network Load Balancers Guide</i>.</p>
		/// GET_CreateLoadBalancer /#Action=CreateLoadBalancer
		/// </summary>
		/// <param name="Name"><p>The name of the load balancer.</p> <p>This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with "internal-".</p></param>
		/// <param name="Subnets"><p>The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.</p> <p>[Application Load Balancers] You must specify subnets from at least two Availability Zones.</p> <p>[Network Load Balancers] You can specify subnets from one or more Availability Zones.</p></param>
		/// <param name="SubnetMappings"><p>The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.</p> <p>[Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.</p> <p>[Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet.</p></param>
		/// <param name="SecurityGroups">[Application Load Balancers] The IDs of the security groups for the load balancer.</param>
		/// <param name="Scheme"><p>The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet.</p> <p>The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer.</p> <p>The default is an Internet-facing load balancer.</p></param>
		/// <param name="Tags">One or more tags to assign to the load balancer.</param>
		/// <param name="Type">The type of load balancer. The default is <code>application</code>.</param>
		/// <param name="IpAddressType">[Application Load Balancers] The type of IP addresses used by the subnets for your load balancer. The possible values are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6 addresses). Internal load balancers must use <code>ipv4</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateLoadBalancerAsync(string Name, SubnetId[] Subnets, SubnetMapping[] SubnetMappings, SecurityGroupId[] SecurityGroups, LoadBalancerSchemeEnum Scheme, Tag[] Tags, LoadBalancerTypeEnum Type, SetIpAddressTypeOutputIpAddressType IpAddressType, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateLoadBalancer?Name=" + (Name==null? "" : Uri.EscapeDataString(Name))+"&"+String.Join("&", Subnets.Select(z => $"Subnets={z}"))+"&"+String.Join("&", SubnetMappings.Select(z => $"SubnetMappings={z}"))+"&"+String.Join("&", SecurityGroups.Select(z => $"SecurityGroups={z}"))+"&Scheme=" + Scheme+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Type=" + Type+"&IpAddressType=" + IpAddressType+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a rule for the specified listener. The listener must be associated with an Application Load Balancer.</p> <p>Rules are evaluated in priority order, from the lowest value to the highest value. When the conditions for a rule are met, its actions are performed. If the conditions for no rules are met, the actions for the default rule are performed. For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#listener-rules">Listener Rules</a> in the <i>Application Load Balancers Guide</i>.</p> <p>To view your current rules, use <a>DescribeRules</a>. To update a rule, use <a>ModifyRule</a>. To set the priorities of your rules, use <a>SetRulePriorities</a>. To delete a rule, use <a>DeleteRule</a>.</p>
		/// GET_CreateRule /#Action=CreateRule
		/// </summary>
		/// <param name="ListenerArn">The Amazon Resource Name (ARN) of the listener.</param>
		/// <param name="Conditions">The conditions. Each rule can include zero or one of the following conditions: <code>http-request-method</code>, <code>host-header</code>, <code>path-pattern</code>, and <code>source-ip</code>, and zero or more of the following conditions: <code>http-header</code> and <code>query-string</code>.</param>
		/// <param name="Priority">The rule priority. A listener can't have multiple rules with the same priority.</param>
		/// <param name="Actions"><p>The actions. Each rule must include exactly one of the following types of actions: <code>forward</code>, <code>fixed-response</code>, or <code>redirect</code>, and it must be the last action to be performed.</p> <p>If the action type is <code>forward</code>, you specify one or more target groups. The protocol of the target group must be HTTP or HTTPS for an Application Load Balancer. The protocol of the target group must be TCP, TLS, UDP, or TCP_UDP for a Network Load Balancer.</p> <p>[HTTPS listeners] If the action type is <code>authenticate-oidc</code>, you authenticate users through an identity provider that is OpenID Connect (OIDC) compliant.</p> <p>[HTTPS listeners] If the action type is <code>authenticate-cognito</code>, you authenticate users through the user pools supported by Amazon Cognito.</p> <p>[Application Load Balancer] If the action type is <code>redirect</code>, you redirect specified client requests from one URL to another.</p> <p>[Application Load Balancer] If the action type is <code>fixed-response</code>, you drop specified client requests and return a custom HTTP response.</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreateRuleAsync(string ListenerArn, RuleCondition[] Conditions, int Priority, Action[] Actions, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateRule?ListenerArn=" + (ListenerArn==null? "" : Uri.EscapeDataString(ListenerArn))+"&"+String.Join("&", Conditions.Select(z => $"Conditions={z}"))+"&Priority="+Priority+"&"+String.Join("&", Actions.Select(z => $"Actions={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a target group.</p> <p>To register targets with the target group, use <a>RegisterTargets</a>. To update the health check settings for the target group, use <a>ModifyTargetGroup</a>. To monitor the health of targets in the target group, use <a>DescribeTargetHealth</a>.</p> <p>To route traffic to the targets in a target group, specify the target group in an action using <a>CreateListener</a> or <a>CreateRule</a>.</p> <p>To delete a target group, use <a>DeleteTargetGroup</a>.</p> <p>This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple target groups with the same settings, each call succeeds.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html">Target Groups for Your Application Load Balancers</a> in the <i>Application Load Balancers Guide</i> or <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html">Target Groups for Your Network Load Balancers</a> in the <i>Network Load Balancers Guide</i>.</p>
		/// GET_CreateTargetGroup /#Action=CreateTargetGroup
		/// </summary>
		/// <param name="Name"><p>The name of the target group.</p> <p>This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and must not begin or end with a hyphen.</p></param>
		/// <param name="Protocol">The protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, or TCP_UDP. A TCP_UDP listener must be associated with a TCP_UDP target group. If the target is a Lambda function, this parameter does not apply.</param>
		/// <param name="Port">The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply.</param>
		/// <param name="VpcId">The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply. Otherwise, this parameter is required.</param>
		/// <param name="HealthCheckProtocol">The protocol the load balancer uses when performing health checks on targets. For Application Load Balancers, the default is HTTP. For Network Load Balancers, the default is TCP. The TCP protocol is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The TLS, UDP, and TCP_UDP protocols are not supported for health checks.</param>
		/// <param name="HealthCheckPort">The port the load balancer uses when performing health checks on targets. The default is <code>traffic-port</code>, which is the port on which each target receives traffic from the load balancer.</param>
		/// <param name="HealthCheckEnabled">Indicates whether health checks are enabled. If the target type is <code>lambda</code>, health checks are disabled by default but can be enabled. If the target type is <code>instance</code> or <code>ip</code>, health checks are always enabled and cannot be disabled.</param>
		/// <param name="HealthCheckPath">[HTTP/HTTPS health checks] The ping path that is the destination on the targets for health checks. The default is /.</param>
		/// <param name="HealthCheckIntervalSeconds">The approximate amount of time, in seconds, between health checks of an individual target. For HTTP and HTTPS health checks, the range is 5–300 seconds. For TCP health checks, the supported values are 10 and 30 seconds. If the target type is <code>instance</code> or <code>ip</code>, the default is 30 seconds. If the target type is <code>lambda</code>, the default is 35 seconds.</param>
		/// <param name="HealthCheckTimeoutSeconds">The amount of time, in seconds, during which no response from a target means a failed health check. For target groups with a protocol of HTTP or HTTPS, the default is 5 seconds. For target groups with a protocol of TCP or TLS, this value must be 6 seconds for HTTP health checks and 10 seconds for TCP and HTTPS health checks. If the target type is <code>lambda</code>, the default is 30 seconds.</param>
		/// <param name="HealthyThresholdCount">The number of consecutive health checks successes required before considering an unhealthy target healthy. For target groups with a protocol of HTTP or HTTPS, the default is 5. For target groups with a protocol of TCP or TLS, the default is 3. If the target type is <code>lambda</code>, the default is 5.</param>
		/// <param name="UnhealthyThresholdCount">The number of consecutive health check failures required before considering a target unhealthy. For target groups with a protocol of HTTP or HTTPS, the default is 2. For target groups with a protocol of TCP or TLS, this value must be the same as the healthy threshold count. If the target type is <code>lambda</code>, the default is 2.</param>
		/// <param name="Matcher">[HTTP/HTTPS health checks] The HTTP codes to use when checking for a successful response from a target.</param>
		/// <param name="TargetType"><p>The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.</p> <ul> <li> <p> <code>instance</code> - Targets are specified by instance ID. This is the default value. If the target group protocol is UDP or TCP_UDP, the target type must be <code>instance</code>.</p> </li> <li> <p> <code>ip</code> - Targets are specified by IP address. You can specify IP addresses from the subnets of the virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses.</p> </li> <li> <p> <code>lambda</code> - The target groups contains a single Lambda function.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_CreateTargetGroupAsync(
					string Name, 
					ProtocolEnum Protocol, 
					int Port, 
					string VpcId, 
					ProtocolEnum HealthCheckProtocol, 
					string HealthCheckPort, 
					bool HealthCheckEnabled, 
					string HealthCheckPath, 
					int HealthCheckIntervalSeconds, 
					int HealthCheckTimeoutSeconds, 
					int HealthyThresholdCount, 
					int UnhealthyThresholdCount, 
					string Matcher, 
					TargetTypeEnum TargetType, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateTargetGroup?Name=" + (Name==null? "" : Uri.EscapeDataString(Name))+"&Protocol=" + Protocol+"&Port="+Port+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&HealthCheckProtocol=" + HealthCheckProtocol+"&HealthCheckPort=" + (HealthCheckPort==null? "" : Uri.EscapeDataString(HealthCheckPort))+"&HealthCheckEnabled="+HealthCheckEnabled+"&HealthCheckPath=" + (HealthCheckPath==null? "" : Uri.EscapeDataString(HealthCheckPath))+"&HealthCheckIntervalSeconds="+HealthCheckIntervalSeconds+"&HealthCheckTimeoutSeconds="+HealthCheckTimeoutSeconds+"&HealthyThresholdCount="+HealthyThresholdCount+"&UnhealthyThresholdCount="+UnhealthyThresholdCount+"&Matcher=" + (Matcher==null? "" : Uri.EscapeDataString(Matcher))+"&TargetType=" + TargetType+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified listener.</p> <p>Alternatively, your listener is deleted when you delete the load balancer to which it is attached, using <a>DeleteLoadBalancer</a>.</p>
		/// GET_DeleteListener /#Action=DeleteListener
		/// </summary>
		/// <param name="ListenerArn">The Amazon Resource Name (ARN) of the listener.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteListenerAsync(string ListenerArn, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteListener?ListenerArn=" + (ListenerArn==null? "" : Uri.EscapeDataString(ListenerArn))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified Application Load Balancer or Network Load Balancer and its attached listeners.</p> <p>You can't delete a load balancer if deletion protection is enabled. If the load balancer does not exist or has already been deleted, the call succeeds.</p> <p>Deleting a load balancer does not affect its registered targets. For example, your EC2 instances continue to run and are still registered to their target groups. If you no longer need these EC2 instances, you can stop or terminate them.</p>
		/// GET_DeleteLoadBalancer /#Action=DeleteLoadBalancer
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteLoadBalancerAsync(string LoadBalancerArn, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteLoadBalancer?LoadBalancerArn=" + (LoadBalancerArn==null? "" : Uri.EscapeDataString(LoadBalancerArn))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified rule.
		/// GET_DeleteRule /#Action=DeleteRule
		/// </summary>
		/// <param name="RuleArn">The Amazon Resource Name (ARN) of the rule.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteRuleAsync(string RuleArn, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteRule?RuleArn=" + (RuleArn==null? "" : Uri.EscapeDataString(RuleArn))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified target group.</p> <p>You can delete a target group if it is not referenced by any actions. Deleting a target group also deletes any associated health checks.</p>
		/// GET_DeleteTargetGroup /#Action=DeleteTargetGroup
		/// </summary>
		/// <param name="TargetGroupArn">The Amazon Resource Name (ARN) of the target group.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTargetGroupAsync(string TargetGroupArn, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteTargetGroup?TargetGroupArn=" + (TargetGroupArn==null? "" : Uri.EscapeDataString(TargetGroupArn))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deregisters the specified targets from the specified target group. After the targets are deregistered, they no longer receive traffic from the load balancer.
		/// GET_DeregisterTargets /#Action=DeregisterTargets
		/// </summary>
		/// <param name="TargetGroupArn">The Amazon Resource Name (ARN) of the target group.</param>
		/// <param name="Targets">The targets. If you specified a port override when you registered a target, you must specify both the target ID and the port when you deregister it.</param>
		/// <returns>Success</returns>
		public async Task GET_DeregisterTargetsAsync(string TargetGroupArn, TargetDescription[] Targets, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeregisterTargets?TargetGroupArn=" + (TargetGroupArn==null? "" : Uri.EscapeDataString(TargetGroupArn))+"&"+String.Join("&", Targets.Select(z => $"Targets={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the current Elastic Load Balancing resource limits for your AWS account.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html">Limits for Your Application Load Balancers</a> in the <i>Application Load Balancer Guide</i> or <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-limits.html">Limits for Your Network Load Balancers</a> in the <i>Network Load Balancers Guide</i>.</p>
		/// GET_DescribeAccountLimits /#Action=DescribeAccountLimits
		/// </summary>
		/// <param name="Marker">The marker for the next set of results. (You received this marker from a previous call.)</param>
		/// <param name="PageSize">The maximum number of results to return with this call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAccountLimitsAsync(string Marker, int PageSize, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeAccountLimits?Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&PageSize="+PageSize+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the default certificate and the certificate list for the specified HTTPS or TLS listener.</p> <p>If the default certificate is also in the certificate list, it appears twice in the results (once with <code>IsDefault</code> set to true and once with <code>IsDefault</code> set to false).</p> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#https-listener-certificates">SSL Certificates</a> in the <i>Application Load Balancers Guide</i>.</p>
		/// GET_DescribeListenerCertificates /#Action=DescribeListenerCertificates
		/// </summary>
		/// <param name="ListenerArn">The Amazon Resource Names (ARN) of the listener.</param>
		/// <param name="Marker">The marker for the next set of results. (You received this marker from a previous call.)</param>
		/// <param name="PageSize">The maximum number of results to return with this call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeListenerCertificatesAsync(string ListenerArn, string Marker, int PageSize, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeListenerCertificates?ListenerArn=" + (ListenerArn==null? "" : Uri.EscapeDataString(ListenerArn))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&PageSize="+PageSize+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified listeners or the listeners for the specified Application Load Balancer or Network Load Balancer. You must specify either a load balancer or one or more listeners.</p> <p>For an HTTPS or TLS listener, the output includes the default certificate for the listener. To describe the certificate list for the listener, use <a>DescribeListenerCertificates</a>.</p>
		/// GET_DescribeListeners /#Action=DescribeListeners
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <param name="ListenerArns">The Amazon Resource Names (ARN) of the listeners.</param>
		/// <param name="Marker">The marker for the next set of results. (You received this marker from a previous call.)</param>
		/// <param name="PageSize">The maximum number of results to return with this call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeListenersAsync(string LoadBalancerArn, ListenerArn[] ListenerArns, string Marker, int PageSize, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeListeners?LoadBalancerArn=" + (LoadBalancerArn==null? "" : Uri.EscapeDataString(LoadBalancerArn))+"&"+String.Join("&", ListenerArns.Select(z => $"ListenerArns={z}"))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&PageSize="+PageSize+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the attributes for the specified Application Load Balancer or Network Load Balancer.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html#load-balancer-attributes">Load Balancer Attributes</a> in the <i>Application Load Balancers Guide</i> or <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html#load-balancer-attributes">Load Balancer Attributes</a> in the <i>Network Load Balancers Guide</i>.</p>
		/// GET_DescribeLoadBalancerAttributes /#Action=DescribeLoadBalancerAttributes
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLoadBalancerAttributesAsync(string LoadBalancerArn, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeLoadBalancerAttributes?LoadBalancerArn=" + (LoadBalancerArn==null? "" : Uri.EscapeDataString(LoadBalancerArn))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified load balancers or all of your load balancers.</p> <p>To describe the listeners for a load balancer, use <a>DescribeListeners</a>. To describe the attributes for a load balancer, use <a>DescribeLoadBalancerAttributes</a>.</p>
		/// GET_DescribeLoadBalancers /#Action=DescribeLoadBalancers
		/// </summary>
		/// <param name="LoadBalancerArns">The Amazon Resource Names (ARN) of the load balancers. You can specify up to 20 load balancers in a single call.</param>
		/// <param name="Names">The names of the load balancers.</param>
		/// <param name="Marker">The marker for the next set of results. (You received this marker from a previous call.)</param>
		/// <param name="PageSize">The maximum number of results to return with this call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLoadBalancersAsync(LoadBalancerArn[] LoadBalancerArns, LoadBalancerName[] Names, string Marker, int PageSize, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeLoadBalancers?"+String.Join("&", LoadBalancerArns.Select(z => $"LoadBalancerArns={z}"))+"&"+String.Join("&", Names.Select(z => $"Names={z}"))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&PageSize="+PageSize+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified rules or the rules for the specified listener. You must specify either a listener or one or more rules.
		/// GET_DescribeRules /#Action=DescribeRules
		/// </summary>
		/// <param name="ListenerArn">The Amazon Resource Name (ARN) of the listener.</param>
		/// <param name="RuleArns">The Amazon Resource Names (ARN) of the rules.</param>
		/// <param name="Marker">The marker for the next set of results. (You received this marker from a previous call.)</param>
		/// <param name="PageSize">The maximum number of results to return with this call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeRulesAsync(string ListenerArn, RuleArn[] RuleArns, string Marker, int PageSize, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeRules?ListenerArn=" + (ListenerArn==null? "" : Uri.EscapeDataString(ListenerArn))+"&"+String.Join("&", RuleArns.Select(z => $"RuleArns={z}"))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&PageSize="+PageSize+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified policies or all policies used for SSL negotiation.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security Policies</a> in the <i>Application Load Balancers Guide</i>.</p>
		/// GET_DescribeSSLPolicies /#Action=DescribeSSLPolicies
		/// </summary>
		/// <param name="Names">The names of the policies.</param>
		/// <param name="Marker">The marker for the next set of results. (You received this marker from a previous call.)</param>
		/// <param name="PageSize">The maximum number of results to return with this call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSSLPoliciesAsync(SslPolicyName[] Names, string Marker, int PageSize, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeSSLPolicies?"+String.Join("&", Names.Select(z => $"Names={z}"))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&PageSize="+PageSize+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the tags for the specified resources. You can describe the tags for one or more Application Load Balancers, Network Load Balancers, and target groups.
		/// GET_DescribeTags /#Action=DescribeTags
		/// </summary>
		/// <param name="ResourceArns">The Amazon Resource Names (ARN) of the resources. You can specify up to 20 resources in a single call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTagsAsync(ResourceArn[] ResourceArns, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeTags?"+String.Join("&", ResourceArns.Select(z => $"ResourceArns={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the attributes for the specified target group.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html#target-group-attributes">Target Group Attributes</a> in the <i>Application Load Balancers Guide</i> or <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html#target-group-attributes">Target Group Attributes</a> in the <i>Network Load Balancers Guide</i>.</p>
		/// GET_DescribeTargetGroupAttributes /#Action=DescribeTargetGroupAttributes
		/// </summary>
		/// <param name="TargetGroupArn">The Amazon Resource Name (ARN) of the target group.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTargetGroupAttributesAsync(string TargetGroupArn, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeTargetGroupAttributes?TargetGroupArn=" + (TargetGroupArn==null? "" : Uri.EscapeDataString(TargetGroupArn))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified target groups or all of your target groups. By default, all target groups are described. Alternatively, you can specify one of the following to filter the results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of one or more target groups.</p> <p>To describe the targets for a target group, use <a>DescribeTargetHealth</a>. To describe the attributes of a target group, use <a>DescribeTargetGroupAttributes</a>.</p>
		/// GET_DescribeTargetGroups /#Action=DescribeTargetGroups
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <param name="TargetGroupArns">The Amazon Resource Names (ARN) of the target groups.</param>
		/// <param name="Names">The names of the target groups.</param>
		/// <param name="Marker">The marker for the next set of results. (You received this marker from a previous call.)</param>
		/// <param name="PageSize">The maximum number of results to return with this call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTargetGroupsAsync(string LoadBalancerArn, TargetGroupArn[] TargetGroupArns, TargetGroupName[] Names, string Marker, int PageSize, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeTargetGroups?LoadBalancerArn=" + (LoadBalancerArn==null? "" : Uri.EscapeDataString(LoadBalancerArn))+"&"+String.Join("&", TargetGroupArns.Select(z => $"TargetGroupArns={z}"))+"&"+String.Join("&", Names.Select(z => $"Names={z}"))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&PageSize="+PageSize+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the health of the specified targets or all of your targets.
		/// GET_DescribeTargetHealth /#Action=DescribeTargetHealth
		/// </summary>
		/// <param name="TargetGroupArn">The Amazon Resource Name (ARN) of the target group.</param>
		/// <param name="Targets">The targets.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTargetHealthAsync(string TargetGroupArn, TargetDescription[] Targets, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeTargetHealth?TargetGroupArn=" + (TargetGroupArn==null? "" : Uri.EscapeDataString(TargetGroupArn))+"&"+String.Join("&", Targets.Select(z => $"Targets={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Replaces the specified properties of the specified listener. Any properties that you do not specify remain unchanged.</p> <p>Changing the protocol from HTTPS to HTTP, or from TLS to TCP, removes the security policy and default certificate properties. If you change the protocol from HTTP to HTTPS, or from TCP to TLS, you must add the security policy and default certificate properties.</p> <p>To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.</p>
		/// GET_ModifyListener /#Action=ModifyListener
		/// </summary>
		/// <param name="ListenerArn">The Amazon Resource Name (ARN) of the listener.</param>
		/// <param name="Port">The port for connections from clients to the load balancer.</param>
		/// <param name="Protocol">The protocol for connections from clients to the load balancer. Application Load Balancers support the HTTP and HTTPS protocols. Network Load Balancers support the TCP, TLS, UDP, and TCP_UDP protocols.</param>
		/// <param name="SslPolicy"><p>[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported. The following are the possible values:</p> <ul> <li> <p> <code>ELBSecurityPolicy-2016-08</code> </p> </li> <li> <p> <code>ELBSecurityPolicy-TLS-1-0-2015-04</code> </p> </li> <li> <p> <code>ELBSecurityPolicy-TLS-1-1-2017-01</code> </p> </li> <li> <p> <code>ELBSecurityPolicy-TLS-1-2-2017-01</code> </p> </li> <li> <p> <code>ELBSecurityPolicy-TLS-1-2-Ext-2018-06</code> </p> </li> <li> <p> <code>ELBSecurityPolicy-FS-2018-06</code> </p> </li> <li> <p> <code>ELBSecurityPolicy-FS-1-1-2019-08</code> </p> </li> <li> <p> <code>ELBSecurityPolicy-FS-1-2-2019-08</code> </p> </li> <li> <p> <code>ELBSecurityPolicy-FS-1-2-Res-2019-08</code> </p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security Policies</a> in the <i>Application Load Balancers Guide</i> and <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies">Security Policies</a> in the <i>Network Load Balancers Guide</i>.</p></param>
		/// <param name="Certificates"><p>[HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</p> <p>To create a certificate list, use <a>AddListenerCertificates</a>.</p></param>
		/// <param name="DefaultActions"><p>The actions for the default rule. The rule must include one forward action or one or more fixed-response actions.</p> <p>If the action type is <code>forward</code>, you specify one or more target groups. The protocol of the target group must be HTTP or HTTPS for an Application Load Balancer. The protocol of the target group must be TCP, TLS, UDP, or TCP_UDP for a Network Load Balancer.</p> <p>[HTTPS listeners] If the action type is <code>authenticate-oidc</code>, you authenticate users through an identity provider that is OpenID Connect (OIDC) compliant.</p> <p>[HTTPS listeners] If the action type is <code>authenticate-cognito</code>, you authenticate users through the user pools supported by Amazon Cognito.</p> <p>[Application Load Balancer] If the action type is <code>redirect</code>, you redirect specified client requests from one URL to another.</p> <p>[Application Load Balancer] If the action type is <code>fixed-response</code>, you drop specified client requests and return a custom HTTP response.</p></param>
		/// <param name="AlpnPolicy"><p>[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:</p> <ul> <li> <p> <code>HTTP1Only</code> </p> </li> <li> <p> <code>HTTP2Only</code> </p> </li> <li> <p> <code>HTTP2Optional</code> </p> </li> <li> <p> <code>HTTP2Preferred</code> </p> </li> <li> <p> <code>None</code> </p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies">ALPN Policies</a> in the <i>Network Load Balancers Guide</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ModifyListenerAsync(string ListenerArn, int Port, ProtocolEnum Protocol, string SslPolicy, Certificate[] Certificates, Action[] DefaultActions, AlpnPolicyValue[] AlpnPolicy, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyListener?ListenerArn=" + (ListenerArn==null? "" : Uri.EscapeDataString(ListenerArn))+"&Port="+Port+"&Protocol=" + Protocol+"&SslPolicy=" + (SslPolicy==null? "" : Uri.EscapeDataString(SslPolicy))+"&"+String.Join("&", Certificates.Select(z => $"Certificates={z}"))+"&"+String.Join("&", DefaultActions.Select(z => $"DefaultActions={z}"))+"&"+String.Join("&", AlpnPolicy.Select(z => $"AlpnPolicy={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the specified attributes of the specified Application Load Balancer or Network Load Balancer.</p> <p>If any of the specified attributes can't be modified as requested, the call fails. Any existing attributes that you do not modify retain their current values.</p>
		/// GET_ModifyLoadBalancerAttributes /#Action=ModifyLoadBalancerAttributes
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <param name="Attributes">The load balancer attributes.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyLoadBalancerAttributesAsync(string LoadBalancerArn, LoadBalancerAttribute[] Attributes, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyLoadBalancerAttributes?LoadBalancerArn=" + (LoadBalancerArn==null? "" : Uri.EscapeDataString(LoadBalancerArn))+"&"+String.Join("&", Attributes.Select(z => $"Attributes={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Replaces the specified properties of the specified rule. Any properties that you do not specify are unchanged.</p> <p>To add an item to a list, remove an item from a list, or update an item in a list, you must provide the entire list. For example, to add an action, specify a list with the current actions plus the new action.</p> <p>To modify the actions for the default rule, use <a>ModifyListener</a>.</p>
		/// GET_ModifyRule /#Action=ModifyRule
		/// </summary>
		/// <param name="RuleArn">The Amazon Resource Name (ARN) of the rule.</param>
		/// <param name="Conditions">The conditions. Each rule can include zero or one of the following conditions: <code>http-request-method</code>, <code>host-header</code>, <code>path-pattern</code>, and <code>source-ip</code>, and zero or more of the following conditions: <code>http-header</code> and <code>query-string</code>.</param>
		/// <param name="Actions"><p>The actions. Each rule must include exactly one of the following types of actions: <code>forward</code>, <code>fixed-response</code>, or <code>redirect</code>, and it must be the last action to be performed.</p> <p>If the action type is <code>forward</code>, you specify one or more target groups. The protocol of the target group must be HTTP or HTTPS for an Application Load Balancer. The protocol of the target group must be TCP, TLS, UDP, or TCP_UDP for a Network Load Balancer.</p> <p>[HTTPS listeners] If the action type is <code>authenticate-oidc</code>, you authenticate users through an identity provider that is OpenID Connect (OIDC) compliant.</p> <p>[HTTPS listeners] If the action type is <code>authenticate-cognito</code>, you authenticate users through the user pools supported by Amazon Cognito.</p> <p>[Application Load Balancer] If the action type is <code>redirect</code>, you redirect specified client requests from one URL to another.</p> <p>[Application Load Balancer] If the action type is <code>fixed-response</code>, you drop specified client requests and return a custom HTTP response.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ModifyRuleAsync(string RuleArn, RuleCondition[] Conditions, Action[] Actions, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyRule?RuleArn=" + (RuleArn==null? "" : Uri.EscapeDataString(RuleArn))+"&"+String.Join("&", Conditions.Select(z => $"Conditions={z}"))+"&"+String.Join("&", Actions.Select(z => $"Actions={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the health checks used when evaluating the health state of the targets in the specified target group.</p> <p>To monitor the health of the targets, use <a>DescribeTargetHealth</a>.</p>
		/// GET_ModifyTargetGroup /#Action=ModifyTargetGroup
		/// </summary>
		/// <param name="TargetGroupArn">The Amazon Resource Name (ARN) of the target group.</param>
		/// <param name="HealthCheckProtocol"><p>The protocol the load balancer uses when performing health checks on targets. The TCP protocol is supported for health checks only if the protocol of the target group is TCP, TLS, UDP, or TCP_UDP. The TLS, UDP, and TCP_UDP protocols are not supported for health checks.</p> <p>With Network Load Balancers, you can't modify this setting.</p></param>
		/// <param name="HealthCheckPort">The port the load balancer uses when performing health checks on targets.</param>
		/// <param name="HealthCheckPath">[HTTP/HTTPS health checks] The ping path that is the destination for the health check request.</param>
		/// <param name="HealthCheckEnabled">Indicates whether health checks are enabled.</param>
		/// <param name="HealthCheckIntervalSeconds"><p>The approximate amount of time, in seconds, between health checks of an individual target. For Application Load Balancers, the range is 5 to 300 seconds. For Network Load Balancers, the supported values are 10 or 30 seconds.</p> <p>With Network Load Balancers, you can't modify this setting.</p></param>
		/// <param name="HealthCheckTimeoutSeconds"><p>[HTTP/HTTPS health checks] The amount of time, in seconds, during which no response means a failed health check.</p> <p>With Network Load Balancers, you can't modify this setting.</p></param>
		/// <param name="HealthyThresholdCount">The number of consecutive health checks successes required before considering an unhealthy target healthy.</param>
		/// <param name="UnhealthyThresholdCount">The number of consecutive health check failures required before considering the target unhealthy. For Network Load Balancers, this value must be the same as the healthy threshold count.</param>
		/// <param name="Matcher"><p>[HTTP/HTTPS health checks] The HTTP codes to use when checking for a successful response from a target.</p> <p>With Network Load Balancers, you can't modify this setting.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ModifyTargetGroupAsync(string TargetGroupArn, ProtocolEnum HealthCheckProtocol, string HealthCheckPort, string HealthCheckPath, bool HealthCheckEnabled, int HealthCheckIntervalSeconds, int HealthCheckTimeoutSeconds, int HealthyThresholdCount, int UnhealthyThresholdCount, string Matcher, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyTargetGroup?TargetGroupArn=" + (TargetGroupArn==null? "" : Uri.EscapeDataString(TargetGroupArn))+"&HealthCheckProtocol=" + HealthCheckProtocol+"&HealthCheckPort=" + (HealthCheckPort==null? "" : Uri.EscapeDataString(HealthCheckPort))+"&HealthCheckPath=" + (HealthCheckPath==null? "" : Uri.EscapeDataString(HealthCheckPath))+"&HealthCheckEnabled="+HealthCheckEnabled+"&HealthCheckIntervalSeconds="+HealthCheckIntervalSeconds+"&HealthCheckTimeoutSeconds="+HealthCheckTimeoutSeconds+"&HealthyThresholdCount="+HealthyThresholdCount+"&UnhealthyThresholdCount="+UnhealthyThresholdCount+"&Matcher=" + (Matcher==null? "" : Uri.EscapeDataString(Matcher))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified attributes of the specified target group.
		/// GET_ModifyTargetGroupAttributes /#Action=ModifyTargetGroupAttributes
		/// </summary>
		/// <param name="TargetGroupArn">The Amazon Resource Name (ARN) of the target group.</param>
		/// <param name="Attributes">The attributes.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyTargetGroupAttributesAsync(string TargetGroupArn, TargetGroupAttribute[] Attributes, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyTargetGroupAttributes?TargetGroupArn=" + (TargetGroupArn==null? "" : Uri.EscapeDataString(TargetGroupArn))+"&"+String.Join("&", Attributes.Select(z => $"Attributes={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Registers the specified targets with the specified target group.</p> <p>If the target is an EC2 instance, it must be in the <code>running</code> state when you register it.</p> <p>By default, the load balancer routes requests to registered targets using the protocol and port for the target group. Alternatively, you can override the port for a target when you register it. You can register each EC2 instance or IP address with the same target group multiple times using different ports.</p> <p>With a Network Load Balancer, you cannot register instances by instance ID if they have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1. You can register instances of these types by IP address.</p> <p>To remove a target from a target group, use <a>DeregisterTargets</a>.</p>
		/// GET_RegisterTargets /#Action=RegisterTargets
		/// </summary>
		/// <param name="TargetGroupArn">The Amazon Resource Name (ARN) of the target group.</param>
		/// <param name="Targets"><p>The targets.</p> <p>To register a target by instance ID, specify the instance ID. To register a target by IP address, specify the IP address. To register a Lambda function, specify the ARN of the Lambda function.</p></param>
		/// <returns>Success</returns>
		public async Task GET_RegisterTargetsAsync(string TargetGroupArn, TargetDescription[] Targets, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RegisterTargets?TargetGroupArn=" + (TargetGroupArn==null? "" : Uri.EscapeDataString(TargetGroupArn))+"&"+String.Join("&", Targets.Select(z => $"Targets={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified certificate from the certificate list for the specified HTTPS or TLS listener.</p> <p>You can't remove the default certificate for a listener. To replace the default certificate, call <a>ModifyListener</a>.</p> <p>To list the certificates for your listener, use <a>DescribeListenerCertificates</a>.</p>
		/// GET_RemoveListenerCertificates /#Action=RemoveListenerCertificates
		/// </summary>
		/// <param name="ListenerArn">The Amazon Resource Name (ARN) of the listener.</param>
		/// <param name="Certificates">The certificate to remove. You can specify one certificate per call. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_RemoveListenerCertificatesAsync(string ListenerArn, Certificate[] Certificates, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RemoveListenerCertificates?ListenerArn=" + (ListenerArn==null? "" : Uri.EscapeDataString(ListenerArn))+"&"+String.Join("&", Certificates.Select(z => $"Certificates={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified tags from the specified Elastic Load Balancing resource.</p> <p>To list the current tags for your resources, use <a>DescribeTags</a>.</p>
		/// GET_RemoveTags /#Action=RemoveTags
		/// </summary>
		/// <param name="ResourceArns">The Amazon Resource Name (ARN) of the resource.</param>
		/// <param name="TagKeys">The tag keys for the tags to remove.</param>
		/// <returns>Success</returns>
		public async Task GET_RemoveTagsAsync(ResourceArn[] ResourceArns, TagKey[] TagKeys, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RemoveTags?"+String.Join("&", ResourceArns.Select(z => $"ResourceArns={z}"))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the type of IP addresses used by the subnets of the specified Application Load Balancer or Network Load Balancer.
		/// GET_SetIpAddressType /#Action=SetIpAddressType
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <param name="IpAddressType">The IP address type. The possible values are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6 addresses). Internal load balancers must use <code>ipv4</code>. Network Load Balancers must use <code>ipv4</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_SetIpAddressTypeAsync(string LoadBalancerArn, SetIpAddressTypeOutputIpAddressType IpAddressType, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=SetIpAddressType?LoadBalancerArn=" + (LoadBalancerArn==null? "" : Uri.EscapeDataString(LoadBalancerArn))+"&IpAddressType=" + IpAddressType+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the priorities of the specified rules.</p> <p>You can reorder the rules as long as there are no priority conflicts in the new order. Any existing rules that you do not specify retain their current priority.</p>
		/// GET_SetRulePriorities /#Action=SetRulePriorities
		/// </summary>
		/// <param name="RulePriorities">The rule priorities.</param>
		/// <returns>Success</returns>
		public async Task GET_SetRulePrioritiesAsync(RulePriorityPair[] RulePriorities, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=SetRulePriorities?"+String.Join("&", RulePriorities.Select(z => $"RulePriorities={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates the specified security groups with the specified Application Load Balancer. The specified security groups override the previously associated security groups.</p> <p>You can't specify a security group for a Network Load Balancer.</p>
		/// GET_SetSecurityGroups /#Action=SetSecurityGroups
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <param name="SecurityGroups">The IDs of the security groups.</param>
		/// <returns>Success</returns>
		public async Task GET_SetSecurityGroupsAsync(string LoadBalancerArn, SecurityGroupId[] SecurityGroups, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=SetSecurityGroups?LoadBalancerArn=" + (LoadBalancerArn==null? "" : Uri.EscapeDataString(LoadBalancerArn))+"&"+String.Join("&", SecurityGroups.Select(z => $"SecurityGroups={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Enables the Availability Zones for the specified public subnets for the specified load balancer. The specified subnets replace the previously enabled subnets.</p> <p>When you specify subnets for a Network Load Balancer, you must include all subnets that were enabled previously, with their existing configurations, plus any additional subnets.</p>
		/// GET_SetSubnets /#Action=SetSubnets
		/// </summary>
		/// <param name="LoadBalancerArn">The Amazon Resource Name (ARN) of the load balancer.</param>
		/// <param name="Subnets">The IDs of the public subnets. You must specify subnets from at least two Availability Zones. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.</param>
		/// <param name="SubnetMappings"><p>The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings.</p> <p>[Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.</p> <p>[Network Load Balancers] You can specify subnets from one or more Availability Zones. If you need static IP addresses for your internet-facing load balancer, you can specify one Elastic IP address per subnet. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet.</p></param>
		/// <returns>Success</returns>
		public async Task GET_SetSubnetsAsync(string LoadBalancerArn, SubnetId[] Subnets, SubnetMapping[] SubnetMappings, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=SetSubnets?LoadBalancerArn=" + (LoadBalancerArn==null? "" : Uri.EscapeDataString(LoadBalancerArn))+"&"+String.Join("&", Subnets.Select(z => $"Subnets={z}"))+"&"+String.Join("&", SubnetMappings.Select(z => $"SubnetMappings={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
