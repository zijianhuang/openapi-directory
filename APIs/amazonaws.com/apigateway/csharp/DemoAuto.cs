//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// <p>A resource that can be distributed to callers for executing <a>Method</a> resources that require an API key. API keys can be mapped to any <a>Stage</a> on any <a>RestApi</a>, which indicates that the callers with the API key can make requests to that stage.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-api-keys.html">Use API Keys</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApiKey
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] StageKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Tags { get; set; }
	}
	
	/// <summary>
	/// A reference to a unique stage identified in the format <code>{restApiId}/{stage}</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StageKey
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RestApiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
	}
	
	/// <summary>
	/// <p>Represents an authorization layer for methods. If enabled on a method, API Gateway will activate the authorizer when a client calls the method.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html">Use Lambda Function as Authorizer</a> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html">Use Cognito User Pool as Authorizer</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Authorizer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthorizerType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProviderARN[] ProviderARNs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentitySource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityValidationExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AuthorizerResultTtlInSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthorizerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOKEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COGNITO_USER_POOLS = 2,
	}
	
	/// <summary>
	/// <p>Represents the base path that callers of the API must provide as part of the URL after the domain name.</p> <div class="remarks">A custom domain name plus a <code>BasePathMapping</code> specification identifies a deployed <a>RestApi</a> in a given stage of the owner <a>Account</a>.</div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html">Use Custom Domain Names</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BasePathMapping
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BasePath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RestApiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Stage { get; set; }
	}
	
	/// <summary>
	/// <p>An immutable representation of a <a>RestApi</a> resource that can be called by users using <a>Stages</a>. A deployment must be associated with a <a>Stage</a> for it to be callable over the Internet.</p> <div class="remarks">To create a deployment, call <code>POST</code> on the <a>Deployments</a> resource of a <a>RestApi</a>. To view, update, or delete a deployment, call <code>GET</code>, <code>PATCH</code>, or <code>DELETE</code> on the specified deployment resource (<code>/restapis/{restapi_id}/deployments/{deployment_id}</code>).</div> <div class="seeAlso"><a>RestApi</a>, <a>Deployments</a>, <a>Stage</a>, <a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-deployment.html">AWS CLI</a>, <a href="https://aws.amazon.com/tools/">AWS SDKs</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Deployment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PathToMapOfMethodSnapshot ApiSummary { get; set; }
	}
	
	/// <summary>
	/// <p>A documentation part for a targeted API entity.</p> <div class="remarks"> <p>A documentation part consists of a content map (<code>properties</code>) and a target (<code>location</code>). The target specifies an API entity to which the documentation content applies. The supported API entity types are <code>API</code>, <code>AUTHORIZER</code>, <code>MODEL</code>, <code>RESOURCE</code>, <code>METHOD</code>, <code>PATH_PARAMETER</code>, <code>QUERY_PARAMETER</code>, <code>REQUEST_HEADER</code>, <code>REQUEST_BODY</code>, <code>RESPONSE</code>, <code>RESPONSE_HEADER</code>, and <code>RESPONSE_BODY</code>. Valid <code>location</code> fields depend on the API entity type. All valid fields are not required.</p> <p>The content map is a JSON string of API-specific key-value pairs. Although an API can use any shape for the content map, only the OpenAPI-compliant documentation fields will be injected into the associated API entity definition in the exported OpenAPI definition file.</p></div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-documenting-api.html">Documenting an API</a>, <a>DocumentationParts</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentationPart
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Specifies the target API entity to which the documentation applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentationPartLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentationPartType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODEL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METHOD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH_PARAMETER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERY_PARAMETER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_HEADER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_BODY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPONSE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPONSE_HEADER = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPONSE_BODY = 11,
	}
	
	/// <summary>
	/// <p>A snapshot of the documentation of an API.</p> <div class="remarks"><p>Publishing API documentation involves creating a documentation version associated with an API stage and exporting the versioned documentation to an external (e.g., OpenAPI) file.</p></div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-documenting-api.html">Documenting an API</a>, <a>DocumentationPart</a>, <a>DocumentationVersions</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentationVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a custom domain name as a user-friendly host name of an API (<a>RestApi</a>).</p> <div class="Remarks"> <p>When you deploy an API, API Gateway creates a default host name for the API. This default API host name is of the <code>{restapi-id}.execute-api.{region}.amazonaws.com</code> format. With the default host name, you can access the API's root resource with the URL of <code>https://{restapi-id}.execute-api.{region}.amazonaws.com/{stage}/</code>. When you set up a custom domain name of <code>apis.example.com</code> for this API, you can then access the same resource using the URL of the <code>https://apis.examples.com/myApi</code>, where <code>myApi</code> is the base path mapping (<a>BasePathMapping</a>) of your API under the custom domain name. </p> </div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html">Set a Custom Host Name for an API</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainName
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CertificateUploadDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegionalDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegionalHostedZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegionalCertificateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegionalCertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DistributionDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DistributionHostedZoneId { get; set; }
		
		/// <summary>
		/// The endpoint configuration to indicate the types of endpoints an API (<a>RestApi</a>) or its custom domain name (<a>DomainName</a>) has. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EndpointConfiguration EndpointConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainNameDomainNameStatus DomainNameStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainNameStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainNameSecurityPolicy SecurityPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainNameDomainNameStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainNameSecurityPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS_1_2 = 1,
	}
	
	/// <summary>
	/// <p>Represents the data structure of a method's request or response payload.</p> <div class="remarks"> <p>A request model defines the data structure of the client-supplied request payload. A response model defines the data structure of the response payload returned by the back end. Although not required, models are useful for mapping payloads between the front end and back end.</p> <p>A model is used for generating an API's SDK, validating the input request body, and creating a skeletal mapping template.</p> </div> <div class="seeAlso"> <a>Method</a>, <a>MethodResponse</a>, <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html">Models and Mappings</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Model
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
	}
	
	/// <summary>
	/// <p>A set of validation rules for incoming <a>Method</a> requests.</p> <div class="remarks"> <p>In OpenAPI, a <a>RequestValidator</a> of an API is defined by the <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html#api-gateway-swagger-extensions-request-validators.requestValidator.html">x-amazon-apigateway-request-validators.requestValidator</a> object. It the referenced using the <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html#api-gateway-swagger-extensions-request-validator">x-amazon-apigateway-request-validator</a> property.</p> </div> <div class="seeAlso"><a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html">Enable Basic Request Validation in API Gateway</a></div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestValidator
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ValidateRequestBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ValidateRequestParameters { get; set; }
	}
	
	/// <summary>
	/// <p>Represents an API resource.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html">Create an API</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Resource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathPart { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfMethod ResourceMethods { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a REST API.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html">Create an API</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestApi
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Warnings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] BinaryMediaTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinimumCompressionSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RestApiApiKeySource ApiKeySource { get; set; }
		
		/// <summary>
		/// The endpoint configuration to indicate the types of endpoints an API (<a>RestApi</a>) or its custom domain name (<a>DomainName</a>) has. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EndpointConfiguration EndpointConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Policy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RestApiApiKeySource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEADER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZER = 1,
	}
	
	/// <summary>
	/// <p>Represents a unique identifier for a version of a deployed <a>RestApi</a> that is callable by users.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-deploy-api.html">Deploy an API</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Stage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CacheClusterEnabled { get; set; }
		
		/// <summary>
		/// Returns the size of the <b>CacheCluster</b>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StageCacheClusterSize CacheClusterSize { get; set; }
		
		/// <summary>
		/// Returns the status of the <b>CacheCluster</b>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StageCacheClusterStatus CacheClusterStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfMethodSettings MethodSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Variables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DocumentationVersion { get; set; }
		
		/// <summary>
		/// Access log settings, including the access log format and access log destination ARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccessLogSettings AccessLogSettings { get; set; }
		
		/// <summary>
		/// Configuration settings of a canary deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CanarySettings CanarySettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TracingEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WebAclArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StageCacheClusterSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		0.5 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		1.6 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		6.1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		13.5 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		28.4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		58.2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		118 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		237 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StageCacheClusterStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_AVAILABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLUSH_IN_PROGRESS = 4,
	}
	
	/// <summary>
	/// <p>Represents a usage plan than can specify who can assess associated API stages with specified request limits and quotas.</p> <div class="remarks"> <p>In a usage plan, you associate an API by specifying the API's Id and a stage name of the specified API. You add plan customers by adding API keys to the plan. </p> </div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html">Create and Use Usage Plans</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UsagePlan
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApiStage[] ApiStages { get; set; }
		
		/// <summary>
		///  The API request rate limits.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThrottleSettings Throttle { get; set; }
		
		/// <summary>
		/// Quotas configured for a usage plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QuotaSettings Quota { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Tags { get; set; }
	}
	
	/// <summary>
	/// API stage name of the associated API stage in a usage plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApiStage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Stage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfApiStageThrottleSettings Throttle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum QuotaPeriodType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTH = 2,
	}
	
	/// <summary>
	/// <p>Represents a usage plan key to identify a plan customer.</p> <div class="remarks"> <p>To associate an API stage with a selected API key in a usage plan, you must create a UsagePlanKey resource to represent the selected <a>ApiKey</a>.</p> </div>" <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html">Create and Use Usage Plans</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UsagePlanKey
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// <p>An API Gateway VPC link for a <a>RestApi</a> to access resources in an Amazon Virtual Private Cloud (VPC).</p> <div class="remarks"> <p><p>To enable access to a resource in an Amazon Virtual Private Cloud through Amazon API Gateway, you, as an API developer, create a <a>VpcLink</a> resource targeted for one or more network load balancers of the VPC and then integrate an API method with a private integration that uses the <a>VpcLink</a>. The private integration has an integration type of <code>HTTP</code> or <code>HTTP_PROXY</code> and has a connection type of <code>VPC_LINK</code>. The integration uses the <code>connectionId</code> property to identify the <a>VpcLink</a> used.</p> </p> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcLink
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TargetArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcLinkStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VpcLinkStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// <p>Represents a client certificate used to configure client-side SSL authentication while sending requests to the integration endpoint.</p> <div class="remarks">Client certificates are used to authenticate an API by the backend server. To authenticate an API client (or user), use IAM roles and policies, a custom <a>Authorizer</a> or an Amazon Cognito user pool.</div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html">Use Client-Side Certificate</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientCertificate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PemEncodedCertificate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Tags { get; set; }
	}
	
	/// <summary>
	/// <p>Represents an AWS account that is associated with API Gateway.</p> <div class="remarks"> <p>To view the account info, call <code>GET</code> on this resource.</p> <h4>Error Codes</h4> <p>The following exception may be thrown when the request fails.</p> <ul> <li>UnauthorizedException</li> <li>NotFoundException</li> <li>TooManyRequestsException</li> </ul> <p>For detailed error code information, including the corresponding HTTP Status Codes, see <a href="https://docs.aws.amazon.com/apigateway/api-reference/handling-errors/#api-error-codes">API Gateway Error Codes</a></p> <h4>Example: Get the information about an account.</h4> <h5>Request</h5> <pre><code>GET /account HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20160531T184618Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash} </code></pre> <h5>Response</h5> <p>The successful response returns a <code>200 OK</code> status code and a payload similar to the following:</p> <pre><code>{ "_links": { "curies": { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/account-apigateway-{rel}.html", "name": "account", "templated": true }, "self": { "href": "/account" }, "account:update": { "href": "/account" } }, "cloudwatchRoleArn": "arn:aws:iam::123456789012:role/apigAwsProxyRole", "throttleSettings": { "rateLimit": 500, "burstLimit": 1000 } } </code></pre> <p>In addition to making the REST API call directly, you can use the AWS CLI and an AWS SDK to access this resource.</p> </div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-limits.html">API Gateway Limits</a> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html">Developer Guide</a>, <a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-account.html">AWS CLI</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Account
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CloudwatchRoleArn { get; set; }
		
		/// <summary>
		///  The API request rate limits.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThrottleSettings ThrottleSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Features { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApiKeyVersion { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a collection of API keys as represented by an <a>ApiKeys</a> resource.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-api-keys.html">Use API Keys</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApiKeys
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Warnings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApiKey[] Items { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a collection of <a>Authorizer</a> resources.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html">Use Lambda Function as Authorizer</a> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html">Use Cognito User Pool as Authorizer</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Authorizers
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Authorizer[] Items { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a collection of <a>BasePathMapping</a> resources.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html">Use Custom Domain Names</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BasePathMappings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BasePathMapping[] Items { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a collection of <a>ClientCertificate</a> resources.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html">Use Client-Side Certificate</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientCertificates
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientCertificate[] Items { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a collection resource that contains zero or more references to your existing deployments, and links that guide you on how to interact with your collection. The collection offers a paginated view of the contained deployments.</p> <div class="remarks">To create a new deployment of a <a>RestApi</a>, make a <code>POST</code> request against this resource. To view, update, or delete an existing deployment, make a <code>GET</code>, <code>PATCH</code>, or <code>DELETE</code> request, respectively, on a specified <a>Deployment</a> resource.</div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-deploy-api.html">Deploying an API</a>, <a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-deployment.html">AWS CLI</a>, <a href="https://aws.amazon.com/tools/">AWS SDKs</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Deployments
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Deployment[] Items { get; set; }
	}
	
	/// <summary>
	/// <p>The collection of documentation parts of an API.</p> <div class="remarks"/> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-documenting-api.html">Documenting an API</a>, <a>DocumentationPart</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentationParts
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentationPart[] Items { get; set; }
	}
	
	/// <summary>
	/// <p>The collection of documentation snapshots of an API. </p> <div class="remarks"><p>Use the <a>DocumentationVersions</a> to manage documentation snapshots associated with various API stages.</p></div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-documenting-api.html">Documenting an API</a>, <a>DocumentationPart</a>, <a>DocumentationVersion</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentationVersions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentationVersion[] Items { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a collection of <a>DomainName</a> resources.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html">Use Client-Side Certificate</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainNames
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainName[] Items { get; set; }
	}
	
	/// <summary>
	/// The binary blob response to <a>GetExport</a>, which contains the generated SDK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
	}
	
	/// <summary>
	/// <p>A gateway response of a given response type and status code, with optional response parameters and mapping templates.</p> <div class="remarks"> For more information about valid gateway response types, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.html">Gateway Response Types Supported by API Gateway</a> <div class="example"> <h4>Example: Get a Gateway Response of a given response type</h4> <h5>Request</h5> <p>This example shows how to get a gateway response of the <code>MISSING_AUTHENTICATION_TOKEN</code> type.</p> <pre><code>GET /restapis/o81lxisefl/gatewayresponses/MISSING_AUTHENTICATION_TOKEN HTTP/1.1 Host: beta-apigateway.us-east-1.amazonaws.com Content-Type: application/json X-Amz-Date: 20170503T202516Z Authorization: AWS4-HMAC-SHA256 Credential={access-key-id}/20170503/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature=1b52460e3159c1a26cff29093855d50ea141c1c5b937528fecaf60f51129697a Cache-Control: no-cache Postman-Token: 3b2a1ce9-c848-2e26-2e2f-9c2caefbed45 </code></pre> <p>The response type is specified as a URL path.</p> <h5>Response</h5> <p>The successful operation returns the <code>200 OK</code> status code and a payload similar to the following:</p> <pre><code>{ "_links": { "curies": { "href": "http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-gatewayresponse-{rel}.html", "name": "gatewayresponse", "templated": true }, "self": { "href": "/restapis/o81lxisefl/gatewayresponses/MISSING_AUTHENTICATION_TOKEN" }, "gatewayresponse:delete": { "href": "/restapis/o81lxisefl/gatewayresponses/MISSING_AUTHENTICATION_TOKEN" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/MISSING_AUTHENTICATION_TOKEN" } }, "defaultResponse": false, "responseParameters": { "gatewayresponse.header.x-request-path": "method.request.path.petId", "gatewayresponse.header.Access-Control-Allow-Origin": "&apos;a.b.c&apos;", "gatewayresponse.header.x-request-query": "method.request.querystring.q", "gatewayresponse.header.x-request-header": "method.request.header.Accept" }, "responseTemplates": { "application/json": "{\n \"message\": $context.error.messageString,\n \"type\": \"$context.error.responseType\",\n \"stage\": \"$context.stage\",\n \"resourcePath\": \"$context.resourcePath\",\n \"stageVariables.a\": \"$stageVariables.a\",\n \"statusCode\": \"&apos;404&apos;\"\n}" }, "responseType": "MISSING_AUTHENTICATION_TOKEN", "statusCode": "404" }</code></pre> <p></p> </div> </div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/customize-gateway-responses.html">Customize Gateway Responses</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GatewayResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GatewayResponseResponseType ResponseType { get; set; }
		
		/// <summary>
		/// The status code.
		/// Pattern: [1-5]\d\d
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString ResponseTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultResponse { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GatewayResponseResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_4XX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_5XX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_NOT_FOUND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAUTHORIZED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_API_KEY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_DENIED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZER_FAILURE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZER_CONFIGURATION_ERROR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_SIGNATURE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED_TOKEN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_AUTHENTICATION_TOKEN = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGRATION_FAILURE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGRATION_TIMEOUT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_CONFIGURATION_ERROR = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_MEDIA_TYPE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAD_REQUEST_PARAMETERS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAD_REQUEST_BODY = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_TOO_LARGE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THROTTLED = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUOTA_EXCEEDED = 19,
	}
	
	/// <summary>
	/// <p>The collection of the <a>GatewayResponse</a> instances of a <a>RestApi</a> as a <code>responseType</code>-to-<a>GatewayResponse</a> object map of key-value pairs. As such, pagination is not supported for querying this collection.</p> <div class="remarks"> For more information about valid gateway response types, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.html">Gateway Response Types Supported by API Gateway</a> <div class="example"> <h4>Example: Get the collection of gateway responses of an API</h4> <h5>Request</h5> <p>This example request shows how to retrieve the <a>GatewayResponses</a> collection from an API.</p> <pre><code>GET /restapis/o81lxisefl/gatewayresponses HTTP/1.1 Host: beta-apigateway.us-east-1.amazonaws.com Content-Type: application/json X-Amz-Date: 20170503T220604Z Authorization: AWS4-HMAC-SHA256 Credential={access-key-id}/20170503/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature=59b42fe54a76a5de8adf2c67baa6d39206f8e9ad49a1d77ccc6a5da3103a398a Cache-Control: no-cache Postman-Token: 5637af27-dc29-fc5c-9dfe-0645d52cb515 </code></pre> <p></p> <h5>Response</h5> <p>The successful operation returns the <code>200 OK</code> status code and a payload similar to the following:</p> <pre><code>{ "_links": { "curies": { "href": "http://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-gatewayresponse-{rel}.html", "name": "gatewayresponse", "templated": true }, "self": { "href": "/restapis/o81lxisefl/gatewayresponses" }, "first": { "href": "/restapis/o81lxisefl/gatewayresponses" }, "gatewayresponse:by-type": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "item": [ { "href": "/restapis/o81lxisefl/gatewayresponses/INTEGRATION_FAILURE" }, { "href": "/restapis/o81lxisefl/gatewayresponses/RESOURCE_NOT_FOUND" }, { "href": "/restapis/o81lxisefl/gatewayresponses/REQUEST_TOO_LARGE" }, { "href": "/restapis/o81lxisefl/gatewayresponses/THROTTLED" }, { "href": "/restapis/o81lxisefl/gatewayresponses/UNSUPPORTED_MEDIA_TYPE" }, { "href": "/restapis/o81lxisefl/gatewayresponses/AUTHORIZER_CONFIGURATION_ERROR" }, { "href": "/restapis/o81lxisefl/gatewayresponses/DEFAULT_5XX" }, { "href": "/restapis/o81lxisefl/gatewayresponses/DEFAULT_4XX" }, { "href": "/restapis/o81lxisefl/gatewayresponses/BAD_REQUEST_PARAMETERS" }, { "href": "/restapis/o81lxisefl/gatewayresponses/BAD_REQUEST_BODY" }, { "href": "/restapis/o81lxisefl/gatewayresponses/EXPIRED_TOKEN" }, { "href": "/restapis/o81lxisefl/gatewayresponses/ACCESS_DENIED" }, { "href": "/restapis/o81lxisefl/gatewayresponses/INVALID_API_KEY" }, { "href": "/restapis/o81lxisefl/gatewayresponses/UNAUTHORIZED" }, { "href": "/restapis/o81lxisefl/gatewayresponses/API_CONFIGURATION_ERROR" }, { "href": "/restapis/o81lxisefl/gatewayresponses/QUOTA_EXCEEDED" }, { "href": "/restapis/o81lxisefl/gatewayresponses/INTEGRATION_TIMEOUT" }, { "href": "/restapis/o81lxisefl/gatewayresponses/MISSING_AUTHENTICATION_TOKEN" }, { "href": "/restapis/o81lxisefl/gatewayresponses/INVALID_SIGNATURE" }, { "href": "/restapis/o81lxisefl/gatewayresponses/AUTHORIZER_FAILURE" } ] }, "_embedded": { "item": [ { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/INTEGRATION_FAILURE" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/INTEGRATION_FAILURE" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "INTEGRATION_FAILURE", "statusCode": "504" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/RESOURCE_NOT_FOUND" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/RESOURCE_NOT_FOUND" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "RESOURCE_NOT_FOUND", "statusCode": "404" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/REQUEST_TOO_LARGE" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/REQUEST_TOO_LARGE" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "REQUEST_TOO_LARGE", "statusCode": "413" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/THROTTLED" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/THROTTLED" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "THROTTLED", "statusCode": "429" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/UNSUPPORTED_MEDIA_TYPE" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/UNSUPPORTED_MEDIA_TYPE" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "UNSUPPORTED_MEDIA_TYPE", "statusCode": "415" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/AUTHORIZER_CONFIGURATION_ERROR" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/AUTHORIZER_CONFIGURATION_ERROR" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "AUTHORIZER_CONFIGURATION_ERROR", "statusCode": "500" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/DEFAULT_5XX" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/DEFAULT_5XX" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "DEFAULT_5XX" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/DEFAULT_4XX" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/DEFAULT_4XX" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "DEFAULT_4XX" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/BAD_REQUEST_PARAMETERS" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/BAD_REQUEST_PARAMETERS" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "BAD_REQUEST_PARAMETERS", "statusCode": "400" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/BAD_REQUEST_BODY" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/BAD_REQUEST_BODY" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "BAD_REQUEST_BODY", "statusCode": "400" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/EXPIRED_TOKEN" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/EXPIRED_TOKEN" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "EXPIRED_TOKEN", "statusCode": "403" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/ACCESS_DENIED" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/ACCESS_DENIED" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "ACCESS_DENIED", "statusCode": "403" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/INVALID_API_KEY" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/INVALID_API_KEY" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "INVALID_API_KEY", "statusCode": "403" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/UNAUTHORIZED" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/UNAUTHORIZED" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "UNAUTHORIZED", "statusCode": "401" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/API_CONFIGURATION_ERROR" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/API_CONFIGURATION_ERROR" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "API_CONFIGURATION_ERROR", "statusCode": "500" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/QUOTA_EXCEEDED" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/QUOTA_EXCEEDED" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "QUOTA_EXCEEDED", "statusCode": "429" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/INTEGRATION_TIMEOUT" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/INTEGRATION_TIMEOUT" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "INTEGRATION_TIMEOUT", "statusCode": "504" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/MISSING_AUTHENTICATION_TOKEN" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/MISSING_AUTHENTICATION_TOKEN" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "MISSING_AUTHENTICATION_TOKEN", "statusCode": "403" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/INVALID_SIGNATURE" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/INVALID_SIGNATURE" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "INVALID_SIGNATURE", "statusCode": "403" }, { "_links": { "self": { "href": "/restapis/o81lxisefl/gatewayresponses/AUTHORIZER_FAILURE" }, "gatewayresponse:put": { "href": "/restapis/o81lxisefl/gatewayresponses/{response_type}", "templated": true }, "gatewayresponse:update": { "href": "/restapis/o81lxisefl/gatewayresponses/AUTHORIZER_FAILURE" } }, "defaultResponse": true, "responseParameters": {}, "responseTemplates": { "application/json": "{\"message\":$context.error.messageString}" }, "responseType": "AUTHORIZER_FAILURE", "statusCode": "500" } ] } }</code></pre> <p></p> </div> </div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/customize-gateway-responses.html">Customize Gateway Responses</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GatewayResponses
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GatewayResponse[] Items { get; set; }
	}
	
	/// <summary>
	/// <p>Represents an HTTP, HTTP_PROXY, AWS, AWS_PROXY, or Mock integration.</p> <div class="remarks">In the API Gateway console, the built-in Lambda integration is an AWS integration.</div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html">Creating an API</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Integration
	{
		
		/// <summary>
		/// The integration type. The valid value is <code>HTTP</code> for integrating an API method with an HTTP backend; <code>AWS</code> with any AWS service endpoints; <code>MOCK</code> for testing without actually invoking the backend; <code>HTTP_PROXY</code> for integrating with the HTTP proxy integration; <code>AWS_PROXY</code> for integrating with the Lambda proxy integration. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IntegrationType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HttpMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationConnectionType ConnectionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString RequestParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString RequestTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PassthroughBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationContentHandling ContentHandling { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeoutInMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNamespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] CacheKeyParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfIntegrationResponse IntegrationResponses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TlsConfig TlsConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IntegrationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOCK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP_PROXY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_PROXY = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IntegrationConnectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPC_LINK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IntegrationContentHandling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERT_TO_BINARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERT_TO_TEXT = 1,
	}
	
	/// <summary>
	/// <p>Represents an integration response. The status code must map to an existing <a>MethodResponse</a>, and parameters and templates can be used to transform the back-end response.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html">Creating an API</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IntegrationResponse
	{
		
		/// <summary>
		/// The status code.
		/// Pattern: [1-5]\d\d
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SelectionPattern { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString ResponseTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegrationResponseContentHandling ContentHandling { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IntegrationResponseContentHandling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERT_TO_BINARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERT_TO_TEXT = 1,
	}
	
	/// <summary>
	/// <p> Represents a client-facing interface by which the client calls the API to access back-end resources. A <b>Method</b> resource is integrated with an <a>Integration</a> resource. Both consist of a request and one or more responses. The method request takes the client input that is passed to the back end through the integration request. A method response returns the output from the back end to the client through an integration response. A method request is embodied in a <b>Method</b> resource, whereas an integration request is embodied in an <a>Integration</a> resource. On the other hand, a method response is represented by a <a>MethodResponse</a> resource, whereas an integration response is represented by an <a>IntegrationResponse</a> resource. </p> <div class="remarks"> <p/> <h4>Example: Retrive the GET method on a specified resource</h4> <h5>Request</h5> <p>The following example request retrieves the information about the GET method on an API resource (<code>3kzxbg5sa2</code>) of an API (<code>fugvjdxtri</code>). </p> <pre><code>GET /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20160603T210259Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160603/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash}</code></pre> <h5>Response</h5> <p>The successful response returns a <code>200 OK</code> status code and a payload similar to the following:</p> <pre><code>{ "_links": { "curies": [ { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-{rel}.html", "name": "integration", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-integration-response-{rel}.html", "name": "integrationresponse", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-{rel}.html", "name": "method", "templated": true }, { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-response-{rel}.html", "name": "methodresponse", "templated": true } ], "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET", "name": "GET", "title": "GET" }, "integration:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "method:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET" }, "method:integration": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "method:responses": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200", "name": "200", "title": "200" }, "method:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET" }, "methodresponse:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/{status_code}", "templated": true } }, "apiKeyRequired": true, "authorizationType": "NONE", "httpMethod": "GET", "_embedded": { "method:integration": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integration:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integration:responses": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integration:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration" }, "integrationresponse:put": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/{status_code}", "templated": true } }, "cacheKeyParameters": [], "cacheNamespace": "3kzxbg5sa2", "credentials": "arn:aws:iam::123456789012:role/apigAwsProxyRole", "httpMethod": "POST", "passthroughBehavior": "WHEN_NO_MATCH", "requestParameters": { "integration.request.header.Content-Type": "'application/x-amz-json-1.1'" }, "requestTemplates": { "application/json": "{\n}" }, "type": "AWS", "uri": "arn:aws:apigateway:us-east-1:kinesis:action/ListStreams", "_embedded": { "integration:responses": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200", "name": "200", "title": "200" }, "integrationresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" }, "integrationresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/integration/responses/200" } }, "responseParameters": { "method.response.header.Content-Type": "'application/xml'" }, "responseTemplates": { "application/json": "$util.urlDecode(\"%3CkinesisStreams%3E%23foreach(%24stream%20in%20%24input.path(%27%24.StreamNames%27))%3Cstream%3E%3Cname%3E%24stream%3C%2Fname%3E%3C%2Fstream%3E%23end%3C%2FkinesisStreams%3E\")" }, "statusCode": "200" } } }, "method:responses": { "_links": { "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200", "name": "200", "title": "200" }, "methodresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200" }, "methodresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200" } }, "responseModels": { "application/json": "Empty" }, "responseParameters": { "method.response.header.Content-Type": false }, "statusCode": "200" } } }</code></pre> <p>In the example above, the response template for the <code>200 OK</code> response maps the JSON output from the <code>ListStreams</code> action in the back end to an XML output. The mapping template is URL-encoded as <code>%3CkinesisStreams%3E%23foreach(%24stream%20in%20%24input.path(%27%24.StreamNames%27))%3Cstream%3E%3Cname%3E%24stream%3C%2Fname%3E%3C%2Fstream%3E%23end%3C%2FkinesisStreams%3E</code> and the output is decoded using the <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#util-templat-reference">$util.urlDecode()</a> helper function.</p> </div> <div class="seeAlso"> <a>MethodResponse</a>, <a>Integration</a>, <a>IntegrationResponse</a>, <a>Resource</a>, <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-method-settings.html">Set up an API's method</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Method
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HttpMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiKeyRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestValidatorId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToBoolean RequestParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString RequestModels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfMethodResponse MethodResponses { get; set; }
		
		/// <summary>
		/// <p>Represents an HTTP, HTTP_PROXY, AWS, AWS_PROXY, or Mock integration.</p> <div class="remarks">In the API Gateway console, the built-in Lambda integration is an AWS integration.</div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html">Creating an API</a> </div>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Integration MethodIntegration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AuthorizationScopes { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a method response of a given HTTP status code returned to the client. The method response is passed from the back end through the associated integration response that can be transformed using a mapping template. </p> <div class="remarks"> <p/> <h4>Example: A <b>MethodResponse</b> instance of an API</h4> <h5>Request</h5> <p>The example request retrieves a <b>MethodResponse</b> of the 200 status code.</p> <pre><code>GET /restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200 HTTP/1.1 Content-Type: application/json Host: apigateway.us-east-1.amazonaws.com X-Amz-Date: 20160603T222952Z Authorization: AWS4-HMAC-SHA256 Credential={access_key_ID}/20160603/us-east-1/apigateway/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature={sig4_hash}</code></pre> <h5>Response</h5> <p>The successful response returns <code>200 OK</code> status and a payload as follows:</p> <pre><code>{ "_links": { "curies": { "href": "https://docs.aws.amazon.com/apigateway/latest/developerguide/restapi-method-response-{rel}.html", "name": "methodresponse", "templated": true }, "self": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200", "title": "200" }, "methodresponse:delete": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200" }, "methodresponse:update": { "href": "/restapis/fugvjdxtri/resources/3kzxbg5sa2/methods/GET/responses/200" } }, "responseModels": { "application/json": "Empty" }, "responseParameters": { "method.response.header.Content-Type": false }, "statusCode": "200" }</code></pre> <p/> </div> <div class="seeAlso"> <a>Method</a>, <a>IntegrationResponse</a>, <a>Integration</a> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html">Creating an API</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MethodResponse
	{
		
		/// <summary>
		/// The status code.
		/// Pattern: [1-5]\d\d
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToBoolean ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString ResponseModels { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a mapping template used to transform a payload.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html#models-mappings-mappings">Mapping Templates</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Template
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a collection of <a>Model</a> resources.</p> <div class="seeAlso"> <a>Method</a>, <a>MethodResponse</a>, <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html">Models and Mappings</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Models
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Model[] Items { get; set; }
	}
	
	/// <summary>
	/// <p>A collection of <a>RequestValidator</a> resources of a given <a>RestApi</a>.</p> <div class="remarks"> <p>In OpenAPI, the <a>RequestValidators</a> of an API is defined by the <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html#api-gateway-swagger-extensions-request-validators.html">x-amazon-apigateway-request-validators</a> extension.</p> </div> <div class="seeAlso"><a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html">Enable Basic Request Validation in API Gateway</a></div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestValidators
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RequestValidator[] Items { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a collection of <a>Resource</a> resources.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html">Create an API</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Resources
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Resource[] Items { get; set; }
	}
	
	/// <summary>
	/// <p>Contains references to your APIs and links that guide you in how to interact with your collection. A collection offers a paginated view of your APIs.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-create-api.html">Create an API</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestApis
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RestApi[] Items { get; set; }
	}
	
	/// <summary>
	/// The binary blob response to <a>GetSdk</a>, which contains the generated SDK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SdkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
	}
	
	/// <summary>
	/// A type of SDK that API Gateway can generate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SdkType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FriendlyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SdkConfigurationProperty[] ConfigurationProperties { get; set; }
	}
	
	/// <summary>
	/// The collection of <a>SdkType</a> instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SdkTypes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SdkType[] Items { get; set; }
	}
	
	/// <summary>
	/// <p>A list of <a>Stage</a> resources that are associated with the <a>ApiKey</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/stages.html">Deploying API in Stages</a></div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Stages
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Stage[] Item { get; set; }
	}
	
	/// <summary>
	/// The collection of tags. Each tag element is associated with a given resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tags
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Tags1 { get; set; }
	}
	
	/// <summary>
	/// <p>Represents the usage data of a usage plan.</p> <div class="remarks"/> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html">Create and Use Usage Plans</a>, <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-usage-plans-with-console.html#api-gateway-usage-plan-manage-usage">Manage Usage in a Usage Plan</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Usage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UsagePlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfKeyUsages Items { get; set; }
	}
	
	/// <summary>
	/// <p>Represents the collection of usage plan keys added to usage plans for the associated API keys and, possibly, other types of keys.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html">Create and Use Usage Plans</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UsagePlanKeys
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsagePlanKey[] Items { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a collection of usage plans for an AWS account.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html">Create and Use Usage Plans</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UsagePlans
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsagePlan[] Items { get; set; }
	}
	
	/// <summary>
	/// <p>The collection of VPC links under the caller's account in a region.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-with-private-integration.html">Getting Started with Private Integrations</a>, <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-private-integration.html">Set up Private Integrations</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcLinks
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcLink[] Items { get; set; }
	}
	
	/// <summary>
	/// The identifier of an <a>ApiKey</a> used in a <a>UsagePlan</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApiKeyIds
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Warnings { get; set; }
	}
	
	/// <summary>
	/// <p>A collection of the imported <a>DocumentationPart</a> identifiers.</p> <div class="remarks">This is used to return the result when documentation parts in an external (e.g., OpenAPI) file are imported into API Gateway</div> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-documenting-api.html">Documenting an API</a>, <a href="https://docs.aws.amazon.com/apigateway/api-reference/link-relation/documentationpart-import/">documentationpart:import</a>, <a>DocumentationPart</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentationPartIds
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Warnings { get; set; }
	}
	
	/// <summary>
	/// Represents the response of the test invoke request for a custom <a>Authorizer</a>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestInvokeAuthorizerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ClientStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Log { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Latency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Policy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToList Authorization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Claims { get; set; }
	}
	
	/// <summary>
	/// <p>Represents the response of the test invoke request in the HTTP method.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-test-method.html#how-to-test-method-console">Test API using the API Gateway console</a> </div>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestInvokeMethodResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Headers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToList MultiValueHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Log { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Latency { get; set; }
	}
	
	/// <summary>
	/// A single patch operation to apply to the specified resource. Please refer to http://tools.ietf.org/html/rfc6902#section-4 for an explanation of how each operation is used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PatchOperation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PatchOperationOp Op { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string From { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PatchOperationOp
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		add = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		remove = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		replace = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		move = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		copy = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		test = 5,
	}
	
	/// <summary>
	/// Access log settings, including the access log format and access log destination ARN.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccessLogSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationArn { get; set; }
	}
	
	/// <summary>
	///  The API request rate limits.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThrottleSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BurstLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RateLimit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ApiKeySourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEADER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ApiKeysFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		csv = 0,
	}
	
	/// <summary>
	/// The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthorizerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOKEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COGNITO_USER_POOLS = 2,
	}
	
	/// <summary>
	/// Returns the size of the <b>CacheCluster</b>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CacheClusterSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		0.5 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		1.6 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		6.1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		13.5 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		28.4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		58.2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		118 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		237 = 7,
	}
	
	/// <summary>
	/// Returns the status of the <b>CacheCluster</b>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CacheClusterStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_AVAILABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLUSH_IN_PROGRESS = 4,
	}
	
	/// <summary>
	/// Configuration settings of a canary deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CanarySettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PercentTraffic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString StageVariableOverrides { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseStageCache { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConnectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPC_LINK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContentHandlingStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERT_TO_BINARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERT_TO_TEXT = 1,
	}
	
	/// <summary>
	/// Request to create an <a>ApiKey</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateApiKeyRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> GenerateDistinctId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StageKey[] StageKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Tags { get; set; }
	}
	
	/// <summary>
	/// Request to add a new <a>Authorizer</a> to an existing <a>RestApi</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAuthorizerRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateAuthorizerRequestType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProviderARN[] ProviderARNs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentitySource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentityValidationExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AuthorizerResultTtlInSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateAuthorizerRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOKEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COGNITO_USER_POOLS = 2,
	}
	
	/// <summary>
	/// Requests API Gateway to create a new <a>BasePathMapping</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBasePathMappingRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BasePath { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RestApiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Stage { get; set; }
	}
	
	/// <summary>
	/// The input configuration for a canary deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentCanarySettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PercentTraffic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString StageVariableOverrides { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseStageCache { get; set; }
	}
	
	/// <summary>
	/// Requests API Gateway to create a <a>Deployment</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeploymentRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StageDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CacheClusterEnabled { get; set; }
		
		/// <summary>
		/// Returns the size of the <b>CacheCluster</b>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateDeploymentRequestCacheClusterSize CacheClusterSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Variables { get; set; }
		
		/// <summary>
		/// The input configuration for a canary deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentCanarySettings CanarySettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TracingEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDeploymentRequestCacheClusterSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		0.5 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		1.6 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		6.1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		13.5 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		28.4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		58.2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		118 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		237 = 7,
	}
	
	/// <summary>
	/// Specifies the target API entity to which the documentation applies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentationPartLocation
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DocumentationPartLocationType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Method { get; set; }
		
		/// <summary>
		/// Pattern: ^([1-5]\d\d|\*|\s*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentationPartLocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODEL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METHOD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH_PARAMETER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERY_PARAMETER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_HEADER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_BODY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPONSE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPONSE_HEADER = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPONSE_BODY = 11,
	}
	
	/// <summary>
	/// Creates a new documentation part of a given API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDocumentationPartRequest
	{
		
		/// <summary>
		/// Specifies the target API entity to which the documentation applies.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DocumentationPartLocation Location { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Properties { get; set; }
	}
	
	/// <summary>
	/// Creates a new documentation version of a given API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDocumentationVersionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DocumentationVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// The endpoint configuration to indicate the types of endpoints an API (<a>RestApi</a>) or its custom domain name (<a>DomainName</a>) has. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EndpointConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointType[] Types { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] VpcEndpointIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SecurityPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS_1_2 = 1,
	}
	
	/// <summary>
	/// A request to create a new domain name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDomainNameRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificatePrivateKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateChain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegionalCertificateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegionalCertificateArn { get; set; }
		
		/// <summary>
		/// The endpoint configuration to indicate the types of endpoints an API (<a>RestApi</a>) or its custom domain name (<a>DomainName</a>) has. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EndpointConfiguration EndpointConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateDomainNameRequestSecurityPolicy SecurityPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDomainNameRequestSecurityPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS_1_2 = 1,
	}
	
	/// <summary>
	/// Request to add a new <a>Model</a> to an existing <a>RestApi</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateModelRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
	}
	
	/// <summary>
	/// Creates a <a>RequestValidator</a> of a given <a>RestApi</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRequestValidatorRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ValidateRequestBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ValidateRequestParameters { get; set; }
	}
	
	/// <summary>
	/// Requests API Gateway to create a <a>Resource</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PathPart { get; set; }
	}
	
	/// <summary>
	/// The POST Request to add a new <a>RestApi</a> resource to your collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRestApiRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CloneFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] BinaryMediaTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinimumCompressionSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateRestApiRequestApiKeySource ApiKeySource { get; set; }
		
		/// <summary>
		/// The endpoint configuration to indicate the types of endpoints an API (<a>RestApi</a>) or its custom domain name (<a>DomainName</a>) has. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EndpointConfiguration EndpointConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Policy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateRestApiRequestApiKeySource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEADER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZER = 1,
	}
	
	/// <summary>
	/// Requests API Gateway to create a <a>Stage</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateStageRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CacheClusterEnabled { get; set; }
		
		/// <summary>
		/// Returns the size of the <b>CacheCluster</b>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateStageRequestCacheClusterSize CacheClusterSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Variables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DocumentationVersion { get; set; }
		
		/// <summary>
		/// Configuration settings of a canary deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CanarySettings CanarySettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TracingEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateStageRequestCacheClusterSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		0.5 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		1.6 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		6.1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		13.5 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		28.4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		58.2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		118 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		237 = 7,
	}
	
	/// <summary>
	/// The POST request to create a usage plan key for adding an existing API key to a usage plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUsagePlanKeyRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyType { get; set; }
	}
	
	/// <summary>
	/// Quotas configured for a usage plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class QuotaSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QuotaSettingsPeriod Period { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum QuotaSettingsPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTH = 2,
	}
	
	/// <summary>
	/// The POST request to create a usage plan with the name, description, throttle limits and quota limits, as well as the associated API stages, specified in the payload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUsagePlanRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApiStage[] ApiStages { get; set; }
		
		/// <summary>
		///  The API request rate limits.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThrottleSettings Throttle { get; set; }
		
		/// <summary>
		/// Quotas configured for a usage plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QuotaSettings Quota { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Tags { get; set; }
	}
	
	/// <summary>
	/// Creates a VPC link, under the caller's account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpcLinkRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] TargetArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GatewayResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_4XX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_5XX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_NOT_FOUND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAUTHORIZED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_API_KEY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_DENIED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZER_FAILURE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZER_CONFIGURATION_ERROR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_SIGNATURE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED_TOKEN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_AUTHENTICATION_TOKEN = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGRATION_FAILURE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGRATION_TIMEOUT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_CONFIGURATION_ERROR = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_MEDIA_TYPE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAD_REQUEST_PARAMETERS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAD_REQUEST_BODY = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_TOO_LARGE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THROTTLED = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUOTA_EXCEEDED = 19,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainNameStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
	}
	
	/// <summary>
	/// The endpoint type. The valid values are <code>EDGE</code> for edge-optimized API setup, most suitable for mobile applications; <code>REGIONAL</code> for regional API endpoint setup, most suitable for calling from AWS Region; and <code>PRIVATE</code> for private APIs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EndpointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGIONAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 2,
	}
	
	/// <summary>
	/// A request to generate a <a>ClientCertificate</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GenerateClientCertificateRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LocationStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDOCUMENTED = 1,
	}
	
	/// <summary>
	/// The POST request to import API keys from an external source, such as a CSV-formatted file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportApiKeysRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		merge = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		overwrite = 1,
	}
	
	/// <summary>
	/// Import documentation parts from an external (e.g., OpenAPI) definition file. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportDocumentationPartsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
	}
	
	/// <summary>
	/// A POST request to import an API to API Gateway using an input of an API definition file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportRestApiRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
	}
	
	/// <summary>
	/// The integration type. The valid value is <code>HTTP</code> for integrating an API method with an HTTP backend; <code>AWS</code> with any AWS service endpoints; <code>MOCK</code> for testing without actually invoking the backend; <code>HTTP_PROXY</code> for integrating with the HTTP proxy integration; <code>AWS_PROXY</code> for integrating with the Lambda proxy integration. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IntegrationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOCK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP_PROXY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_PROXY = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TlsConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> InsecureSkipVerification { get; set; }
	}
	
	/// <summary>
	/// A configuration property of an SDK type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SdkConfigurationProperty
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FriendlyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultValue { get; set; }
	}
	
	/// <summary>
	/// Specifies the method setting properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MethodSetting
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MetricsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LoggingLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DataTraceEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ThrottlingBurstLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ThrottlingRateLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CachingEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CacheTtlInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CacheDataEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequireAuthorizationForCacheControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MethodSettingUnauthorizedCacheControlHeaderStrategy UnauthorizedCacheControlHeaderStrategy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MethodSettingUnauthorizedCacheControlHeaderStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAIL_WITH_403 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEED_WITH_RESPONSE_HEADER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEED_WITHOUT_RESPONSE_HEADER = 2,
	}
	
	/// <summary>
	/// Represents a summary of a <a>Method</a> resource, given a particular date and time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MethodSnapshot
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiKeyRequired { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UnauthorizedCacheControlHeaderStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAIL_WITH_403 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEED_WITH_RESPONSE_HEADER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEED_WITHOUT_RESPONSE_HEADER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Op
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		add = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		remove = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		replace = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		move = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		copy = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		test = 5,
	}
	
	/// <summary>
	/// Creates a customization of a <a>GatewayResponse</a> of a specified response type and status code on the given <a>RestApi</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutGatewayResponseRequest
	{
		
		/// <summary>
		/// The status code.
		/// Pattern: [1-5]\d\d
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString ResponseTemplates { get; set; }
	}
	
	/// <summary>
	/// Sets up a method's integration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutIntegrationRequest
	{
		
		/// <summary>
		/// The integration type. The valid value is <code>HTTP</code> for integrating an API method with an HTTP backend; <code>AWS</code> with any AWS service endpoints; <code>MOCK</code> for testing without actually invoking the backend; <code>HTTP_PROXY</code> for integrating with the HTTP proxy integration; <code>AWS_PROXY</code> for integrating with the Lambda proxy integration. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PutIntegrationRequestType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IntegrationHttpMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PutIntegrationRequestConnectionType ConnectionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString RequestParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString RequestTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PassthroughBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CacheNamespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] CacheKeyParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PutIntegrationRequestContentHandling ContentHandling { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeoutInMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TlsConfig TlsConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutIntegrationRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOCK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP_PROXY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_PROXY = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutIntegrationRequestConnectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPC_LINK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutIntegrationRequestContentHandling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERT_TO_BINARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERT_TO_TEXT = 1,
	}
	
	/// <summary>
	/// Represents a put integration response request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutIntegrationResponseRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SelectionPattern { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString ResponseTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PutIntegrationResponseRequestContentHandling ContentHandling { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutIntegrationResponseRequestContentHandling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERT_TO_BINARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERT_TO_TEXT = 1,
	}
	
	/// <summary>
	/// Request to add a method to an existing <a>Resource</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutMethodRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiKeyRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToBoolean RequestParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString RequestModels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestValidatorId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AuthorizationScopes { get; set; }
	}
	
	/// <summary>
	/// Request to add a <a>MethodResponse</a> to an existing <a>Method</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutMethodResponseRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToBoolean ResponseParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString ResponseModels { get; set; }
	}
	
	/// <summary>
	/// A PUT request to update an existing API, with external API definitions specified as the request body.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRestApiRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
	}
	
	/// <summary>
	/// Adds or updates a tag on a given resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Tags { get; set; }
	}
	
	/// <summary>
	/// Make a request to simulate the execution of an <a>Authorizer</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestInvokeAuthorizerRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Headers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToList MultiValueHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathWithQueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString StageVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString AdditionalContext { get; set; }
	}
	
	/// <summary>
	/// Make a request to simulate the execution of a <a>Method</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestInvokeMethodRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PathWithQueryString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString Headers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToList MultiValueHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientCertificateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapOfStringToString StageVariables { get; set; }
	}
	
	/// <summary>
	/// Requests API Gateway to change information about the current <a>Account</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAccountRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// A request to change information about an <a>ApiKey</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateApiKeyRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// Request to update an existing <a>Authorizer</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAuthorizerRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// A request to change information about the <a>BasePathMapping</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateBasePathMappingRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// A request to change information about an <a>ClientCertificate</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateClientCertificateRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// Requests API Gateway to change information about a <a>Deployment</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDeploymentRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// Updates an existing documentation part of a given API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDocumentationPartRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// Updates an existing documentation version of an API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDocumentationVersionRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// A request to change information about the <a>DomainName</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainNameRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// Updates a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateGatewayResponseRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// Represents an update integration request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateIntegrationRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// Represents an update integration response request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateIntegrationResponseRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// Request to update an existing <a>Method</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMethodRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// A request to update an existing <a>MethodResponse</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMethodResponseRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// Request to update an existing model in an existing <a>RestApi</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateModelRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// Updates a <a>RequestValidator</a> of a given <a>RestApi</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRequestValidatorRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// Request to change information about a <a>Resource</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateResourceRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// Request to update an existing <a>RestApi</a> resource in your collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRestApiRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// Requests API Gateway to change information about a <a>Stage</a> resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateStageRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// The PATCH request to update a usage plan of a given plan Id.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUsagePlanRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// The PATCH request to grant a temporary extension to the remaining quota of a usage plan associated with a specified API key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUsageRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	/// <summary>
	/// Updates an existing <a>VpcLink</a> of a specified identifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVpcLinkRequest
	{
		
		/// <summary>
		/// A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchOperation[] PatchOperations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VpcLinkStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Create an <a>ApiKey</a> resource. </p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/create-api-key.html">AWS CLI</a></div>
		/// CreateApiKey apikeys
		/// </summary>
		public async Task CreateApiKeyAsync(CreateApiKeyBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apikeys";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about the current <a>ApiKeys</a> resource.
		/// GetApiKeys apikeys
		/// </summary>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <param name="name">The name of queried API keys.</param>
		/// <param name="customerId">The identifier of a customer in AWS Marketplace or an external system, such as a developer portal.</param>
		/// <param name="includeValues">A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains key values.</param>
		/// <returns>Success</returns>
		public async Task<ApiKeys> GetApiKeysAsync(string position, int limit, string name, string customerId, bool includeValues, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apikeys?position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit+"&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&customerId=" + (customerId==null? "" : Uri.EscapeDataString(customerId))+"&includeValues="+includeValues;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ApiKeys>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds a new <a>Authorizer</a> resource to an existing <a>RestApi</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/create-authorizer.html">AWS CLI</a></div>
		/// CreateAuthorizer restapis/{restapi_id}/authorizers
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		public async Task CreateAuthorizerAsync(string restapi_id, CreateAuthorizerBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/authorizers";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describe an existing <a>Authorizers</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-authorizers.html">AWS CLI</a></div>
		/// GetAuthorizers restapis/{restapi_id}/authorizers
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <returns>Success</returns>
		public async Task<Authorizers> GetAuthorizersAsync(string restapi_id, string position, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/authorizers&position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Authorizers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new <a>BasePathMapping</a> resource.
		/// CreateBasePathMapping domainnames/{domain_name}/basepathmappings
		/// </summary>
		/// <param name="domain_name">[Required] The domain name of the <a>BasePathMapping</a> resource to create.</param>
		public async Task CreateBasePathMappingAsync(string domain_name, CreateBasePathMappingBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domainnames/"+ (domain_name==null? "" : Uri.EscapeDataString(domain_name))+"/basepathmappings";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Represents a collection of <a>BasePathMapping</a> resources.
		/// GetBasePathMappings domainnames/{domain_name}/basepathmappings
		/// </summary>
		/// <param name="domain_name">[Required] The domain name of a <a>BasePathMapping</a> resource.</param>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <returns>Success</returns>
		public async Task<BasePathMappings> GetBasePathMappingsAsync(string domain_name, string position, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domainnames/"+ (domain_name==null? "" : Uri.EscapeDataString(domain_name))+"/basepathmappings&position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BasePathMappings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a <a>Deployment</a> resource, which makes a specified <a>RestApi</a> callable over the internet.
		/// CreateDeployment restapis/{restapi_id}/deployments
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		public async Task CreateDeploymentAsync(string restapi_id, CreateDeploymentBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/deployments";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a <a>Deployments</a> collection.
		/// GetDeployments restapis/{restapi_id}/deployments
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <returns>Success</returns>
		public async Task<Deployments> GetDeploymentsAsync(string restapi_id, string position, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/deployments&position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Deployments>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CreateDocumentationPart restapis/{restapi_id}/documentation/parts
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		public async Task CreateDocumentationPartAsync(string restapi_id, CreateDocumentationPartBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/documentation/parts";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// GetDocumentationParts restapis/{restapi_id}/documentation/parts
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="type">The type of API entities of the to-be-retrieved documentation parts. </param>
		/// <param name="name">The name of API entities of the to-be-retrieved documentation parts.</param>
		/// <param name="path">The path of API entities of the to-be-retrieved documentation parts.</param>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <param name="locationStatus">The status of the API documentation parts to retrieve. Valid values are <code>DOCUMENTED</code> for retrieving <a>DocumentationPart</a> resources with content and <code>UNDOCUMENTED</code> for <a>DocumentationPart</a> resources without content.</param>
		/// <returns>Success</returns>
		public async Task<DocumentationParts> GetDocumentationPartsAsync(string restapi_id, DocumentationPartType type, string name, string path, string position, int limit, LocationStatusType locationStatus, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/documentation/parts&type=" + type+"&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&path=" + (path==null? "" : Uri.EscapeDataString(path))+"&position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit+"&locationStatus=" + locationStatus;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DocumentationParts>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ImportDocumentationParts restapis/{restapi_id}/documentation/parts
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="mode">A query parameter to indicate whether to overwrite (<code>OVERWRITE</code>) any existing <a>DocumentationParts</a> definition or to merge (<code>MERGE</code>) the new definition into the existing one. The default value is <code>MERGE</code>.</param>
		/// <param name="failonwarnings">A query parameter to specify whether to rollback the documentation importation (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.</param>
		/// <returns>Success</returns>
		public async Task<DocumentationPartIds> ImportDocumentationPartsAsync(string restapi_id, string mode, bool failonwarnings, ImportDocumentationPartsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/documentation/parts&mode=" + mode+"&failonwarnings="+failonwarnings;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DocumentationPartIds>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// CreateDocumentationVersion restapis/{restapi_id}/documentation/versions
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		public async Task CreateDocumentationVersionAsync(string restapi_id, CreateDocumentationVersionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/documentation/versions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// GetDocumentationVersions restapis/{restapi_id}/documentation/versions
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <returns>Success</returns>
		public async Task<DocumentationVersions> GetDocumentationVersionsAsync(string restapi_id, string position, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/documentation/versions&position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DocumentationVersions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new domain name.
		/// CreateDomainName domainnames
		/// </summary>
		public async Task CreateDomainNameAsync(CreateDomainNameBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domainnames";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Represents a collection of <a>DomainName</a> resources.
		/// GetDomainNames domainnames
		/// </summary>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <returns>Success</returns>
		public async Task<DomainNames> GetDomainNamesAsync(string position, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domainnames?position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DomainNames>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a new <a>Model</a> resource to an existing <a>RestApi</a> resource.
		/// CreateModel restapis/{restapi_id}/models
		/// </summary>
		/// <param name="restapi_id">[Required] The <a>RestApi</a> identifier under which the <a>Model</a> will be created.</param>
		public async Task CreateModelAsync(string restapi_id, CreateModelBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/models";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes existing <a>Models</a> defined for a <a>RestApi</a> resource.
		/// GetModels restapis/{restapi_id}/models
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <returns>Success</returns>
		public async Task<Models> GetModelsAsync(string restapi_id, string position, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/models&position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Models>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a <a>ReqeustValidator</a> of a given <a>RestApi</a>.
		/// CreateRequestValidator restapis/{restapi_id}/requestvalidators
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		public async Task CreateRequestValidatorAsync(string restapi_id, CreateRequestValidatorBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/requestvalidators";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the <a>RequestValidators</a> collection of a given <a>RestApi</a>.
		/// GetRequestValidators restapis/{restapi_id}/requestvalidators
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <returns>Success</returns>
		public async Task<RequestValidators> GetRequestValidatorsAsync(string restapi_id, string position, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/requestvalidators&position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RequestValidators>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a <a>Resource</a> resource.
		/// CreateResource restapis/{restapi_id}/resources/{parent_id}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="parent_id">[Required] The parent resource's identifier.</param>
		public async Task CreateResourceAsync(string restapi_id, string parent_id, CreateResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources/"+ (parent_id==null? "" : Uri.EscapeDataString(parent_id));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new <a>RestApi</a> resource.
		/// CreateRestApi restapis
		/// </summary>
		public async Task CreateRestApiAsync(CreateRestApiBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the <a>RestApis</a> resources for your collection.
		/// GetRestApis restapis
		/// </summary>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <returns>Success</returns>
		public async Task<RestApis> GetRestApisAsync(string position, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis?position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RestApis>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new <a>Stage</a> resource that references a pre-existing <a>Deployment</a> for the API.
		/// CreateStage restapis/{restapi_id}/stages
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		public async Task CreateStageAsync(string restapi_id, CreateStageBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/stages";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more <a>Stage</a> resources.
		/// GetStages restapis/{restapi_id}/stages
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="deploymentId">The stages' deployment identifiers.</param>
		/// <returns>Success</returns>
		public async Task<Stages> GetStagesAsync(string restapi_id, string deploymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/stages&deploymentId=" + (deploymentId==null? "" : Uri.EscapeDataString(deploymentId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Stages>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a usage plan with the throttle and quota limits, as well as the associated API stages, specified in the payload.
		/// CreateUsagePlan usageplans
		/// </summary>
		public async Task CreateUsagePlanAsync(CreateUsagePlanBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "usageplans";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets all the usage plans of the caller's account.
		/// GetUsagePlans usageplans
		/// </summary>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="keyId">The identifier of the API key associated with the usage plans.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <returns>Success</returns>
		public async Task<UsagePlans> GetUsagePlansAsync(string position, string keyId, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "usageplans?position=" + (position==null? "" : Uri.EscapeDataString(position))+"&keyId=" + (keyId==null? "" : Uri.EscapeDataString(keyId))+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UsagePlans>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a usage plan key for adding an existing API key to a usage plan.
		/// CreateUsagePlanKey usageplans/{usageplanId}/keys
		/// </summary>
		/// <param name="usageplanId">[Required] The Id of the <a>UsagePlan</a> resource representing the usage plan containing the to-be-created <a>UsagePlanKey</a> resource representing a plan customer.</param>
		public async Task CreateUsagePlanKeyAsync(string usageplanId, CreateUsagePlanKeyBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "usageplans/"+ (usageplanId==null? "" : Uri.EscapeDataString(usageplanId))+"/keys";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets all the usage plan keys representing the API keys added to a specified usage plan.
		/// GetUsagePlanKeys usageplans/{usageplanId}/keys
		/// </summary>
		/// <param name="usageplanId">[Required] The Id of the <a>UsagePlan</a> resource representing the usage plan containing the to-be-retrieved <a>UsagePlanKey</a> resource representing a plan customer.</param>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <param name="name">A query parameter specifying the name of the to-be-returned usage plan keys.</param>
		/// <returns>Success</returns>
		public async Task<UsagePlanKeys> GetUsagePlanKeysAsync(string usageplanId, string position, int limit, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "usageplans/"+ (usageplanId==null? "" : Uri.EscapeDataString(usageplanId))+"/keys&position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit+"&name=" + (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UsagePlanKeys>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a VPC link, under the caller's account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.
		/// CreateVpcLink vpclinks
		/// </summary>
		public async Task CreateVpcLinkAsync(CreateVpcLinkBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vpclinks";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the <a>VpcLinks</a> collection under the caller's account in a selected region.
		/// GetVpcLinks vpclinks
		/// </summary>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <returns>Success</returns>
		public async Task<VpcLinks> GetVpcLinksAsync(string position, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vpclinks?position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<VpcLinks>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the <a>ApiKey</a> resource.
		/// DeleteApiKey apikeys/{api_Key}
		/// </summary>
		/// <param name="api_Key">[Required] The identifier of the <a>ApiKey</a> resource to be deleted.</param>
		public async Task DeleteApiKeyAsync(string api_Key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apikeys/"+ (api_Key==null? "" : Uri.EscapeDataString(api_Key));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the current <a>ApiKey</a> resource.
		/// GetApiKey apikeys/{api_Key}
		/// </summary>
		/// <param name="api_Key">[Required] The identifier of the <a>ApiKey</a> resource.</param>
		/// <param name="includeValue">A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains the key value.</param>
		/// <returns>Success</returns>
		public async Task<ApiKey> GetApiKeyAsync(string api_Key, bool includeValue, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apikeys/"+ (api_Key==null? "" : Uri.EscapeDataString(api_Key))+"&includeValue="+includeValue;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ApiKey>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an existing <a>Authorizer</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/delete-authorizer.html">AWS CLI</a></div>
		/// DeleteAuthorizer restapis/{restapi_id}/authorizers/{authorizer_id}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="authorizer_id">[Required] The identifier of the <a>Authorizer</a> resource.</param>
		public async Task DeleteAuthorizerAsync(string restapi_id, string authorizer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/authorizers/"+ (authorizer_id==null? "" : Uri.EscapeDataString(authorizer_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describe an existing <a>Authorizer</a> resource.</p> <div class="seeAlso"><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/get-authorizer.html">AWS CLI</a></div>
		/// GetAuthorizer restapis/{restapi_id}/authorizers/{authorizer_id}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="authorizer_id">[Required] The identifier of the <a>Authorizer</a> resource.</param>
		/// <returns>Success</returns>
		public async Task<Authorizer> GetAuthorizerAsync(string restapi_id, string authorizer_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/authorizers/"+ (authorizer_id==null? "" : Uri.EscapeDataString(authorizer_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Authorizer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Simulate the execution of an <a>Authorizer</a> in your <a>RestApi</a> with headers, parameters, and an incoming request body.</p> <div class="seeAlso"> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html">Use Lambda Function as Authorizer</a> <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html">Use Cognito User Pool as Authorizer</a> </div>
		/// TestInvokeAuthorizer restapis/{restapi_id}/authorizers/{authorizer_id}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="authorizer_id">[Required] Specifies a test invoke authorizer request's <a>Authorizer</a> ID.</param>
		/// <returns>Success</returns>
		public async Task<TestInvokeAuthorizerResponse> TestInvokeAuthorizerAsync(string restapi_id, string authorizer_id, TestInvokeAuthorizerBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/authorizers/"+ (authorizer_id==null? "" : Uri.EscapeDataString(authorizer_id));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestInvokeAuthorizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the <a>BasePathMapping</a> resource.
		/// DeleteBasePathMapping domainnames/{domain_name}/basepathmappings/{base_path}
		/// </summary>
		/// <param name="domain_name">[Required] The domain name of the <a>BasePathMapping</a> resource to delete.</param>
		/// <param name="base_path"><p>[Required] The base path name of the <a>BasePathMapping</a> resource to delete.</p> <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p></param>
		public async Task DeleteBasePathMappingAsync(string domain_name, string base_path, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domainnames/"+ (domain_name==null? "" : Uri.EscapeDataString(domain_name))+"/basepathmappings/"+ (base_path==null? "" : Uri.EscapeDataString(base_path));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describe a <a>BasePathMapping</a> resource.
		/// GetBasePathMapping domainnames/{domain_name}/basepathmappings/{base_path}
		/// </summary>
		/// <param name="domain_name">[Required] The domain name of the <a>BasePathMapping</a> resource to be described.</param>
		/// <param name="base_path">[Required] The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify any base path name after the domain name.</param>
		/// <returns>Success</returns>
		public async Task<BasePathMapping> GetBasePathMappingAsync(string domain_name, string base_path, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domainnames/"+ (domain_name==null? "" : Uri.EscapeDataString(domain_name))+"/basepathmappings/"+ (base_path==null? "" : Uri.EscapeDataString(base_path));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BasePathMapping>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the <a>ClientCertificate</a> resource.
		/// DeleteClientCertificate clientcertificates/{clientcertificate_id}
		/// </summary>
		/// <param name="clientcertificate_id">[Required] The identifier of the <a>ClientCertificate</a> resource to be deleted.</param>
		public async Task DeleteClientCertificateAsync(string clientcertificate_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clientcertificates/"+ (clientcertificate_id==null? "" : Uri.EscapeDataString(clientcertificate_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the current <a>ClientCertificate</a> resource.
		/// GetClientCertificate clientcertificates/{clientcertificate_id}
		/// </summary>
		/// <param name="clientcertificate_id">[Required] The identifier of the <a>ClientCertificate</a> resource to be described.</param>
		/// <returns>Success</returns>
		public async Task<ClientCertificate> GetClientCertificateAsync(string clientcertificate_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clientcertificates/"+ (clientcertificate_id==null? "" : Uri.EscapeDataString(clientcertificate_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ClientCertificate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a <a>Deployment</a> resource. Deleting a deployment will only succeed if there are no <a>Stage</a> resources associated with it.
		/// DeleteDeployment restapis/{restapi_id}/deployments/{deployment_id}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="deployment_id">[Required] The identifier of the <a>Deployment</a> resource to delete.</param>
		public async Task DeleteDeploymentAsync(string restapi_id, string deployment_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/deployments/"+ (deployment_id==null? "" : Uri.EscapeDataString(deployment_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a <a>Deployment</a> resource.
		/// GetDeployment restapis/{restapi_id}/deployments/{deployment_id}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="deployment_id">[Required] The identifier of the <a>Deployment</a> resource to get information about.</param>
		/// <param name="embed">A query parameter to retrieve the specified embedded resources of the returned <a>Deployment</a> resource in the response. In a REST API call, this <code>embed</code> parameter value is a list of comma-separated strings, as in <code>GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=var1,var2</code>. The SDK and other platform-dependent libraries might use a different format for the list. Currently, this request supports only retrieval of the embedded API summary this way. Hence, the parameter value must be a single-valued list containing only the <code>"apisummary"</code> string. For example, <code>GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=apisummary</code>.</param>
		/// <returns>Success</returns>
		public async Task<Deployment> GetDeploymentAsync(string restapi_id, string deployment_id, String[] embed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/deployments/"+ (deployment_id==null? "" : Uri.EscapeDataString(deployment_id))+"&"+String.Join("&", embed.Select(z => $"embed={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Deployment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteDocumentationPart restapis/{restapi_id}/documentation/parts/{part_id}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="part_id">[Required] The identifier of the to-be-deleted documentation part.</param>
		public async Task DeleteDocumentationPartAsync(string restapi_id, string part_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/documentation/parts/"+ (part_id==null? "" : Uri.EscapeDataString(part_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetDocumentationPart restapis/{restapi_id}/documentation/parts/{part_id}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="part_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <returns>Success</returns>
		public async Task<DocumentationPart> GetDocumentationPartAsync(string restapi_id, string part_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/documentation/parts/"+ (part_id==null? "" : Uri.EscapeDataString(part_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DocumentationPart>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteDocumentationVersion restapis/{restapi_id}/documentation/versions/{doc_version}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="doc_version">[Required] The version identifier of a to-be-deleted documentation snapshot.</param>
		public async Task DeleteDocumentationVersionAsync(string restapi_id, string doc_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/documentation/versions/"+ (doc_version==null? "" : Uri.EscapeDataString(doc_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetDocumentationVersion restapis/{restapi_id}/documentation/versions/{doc_version}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="doc_version">[Required] The version identifier of the to-be-retrieved documentation snapshot.</param>
		/// <returns>Success</returns>
		public async Task<DocumentationVersion> GetDocumentationVersionAsync(string restapi_id, string doc_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/documentation/versions/"+ (doc_version==null? "" : Uri.EscapeDataString(doc_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DocumentationVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the <a>DomainName</a> resource.
		/// DeleteDomainName domainnames/{domain_name}
		/// </summary>
		/// <param name="domain_name">[Required] The name of the <a>DomainName</a> resource to be deleted.</param>
		public async Task DeleteDomainNameAsync(string domain_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domainnames/"+ (domain_name==null? "" : Uri.EscapeDataString(domain_name));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Represents a domain name that is contained in a simpler, more intuitive URL that can be called.
		/// GetDomainName domainnames/{domain_name}
		/// </summary>
		/// <param name="domain_name">[Required] The name of the <a>DomainName</a> resource.</param>
		/// <returns>Success</returns>
		public async Task<DomainName> GetDomainNameAsync(string domain_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domainnames/"+ (domain_name==null? "" : Uri.EscapeDataString(domain_name));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DomainName>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clears any customization of a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a> and resets it with the default settings.
		/// DeleteGatewayResponse restapis/{restapi_id}/gatewayresponses/{response_type}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="response_type"><p>[Required] <p>The response type of the associated <a>GatewayResponse</a>. Valid values are <ul><li>ACCESS_DENIED</li><li>API_CONFIGURATION_ERROR</li><li>AUTHORIZER_FAILURE</li><li> AUTHORIZER_CONFIGURATION_ERROR</li><li>BAD_REQUEST_PARAMETERS</li><li>BAD_REQUEST_BODY</li><li>DEFAULT_4XX</li><li>DEFAULT_5XX</li><li>EXPIRED_TOKEN</li><li>INVALID_SIGNATURE</li><li>INTEGRATION_FAILURE</li><li>INTEGRATION_TIMEOUT</li><li>INVALID_API_KEY</li><li>MISSING_AUTHENTICATION_TOKEN</li><li> QUOTA_EXCEEDED</li><li>REQUEST_TOO_LARGE</li><li>RESOURCE_NOT_FOUND</li><li>THROTTLED</li><li>UNAUTHORIZED</li><li>UNSUPPORTED_MEDIA_TYPE</li></ul> </p></p></param>
		public async Task DeleteGatewayResponseAsync(string restapi_id, GatewayResponseResponseType response_type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/gatewayresponses/"+response_type;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a <a>GatewayResponse</a> of a specified response type on the given <a>RestApi</a>.
		/// GetGatewayResponse restapis/{restapi_id}/gatewayresponses/{response_type}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="response_type"><p>[Required] <p>The response type of the associated <a>GatewayResponse</a>. Valid values are <ul><li>ACCESS_DENIED</li><li>API_CONFIGURATION_ERROR</li><li>AUTHORIZER_FAILURE</li><li> AUTHORIZER_CONFIGURATION_ERROR</li><li>BAD_REQUEST_PARAMETERS</li><li>BAD_REQUEST_BODY</li><li>DEFAULT_4XX</li><li>DEFAULT_5XX</li><li>EXPIRED_TOKEN</li><li>INVALID_SIGNATURE</li><li>INTEGRATION_FAILURE</li><li>INTEGRATION_TIMEOUT</li><li>INVALID_API_KEY</li><li>MISSING_AUTHENTICATION_TOKEN</li><li> QUOTA_EXCEEDED</li><li>REQUEST_TOO_LARGE</li><li>RESOURCE_NOT_FOUND</li><li>THROTTLED</li><li>UNAUTHORIZED</li><li>UNSUPPORTED_MEDIA_TYPE</li></ul> </p></p></param>
		/// <returns>Success</returns>
		public async Task<GatewayResponse> GetGatewayResponseAsync(string restapi_id, GatewayResponseResponseType response_type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/gatewayresponses/"+response_type;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GatewayResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a customization of a <a>GatewayResponse</a> of a specified response type and status code on the given <a>RestApi</a>.
		/// PutGatewayResponse restapis/{restapi_id}/gatewayresponses/{response_type}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="response_type"><p>[Required] <p>The response type of the associated <a>GatewayResponse</a>. Valid values are <ul><li>ACCESS_DENIED</li><li>API_CONFIGURATION_ERROR</li><li>AUTHORIZER_FAILURE</li><li> AUTHORIZER_CONFIGURATION_ERROR</li><li>BAD_REQUEST_PARAMETERS</li><li>BAD_REQUEST_BODY</li><li>DEFAULT_4XX</li><li>DEFAULT_5XX</li><li>EXPIRED_TOKEN</li><li>INVALID_SIGNATURE</li><li>INTEGRATION_FAILURE</li><li>INTEGRATION_TIMEOUT</li><li>INVALID_API_KEY</li><li>MISSING_AUTHENTICATION_TOKEN</li><li> QUOTA_EXCEEDED</li><li>REQUEST_TOO_LARGE</li><li>RESOURCE_NOT_FOUND</li><li>THROTTLED</li><li>UNAUTHORIZED</li><li>UNSUPPORTED_MEDIA_TYPE</li></ul> </p></p></param>
		public async Task PutGatewayResponseAsync(string restapi_id, string response_type, PutGatewayResponseBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/gatewayresponses/"+response_type;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Represents a delete integration.
		/// DeleteIntegration restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="resource_id">[Required] Specifies a delete integration request's resource identifier.</param>
		/// <param name="http_method">[Required] Specifies a delete integration request's HTTP method.</param>
		public async Task DeleteIntegrationAsync(string restapi_id, string resource_id, string http_method, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources/"+ (resource_id==null? "" : Uri.EscapeDataString(resource_id))+"/methods/"+ (http_method==null? "" : Uri.EscapeDataString(http_method))+"/integration";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the integration settings.
		/// GetIntegration restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="resource_id">[Required] Specifies a get integration request's resource identifier</param>
		/// <param name="http_method">[Required] Specifies a get integration request's HTTP method.</param>
		/// <returns>Success</returns>
		public async Task<Integration> GetIntegrationAsync(string restapi_id, string resource_id, string http_method, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources/"+ (resource_id==null? "" : Uri.EscapeDataString(resource_id))+"/methods/"+ (http_method==null? "" : Uri.EscapeDataString(http_method))+"/integration";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Integration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets up a method's integration.
		/// PutIntegration restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="resource_id">[Required] Specifies a put integration request's resource ID.</param>
		/// <param name="http_method">[Required] Specifies a put integration request's HTTP method.</param>
		public async Task PutIntegrationAsync(string restapi_id, string resource_id, string http_method, PutIntegrationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources/"+ (resource_id==null? "" : Uri.EscapeDataString(resource_id))+"/methods/"+ (http_method==null? "" : Uri.EscapeDataString(http_method))+"/integration";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Represents a delete integration response.
		/// DeleteIntegrationResponse restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="resource_id">[Required] Specifies a delete integration response request's resource identifier.</param>
		/// <param name="http_method">[Required] Specifies a delete integration response request's HTTP method.</param>
		/// <param name="status_code">[Required] Specifies a delete integration response request's status code.</param>
		public async Task DeleteIntegrationResponseAsync(string restapi_id, string resource_id, string http_method, string status_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources/"+ (resource_id==null? "" : Uri.EscapeDataString(resource_id))+"/methods/"+ (http_method==null? "" : Uri.EscapeDataString(http_method))+"/integration/responses/"+ (status_code==null? "" : Uri.EscapeDataString(status_code));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Represents a get integration response.
		/// GetIntegrationResponse restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="resource_id">[Required] Specifies a get integration response request's resource identifier.</param>
		/// <param name="http_method">[Required] Specifies a get integration response request's HTTP method.</param>
		/// <param name="status_code">[Required] Specifies a get integration response request's status code.</param>
		/// <returns>Success</returns>
		public async Task<IntegrationResponse> GetIntegrationResponseAsync(string restapi_id, string resource_id, string http_method, string status_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources/"+ (resource_id==null? "" : Uri.EscapeDataString(resource_id))+"/methods/"+ (http_method==null? "" : Uri.EscapeDataString(http_method))+"/integration/responses/"+ (status_code==null? "" : Uri.EscapeDataString(status_code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<IntegrationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Represents a put integration.
		/// PutIntegrationResponse restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="resource_id">[Required] Specifies a put integration response request's resource identifier.</param>
		/// <param name="http_method">[Required] Specifies a put integration response request's HTTP method.</param>
		/// <param name="status_code">[Required] Specifies the status code that is used to map the integration response to an existing <a>MethodResponse</a>.</param>
		public async Task PutIntegrationResponseAsync(string restapi_id, string resource_id, string http_method, string status_code, PutIntegrationResponseBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources/"+ (resource_id==null? "" : Uri.EscapeDataString(resource_id))+"/methods/"+ (http_method==null? "" : Uri.EscapeDataString(http_method))+"/integration/responses/"+ (status_code==null? "" : Uri.EscapeDataString(status_code));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing <a>Method</a> resource.
		/// DeleteMethod restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="resource_id">[Required] The <a>Resource</a> identifier for the <a>Method</a> resource.</param>
		/// <param name="http_method">[Required] The HTTP verb of the <a>Method</a> resource.</param>
		public async Task DeleteMethodAsync(string restapi_id, string resource_id, string http_method, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources/"+ (resource_id==null? "" : Uri.EscapeDataString(resource_id))+"/methods/"+ (http_method==null? "" : Uri.EscapeDataString(http_method));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describe an existing <a>Method</a> resource.
		/// GetMethod restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="resource_id">[Required] The <a>Resource</a> identifier for the <a>Method</a> resource.</param>
		/// <param name="http_method">[Required] Specifies the method request's HTTP method type.</param>
		/// <returns>Success</returns>
		public async Task<Method> GetMethodAsync(string restapi_id, string resource_id, string http_method, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources/"+ (resource_id==null? "" : Uri.EscapeDataString(resource_id))+"/methods/"+ (http_method==null? "" : Uri.EscapeDataString(http_method));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Method>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a method to an existing <a>Resource</a> resource.
		/// PutMethod restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="resource_id">[Required] The <a>Resource</a> identifier for the new <a>Method</a> resource.</param>
		/// <param name="http_method">[Required] Specifies the method request's HTTP method type.</param>
		public async Task PutMethodAsync(string restapi_id, string resource_id, string http_method, PutMethodBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources/"+ (resource_id==null? "" : Uri.EscapeDataString(resource_id))+"/methods/"+ (http_method==null? "" : Uri.EscapeDataString(http_method));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Simulate the execution of a <a>Method</a> in your <a>RestApi</a> with headers, parameters, and an incoming request body.
		/// TestInvokeMethod restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="resource_id">[Required] Specifies a test invoke method request's resource ID.</param>
		/// <param name="http_method">[Required] Specifies a test invoke method request's HTTP method.</param>
		/// <returns>Success</returns>
		public async Task<TestInvokeMethodResponse> TestInvokeMethodAsync(string restapi_id, string resource_id, string http_method, TestInvokeMethodBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources/"+ (resource_id==null? "" : Uri.EscapeDataString(resource_id))+"/methods/"+ (http_method==null? "" : Uri.EscapeDataString(http_method));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestInvokeMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing <a>MethodResponse</a> resource.
		/// DeleteMethodResponse restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="resource_id">[Required] The <a>Resource</a> identifier for the <a>MethodResponse</a> resource.</param>
		/// <param name="http_method">[Required] The HTTP verb of the <a>Method</a> resource.</param>
		/// <param name="status_code">[Required] The status code identifier for the <a>MethodResponse</a> resource.</param>
		public async Task DeleteMethodResponseAsync(string restapi_id, string resource_id, string http_method, string status_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources/"+ (resource_id==null? "" : Uri.EscapeDataString(resource_id))+"/methods/"+ (http_method==null? "" : Uri.EscapeDataString(http_method))+"/responses/"+ (status_code==null? "" : Uri.EscapeDataString(status_code));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes a <a>MethodResponse</a> resource.
		/// GetMethodResponse restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="resource_id">[Required] The <a>Resource</a> identifier for the <a>MethodResponse</a> resource.</param>
		/// <param name="http_method">[Required] The HTTP verb of the <a>Method</a> resource.</param>
		/// <param name="status_code">[Required] The status code for the <a>MethodResponse</a> resource.</param>
		/// <returns>Success</returns>
		public async Task<MethodResponse> GetMethodResponseAsync(string restapi_id, string resource_id, string http_method, string status_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources/"+ (resource_id==null? "" : Uri.EscapeDataString(resource_id))+"/methods/"+ (http_method==null? "" : Uri.EscapeDataString(http_method))+"/responses/"+ (status_code==null? "" : Uri.EscapeDataString(status_code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a <a>MethodResponse</a> to an existing <a>Method</a> resource.
		/// PutMethodResponse restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="resource_id">[Required] The <a>Resource</a> identifier for the <a>Method</a> resource.</param>
		/// <param name="http_method">[Required] The HTTP verb of the <a>Method</a> resource.</param>
		/// <param name="status_code">[Required] The method response's status code.</param>
		public async Task PutMethodResponseAsync(string restapi_id, string resource_id, string http_method, string status_code, PutMethodResponseBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources/"+ (resource_id==null? "" : Uri.EscapeDataString(resource_id))+"/methods/"+ (http_method==null? "" : Uri.EscapeDataString(http_method))+"/responses/"+ (status_code==null? "" : Uri.EscapeDataString(status_code));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a model.
		/// DeleteModel restapis/{restapi_id}/models/{model_name}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="model_name">[Required] The name of the model to delete.</param>
		public async Task DeleteModelAsync(string restapi_id, string model_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/models/"+ (model_name==null? "" : Uri.EscapeDataString(model_name));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes an existing model defined for a <a>RestApi</a> resource.
		/// GetModel restapis/{restapi_id}/models/{model_name}
		/// </summary>
		/// <param name="restapi_id">[Required] The <a>RestApi</a> identifier under which the <a>Model</a> exists.</param>
		/// <param name="model_name">[Required] The name of the model as an identifier.</param>
		/// <param name="flatten">A query parameter of a Boolean value to resolve (<code>true</code>) all external model references and returns a flattened model schema or not (<code>false</code>) The default is <code>false</code>.</param>
		/// <returns>Success</returns>
		public async Task<Model> GetModelAsync(string restapi_id, string model_name, bool flatten, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/models/"+ (model_name==null? "" : Uri.EscapeDataString(model_name))+"&flatten="+flatten;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Model>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a <a>RequestValidator</a> of a given <a>RestApi</a>.
		/// DeleteRequestValidator restapis/{restapi_id}/requestvalidators/{requestvalidator_id}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="requestvalidator_id">[Required] The identifier of the <a>RequestValidator</a> to be deleted.</param>
		public async Task DeleteRequestValidatorAsync(string restapi_id, string requestvalidator_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/requestvalidators/"+ (requestvalidator_id==null? "" : Uri.EscapeDataString(requestvalidator_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a <a>RequestValidator</a> of a given <a>RestApi</a>.
		/// GetRequestValidator restapis/{restapi_id}/requestvalidators/{requestvalidator_id}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="requestvalidator_id">[Required] The identifier of the <a>RequestValidator</a> to be retrieved.</param>
		/// <returns>Success</returns>
		public async Task<RequestValidator> GetRequestValidatorAsync(string restapi_id, string requestvalidator_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/requestvalidators/"+ (requestvalidator_id==null? "" : Uri.EscapeDataString(requestvalidator_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RequestValidator>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a <a>Resource</a> resource.
		/// DeleteResource restapis/{restapi_id}/resources/{resource_id}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="resource_id">[Required] The identifier of the <a>Resource</a> resource.</param>
		public async Task DeleteResourceAsync(string restapi_id, string resource_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources/"+ (resource_id==null? "" : Uri.EscapeDataString(resource_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists information about a resource.
		/// GetResource restapis/{restapi_id}/resources/{resource_id}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="resource_id">[Required] The identifier for the <a>Resource</a> resource.</param>
		/// <param name="embed">A query parameter to retrieve the specified resources embedded in the returned <a>Resource</a> representation in the response. This <code>embed</code> parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded <a>Method</a> resources this way. The query parameter value must be a single-valued list and contain the <code>"methods"</code> string. For example, <code>GET /restapis/{restapi_id}/resources/{resource_id}?embed=methods</code>.</param>
		/// <returns>Success</returns>
		public async Task<Resource> GetResourceAsync(string restapi_id, string resource_id, String[] embed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources/"+ (resource_id==null? "" : Uri.EscapeDataString(resource_id))+"&"+String.Join("&", embed.Select(z => $"embed={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Resource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified API.
		/// DeleteRestApi restapis/{restapi_id}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		public async Task DeleteRestApiAsync(string restapi_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the <a>RestApi</a> resource in the collection.
		/// GetRestApi restapis/{restapi_id}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <returns>Success</returns>
		public async Task<RestApi> GetRestApiAsync(string restapi_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RestApi>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// A feature of the API Gateway control service for updating an existing API with an input of external API definitions. The update can take the form of merging the supplied definition into the existing API or overwriting the existing API.
		/// PutRestApi restapis/{restapi_id}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="mode">The <code>mode</code> query parameter to specify the update mode. Valid values are "merge" and "overwrite". By default, the update mode is "merge".</param>
		/// <param name="failonwarnings">A query parameter to indicate whether to rollback the API update (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.</param>
		/// <param name="parameters">Custom header parameters as part of the request. For example, to exclude <a>DocumentationParts</a> from an imported API, set <code>ignore=documentation</code> as a <code>parameters</code> value, as in the AWS CLI command of <code>aws apigateway import-rest-api --parameters ignore=documentation --body 'file:///path/to/imported-api-body.json'</code>.</param>
		/// <returns>Success</returns>
		public async Task<RestApi> PutRestApiAsync(string restapi_id, string mode, bool failonwarnings, string parameters, PutRestApiBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"&mode=" + mode+"&failonwarnings="+failonwarnings+"&parameters=" + (parameters==null? "" : Uri.EscapeDataString(parameters));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RestApi>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a <a>Stage</a> resource.
		/// DeleteStage restapis/{restapi_id}/stages/{stage_name}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="stage_name">[Required] The name of the <a>Stage</a> resource to delete.</param>
		public async Task DeleteStageAsync(string restapi_id, string stage_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/stages/"+ (stage_name==null? "" : Uri.EscapeDataString(stage_name));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a <a>Stage</a> resource.
		/// GetStage restapis/{restapi_id}/stages/{stage_name}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="stage_name">[Required] The name of the <a>Stage</a> resource to get information about.</param>
		/// <returns>Success</returns>
		public async Task<Stage> GetStageAsync(string restapi_id, string stage_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/stages/"+ (stage_name==null? "" : Uri.EscapeDataString(stage_name));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Stage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a usage plan of a given plan Id.
		/// DeleteUsagePlan usageplans/{usageplanId}
		/// </summary>
		/// <param name="usageplanId">[Required] The Id of the to-be-deleted usage plan.</param>
		public async Task DeleteUsagePlanAsync(string usageplanId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "usageplans/"+ (usageplanId==null? "" : Uri.EscapeDataString(usageplanId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a usage plan of a given plan identifier.
		/// GetUsagePlan usageplans/{usageplanId}
		/// </summary>
		/// <param name="usageplanId">[Required] The identifier of the <a>UsagePlan</a> resource to be retrieved.</param>
		/// <returns>Success</returns>
		public async Task<UsagePlan> GetUsagePlanAsync(string usageplanId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "usageplans/"+ (usageplanId==null? "" : Uri.EscapeDataString(usageplanId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UsagePlan>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a usage plan key and remove the underlying API key from the associated usage plan.
		/// DeleteUsagePlanKey usageplans/{usageplanId}/keys/{keyId}
		/// </summary>
		/// <param name="usageplanId">[Required] The Id of the <a>UsagePlan</a> resource representing the usage plan containing the to-be-deleted <a>UsagePlanKey</a> resource representing a plan customer.</param>
		/// <param name="keyId">[Required] The Id of the <a>UsagePlanKey</a> resource to be deleted.</param>
		public async Task DeleteUsagePlanKeyAsync(string usageplanId, string keyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "usageplans/"+ (usageplanId==null? "" : Uri.EscapeDataString(usageplanId))+"/keys/"+ (keyId==null? "" : Uri.EscapeDataString(keyId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a usage plan key of a given key identifier.
		/// GetUsagePlanKey usageplans/{usageplanId}/keys/{keyId}
		/// </summary>
		/// <param name="usageplanId">[Required] The Id of the <a>UsagePlan</a> resource representing the usage plan containing the to-be-retrieved <a>UsagePlanKey</a> resource representing a plan customer.</param>
		/// <param name="keyId">[Required] The key Id of the to-be-retrieved <a>UsagePlanKey</a> resource representing a plan customer.</param>
		/// <returns>Success</returns>
		public async Task<UsagePlanKey> GetUsagePlanKeyAsync(string usageplanId, string keyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "usageplans/"+ (usageplanId==null? "" : Uri.EscapeDataString(usageplanId))+"/keys/"+ (keyId==null? "" : Uri.EscapeDataString(keyId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UsagePlanKey>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing <a>VpcLink</a> of a specified identifier.
		/// DeleteVpcLink vpclinks/{vpclink_id}
		/// </summary>
		/// <param name="vpclink_id">[Required] The identifier of the <a>VpcLink</a>. It is used in an <a>Integration</a> to reference this <a>VpcLink</a>.</param>
		public async Task DeleteVpcLinkAsync(string vpclink_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vpclinks/"+ (vpclink_id==null? "" : Uri.EscapeDataString(vpclink_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a specified VPC link under the caller's account in a region.
		/// GetVpcLink vpclinks/{vpclink_id}
		/// </summary>
		/// <param name="vpclink_id">[Required] The identifier of the <a>VpcLink</a>. It is used in an <a>Integration</a> to reference this <a>VpcLink</a>.</param>
		/// <returns>Success</returns>
		public async Task<VpcLink> GetVpcLinkAsync(string vpclink_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vpclinks/"+ (vpclink_id==null? "" : Uri.EscapeDataString(vpclink_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<VpcLink>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Flushes all authorizer cache entries on a stage.
		/// FlushStageAuthorizersCache restapis/{restapi_id}/stages/{stage_name}/cache/authorizers
		/// </summary>
		/// <param name="restapi_id">The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="stage_name">The name of the stage to flush.</param>
		public async Task FlushStageAuthorizersCacheAsync(string restapi_id, string stage_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/stages/"+ (stage_name==null? "" : Uri.EscapeDataString(stage_name))+"/cache/authorizers";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Flushes a stage's cache.
		/// FlushStageCache restapis/{restapi_id}/stages/{stage_name}/cache/data
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="stage_name">[Required] The name of the stage to flush its cache.</param>
		public async Task FlushStageCacheAsync(string restapi_id, string stage_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/stages/"+ (stage_name==null? "" : Uri.EscapeDataString(stage_name))+"/cache/data";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a <a>ClientCertificate</a> resource.
		/// GenerateClientCertificate clientcertificates
		/// </summary>
		public async Task GenerateClientCertificateAsync(GenerateClientCertificateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clientcertificates";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a collection of <a>ClientCertificate</a> resources.
		/// GetClientCertificates clientcertificates
		/// </summary>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <returns>Success</returns>
		public async Task<ClientCertificates> GetClientCertificatesAsync(string position, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clientcertificates?position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ClientCertificates>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the current <a>Account</a> resource.
		/// GetAccount account
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Account> GetAccountAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports a deployed version of a <a>RestApi</a> in a specified format.
		/// GetExport restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="stage_name">[Required] The name of the <a>Stage</a> that will be exported.</param>
		/// <param name="export_type">[Required] The type of export. Acceptable values are 'oas30' for OpenAPI 3.0.x and 'swagger' for Swagger/OpenAPI 2.0.</param>
		/// <param name="parameters">A key-value map of query string parameters that specify properties of the export, depending on the requested <code>exportType</code>. For <code>exportType</code> <code>oas30</code> and <code>swagger</code>, any combination of the following parameters are supported: <code>extensions='integrations'</code> or <code>extensions='apigateway'</code> will export the API with x-amazon-apigateway-integration extensions. <code>extensions='authorizers'</code> will export the API with x-amazon-apigateway-authorizer extensions. <code>postman</code> will export the API with Postman extensions, allowing for import to the Postman tool</param>
		/// <returns>Success</returns>
		public async Task<ExportResponse> GetExportAsync(string restapi_id, string stage_name, string export_type, string parameters, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/stages/"+ (stage_name==null? "" : Uri.EscapeDataString(stage_name))+"/exports/"+ (export_type==null? "" : Uri.EscapeDataString(export_type))+"&parameters=" + (parameters==null? "" : Uri.EscapeDataString(parameters));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ExportResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the <a>GatewayResponses</a> collection on the given <a>RestApi</a>. If an API developer has not added any definitions for gateway responses, the result will be the API Gateway-generated default <a>GatewayResponses</a> collection for the supported response types.
		/// GetGatewayResponses restapis/{restapi_id}/gatewayresponses
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="position">The current pagination position in the paged result set. The <a>GatewayResponse</a> collection does not support pagination and the position does not apply here.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500. The <a>GatewayResponses</a> collection does not support pagination and the limit does not apply here.</param>
		/// <returns>Success</returns>
		public async Task<GatewayResponses> GetGatewayResponsesAsync(string restapi_id, string position, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/gatewayresponses&position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GatewayResponses>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a sample mapping template that can be used to transform a payload into the structure of a model.
		/// GetModelTemplate restapis/{restapi_id}/models/{model_name}/default_template
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="model_name">[Required] The name of the model for which to generate a template.</param>
		/// <returns>Success</returns>
		public async Task<Template> GetModelTemplateAsync(string restapi_id, string model_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/models/"+ (model_name==null? "" : Uri.EscapeDataString(model_name))+"/default_template";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Template>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists information about a collection of <a>Resource</a> resources.
		/// GetResources restapis/{restapi_id}/resources
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <param name="embed">A query parameter used to retrieve the specified resources embedded in the returned <a>Resources</a> resource in the response. This <code>embed</code> parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded <a>Method</a> resources this way. The query parameter value must be a single-valued list and contain the <code>"methods"</code> string. For example, <code>GET /restapis/{restapi_id}/resources?embed=methods</code>.</param>
		/// <returns>Success</returns>
		public async Task<Resources> GetResourcesAsync(string restapi_id, string position, int limit, String[] embed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/resources&position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit+"&"+String.Join("&", embed.Select(z => $"embed={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Resources>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a client SDK for a <a>RestApi</a> and <a>Stage</a>.
		/// GetSdk restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}
		/// </summary>
		/// <param name="restapi_id">[Required] The string identifier of the associated <a>RestApi</a>.</param>
		/// <param name="stage_name">[Required] The name of the <a>Stage</a> that the SDK will use.</param>
		/// <param name="sdk_type">[Required] The language for the generated SDK. Currently <code>java</code>, <code>javascript</code>, <code>android</code>, <code>objectivec</code> (for iOS), <code>swift</code> (for iOS), and <code>ruby</code> are supported.</param>
		/// <param name="parameters">A string-to-string key-value map of query parameters <code>sdkType</code>-dependent properties of the SDK. For <code>sdkType</code> of <code>objectivec</code> or <code>swift</code>, a parameter named <code>classPrefix</code> is required. For <code>sdkType</code> of <code>android</code>, parameters named <code>groupId</code>, <code>artifactId</code>, <code>artifactVersion</code>, and <code>invokerPackage</code> are required. For <code>sdkType</code> of <code>java</code>, parameters named <code>serviceName</code> and <code>javaPackageName</code> are required. </param>
		/// <returns>Success</returns>
		public async Task<SdkResponse> GetSdkAsync(string restapi_id, string stage_name, string sdk_type, string parameters, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis/"+ (restapi_id==null? "" : Uri.EscapeDataString(restapi_id))+"/stages/"+ (stage_name==null? "" : Uri.EscapeDataString(stage_name))+"/sdks/"+ (sdk_type==null? "" : Uri.EscapeDataString(sdk_type))+"&parameters=" + (parameters==null? "" : Uri.EscapeDataString(parameters));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SdkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetSdkType sdktypes/{sdktype_id}
		/// </summary>
		/// <param name="sdktype_id">[Required] The identifier of the queried <a>SdkType</a> instance.</param>
		/// <returns>Success</returns>
		public async Task<SdkType> GetSdkTypeAsync(string sdktype_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sdktypes/"+ (sdktype_id==null? "" : Uri.EscapeDataString(sdktype_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SdkType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetSdkTypes sdktypes
		/// </summary>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <returns>Success</returns>
		public async Task<SdkTypes> GetSdkTypesAsync(string position, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sdktypes?position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SdkTypes>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the <a>Tags</a> collection for a given resource.
		/// GetTags tags/{resource_arn}
		/// </summary>
		/// <param name="resource_arn">[Required] The ARN of a resource that can be tagged.</param>
		/// <param name="position">(Not currently supported) The current pagination position in the paged result set.</param>
		/// <param name="limit">(Not currently supported) The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <returns>Success</returns>
		public async Task<Tags> GetTagsAsync(string resource_arn, string position, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resource_arn==null? "" : Uri.EscapeDataString(resource_arn))+"&position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Tags>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds or updates a tag on a given resource.
		/// TagResource tags/{resource_arn}
		/// </summary>
		/// <param name="resource_arn">[Required] The ARN of a resource that can be tagged.</param>
		public async Task TagResourceAsync(string resource_arn, TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resource_arn==null? "" : Uri.EscapeDataString(resource_arn));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the usage data of a usage plan in a specified time interval.
		/// GetUsage usageplans/{usageplanId}/usage#startDate&endDate
		/// </summary>
		/// <param name="usageplanId">[Required] The Id of the usage plan associated with the usage data.</param>
		/// <param name="keyId">The Id of the API key associated with the resultant usage data.</param>
		/// <param name="startDate">[Required] The starting date (e.g., 2016-01-01) of the usage data.</param>
		/// <param name="endDate">[Required] The ending date (e.g., 2016-12-31) of the usage data.</param>
		/// <param name="position">The current pagination position in the paged result set.</param>
		/// <param name="limit">The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</param>
		/// <returns>Success</returns>
		public async Task<Usage> GetUsageAsync(string usageplanId, string keyId, string startDate, string endDate, string position, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "usageplans/"+ (usageplanId==null? "" : Uri.EscapeDataString(usageplanId))+"/usage#startDate&endDate&keyId=" + (keyId==null? "" : Uri.EscapeDataString(keyId))+"&startDate=" + (startDate==null? "" : Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : Uri.EscapeDataString(endDate))+"&position=" + (position==null? "" : Uri.EscapeDataString(position))+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Usage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Import API keys from an external source, such as a CSV-formatted file.
		/// ImportApiKeys apikeys#mode=import&format
		/// </summary>
		/// <param name="format">A query parameter to specify the input format to imported API keys. Currently, only the <code>csv</code> format is supported.</param>
		/// <param name="failonwarnings">A query parameter to indicate whether to rollback <a>ApiKey</a> importation (<code>true</code>) or not (<code>false</code>) when error is encountered.</param>
		public async Task ImportApiKeysAsync(string format, bool failonwarnings, string mode, ImportApiKeysBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apikeys#mode=import&format?format=" + format+"&failonwarnings="+failonwarnings+"&mode=" + (mode==null? "" : Uri.EscapeDataString(mode));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A feature of the API Gateway control service for creating a new API from an external API definition file.
		/// ImportRestApi restapis#mode=import
		/// </summary>
		/// <param name="failonwarnings">A query parameter to indicate whether to rollback the API creation (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.</param>
		/// <param name="parameters"><p>A key-value map of context-specific query string parameters specifying the behavior of different API importing operations. The following shows operation-specific parameters and their supported values.</p> <p> To exclude <a>DocumentationParts</a> from the import, set <code>parameters</code> as <code>ignore=documentation</code>.</p> <p> To configure the endpoint type, set <code>parameters</code> as <code>endpointConfigurationTypes=EDGE</code>, <code>endpointConfigurationTypes=REGIONAL</code>, or <code>endpointConfigurationTypes=PRIVATE</code>. The default endpoint type is <code>EDGE</code>.</p> <p> To handle imported <code>basepath</code>, set <code>parameters</code> as <code>basepath=ignore</code>, <code>basepath=prepend</code> or <code>basepath=split</code>.</p> <p>For example, the AWS CLI command to exclude documentation from the imported API is:</p> <pre><code>aws apigateway import-rest-api --parameters ignore=documentation --body 'file:///path/to/imported-api-body.json'</code></pre> <p>The AWS CLI command to set the regional endpoint on the imported API is:</p> <pre><code>aws apigateway import-rest-api --parameters endpointConfigurationTypes=REGIONAL --body 'file:///path/to/imported-api-body.json'</code></pre></param>
		public async Task ImportRestApiAsync(bool failonwarnings, string parameters, string mode, ImportRestApiBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restapis#mode=import?failonwarnings="+failonwarnings+"&parameters=" + (parameters==null? "" : Uri.EscapeDataString(parameters))+"&mode=" + (mode==null? "" : Uri.EscapeDataString(mode));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a tag from a given resource.
		/// UntagResource tags/{resource_arn}#tagKeys
		/// </summary>
		/// <param name="resource_arn">[Required] The ARN of a resource that can be tagged.</param>
		/// <param name="tagKeys">[Required] The Tag keys to delete.</param>
		public async Task UntagResourceAsync(string resource_arn, String[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resource_arn==null? "" : Uri.EscapeDataString(resource_arn))+"#tagKeys&"+String.Join("&", tagKeys.Select(z => $"tagKeys={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateApiKeyBody
	{
		
		/// <summary>
		/// The name of the <a>ApiKey</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the <a>ApiKey</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Specifies whether the <a>ApiKey</a> can be used by callers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Specifies whether (<code>true</code>) or not (<code>false</code>) the key identifier is distinct from the created API key value. This parameter is deprecated and should not be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> GenerateDistinctId { get; set; }
		
		/// <summary>
		/// Specifies a value of the API key.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		/// <summary>
		/// DEPRECATED FOR USAGE PLANS - Specifies stages associated with the API key.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StageKey[] StageKeys { get; set; }
		
		/// <summary>
		/// An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CustomerId { get; set; }
		
		/// <summary>
		/// The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAuthorizerBody
	{
		
		/// <summary>
		/// [Required] The name of the authorizer.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateAuthorizerBodyType Type { get; set; }
		
		/// <summary>
		/// A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProviderARN[] ProviderARNs { get; set; }
		
		/// <summary>
		/// Optional customer-defined field, used in OpenAPI imports and exports without functional impact.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AuthType { get; set; }
		
		/// <summary>
		/// Specifies the authorizer's Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerUri { get; set; }
		
		/// <summary>
		/// Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerCredentials { get; set; }
		
		/// <summary>
		/// The identity source for which authorization is requested. <ul><li>For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is <code>Auth</code>, the header mapping expression is <code>method.request.header.Auth</code>.</li><li>For the <code>REQUEST</code> authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an <code>Auth</code> header, a <code>Name</code> query string parameter are defined as identity sources, this value is <code>method.request.header.Auth, method.request.querystring.Name</code>. These parameters will be used to derive the authorization caching key and to perform runtime validation of the <code>REQUEST</code> authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IdentitySource { get; set; }
		
		/// <summary>
		/// A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IdentityValidationExpression { get; set; }
		
		/// <summary>
		/// The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AuthorizerResultTtlInSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateAuthorizerBodyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOKEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COGNITO_USER_POOLS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBasePathMappingBody
	{
		
		/// <summary>
		/// The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify a base path name after the domain name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BasePath { get; set; }
		
		/// <summary>
		/// [Required] The string identifier of the associated <a>RestApi</a>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RestApiId { get; set; }
		
		/// <summary>
		/// The name of the API's stage that you want to use for this mapping. Specify '(none)' if you want callers to explicitly specify the stage name after any base path name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Stage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeploymentBody
	{
		
		/// <summary>
		/// The name of the <a>Stage</a> resource for the <a>Deployment</a> resource to create.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
		
		/// <summary>
		/// The description of the <a>Stage</a> resource for the <a>Deployment</a> resource to create.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StageDescription { get; set; }
		
		/// <summary>
		/// The description for the <a>Deployment</a> resource to create.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Enables a cache cluster for the <a>Stage</a> resource specified in the input.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CacheClusterEnabled { get; set; }
		
		/// <summary>
		/// Returns the size of the <b>CacheCluster</b>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateDeploymentBodyCacheClusterSize CacheClusterSize { get; set; }
		
		/// <summary>
		/// A map that defines the stage variables for the <a>Stage</a> resource that is associated with the new deployment. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Variables { get; set; }
		
		/// <summary>
		/// The input configuration for a canary deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CanarySettings { get; set; }
		
		/// <summary>
		/// Specifies whether active tracing with X-ray is enabled for the <a>Stage</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TracingEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDeploymentBodyCacheClusterSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		0.5 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		1.6 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		6.1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		13.5 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		28.4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		58.2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		118 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		237 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDocumentationPartBody
	{
		
		/// <summary>
		/// Specifies the target API entity to which the documentation applies.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		/// <summary>
		/// [Required] The new documentation content map of the targeted API entity. Enclosed key-value pairs are API-specific, but only OpenAPI-compliant key-value pairs can be exported and, hence, published.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportDocumentationPartsBody
	{
		
		/// <summary>
		/// [Required] Raw byte array representing the to-be-imported documentation parts. To import from an OpenAPI file, this is a JSON object.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDocumentationVersionBody
	{
		
		/// <summary>
		/// [Required] The version identifier of the new snapshot.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DocumentationVersion { get; set; }
		
		/// <summary>
		/// The stage name to be associated with the new documentation snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
		
		/// <summary>
		/// A description about the new documentation snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDomainNameBody
	{
		
		/// <summary>
		/// [Required] The name of the <a>DomainName</a> resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// The user-friendly name of the certificate that will be used by edge-optimized endpoint for this domain name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CertificateName { get; set; }
		
		/// <summary>
		/// [Deprecated] The body of the server certificate that will be used by edge-optimized endpoint for this domain name provided by your certificate authority.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CertificateBody { get; set; }
		
		/// <summary>
		/// [Deprecated] Your edge-optimized endpoint's domain name certificate's private key.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CertificatePrivateKey { get; set; }
		
		/// <summary>
		/// [Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines, used by an edge-optimized endpoint for this domain name. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CertificateChain { get; set; }
		
		/// <summary>
		/// The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		/// <summary>
		/// The user-friendly name of the certificate that will be used by regional endpoint for this domain name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RegionalCertificateName { get; set; }
		
		/// <summary>
		/// The reference to an AWS-managed certificate that will be used by regional endpoint for this domain name. AWS Certificate Manager is the only supported source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RegionalCertificateArn { get; set; }
		
		/// <summary>
		/// The endpoint configuration to indicate the types of endpoints an API (<a>RestApi</a>) or its custom domain name (<a>DomainName</a>) has. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EndpointConfiguration { get; set; }
		
		/// <summary>
		/// The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
		
		/// <summary>
		/// The Transport Layer Security (TLS) version + cipher suite for this <a>DomainName</a>. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateDomainNameBodySecurityPolicy SecurityPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDomainNameBodySecurityPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TLS_1_2 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateModelBody
	{
		
		/// <summary>
		/// [Required] The name of the model. Must be alphanumeric.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The schema for the model. For <code>application/json</code> models, this should be <a href="https://tools.ietf.org/html/draft-zyp-json-schema-04" target="_blank">JSON schema draft 4</a> model.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		/// <summary>
		/// [Required] The content-type for the model.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRequestValidatorBody
	{
		
		/// <summary>
		/// The name of the to-be-created <a>RequestValidator</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// A Boolean flag to indicate whether to validate request body according to the configured model schema for the method (<code>true</code>) or not (<code>false</code>).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ValidateRequestBody { get; set; }
		
		/// <summary>
		/// A Boolean flag to indicate whether to validate request parameters, <code>true</code>, or not <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ValidateRequestParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateResourceBody
	{
		
		/// <summary>
		/// The last path segment for this resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PathPart { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRestApiBody
	{
		
		/// <summary>
		/// [Required] The name of the <a>RestApi</a>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the <a>RestApi</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// A version identifier for the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		/// <summary>
		/// The ID of the <a>RestApi</a> that you want to clone from.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CloneFrom { get; set; }
		
		/// <summary>
		/// The list of binary media types supported by the <a>RestApi</a>. By default, the <a>RestApi</a> supports only UTF-8-encoded text payloads.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] BinaryMediaTypes { get; set; }
		
		/// <summary>
		/// A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinimumCompressionSize { get; set; }
		
		/// <summary>
		/// The source of the API key for metering requests according to a usage plan. Valid values are: <ul><li><code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. </li><li><code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.</li></ul> 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateRestApiBodyApiKeySource ApiKeySource { get; set; }
		
		/// <summary>
		/// The endpoint configuration to indicate the types of endpoints an API (<a>RestApi</a>) or its custom domain name (<a>DomainName</a>) has. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EndpointConfiguration { get; set; }
		
		/// <summary>
		/// A stringified JSON policy document that applies to this RestApi regardless of the caller and <a>Method</a> configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Policy { get; set; }
		
		/// <summary>
		/// The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateRestApiBodyApiKeySource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEADER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateStageBody
	{
		
		/// <summary>
		/// [Required] The name for the <a>Stage</a> resource. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StageName { get; set; }
		
		/// <summary>
		/// [Required] The identifier of the <a>Deployment</a> resource for the <a>Stage</a> resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		/// <summary>
		/// The description of the <a>Stage</a> resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Whether cache clustering is enabled for the stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CacheClusterEnabled { get; set; }
		
		/// <summary>
		/// Returns the size of the <b>CacheCluster</b>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateStageBodyCacheClusterSize CacheClusterSize { get; set; }
		
		/// <summary>
		/// A map that defines the stage variables for the new <a>Stage</a> resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Variables { get; set; }
		
		/// <summary>
		/// The version of the associated API documentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentationVersion { get; set; }
		
		/// <summary>
		/// Configuration settings of a canary deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CanarySettings { get; set; }
		
		/// <summary>
		/// Specifies whether active tracing with X-ray is enabled for the <a>Stage</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TracingEnabled { get; set; }
		
		/// <summary>
		/// The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateStageBodyCacheClusterSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		0.5 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		1.6 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		6.1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		13.5 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		28.4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		58.2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		118 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		237 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUsagePlanBody
	{
		
		/// <summary>
		/// [Required] The name of the usage plan.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the usage plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The associated API stages of the usage plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ApiStage[] ApiStages { get; set; }
		
		/// <summary>
		///  The API request rate limits.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Throttle { get; set; }
		
		/// <summary>
		/// Quotas configured for a usage plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Quota { get; set; }
		
		/// <summary>
		/// The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUsagePlanKeyBody
	{
		
		/// <summary>
		/// [Required] The identifier of a <a>UsagePlanKey</a> resource for a plan customer.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyId { get; set; }
		
		/// <summary>
		/// [Required] The type of a <a>UsagePlanKey</a> resource for a plan customer.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpcLinkBody
	{
		
		/// <summary>
		/// [Required] The name used to label and identify the VPC link.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the VPC link.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// [Required] The ARN of the network load balancer of the VPC targeted by the VPC link. The network load balancer must be owned by the same AWS account of the API owner.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] TargetArns { get; set; }
		
		/// <summary>
		/// The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestInvokeAuthorizerBody
	{
		
		/// <summary>
		/// [Required] A key-value map of headers to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, should be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Headers { get; set; }
		
		/// <summary>
		/// [Optional] The headers as a map from string to list of values to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MultiValueHeaders { get; set; }
		
		/// <summary>
		/// [Optional] The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PathWithQueryString { get; set; }
		
		/// <summary>
		/// [Optional] The simulated request body of an incoming invocation request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
		
		/// <summary>
		/// A key-value map of stage variables to simulate an invocation on a deployed <a>Stage</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StageVariables { get; set; }
		
		/// <summary>
		/// [Optional] A key-value map of additional context variables.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalContext { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutGatewayResponseBody
	{
		
		/// <summary>
		/// The status code.
		/// Pattern: [1-5]\d\d
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StatusCode { get; set; }
		
		/// <summary>
		/// <p><p>Response parameters (paths, query strings and headers) of the <a>GatewayResponse</a> as a string-to-string map of key-value pairs.</p></p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResponseParameters { get; set; }
		
		/// <summary>
		/// <p><p>Response templates of the <a>GatewayResponse</a> as a string-to-string map of key-value pairs.</p></p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResponseTemplates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutIntegrationBody
	{
		
		/// <summary>
		/// The integration type. The valid value is <code>HTTP</code> for integrating an API method with an HTTP backend; <code>AWS</code> with any AWS service endpoints; <code>MOCK</code> for testing without actually invoking the backend; <code>HTTP_PROXY</code> for integrating with the HTTP proxy integration; <code>AWS_PROXY</code> for integrating with the Lambda proxy integration. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PutIntegrationBodyType Type { get; set; }
		
		/// <summary>
		/// Specifies a put integration HTTP method. When the integration type is HTTP or AWS, this field is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HttpMethod { get; set; }
		
		/// <summary>
		/// <p>Specifies Uniform Resource Identifier (URI) of the integration endpoint.</p> <ul> <li><p> For <code>HTTP</code> or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the <a target="_blank" href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier">RFC-3986 specification</a>, for either standard integration, where <code>connectionType</code> is not <code>VPC_LINK</code>, or private integration, where <code>connectionType</code> is <code>VPC_LINK</code>. For a private HTTP integration, the URI is not used for routing. </p> </li> <li><p> For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>. Here, <code>{Region}</code> is the API Gateway region (e.g., <code>us-east-1</code>); <code>{service}</code> is the name of the integrated AWS service (e.g., <code>s3</code>); and <code>{subdomain}</code> is a designated subdomain supported by certain AWS service for fast host-name lookup. <code>action</code> can be used for an AWS service action-based API, using an <code>Action={name}&amp;{p1}={v1}&amp;p2={v2}...</code> query string. The ensuing <code>{service_api}</code> refers to a supported action <code>{name}</code> plus any required input parameters. Alternatively, <code>path</code> can be used for an AWS service path-based API. The ensuing <code>service_api</code> refers to the path to an AWS service resource, including the region of the integrated AWS service, if applicable. For example, for integration with the S3 API of <code><a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectGET.html">GetObject</a></code>, the <code>uri</code> can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code></p> </li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		/// <summary>
		/// The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PutIntegrationBodyConnectionType ConnectionType { get; set; }
		
		/// <summary>
		/// The (<a href="https://docs.aws.amazon.com/apigateway/api-reference/resource/vpc-link/#id"><code>id</code></a>) of the <a>VpcLink</a> used for the integration when <code>connectionType=VPC_LINK</code> and undefined, otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		/// <summary>
		/// Specifies whether credentials are required for a put integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Credentials { get; set; }
		
		/// <summary>
		/// A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RequestParameters { get; set; }
		
		/// <summary>
		/// Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RequestTemplates { get; set; }
		
		/// <summary>
		/// <p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the <code>requestTemplates</code> property on the Integration resource. There are three valid values: <code>WHEN_NO_MATCH</code>, <code>WHEN_NO_TEMPLATES</code>, and <code>NEVER</code>. </p> <ul> <li><p><code>WHEN_NO_MATCH</code> passes the request body for unmapped content types through to the integration back end without transformation.</p></li> <li><p><code>NEVER</code> rejects unmapped content types with an HTTP 415 'Unsupported Media Type' response.</p></li> <li><p><code>WHEN_NO_TEMPLATES</code> allows pass-through when the integration has NO content types mapped to templates. However if there is at least one content type defined, unmapped content types will be rejected with the same 415 response.</p></li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PassthroughBehavior { get; set; }
		
		/// <summary>
		/// A list of request parameters whose values are to be cached.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CacheNamespace { get; set; }
		
		/// <summary>
		/// An API-specific tag group of related cached parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] CacheKeyParameters { get; set; }
		
		/// <summary>
		/// <p>Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <ul> <li><p><code>CONVERT_TO_BINARY</code>: Converts a request payload from a Base64-encoded string to the corresponding binary blob.</p></li> <li><p><code>CONVERT_TO_TEXT</code>: Converts a request payload from a binary blob to a Base64-encoded string.</p></li> </ul> <p>If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PutIntegrationBodyContentHandling ContentHandling { get; set; }
		
		/// <summary>
		/// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeoutInMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TlsConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutIntegrationBodyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOCK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP_PROXY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_PROXY = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutIntegrationBodyConnectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPC_LINK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutIntegrationBodyContentHandling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERT_TO_BINARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERT_TO_TEXT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutIntegrationResponseBody
	{
		
		/// <summary>
		/// Specifies the selection pattern of a put integration response.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SelectionPattern { get; set; }
		
		/// <summary>
		/// A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResponseParameters { get; set; }
		
		/// <summary>
		/// Specifies a put integration response's templates.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResponseTemplates { get; set; }
		
		/// <summary>
		/// <p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <ul> <li><p><code>CONVERT_TO_BINARY</code>: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p></li> <li><p><code>CONVERT_TO_TEXT</code>: Converts a response payload from a binary blob to a Base64-encoded string.</p></li> </ul> <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PutIntegrationResponseBodyContentHandling ContentHandling { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutIntegrationResponseBodyContentHandling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERT_TO_BINARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERT_TO_TEXT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutMethodBody
	{
		
		/// <summary>
		/// [Required] The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizationType { get; set; }
		
		/// <summary>
		/// Specifies the identifier of an <a>Authorizer</a> to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AuthorizerId { get; set; }
		
		/// <summary>
		/// Specifies whether the method required a valid <a>ApiKey</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApiKeyRequired { get; set; }
		
		/// <summary>
		/// A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OperationName { get; set; }
		
		/// <summary>
		/// A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in <a>Integration</a> to be mapped to integration request parameters or body-mapping templates.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RequestParameters { get; set; }
		
		/// <summary>
		/// Specifies the <a>Model</a> resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a <a>Model</a> name as the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RequestModels { get; set; }
		
		/// <summary>
		/// The identifier of a <a>RequestValidator</a> for validating the method request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RequestValidatorId { get; set; }
		
		/// <summary>
		/// A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public String[] AuthorizationScopes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestInvokeMethodBody
	{
		
		/// <summary>
		/// The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PathWithQueryString { get; set; }
		
		/// <summary>
		/// The simulated request body of an incoming invocation request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
		
		/// <summary>
		/// A key-value map of headers to simulate an incoming invocation request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Headers { get; set; }
		
		/// <summary>
		/// The headers as a map from string to list of values to simulate an incoming invocation request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MultiValueHeaders { get; set; }
		
		/// <summary>
		/// A <a>ClientCertificate</a> identifier to use in the test invocation. API Gateway will use the certificate when making the HTTPS request to the defined back-end endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientCertificateId { get; set; }
		
		/// <summary>
		/// A key-value map of stage variables to simulate an invocation on a deployed <a>Stage</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StageVariables { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutMethodResponseBody
	{
		
		/// <summary>
		/// A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResponseParameters { get; set; }
		
		/// <summary>
		/// Specifies the <a>Model</a> resources used for the response's content type. Response models are represented as a key/value map, with a content type as the key and a <a>Model</a> name as the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResponseModels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRestApiBody
	{
		
		/// <summary>
		/// [Required] The PUT request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 2MB.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GenerateClientCertificateBody
	{
		
		/// <summary>
		/// The description of the <a>ClientCertificate</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		/// [Required] The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportApiKeysBody
	{
		
		/// <summary>
		/// The payload of the POST request to import API keys. For the payload format, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-key-file-format.html">API Key File Format</a>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportRestApiBody
	{
		
		/// <summary>
		/// [Required] The POST request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 2MB.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
