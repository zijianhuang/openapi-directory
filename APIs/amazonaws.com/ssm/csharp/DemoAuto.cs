//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddTagsToResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AddTagsToResourceRequestResourceType ResourceType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Maximum items: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AddTagsToResourceRequestResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Document = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManagedInstance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MaintenanceWindow = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Parameter = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PatchBaseline = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OpsItem = 5,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelCommandRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string CommandId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public InstanceId[] InstanceIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelMaintenanceWindowExecutionResult
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowExecutionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelMaintenanceWindowExecutionRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowExecutionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateActivationResult
	{
		
		/// <summary>
		/// Pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ActivationId { get; set; }
		
		/// <summary>
		/// Max length: 250
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(250, MinimumLength=20)]
		public string ActivationCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateActivationRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string DefaultInstanceName { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string IamRole { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> RegistrationLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAssociationResult
	{
		
		/// <summary>
		/// Describes the parameters for a document.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AssociationDescription AssociationDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAssociationRequest
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameters Parameters { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ScheduleExpression { get; set; }
		
		/// <summary>
		/// An S3 bucket where you want to store the results of this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceAssociationOutputLocation OutputLocation { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationName { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string AutomationTargetParameterName { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxErrors { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxConcurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateAssociationRequestComplianceSeverity ComplianceSeverity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateAssociationRequestSyncCompliance SyncCompliance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplyOnlyAtCronInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateAssociationRequestComplianceSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateAssociationRequestSyncCompliance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAssociationBatchResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AssociationDescription[] Successful { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FailedCreateAssociation[] Failed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAssociationBatchRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public CreateAssociationBatchRequestEntry[] Entries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDocumentResult
	{
		
		/// <summary>
		/// Describes a Systems Manager document. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentDescription DocumentDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDocumentRequest
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Content { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DocumentRequires[] Requires { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public AttachmentsSource[] Attachments { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{1,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VersionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateDocumentRequestDocumentType DocumentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateDocumentRequestDocumentFormat DocumentFormat { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// Pattern: ^\/[\w\.\-\:\/]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string TargetType { get; set; }
		
		/// <summary>
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDocumentRequestDocumentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Command = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Policy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Automation = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Session = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Package = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ApplicationConfiguration = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ApplicationConfigurationSchema = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentStrategy = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChangeCalendar = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDocumentRequestDocumentFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YAML = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMaintenanceWindowResult
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMaintenanceWindowRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndDate { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleTimezone { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 24
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 24)]
		public int Duration { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 23
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 23)]
		public int Cutoff { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool AllowUnassociatedTargets { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateOpsItemResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OpsItemId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateOpsItemRequest
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpsItemOperationalData OperationalData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpsItemNotification[] Notifications { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 5)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RelatedOpsItem[] RelatedOpsItems { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Source { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Title { get; set; }
		
		/// <summary>
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Category { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePatchBaselineResult
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePatchBaselineRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CreatePatchBaselineRequestOperatingSystem OperatingSystem { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// A set of patch filters, typically used for approval rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchFilterGroup GlobalFilters { get; set; }
		
		/// <summary>
		/// A set of rules defining the approval rules for a patch baseline.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchRuleGroup ApprovalRules { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public PatchId[] ApprovedPatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreatePatchBaselineRequestApprovedPatchesComplianceLevel ApprovedPatchesComplianceLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApprovedPatchesEnableNonSecurity { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public PatchId[] RejectedPatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreatePatchBaselineRequestRejectedPatchesAction RejectedPatchesAction { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public PatchSource[] Sources { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreatePatchBaselineRequestOperatingSystem
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UBUNTU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDHAT_ENTERPRISE_LINUX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTOS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORACLE_LINUX = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIAN = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreatePatchBaselineRequestApprovedPatchesComplianceLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFORMATIONAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreatePatchBaselineRequestRejectedPatchesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_AS_DEPENDENCY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateResourceDataSyncRequest
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SyncName { get; set; }
		
		/// <summary>
		/// Information about the target S3 bucket for the Resource Data Sync.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceDataSyncS3Destination S3Destination { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SyncType { get; set; }
		
		/// <summary>
		/// Information about the source of the data included in the resource data sync.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceDataSyncSource SyncSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteActivationRequest
	{
		
		/// <summary>
		/// Pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ActivationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteAssociationRequest
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDocumentRequest
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{1,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VersionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteInventoryResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeletionId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^(AWS|Custom):.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TypeName { get; set; }
		
		/// <summary>
		/// Information about the delete operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InventoryDeletionSummary DeletionSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteInventoryRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^(AWS|Custom):.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeleteInventoryRequestSchemaDeleteOption SchemaDeleteOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeleteInventoryRequestSchemaDeleteOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DisableSchema = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteSchema = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteMaintenanceWindowResult
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteMaintenanceWindowRequest
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteParameterRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteParametersResult
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public PSParameterName[] DeletedParameters { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public PSParameterName[] InvalidParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteParametersRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public PSParameterName[] Names { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeletePatchBaselineResult
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeletePatchBaselineRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteResourceDataSyncRequest
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SyncName { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SyncType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterManagedInstanceRequest
	{
		
		/// <summary>
		/// Pattern: ^mi-[0-9a-f]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterPatchBaselineForPatchGroupResult
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string PatchGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterPatchBaselineForPatchGroupRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string PatchGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterTargetFromMaintenanceWindowResult
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowTargetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterTargetFromMaintenanceWindowRequest
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowTargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Safe { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterTaskFromMaintenanceWindowResult
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowTaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterTaskFromMaintenanceWindowRequest
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowTaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeActivationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Activation[] ActivationList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeActivationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeActivationsFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAssociationResult
	{
		
		/// <summary>
		/// Describes the parameters for a document.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AssociationDescription AssociationDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAssociationRequest
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST)|([1-9][0-9]*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAssociationExecutionTargetsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AssociationExecutionTarget[] AssociationExecutionTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAssociationExecutionTargetsRequest
	{
		
		/// <summary>
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		/// <summary>
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public AssociationExecutionTargetsFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAssociationExecutionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AssociationExecution[] AssociationExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAssociationExecutionsRequest
	{
		
		/// <summary>
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public AssociationExecutionFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAutomationExecutionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutomationExecutionMetadata[] AutomationExecutionMetadataList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAutomationExecutionsRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public AutomationExecutionFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAutomationStepExecutionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StepExecution[] StepExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAutomationStepExecutionsRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string AutomationExecutionId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public StepExecutionFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReverseOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAvailablePatchesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Patch[] Patches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAvailablePatchesRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public PatchOrchestratorFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDocumentResult
	{
		
		/// <summary>
		/// Describes a Systems Manager document. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentDescription Document { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDocumentRequest
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{1,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VersionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDocumentPermissionResponse
	{
		
		/// <summary>
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public AccountId[] AccountIds { get; set; }
		
		/// <summary>
		/// A list of of AWS accounts where the current document is shared and the version shared with each account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountSharingInfo[] AccountSharingInfoList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDocumentPermissionRequest
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DescribeDocumentPermissionRequestPermissionType PermissionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeDocumentPermissionRequestPermissionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Share = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEffectiveInstanceAssociationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceAssociation[] Associations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEffectiveInstanceAssociationsRequest
	{
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 5)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEffectivePatchesForPatchBaselineResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EffectivePatch[] EffectivePatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEffectivePatchesForPatchBaselineRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstanceAssociationsStatusResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceAssociationStatusInfo[] InstanceAssociationStatusInfos { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstanceAssociationsStatusRequest
	{
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstanceInformationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceInformation[] InstanceInformationList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstanceInformationRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		public InstanceInformationFilter[] InstanceInformationFilterList { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		public InstanceInformationStringFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstancePatchStatesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstancePatchState[] InstancePatchStates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstancePatchStatesRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public InstanceId[] InstanceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 10
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(10, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstancePatchStatesForPatchGroupResult
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public InstancePatchState[] InstancePatchStates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstancePatchStatesForPatchGroupRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string PatchGroup { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public InstancePatchStateFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 10
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(10, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstancePatchesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PatchComplianceData[] Patches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstancePatchesRequest
	{
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public PatchOrchestratorFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 10
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(10, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInventoryDeletionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InventoryDeletionStatusItem[] InventoryDeletions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInventoryDeletionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeletionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMaintenanceWindowExecutionTaskInvocationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowExecutionTaskInvocationIdentity[] WindowExecutionTaskInvocationIdentities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMaintenanceWindowExecutionTaskInvocationsRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowExecutionId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string TaskId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public MaintenanceWindowFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 10
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(10, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMaintenanceWindowExecutionTasksResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowExecutionTaskIdentity[] WindowExecutionTaskIdentities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMaintenanceWindowExecutionTasksRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowExecutionId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public MaintenanceWindowFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 10
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(10, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMaintenanceWindowExecutionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowExecution[] WindowExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMaintenanceWindowExecutionsRequest
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public MaintenanceWindowFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 10
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(10, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMaintenanceWindowScheduleResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledWindowExecution[] ScheduledWindowExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMaintenanceWindowScheduleRequest
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeMaintenanceWindowScheduleRequestResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public PatchOrchestratorFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeMaintenanceWindowScheduleRequestResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_GROUP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMaintenanceWindowTargetsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowTarget[] Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMaintenanceWindowTargetsRequest
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public MaintenanceWindowFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 10
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(10, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMaintenanceWindowTasksResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowTask[] Tasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMaintenanceWindowTasksRequest
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public MaintenanceWindowFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 10
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(10, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMaintenanceWindowsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowIdentity[] WindowIdentities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMaintenanceWindowsRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public MaintenanceWindowFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 10
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(10, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMaintenanceWindowsForTargetResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowIdentityForTarget[] WindowIdentities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMaintenanceWindowsForTargetRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DescribeMaintenanceWindowsForTargetRequestResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeMaintenanceWindowsForTargetRequestResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_GROUP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeOpsItemsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpsItemSummary[] OpsItemSummaries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeOpsItemsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OpsItemFilter[] OpsItemFilters { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeParametersResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterMetadata[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeParametersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ParametersFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterStringFilter[] ParameterFilters { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePatchBaselinesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PatchBaselineIdentity[] BaselineIdentities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePatchBaselinesRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public PatchOrchestratorFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePatchGroupStateResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Instances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstancesWithInstalledPatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstancesWithInstalledOtherPatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstancesWithInstalledPendingRebootPatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstancesWithInstalledRejectedPatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstancesWithMissingPatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstancesWithFailedPatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstancesWithNotApplicablePatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstancesWithUnreportedNotApplicablePatches { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePatchGroupStateRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string PatchGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePatchGroupsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PatchGroupPatchBaselineMapping[] Mappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePatchGroupsRequest
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public PatchOrchestratorFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePatchPropertiesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PatchPropertyEntry[] Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePatchPropertiesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DescribePatchPropertiesRequestOperatingSystem OperatingSystem { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DescribePatchPropertiesRequestProperty Property { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribePatchPropertiesRequestPatchSet PatchSet { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribePatchPropertiesRequestOperatingSystem
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UBUNTU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDHAT_ENTERPRISE_LINUX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTOS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORACLE_LINUX = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIAN = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribePatchPropertiesRequestProperty
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT_FAMILY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLASSIFICATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSRC_SEVERITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIORITY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVERITY = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribePatchPropertiesRequestPatchSet
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSessionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Session[] Sessions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSessionsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DescribeSessionsRequestState State { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 200)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public SessionFilter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeSessionsRequestState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		History = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAutomationExecutionResult
	{
		
		/// <summary>
		/// Detailed information about the current state of an individual Automation execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutomationExecution AutomationExecution { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAutomationExecutionRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string AutomationExecutionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCalendarStateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GetCalendarStateResponseState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AtTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextTransitionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetCalendarStateResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCalendarStateRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CalendarNameOrARN[] CalendarNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AtTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCommandInvocationResult
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string CommandId { get; set; }
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public string Comment { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentName { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		/// <summary>
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=4)]
		public string PluginName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ResponseCode { get; set; }
		
		/// <summary>
		/// Pattern: ^([\-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d(?!:))?)?(\17[0-5]\d([\.,]\d)?)?([zZ]|([\-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionStartDateTime { get; set; }
		
		/// <summary>
		/// Pattern: ^([\-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d(?!:))?)?(\17[0-5]\d([\.,]\d)?)?([zZ]|([\-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionElapsedTime { get; set; }
		
		/// <summary>
		/// Pattern: ^([\-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d(?!:))?)?(\17[0-5]\d([\.,]\d)?)?([zZ]|([\-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionEndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetCommandInvocationResultStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=0)]
		public string StatusDetails { get; set; }
		
		/// <summary>
		/// Max length: 24000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(24000)]
		public string StandardOutputContent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StandardOutputUrl { get; set; }
		
		/// <summary>
		/// Max length: 8000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8000)]
		public string StandardErrorContent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StandardErrorUrl { get; set; }
		
		/// <summary>
		/// Configuration options for sending command output to CloudWatch Logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchOutputConfig CloudWatchOutputConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetCommandInvocationResultStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delayed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelling = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCommandInvocationRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string CommandId { get; set; }
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=4)]
		public string PluginName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetConnectionStatusResponse
	{
		
		/// <summary>
		/// Max length: 400
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(400, MinimumLength=1)]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetConnectionStatusResponseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetConnectionStatusResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Connected = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotConnected = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetConnectionStatusRequest
	{
		
		/// <summary>
		/// Max length: 400
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(400, MinimumLength=1)]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDefaultPatchBaselineResult
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetDefaultPatchBaselineResultOperatingSystem OperatingSystem { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetDefaultPatchBaselineResultOperatingSystem
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UBUNTU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDHAT_ENTERPRISE_LINUX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTOS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORACLE_LINUX = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIAN = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDefaultPatchBaselineRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GetDefaultPatchBaselineRequestOperatingSystem OperatingSystem { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetDefaultPatchBaselineRequestOperatingSystem
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UBUNTU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDHAT_ENTERPRISE_LINUX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTOS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORACLE_LINUX = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIAN = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeployablePatchSnapshotForInstanceResult
	{
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotDownloadUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Product { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeployablePatchSnapshotForInstanceRequest
	{
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string SnapshotId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDocumentResult
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{1,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VersionName { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		/// <summary>
		/// The status of a document.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GetDocumentResultStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusInformation { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetDocumentResultDocumentType DocumentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetDocumentResultDocumentFormat DocumentFormat { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DocumentRequires[] Requires { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttachmentContent[] AttachmentsContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetDocumentResultStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetDocumentResultDocumentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Command = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Policy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Automation = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Session = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Package = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ApplicationConfiguration = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ApplicationConfigurationSchema = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentStrategy = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChangeCalendar = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetDocumentResultDocumentFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YAML = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDocumentRequest
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{1,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VersionName { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetDocumentRequestDocumentFormat DocumentFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetDocumentRequestDocumentFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YAML = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInventoryResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InventoryResultEntity[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInventoryRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public InventoryFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public InventoryAggregator[] Aggregators { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public ResultAttribute[] ResultAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInventorySchemaResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InventoryItemSchema[] Schemas { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInventorySchemaRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=0)]
		public string TypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 50
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(50, 200)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Aggregator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SubType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMaintenanceWindowResult
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndDate { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleTimezone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextExecutionTime { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 24
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 24)]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 23
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 23)]
		public System.Nullable<System.Int32> Cutoff { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowUnassociatedTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ModifiedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMaintenanceWindowRequest
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMaintenanceWindowExecutionResult
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowExecutionTaskId[] TaskIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetMaintenanceWindowExecutionResultStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 250
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(250, MinimumLength=0)]
		public string StatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetMaintenanceWindowExecutionResultStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED_OVERLAPPING = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMaintenanceWindowExecutionRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowExecutionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMaintenanceWindowExecutionTaskResult
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowExecutionId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string TaskExecutionId { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string TaskArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetMaintenanceWindowExecutionTaskResultType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowTaskParameters[] TaskParameters { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxConcurrency { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetMaintenanceWindowExecutionTaskResultStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 250
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(250, MinimumLength=0)]
		public string StatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetMaintenanceWindowExecutionTaskResultType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN_COMMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_FUNCTIONS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetMaintenanceWindowExecutionTaskResultStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED_OVERLAPPING = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMaintenanceWindowExecutionTaskRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowExecutionId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string TaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMaintenanceWindowExecutionTaskInvocationResult
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowExecutionId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string TaskExecutionId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string InvocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetMaintenanceWindowExecutionTaskInvocationResultTaskType TaskType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetMaintenanceWindowExecutionTaskInvocationResultStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 250
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(250, MinimumLength=0)]
		public string StatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string OwnerInformation { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36)]
		public string WindowTargetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetMaintenanceWindowExecutionTaskInvocationResultTaskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN_COMMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_FUNCTIONS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetMaintenanceWindowExecutionTaskInvocationResultStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED_OVERLAPPING = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMaintenanceWindowExecutionTaskInvocationRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowExecutionId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string TaskId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string InvocationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMaintenanceWindowTaskResult
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowTaskId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string TaskArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetMaintenanceWindowTaskResultTaskType TaskType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowTaskParameters TaskParameters { get; set; }
		
		/// <summary>
		/// The parameters for task execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowTaskInvocationParameters TaskInvocationParameters { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxConcurrency { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxErrors { get; set; }
		
		/// <summary>
		/// <p>Information about an S3 bucket to write instance-level logs to.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoggingInfo LoggingInfo { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetMaintenanceWindowTaskResultTaskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN_COMMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_FUNCTIONS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMaintenanceWindowTaskRequest
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowTaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOpsItemResponse
	{
		
		/// <summary>
		/// Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their AWS resources. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">AWS Systems Manager OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OpsItem OpsItem { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOpsItemRequest
	{
		
		/// <summary>
		/// Pattern: ^(oi)-[0-9a-f]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OpsItemId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOpsSummaryResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OpsEntity[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOpsSummaryRequest
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SyncName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public OpsFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public OpsAggregator[] Aggregators { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OpsResultAttribute[] ResultAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetParameterResult
	{
		
		/// <summary>
		/// An Systems Manager parameter in Parameter Store.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Parameter Parameter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetParameterRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> WithDecryption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetParameterHistoryResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterHistory[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetParameterHistoryRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> WithDecryption { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetParametersResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public PSParameterName[] InvalidParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetParametersRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public PSParameterName[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> WithDecryption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetParametersByPathResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetParametersByPathRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Recursive { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterStringFilter[] ParameterFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> WithDecryption { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPatchBaselineResult
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetPatchBaselineResultOperatingSystem OperatingSystem { get; set; }
		
		/// <summary>
		/// A set of patch filters, typically used for approval rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchFilterGroup GlobalFilters { get; set; }
		
		/// <summary>
		/// A set of rules defining the approval rules for a patch baseline.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchRuleGroup ApprovalRules { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public PatchId[] ApprovedPatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetPatchBaselineResultApprovedPatchesComplianceLevel ApprovedPatchesComplianceLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApprovedPatchesEnableNonSecurity { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public PatchId[] RejectedPatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetPatchBaselineResultRejectedPatchesAction RejectedPatchesAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PatchGroup[] PatchGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ModifiedDate { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public PatchSource[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetPatchBaselineResultOperatingSystem
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UBUNTU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDHAT_ENTERPRISE_LINUX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTOS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORACLE_LINUX = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIAN = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetPatchBaselineResultApprovedPatchesComplianceLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFORMATIONAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetPatchBaselineResultRejectedPatchesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_AS_DEPENDENCY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPatchBaselineRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPatchBaselineForPatchGroupResult
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string PatchGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetPatchBaselineForPatchGroupResultOperatingSystem OperatingSystem { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetPatchBaselineForPatchGroupResultOperatingSystem
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UBUNTU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDHAT_ENTERPRISE_LINUX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTOS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORACLE_LINUX = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIAN = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPatchBaselineForPatchGroupRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string PatchGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetPatchBaselineForPatchGroupRequestOperatingSystem OperatingSystem { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetPatchBaselineForPatchGroupRequestOperatingSystem
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UBUNTU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDHAT_ENTERPRISE_LINUX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTOS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORACLE_LINUX = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIAN = 8,
	}
	
	/// <summary>
	/// The query result body of the GetServiceSetting API action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetServiceSettingResult
	{
		
		/// <summary>
		/// <p>The service setting data structure.</p> <p> <code>ServiceSetting</code> is an account-level setting for an AWS service. This setting defines how a user interacts with or uses a service or a feature of a service. For example, if an AWS service charges money to the account based on feature or service usage, then the AWS service team might create a default setting of "false". This means the user can't use this feature unless they change the setting to "true" and intentionally opt in for a paid feature.</p> <p>Services map a <code>SettingId</code> object to a setting value. AWS services teams define the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>, but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code> permission for the setting. Use the <a>UpdateServiceSetting</a> API action to change the default setting. Or, use the <a>ResetServiceSetting</a> to change the value back to the original value defined by the AWS service team.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceSetting ServiceSetting { get; set; }
	}
	
	/// <summary>
	/// The request body of the GetServiceSetting API action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetServiceSettingRequest
	{
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string SettingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LabelParameterVersionResult
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public ParameterLabel[] InvalidLabels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ParameterVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LabelParameterVersionRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ParameterVersion { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public ParameterLabel[] Labels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAssociationVersionsResult
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public AssociationVersionInfo[] AssociationVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAssociationVersionsRequest
	{
		
		/// <summary>
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAssociationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Association[] Associations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAssociationsRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public AssociationFilter[] AssociationFilterList { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListCommandInvocationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CommandInvocation[] CommandInvocations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListCommandInvocationsRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string CommandId { get; set; }
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public CommandFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListCommandsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Command[] Commands { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListCommandsRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string CommandId { get; set; }
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public CommandFilter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListComplianceItemsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceItem[] ComplianceItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListComplianceItemsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceStringFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ComplianceResourceId[] ResourceIds { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ComplianceResourceType[] ResourceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListComplianceSummariesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceSummaryItem[] ComplianceSummaryItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListComplianceSummariesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceStringFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDocumentVersionsResult
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DocumentVersionInfo[] DocumentVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDocumentVersionsRequest
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDocumentsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentIdentifier[] DocumentIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDocumentsRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DocumentFilter[] DocumentFilterList { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public DocumentKeyValuesFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListInventoryEntriesResult
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^(AWS|Custom):.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TypeName { get; set; }
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Pattern: ^([0-9]{1,6})(\.[0-9]{1,6})$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemaVersion { get; set; }
		
		/// <summary>
		/// Pattern: ^(20)[0-9][0-9]-(0[1-9]|1[012])-([12][0-9]|3[01]|0[1-9])(T)(2[0-3]|[0-1][0-9])(:[0-5][0-9])(:[0-5][0-9])(Z)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CaptureTime { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public InventoryItemEntry[] Entries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListInventoryEntriesRequest
	{
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^(AWS|Custom):.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TypeName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public InventoryFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListResourceComplianceSummariesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceComplianceSummaryItem[] ResourceComplianceSummaryItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListResourceComplianceSummariesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceStringFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListResourceDataSyncResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceDataSyncItem[] ResourceDataSyncItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListResourceDataSyncRequest
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SyncType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResult
	{
		
		/// <summary>
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public Tag[] TagList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListTagsForResourceRequestResourceType ResourceType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListTagsForResourceRequestResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Document = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManagedInstance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MaintenanceWindow = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Parameter = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PatchBaseline = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OpsItem = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDocumentPermissionRequest
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModifyDocumentPermissionRequestPermissionType PermissionType { get; set; }
		
		/// <summary>
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public AccountId[] AccountIdsToAdd { get; set; }
		
		/// <summary>
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public AccountId[] AccountIdsToRemove { get; set; }
		
		/// <summary>
		/// The document version shared with other accounts. You can share <code>Latest</code>, <code>Default</code> or <code>All versions</code>.
		/// Max length: 8
		/// Pattern: ([$]LATEST|[$]DEFAULT|[$]ALL)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string SharedDocumentVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ModifyDocumentPermissionRequestPermissionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Share = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutComplianceItemsRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [A-Za-z0-9_\-]\w+|Custom:[a-zA-Z0-9_\-]\w+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ComplianceType { get; set; }
		
		/// <summary>
		/// A summary of the call execution that includes an execution ID, the type of execution (for example, <code>Command</code>), and the date/time of the execution using a datetime object that is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ComplianceExecutionSummary ExecutionSummary { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 10000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public ComplianceItemEntry[] Items { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ItemContentHash { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PutComplianceItemsRequestUploadType UploadType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutComplianceItemsRequestUploadType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutInventoryResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutInventoryRequest
	{
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 30
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public InventoryItem[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutParameterResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PutParameterResultTier Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutParameterResultTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Advanced = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Intelligent-Tiering = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutParameterRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PutParameterRequestType Type { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([a-zA-Z0-9:/_-]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string KeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Overwrite { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string AllowedPattern { get; set; }
		
		/// <summary>
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PutParameterRequestTier Tier { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096, MinimumLength=1)]
		public string Policies { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=0)]
		public string DataType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutParameterRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringList = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecureString = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutParameterRequestTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Advanced = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Intelligent-Tiering = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterDefaultPatchBaselineResult
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterDefaultPatchBaselineRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterPatchBaselineForPatchGroupResult
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string PatchGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterPatchBaselineForPatchGroupRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string PatchGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterTargetWithMaintenanceWindowResult
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowTargetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterTargetWithMaintenanceWindowRequest
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RegisterTargetWithMaintenanceWindowRequestResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string OwnerInformation { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegisterTargetWithMaintenanceWindowRequestResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_GROUP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterTaskWithMaintenanceWindowResult
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowTaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterTaskWithMaintenanceWindowRequest
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string TaskArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRoleArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RegisterTaskWithMaintenanceWindowRequestTaskType TaskType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowTaskParameters TaskParameters { get; set; }
		
		/// <summary>
		/// The parameters for task execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowTaskInvocationParameters TaskInvocationParameters { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxConcurrency { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxErrors { get; set; }
		
		/// <summary>
		/// <p>Information about an S3 bucket to write instance-level logs to.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoggingInfo LoggingInfo { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegisterTaskWithMaintenanceWindowRequestTaskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN_COMMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_FUNCTIONS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveTagsFromResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RemoveTagsFromResourceRequestResourceType ResourceType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagKey[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RemoveTagsFromResourceRequestResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Document = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManagedInstance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MaintenanceWindow = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Parameter = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PatchBaseline = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OpsItem = 5,
	}
	
	/// <summary>
	/// The result body of the ResetServiceSetting API action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResetServiceSettingResult
	{
		
		/// <summary>
		/// <p>The service setting data structure.</p> <p> <code>ServiceSetting</code> is an account-level setting for an AWS service. This setting defines how a user interacts with or uses a service or a feature of a service. For example, if an AWS service charges money to the account based on feature or service usage, then the AWS service team might create a default setting of "false". This means the user can't use this feature unless they change the setting to "true" and intentionally opt in for a paid feature.</p> <p>Services map a <code>SettingId</code> object to a setting value. AWS services teams define the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>, but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code> permission for the setting. Use the <a>UpdateServiceSetting</a> API action to change the default setting. Or, use the <a>ResetServiceSetting</a> to change the value back to the original value defined by the AWS service team.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceSetting ServiceSetting { get; set; }
	}
	
	/// <summary>
	/// The request body of the ResetServiceSetting API action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResetServiceSettingRequest
	{
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string SettingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResumeSessionResponse
	{
		
		/// <summary>
		/// Max length: 96
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(96, MinimumLength=1)]
		public string SessionId { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=0)]
		public string TokenValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResumeSessionRequest
	{
		
		/// <summary>
		/// Max length: 96
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(96, MinimumLength=1)]
		public string SessionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SendAutomationSignalRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string AutomationExecutionId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SendAutomationSignalRequestSignalType SignalType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomationParameterMap Payload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SendAutomationSignalRequestSignalType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Approve = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reject = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartStep = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StopStep = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resume = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SendCommandResult
	{
		
		/// <summary>
		/// Describes a command request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Command Command { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SendCommandRequest
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public InstanceId[] InstanceIds { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DocumentName { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DocumentHash { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SendCommandRequestDocumentHashType DocumentHashType { get; set; }
		
		/// <summary>
		/// Minimum: 30
		/// Maximum: 2592000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(30, 2592000)]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameters Parameters { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=3)]
		public string OutputS3Region { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string OutputS3BucketName { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string OutputS3KeyPrefix { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxConcurrency { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRoleArn { get; set; }
		
		/// <summary>
		/// Configurations for sending notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NotificationConfig NotificationConfig { get; set; }
		
		/// <summary>
		/// Configuration options for sending command output to CloudWatch Logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchOutputConfig CloudWatchOutputConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SendCommandRequestDocumentHashType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sha256 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sha1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartAssociationsOnceRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public AssociationId[] AssociationIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartAutomationExecutionResult
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string AutomationExecutionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartAutomationExecutionRequest
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DocumentName { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomationParameterMap Parameters { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StartAutomationExecutionRequestMode Mode { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string TargetParameterName { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(300)]
		public TargetMap[] TargetMaps { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxConcurrency { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxErrors { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public TargetLocation[] TargetLocations { get; set; }
		
		/// <summary>
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartAutomationExecutionRequestMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Interactive = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartSessionResponse
	{
		
		/// <summary>
		/// Max length: 96
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(96, MinimumLength=1)]
		public string SessionId { get; set; }
		
		/// <summary>
		/// Max length: 300
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength=0)]
		public string TokenValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartSessionRequest
	{
		
		/// <summary>
		/// Max length: 400
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(400, MinimumLength=1)]
		public string Target { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SessionManagerParameters Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopAutomationExecutionRequest
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string AutomationExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StopAutomationExecutionRequestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StopAutomationExecutionRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancel = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TerminateSessionResponse
	{
		
		/// <summary>
		/// Max length: 96
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(96, MinimumLength=1)]
		public string SessionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TerminateSessionRequest
	{
		
		/// <summary>
		/// Max length: 96
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(96, MinimumLength=1)]
		public string SessionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAssociationResult
	{
		
		/// <summary>
		/// Describes the parameters for a document.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AssociationDescription AssociationDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAssociationRequest
	{
		
		/// <summary>
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameters Parameters { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ScheduleExpression { get; set; }
		
		/// <summary>
		/// An S3 bucket where you want to store the results of this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceAssociationOutputLocation OutputLocation { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationName { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST)|([1-9][0-9]*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationVersion { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string AutomationTargetParameterName { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxErrors { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxConcurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateAssociationRequestComplianceSeverity ComplianceSeverity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateAssociationRequestSyncCompliance SyncCompliance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplyOnlyAtCronInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateAssociationRequestComplianceSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateAssociationRequestSyncCompliance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAssociationStatusResult
	{
		
		/// <summary>
		/// Describes the parameters for a document.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AssociationDescription AssociationDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAssociationStatusRequest
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Describes an association status.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AssociationStatus AssociationStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDocumentResult
	{
		
		/// <summary>
		/// Describes a Systems Manager document. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentDescription DocumentDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDocumentRequest
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Content { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public AttachmentsSource[] Attachments { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{1,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VersionName { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateDocumentRequestDocumentFormat DocumentFormat { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// Pattern: ^\/[\w\.\-\:\/]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string TargetType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateDocumentRequestDocumentFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YAML = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDocumentDefaultVersionResult
	{
		
		/// <summary>
		/// A default version of a document.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentDefaultVersionDescription Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDocumentDefaultVersionRequest
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: (^[1-9][0-9]*$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMaintenanceWindowResult
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndDate { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleTimezone { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 24
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 24)]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 23
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 23)]
		public System.Nullable<System.Int32> Cutoff { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowUnassociatedTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMaintenanceWindowRequest
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndDate { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleTimezone { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 24
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 24)]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 23
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 23)]
		public System.Nullable<System.Int32> Cutoff { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowUnassociatedTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Replace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMaintenanceWindowTargetResult
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowTargetId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string OwnerInformation { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMaintenanceWindowTargetRequest
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowTargetId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string OwnerInformation { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Replace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMaintenanceWindowTaskResult
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowTaskId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string TaskArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowTaskParameters TaskParameters { get; set; }
		
		/// <summary>
		/// The parameters for task execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowTaskInvocationParameters TaskInvocationParameters { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxConcurrency { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxErrors { get; set; }
		
		/// <summary>
		/// <p>Information about an S3 bucket to write instance-level logs to.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoggingInfo LoggingInfo { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMaintenanceWindowTaskRequest
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowTaskId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string TaskArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowTaskParameters TaskParameters { get; set; }
		
		/// <summary>
		/// The parameters for task execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowTaskInvocationParameters TaskInvocationParameters { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxConcurrency { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxErrors { get; set; }
		
		/// <summary>
		/// <p>Information about an S3 bucket to write instance-level logs to.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoggingInfo LoggingInfo { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Replace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateManagedInstanceRoleRequest
	{
		
		/// <summary>
		/// Pattern: ^mi-[0-9a-f]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string IamRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateOpsItemRequest
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpsItemOperationalData OperationalData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] OperationalDataToDelete { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpsItemNotification[] Notifications { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 5)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RelatedOpsItem[] RelatedOpsItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateOpsItemRequestStatus Status { get; set; }
		
		/// <summary>
		/// Pattern: ^(oi)-[0-9a-f]{12}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OpsItemId { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Title { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Category { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateOpsItemRequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resolved = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePatchBaselineResult
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePatchBaselineResultOperatingSystem OperatingSystem { get; set; }
		
		/// <summary>
		/// A set of patch filters, typically used for approval rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchFilterGroup GlobalFilters { get; set; }
		
		/// <summary>
		/// A set of rules defining the approval rules for a patch baseline.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchRuleGroup ApprovalRules { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public PatchId[] ApprovedPatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePatchBaselineResultApprovedPatchesComplianceLevel ApprovedPatchesComplianceLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApprovedPatchesEnableNonSecurity { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public PatchId[] RejectedPatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePatchBaselineResultRejectedPatchesAction RejectedPatchesAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ModifiedDate { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public PatchSource[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdatePatchBaselineResultOperatingSystem
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UBUNTU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDHAT_ENTERPRISE_LINUX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTOS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORACLE_LINUX = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIAN = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdatePatchBaselineResultApprovedPatchesComplianceLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFORMATIONAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdatePatchBaselineResultRejectedPatchesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_AS_DEPENDENCY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePatchBaselineRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// A set of patch filters, typically used for approval rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchFilterGroup GlobalFilters { get; set; }
		
		/// <summary>
		/// A set of rules defining the approval rules for a patch baseline.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchRuleGroup ApprovalRules { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public PatchId[] ApprovedPatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePatchBaselineRequestApprovedPatchesComplianceLevel ApprovedPatchesComplianceLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApprovedPatchesEnableNonSecurity { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public PatchId[] RejectedPatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePatchBaselineRequestRejectedPatchesAction RejectedPatchesAction { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public PatchSource[] Sources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Replace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdatePatchBaselineRequestApprovedPatchesComplianceLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFORMATIONAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdatePatchBaselineRequestRejectedPatchesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_AS_DEPENDENCY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateResourceDataSyncRequest
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SyncName { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SyncType { get; set; }
		
		/// <summary>
		/// Information about the source of the data included in the resource data sync.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceDataSyncSource SyncSource { get; set; }
	}
	
	/// <summary>
	/// The request body of the UpdateServiceSetting API action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateServiceSettingRequest
	{
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string SettingId { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096, MinimumLength=1)]
		public string SettingValue { get; set; }
	}
	
	/// <summary>
	/// Information includes the AWS account ID where the current document is shared and the version shared with that account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountSharingInfo
	{
		
		/// <summary>
		/// Pattern: \(\?i\)all\|[0-9]\{12\}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The document version shared with other accounts. You can share <code>Latest</code>, <code>Default</code> or <code>All versions</code>.
		/// Max length: 8
		/// Pattern: ([$]LATEST|[$]DEFAULT|[$]ALL)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string SharedDocumentVersion { get; set; }
	}
	
	/// <summary>
	/// An activation registers one or more on-premises servers or virtual machines (VMs) with AWS so that you can configure those servers or VMs using Run Command. A server or VM that has been registered with AWS is called a managed instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Activation
	{
		
		/// <summary>
		/// Pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ActivationId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string DefaultInstanceName { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string IamRole { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> RegistrationLimit { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> RegistrationsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Expired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceTypeForTagging
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Document = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManagedInstance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MaintenanceWindow = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Parameter = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PatchBaseline = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OpsItem = 5,
	}
	
	/// <summary>
	/// Information about the association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociationOverview
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DetailedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssociationStatusAggregatedCount AssociationStatusAggregatedCount { get; set; }
	}
	
	/// <summary>
	/// Describes an association of a Systems Manager document and an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Association
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST)|([1-9][0-9]*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationVersion { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastExecutionDate { get; set; }
		
		/// <summary>
		/// Information about the association.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AssociationOverview Overview { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ScheduleExpression { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationComplianceSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 4,
	}
	
	/// <summary>
	/// Describes an association status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociationStatus
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Date { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AssociationStatusName Name { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Message { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024)]
		public string AdditionalInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationStatusName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	/// <summary>
	/// An S3 bucket where you want to store the results of this request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceAssociationOutputLocation
	{
		
		/// <summary>
		/// An S3 bucket where you want to store the results of this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3OutputLocation S3Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationSyncCompliance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 1,
	}
	
	/// <summary>
	/// Describes the parameters for a document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociationDescription
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST)|([1-9][0-9]*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateAssociationDate { get; set; }
		
		/// <summary>
		/// Describes an association status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AssociationStatus Status { get; set; }
		
		/// <summary>
		/// Information about the association.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AssociationOverview Overview { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string AutomationTargetParameterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameters Parameters { get; set; }
		
		/// <summary>
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ScheduleExpression { get; set; }
		
		/// <summary>
		/// An S3 bucket where you want to store the results of this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceAssociationOutputLocation OutputLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastExecutionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastSuccessfulExecutionDate { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationName { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxErrors { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxConcurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssociationDescriptionComplianceSeverity ComplianceSeverity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssociationDescriptionSyncCompliance SyncCompliance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplyOnlyAtCronInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationDescriptionComplianceSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationDescriptionSyncCompliance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 1,
	}
	
	/// <summary>
	/// Includes information about the specified association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociationExecution
	{
		
		/// <summary>
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST)|([1-9][0-9]*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationVersion { get; set; }
		
		/// <summary>
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DetailedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastExecutionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceCountByStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationExecutionFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExecutionId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreatedTime = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationFilterOperatorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 2,
	}
	
	/// <summary>
	/// Filters used in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociationExecutionFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AssociationExecutionFilterKey Key { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Value { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AssociationExecutionFilterType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationExecutionFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExecutionId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreatedTime = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationExecutionFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 2,
	}
	
	/// <summary>
	/// Information about the source where the association execution details are stored.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputSource
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string OutputSourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutputSourceType { get; set; }
	}
	
	/// <summary>
	/// Includes information about the specified association execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociationExecutionTarget
	{
		
		/// <summary>
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST)|([1-9][0-9]*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationVersion { get; set; }
		
		/// <summary>
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DetailedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastExecutionDate { get; set; }
		
		/// <summary>
		/// Information about the source where the association execution details are stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputSource OutputSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationExecutionTargetsFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceId = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceType = 2,
	}
	
	/// <summary>
	/// Filters for the association execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociationExecutionTargetsFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AssociationExecutionTargetsFilterKey Key { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationExecutionTargetsFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceId = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceType = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AssociationId = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AssociationStatusName = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastExecutedBefore = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastExecutedAfter = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AssociationName = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceGroupName = 7,
	}
	
	/// <summary>
	/// Describes a filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociationFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AssociationFilterKey Key { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AssociationId = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AssociationStatusName = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastExecutedBefore = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastExecutedAfter = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AssociationName = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceGroupName = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationStatusName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	/// <summary>
	/// Information about the association version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociationVersionInfo
	{
		
		/// <summary>
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST)|([1-9][0-9]*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameters Parameters { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ScheduleExpression { get; set; }
		
		/// <summary>
		/// An S3 bucket where you want to store the results of this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceAssociationOutputLocation OutputLocation { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationName { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxErrors { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxConcurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssociationVersionInfoComplianceSeverity ComplianceSeverity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssociationVersionInfoSyncCompliance SyncCompliance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplyOnlyAtCronInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationVersionInfoComplianceSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationVersionInfoSyncCompliance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AttachmentHashType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sha256 = 0,
	}
	
	/// <summary>
	/// A structure that includes attributes that describe a document attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachmentContent
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Hash { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttachmentContentHashType HashType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AttachmentContentHashType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sha256 = 0,
	}
	
	/// <summary>
	/// An attribute of an attachment, such as the attachment name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachmentInformation
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AttachmentsSourceKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SourceUrl = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3FileUrl = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachmentReference = 2,
	}
	
	/// <summary>
	/// Identifying information about a document attachment, including the file name and a key-value pair that identifies the location of an attachment to a document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachmentsSource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttachmentsSourceKey Key { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public AttachmentsSourceValue[] Values { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AttachmentsSourceKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SourceUrl = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3FileUrl = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachmentReference = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutomationExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Waiting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelling = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExecutionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Interactive = 1,
	}
	
	/// <summary>
	/// Information about targets that resolved during the Automation execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResolvedTargets
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterValue[] ParameterValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Truncated { get; set; }
	}
	
	/// <summary>
	/// An aggregate of step execution statuses displayed in the AWS Console for a multi-Region and multi-account Automation execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProgressCounters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalSteps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SuccessSteps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FailedSteps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CancelledSteps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimedOutSteps { get; set; }
	}
	
	/// <summary>
	/// Detailed information about the current state of an individual Automation execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AutomationExecution
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string AutomationExecutionId { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentName { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExecutionStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExecutionEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomationExecutionAutomationExecutionStatus AutomationExecutionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StepExecution[] StepExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> StepExecutionsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomationParameterMap Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomationParameterMap Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomationExecutionMode Mode { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string ParentAutomationExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecutedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentStepName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentAction { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string TargetParameterName { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(300)]
		public TargetMap[] TargetMaps { get; set; }
		
		/// <summary>
		/// Information about targets that resolved during the Automation execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResolvedTargets ResolvedTargets { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxConcurrency { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public TargetLocation[] TargetLocations { get; set; }
		
		/// <summary>
		/// An aggregate of step execution statuses displayed in the AWS Console for a multi-Region and multi-account Automation execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProgressCounters ProgressCounters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutomationExecutionAutomationExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Waiting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelling = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutomationExecutionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Interactive = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutomationExecutionFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DocumentNamePrefix = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExecutionStatus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExecutionId = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ParentExecutionId = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CurrentAction = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartTimeBefore = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartTimeAfter = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AutomationType = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TagKey = 8,
	}
	
	/// <summary>
	/// A filter used to match specific automation executions. This is used to limit the scope of Automation execution information returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AutomationExecutionFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutomationExecutionFilterKey Key { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public AutomationExecutionFilterValue[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutomationExecutionFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DocumentNamePrefix = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExecutionStatus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExecutionId = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ParentExecutionId = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CurrentAction = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartTimeBefore = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartTimeAfter = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AutomationType = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TagKey = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutomationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CrossAccount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Local = 1,
	}
	
	/// <summary>
	/// Details about a specific Automation execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AutomationExecutionMetadata
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string AutomationExecutionId { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentName { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomationExecutionMetadataAutomationExecutionStatus AutomationExecutionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExecutionStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExecutionEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecutedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogFile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomationParameterMap Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomationExecutionMetadataMode Mode { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string ParentAutomationExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentStepName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureMessage { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string TargetParameterName { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(300)]
		public TargetMap[] TargetMaps { get; set; }
		
		/// <summary>
		/// Information about targets that resolved during the Automation execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResolvedTargets ResolvedTargets { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxConcurrency { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomationExecutionMetadataAutomationType AutomationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutomationExecutionMetadataAutomationExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Waiting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelling = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutomationExecutionMetadataMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Interactive = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutomationExecutionMetadataAutomationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CrossAccount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Local = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CalendarState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 1,
	}
	
	/// <summary>
	/// Configuration options for sending command output to CloudWatch Logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudWatchOutputConfig
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string CloudWatchLogGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CloudWatchOutputEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CommandStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelling = 6,
	}
	
	/// <summary>
	/// Configurations for sending notifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NotificationConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationEvent[] NotificationEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationConfigNotificationType NotificationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NotificationConfigNotificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Command = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invocation = 1,
	}
	
	/// <summary>
	/// Describes a command request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Command
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string CommandId { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentName { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpiresAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameters Parameters { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public InstanceId[] InstanceIds { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RequestedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CommandStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=0)]
		public string StatusDetails { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=3)]
		public string OutputS3Region { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string OutputS3BucketName { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string OutputS3KeyPrefix { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxConcurrency { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TargetCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompletedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ErrorCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeliveryTimedOutCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRole { get; set; }
		
		/// <summary>
		/// Configurations for sending notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NotificationConfig NotificationConfig { get; set; }
		
		/// <summary>
		/// Configuration options for sending command output to CloudWatch Logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchOutputConfig CloudWatchOutputConfig { get; set; }
		
		/// <summary>
		/// Minimum: 30
		/// Maximum: 2592000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(30, 2592000)]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CommandStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelling = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CommandFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvokedAfter = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvokedBefore = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExecutionStage = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DocumentName = 4,
	}
	
	/// <summary>
	/// Describes a command filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CommandFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CommandFilterKey Key { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CommandFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvokedAfter = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvokedBefore = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExecutionStage = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DocumentName = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CommandInvocationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delayed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelling = 7,
	}
	
	/// <summary>
	/// An invocation is copy of a command sent to a specific instance. A command can apply to one or more instances. A command invocation applies to one instance. For example, if a user runs SendCommand against three instances, then a command invocation is created for each requested instance ID. A command invocation returns status and detail information about a command you ran. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CommandInvocation
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string CommandId { get; set; }
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string InstanceName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public string Comment { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentName { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RequestedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CommandInvocationStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=0)]
		public string StatusDetails { get; set; }
		
		/// <summary>
		/// Max length: 2500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2500)]
		public string TraceOutput { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StandardOutputUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StandardErrorUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CommandPlugin[] CommandPlugins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRole { get; set; }
		
		/// <summary>
		/// Configurations for sending notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NotificationConfig NotificationConfig { get; set; }
		
		/// <summary>
		/// Configuration options for sending command output to CloudWatch Logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchOutputConfig CloudWatchOutputConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CommandInvocationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delayed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelling = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CommandPluginStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
	}
	
	/// <summary>
	/// Describes plugin details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CommandPlugin
	{
		
		/// <summary>
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=4)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CommandPluginStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=0)]
		public string StatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ResponseCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ResponseStartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ResponseFinishDateTime { get; set; }
		
		/// <summary>
		/// Max length: 2500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2500)]
		public string Output { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StandardOutputUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StandardErrorUrl { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=3)]
		public string OutputS3Region { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string OutputS3BucketName { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string OutputS3KeyPrefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CommandPluginStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
	}
	
	/// <summary>
	/// A summary of the call execution that includes an execution ID, the type of execution (for example, <code>Command</code>), and the date/time of the execution using a datetime object that is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ComplianceExecutionSummary
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExecutionTime { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public string ExecutionId { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50)]
		public string ExecutionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComplianceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComplianceSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFORMATIONAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 5,
	}
	
	/// <summary>
	/// Information about the compliance as defined by the resource type. For example, for a patch resource type, <code>Items</code> includes information about the PatchSeverity, Classification, and so on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ComplianceItem
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [A-Za-z0-9_\-]\w+|Custom:[a-zA-Z0-9_\-]\w+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ComplianceType { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceItemStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceItemSeverity Severity { get; set; }
		
		/// <summary>
		/// A summary of the call execution that includes an execution ID, the type of execution (for example, <code>Command</code>), and the date/time of the execution using a datetime object that is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComplianceExecutionSummary ExecutionSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceItemDetails Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComplianceItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComplianceItemSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFORMATIONAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 5,
	}
	
	/// <summary>
	/// Information about a compliance item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ComplianceItemEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ComplianceItemEntrySeverity Severity { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ComplianceItemEntryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceItemDetails Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComplianceItemEntrySeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFORMATIONAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComplianceItemEntryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComplianceQueryOperatorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_EQUAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEGIN_WITH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 4,
	}
	
	/// <summary>
	/// One or more filters. Use a filter to return a more specific list of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ComplianceStringFilter
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public ComplianceFilterValue[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComplianceStringFilterType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComplianceStringFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_EQUAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEGIN_WITH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 4,
	}
	
	/// <summary>
	/// A summary of resources that are compliant. The summary is organized according to the resource count for each compliance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CompliantSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompliantCount { get; set; }
		
		/// <summary>
		/// The number of managed instances found for each patch severity level defined in the request filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SeveritySummary SeveritySummary { get; set; }
	}
	
	/// <summary>
	/// A summary of resources that are not compliant. The summary is organized according to resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NonCompliantSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NonCompliantCount { get; set; }
		
		/// <summary>
		/// The number of managed instances found for each patch severity level defined in the request filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SeveritySummary SeveritySummary { get; set; }
	}
	
	/// <summary>
	/// A summary of compliance information by compliance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ComplianceSummaryItem
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [A-Za-z0-9_\-]\w+|Custom:[a-zA-Z0-9_\-]\w+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ComplianceType { get; set; }
		
		/// <summary>
		/// A summary of resources that are compliant. The summary is organized according to the resource count for each compliance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CompliantSummary CompliantSummary { get; set; }
		
		/// <summary>
		/// A summary of resources that are not compliant. The summary is organized according to resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NonCompliantSummary NonCompliantSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComplianceUploadType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL = 1,
	}
	
	/// <summary>
	/// The number of managed instances found for each patch severity level defined in the request filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SeveritySummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CriticalCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HighCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MediumCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LowCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InformationalCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UnspecifiedCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConnectionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Connected = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotConnected = 1,
	}
	
	/// <summary>
	/// Describes the association of a Systems Manager SSM document and an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAssociationBatchRequestEntry
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameters Parameters { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string AutomationTargetParameterName { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ScheduleExpression { get; set; }
		
		/// <summary>
		/// An S3 bucket where you want to store the results of this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceAssociationOutputLocation OutputLocation { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationName { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxErrors { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxConcurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateAssociationBatchRequestEntryComplianceSeverity ComplianceSeverity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateAssociationBatchRequestEntrySyncCompliance SyncCompliance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplyOnlyAtCronInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateAssociationBatchRequestEntryComplianceSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateAssociationBatchRequestEntrySyncCompliance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Command = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Policy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Automation = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Session = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Package = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ApplicationConfiguration = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ApplicationConfigurationSchema = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentStrategy = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChangeCalendar = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YAML = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT = 2,
	}
	
	/// <summary>
	/// Describes a Systems Manager document. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Sha1 { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Hash { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentDescriptionHashType HashType { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{1,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VersionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The status of a document.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentDescriptionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusInformation { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentParameter[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlatformType[] PlatformTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentDescriptionDocumentType DocumentType { get; set; }
		
		/// <summary>
		/// Pattern: ([0-9]+)\.([0-9]+)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemaVersion { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersion { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DefaultVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentDescriptionDocumentFormat DocumentFormat { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// Pattern: ^\/[\w\.\-\:\/]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string TargetType { get; set; }
		
		/// <summary>
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttachmentInformation[] AttachmentsInformation { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DocumentRequires[] Requires { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentDescriptionHashType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sha256 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sha1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentDescriptionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentDescriptionDocumentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Command = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Policy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Automation = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Session = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Package = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ApplicationConfiguration = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ApplicationConfigurationSchema = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentStrategy = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChangeCalendar = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentDescriptionDocumentFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YAML = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OperatingSystem
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UBUNTU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDHAT_ENTERPRISE_LINUX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTOS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORACLE_LINUX = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIAN = 8,
	}
	
	/// <summary>
	/// A set of patch filters, typically used for approval rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PatchFilterGroup
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public PatchFilter[] PatchFilters { get; set; }
	}
	
	/// <summary>
	/// A set of rules defining the approval rules for a patch baseline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PatchRuleGroup
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public PatchRule[] PatchRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PatchComplianceLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFORMATIONAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PatchAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_AS_DEPENDENCY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCK = 1,
	}
	
	/// <summary>
	/// Information about the target S3 bucket for the Resource Data Sync.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceDataSyncS3Destination
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Prefix { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceDataSyncS3DestinationSyncFormat SyncFormat { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Region { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string AWSKMSKeyARN { get; set; }
		
		/// <summary>
		/// Synchronize Systems Manager Inventory data from multiple AWS accounts defined in AWS Organizations to a centralized S3 bucket. Data is synchronized to individual key prefixes in the central bucket. Each key prefix represents a different AWS account ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceDataSyncDestinationDataSharing DestinationDataSharing { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceDataSyncS3DestinationSyncFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JsonSerDe = 0,
	}
	
	/// <summary>
	/// Information about the source of the data included in the resource data sync.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceDataSyncSource
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SourceType { get; set; }
		
		/// <summary>
		/// Information about the AwsOrganizationsSource resource data sync source. A sync source of this type can synchronize data from AWS Organizations or, if an AWS Organization is not present, from multiple AWS Regions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceDataSyncAwsOrganizationsSource AwsOrganizationsSource { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceDataSyncSourceRegion[] SourceRegions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeFutureRegions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InventorySchemaDeleteOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DisableSchema = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteSchema = 1,
	}
	
	/// <summary>
	/// Information about the delete operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryDeletionSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RemainingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InventoryDeletionSummaryItem[] SummaryItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeActivationsFilterKeys
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivationIds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DefaultInstanceName = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IamRole = 2,
	}
	
	/// <summary>
	/// Filter for the DescribeActivation API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeActivationsFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeActivationsFilterFilterKey FilterKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] FilterValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeActivationsFilterFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivationIds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DefaultInstanceName = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IamRole = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentPermissionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Share = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MaintenanceWindowResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_GROUP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PatchProperty
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT_FAMILY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLASSIFICATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSRC_SEVERITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIORITY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVERITY = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PatchSet
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SessionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		History = 1,
	}
	
	/// <summary>
	/// A default version of a document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentDefaultVersionDescription
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DefaultVersion { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{1,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DefaultVersionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentHashType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sha256 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sha1 = 1,
	}
	
	/// <summary>
	/// The status of a document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Owner = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlatformTypes = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DocumentType = 3,
	}
	
	/// <summary>
	/// This data type is deprecated. Instead, use <a>DocumentKeyValuesFilter</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DocumentFilterKey Key { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Owner = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlatformTypes = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DocumentType = 3,
	}
	
	/// <summary>
	/// Describes the name of a Systems Manager document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentIdentifier
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Owner { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{1,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VersionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlatformType[] PlatformTypes { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentIdentifierDocumentType DocumentType { get; set; }
		
		/// <summary>
		/// Pattern: ([0-9]+)\.([0-9]+)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemaVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentIdentifierDocumentFormat DocumentFormat { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// Pattern: ^\/[\w\.\-\:\/]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string TargetType { get; set; }
		
		/// <summary>
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DocumentRequires[] Requires { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentIdentifierDocumentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Command = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Policy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Automation = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Session = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Package = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ApplicationConfiguration = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ApplicationConfigurationSchema = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentStrategy = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChangeCalendar = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentIdentifierDocumentFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YAML = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT = 2,
	}
	
	/// <summary>
	/// <p>One or more filters. Use a filter to return a more specific list of documents.</p> <p>For keys, you can specify one or more tags that have been applied to a document. </p> <p>Other valid values include <code>Owner</code>, <code>Name</code>, <code>PlatformTypes</code>, <code>DocumentType</code>, and <code>TargetType</code>.</p> <p>Note that only one Owner can be specified in a request. For example: <code>Key=Owner,Values=Self</code>.</p> <p>If you use Name as a key, you can use a name prefix to return a list of documents. For example, in the AWS CLI, to return a list of all documents that begin with <code>Te</code>, run the following command:</p> <p> <code>aws ssm list-documents --filters Key=Name,Values=Te</code> </p> <p>If you specify more than two keys, only documents that are identified by all the tags are returned in the results. If you specify more than two values for a key, documents that are identified by any of the values are returned in the results.</p> <p>To specify a custom key and value pair, use the format <code>Key=tag:tagName,Values=valueName</code>.</p> <p>For example, if you created a Key called region and are using the AWS CLI to call the <code>list-documents</code> command: </p> <p> <code>aws ssm list-documents --filters Key=tag:region,Values=east,west Key=Owner,Values=Self</code> </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentKeyValuesFilter
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentKeyValuesFilterValue[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringList = 1,
	}
	
	/// <summary>
	/// Parameters specified in a System Manager document that run on the server when the command is run. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentParameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentParameterType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringList = 1,
	}
	
	/// <summary>
	/// An SSM document required by the current document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentRequires
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Version information about the document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentVersionInfo
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{1,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VersionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefaultVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentVersionInfoDocumentFormat DocumentFormat { get; set; }
		
		/// <summary>
		/// The status of a document.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentVersionInfoStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusInformation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentVersionInfoDocumentFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YAML = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentVersionInfoStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
	}
	
	/// <summary>
	/// Represents metadata about a patch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Patch
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContentUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Vendor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Product { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Classification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MsrcSeverity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KbNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MsrcNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Language { get; set; }
	}
	
	/// <summary>
	/// Information about the approval status of a patch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PatchStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PatchStatusDeploymentStatus DeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PatchStatusComplianceLevel ComplianceLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ApprovalDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PatchStatusDeploymentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_APPROVAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLICIT_APPROVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLICIT_REJECTED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PatchStatusComplianceLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFORMATIONAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 5,
	}
	
	/// <summary>
	/// The EffectivePatch structure defines metadata about a patch along with the approval state of the patch in a particular patch baseline. The approval state includes information about whether the patch is currently approved, due to be approved by a rule, explicitly approved, or explicitly rejected and the date the patch was or will be approved.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EffectivePatch
	{
		
		/// <summary>
		/// Represents metadata about a patch.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Patch Patch { get; set; }
		
		/// <summary>
		/// Information about the approval status of a patch.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchStatus PatchStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Fault
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Client = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Server = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 2,
	}
	
	/// <summary>
	/// Describes a failed association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FailedCreateAssociation
	{
		
		/// <summary>
		/// Describes the association of a Systems Manager SSM document and an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateAssociationBatchRequestEntry Entry { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FailedCreateAssociationFault Fault { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FailedCreateAssociationFault
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Client = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Server = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 2,
	}
	
	/// <summary>
	/// Information about an Automation failure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FailureDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureStage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomationParameterMap Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MaintenanceWindowExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED_OVERLAPPING = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MaintenanceWindowTaskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN_COMMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_FUNCTIONS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA = 3,
	}
	
	/// <summary>
	/// The parameters for task execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaintenanceWindowTaskInvocationParameters
	{
		
		/// <summary>
		/// <p>The parameters for a RUN_COMMAND task type.</p> <p>For information about specifying and updating task parameters, see <a>RegisterTaskWithMaintenanceWindow</a> and <a>UpdateMaintenanceWindowTask</a>.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p>For Run Command tasks, Systems Manager uses specified values for <code>TaskParameters</code> and <code>LoggingInfo</code> only if no values are specified for <code>TaskInvocationParameters</code>. </p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowRunCommandParameters RunCommand { get; set; }
		
		/// <summary>
		/// The parameters for an AUTOMATION task type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowAutomationParameters Automation { get; set; }
		
		/// <summary>
		/// <p>The parameters for a STEP_FUNCTIONS task.</p> <p>For information about specifying and updating task parameters, see <a>RegisterTaskWithMaintenanceWindow</a> and <a>UpdateMaintenanceWindowTask</a>.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p>For Step Functions tasks, Systems Manager ignores any values specified for <code>TaskParameters</code> and <code>LoggingInfo</code>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowStepFunctionsParameters StepFunctions { get; set; }
		
		/// <summary>
		/// <p>The parameters for a LAMBDA task type.</p> <p>For information about specifying and updating task parameters, see <a>RegisterTaskWithMaintenanceWindow</a> and <a>UpdateMaintenanceWindowTask</a>.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p>For Lambda tasks, Systems Manager ignores any values specified for TaskParameters and LoggingInfo.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowLambdaParameters Lambda { get; set; }
	}
	
	/// <summary>
	/// <p>Information about an S3 bucket to write instance-level logs to.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoggingInfo
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string S3BucketName { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string S3KeyPrefix { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=3)]
		public string S3Region { get; set; }
	}
	
	/// <summary>
	/// Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their AWS resources. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">AWS Systems Manager OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OpsItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpsItemNotification[] Notifications { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 5)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RelatedOpsItem[] RelatedOpsItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpsItemStatus Status { get; set; }
		
		/// <summary>
		/// Pattern: ^(oi)-[0-9a-f]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OpsItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Title { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpsItemOperationalData OperationalData { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Category { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OpsItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resolved = 2,
	}
	
	/// <summary>
	/// An Systems Manager parameter in Parameter Store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Parameter
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=0)]
		public string Selector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceResult { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=0)]
		public string DataType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringList = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecureString = 2,
	}
	
	/// <summary>
	/// <p>The service setting data structure.</p> <p> <code>ServiceSetting</code> is an account-level setting for an AWS service. This setting defines how a user interacts with or uses a service or a feature of a service. For example, if an AWS service charges money to the account based on feature or service usage, then the AWS service team might create a default setting of "false". This means the user can't use this feature unless they change the setting to "true" and intentionally opt in for a paid feature.</p> <p>Services map a <code>SettingId</code> object to a setting value. AWS services teams define the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>, but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code> permission for the setting. Use the <a>UpdateServiceSetting</a> API action to change the default setting. Or, use the <a>ResetServiceSetting</a> to change the value back to the original value defined by the AWS service team.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServiceSetting
	{
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string SettingId { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096, MinimumLength=1)]
		public string SettingValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedUser { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Status information about the aggregated associations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceAggregatedAssociationOverview
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DetailedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceAssociationStatusAggregatedCount InstanceAssociationStatusAggregatedCount { get; set; }
	}
	
	/// <summary>
	/// One or more association documents on the instance. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceAssociation
	{
		
		/// <summary>
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Content { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST)|([1-9][0-9]*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationVersion { get; set; }
	}
	
	/// <summary>
	/// An S3 bucket where you want to store the results of this request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3OutputLocation
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=3)]
		public string OutputS3Region { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string OutputS3BucketName { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string OutputS3KeyPrefix { get; set; }
	}
	
	/// <summary>
	/// A URL for the S3 bucket where you want to store the results of this request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3OutputUrl
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OutputUrl { get; set; }
	}
	
	/// <summary>
	/// The URL of S3 bucket where you want to store the results of this request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceAssociationOutputUrl
	{
		
		/// <summary>
		/// A URL for the S3 bucket where you want to store the results of this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3OutputUrl S3OutputUrl { get; set; }
	}
	
	/// <summary>
	/// Status information about the instance association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceAssociationStatusInfo
	{
		
		/// <summary>
		/// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.:/]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST)|([1-9][0-9]*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationVersion { get; set; }
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExecutionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DetailedStatus { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string ExecutionSummary { get; set; }
		
		/// <summary>
		/// Max length: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10)]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// The URL of S3 bucket where you want to store the results of this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceAssociationOutputUrl OutputUrl { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AssociationName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Online = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConnectionLost = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PlatformType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linux = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManagedInstance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Document = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2Instance = 2,
	}
	
	/// <summary>
	/// Describes a filter for a specific list of instances. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceInformation
	{
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceInformationPingStatus PingStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastPingDateTime { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9]{1,6}(\.[0-9]{1,6}){2,3}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AgentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsLatestVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceInformationPlatformType PlatformType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformVersion { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ActivationId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string IamRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RegistrationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceInformationResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 46
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(46, MinimumLength=1)]
		public string IPAddress { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string ComputerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastAssociationExecutionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastSuccessfulAssociationExecutionDate { get; set; }
		
		/// <summary>
		/// Status information about the aggregated associations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceAggregatedAssociationOverview AssociationOverview { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceInformationPingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Online = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConnectionLost = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceInformationPlatformType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linux = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceInformationResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManagedInstance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Document = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2Instance = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceInformationFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceIds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AgentVersion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PingStatus = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlatformTypes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivationIds = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IamRole = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceType = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AssociationStatus = 7,
	}
	
	/// <summary>
	/// <p>Describes a filter for a specific list of instances. You can filter instances information by using tags. You specify tags by using a key-value mapping.</p> <p>Use this action instead of the <a>DescribeInstanceInformationRequest$InstanceInformationFilterList</a> method. The <code>InstanceInformationFilterList</code> method is a legacy method and does not support tags. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceInformationFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceInformationFilterKey Key { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public InstanceInformationFilterValue[] ValueSet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceInformationFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceIds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AgentVersion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PingStatus = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlatformTypes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivationIds = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IamRole = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceType = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AssociationStatus = 7,
	}
	
	/// <summary>
	/// The filters to describe or get information about your managed instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceInformationStringFilter
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public InstanceInformationFilterValue[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PatchOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scan = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Install = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RebootOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RebootIfNeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoReboot = 1,
	}
	
	/// <summary>
	/// Defines the high-level patch compliance state for a managed instance, providing information about the number of installed, missing, not applicable, and failed patches along with metadata about the operation when this information was gathered for the instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstancePatchState
	{
		
		/// <summary>
		/// Pattern: (^i-(\w{8}|\w{17})$)|(^mi-\w{17}$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string PatchGroup { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string SnapshotId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^https://.+$|^s3://([^/]+)/(.*?([^/]+))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string InstallOverrideList { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string OwnerInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstalledCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstalledOtherCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstalledPendingRebootCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstalledRejectedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MissingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FailedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UnreportedNotApplicableCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NotApplicableCount { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset OperationStartTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset OperationEndTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstancePatchStateOperation Operation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastNoRebootInstallOperationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstancePatchStateRebootOption RebootOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstancePatchStateOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scan = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Install = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstancePatchStateRebootOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RebootIfNeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoReboot = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstancePatchStateOperatorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotEqual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 3,
	}
	
	/// <summary>
	/// Defines a filter used in DescribeInstancePatchStatesForPatchGroup used to scope down the information returned by the API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstancePatchStateFilter
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public InstancePatchStateFilterValue[] Values { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstancePatchStateFilterType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstancePatchStateFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotEqual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 3,
	}
	
	/// <summary>
	/// Specifies the inventory type and attribute for the aggregation execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryAggregator
	{
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string Expression { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public InventoryAggregator[] Aggregators { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public InventoryGroup[] Groups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InventoryAttributeDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InventoryDeletionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 1,
	}
	
	/// <summary>
	/// Status information returned by the <code>DeleteInventory</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryDeletionStatusItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeletionId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^(AWS|Custom):.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeletionStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InventoryDeletionStatusItemLastStatus LastStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastStatusMessage { get; set; }
		
		/// <summary>
		/// Information about the delete operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InventoryDeletionSummary DeletionSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastStatusUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InventoryDeletionStatusItemLastStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 1,
	}
	
	/// <summary>
	/// Either a count, remaining count, or a version number in a delete inventory summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryDeletionSummaryItem
	{
		
		/// <summary>
		/// Pattern: ^([0-9]{1,6})(\.[0-9]{1,6})$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RemainingCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InventoryQueryOperatorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotEqual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BeginWith = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Exists = 5,
	}
	
	/// <summary>
	/// One or more filters. Use a filter to return a more specific list of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryFilter
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public InventoryFilterValue[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InventoryFilterType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InventoryFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotEqual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BeginWith = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Exists = 5,
	}
	
	/// <summary>
	/// A user-defined set of one or more filters on which to aggregate inventory data. Groups return a count of resources that match and don't match the specified criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryGroup
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public InventoryFilter[] Filters { get; set; }
	}
	
	/// <summary>
	/// Information collected from managed instances based on your inventory policy document
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryItem
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^(AWS|Custom):.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TypeName { get; set; }
		
		/// <summary>
		/// Pattern: ^([0-9]{1,6})(\.[0-9]{1,6})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemaVersion { get; set; }
		
		/// <summary>
		/// Pattern: ^(20)[0-9][0-9]-(0[1-9]|1[012])-([12][0-9]|3[01]|0[1-9])(T)(2[0-3]|[0-1][0-9])(:[0-5][0-9])(:[0-5][0-9])(Z)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CaptureTime { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ContentHash { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public InventoryItemEntry[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InventoryItemContentContext Context { get; set; }
	}
	
	/// <summary>
	/// Attributes are the entries within the inventory item content. It contains name and value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryItemAttribute
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InventoryItemAttributeDataType DataType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InventoryItemAttributeDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 1,
	}
	
	/// <summary>
	/// The inventory item schema definition. Users can use this to compose inventory query filters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryItemSchema
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^(AWS|Custom):.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TypeName { get; set; }
		
		/// <summary>
		/// Pattern: ^([0-9]{1,6})(\.[0-9]{1,6})$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public InventoryItemAttribute[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Inventory query results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryResultEntity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InventoryResultItemMap Data { get; set; }
	}
	
	/// <summary>
	/// The inventory result item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryResultItem
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^(AWS|Custom):.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TypeName { get; set; }
		
		/// <summary>
		/// Pattern: ^([0-9]{1,6})(\.[0-9]{1,6})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemaVersion { get; set; }
		
		/// <summary>
		/// Pattern: ^(20)[0-9][0-9]-(0[1-9]|1[012])-([12][0-9]|3[01]|0[1-9])(T)(2[0-3]|[0-1][0-9])(:[0-5][0-9])(:[0-5][0-9])(Z)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CaptureTime { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ContentHash { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 10000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public InventoryItemEntry[] Content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LastResourceDataSyncStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Successful = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
	}
	
	/// <summary>
	/// The parameters for an AUTOMATION task type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaintenanceWindowAutomationParameters
	{
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomationParameterMap Parameters { get; set; }
	}
	
	/// <summary>
	/// Describes the information about an execution of a maintenance window. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaintenanceWindowExecution
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowExecutionStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 250
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(250, MinimumLength=0)]
		public string StatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MaintenanceWindowExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED_OVERLAPPING = 7,
	}
	
	/// <summary>
	/// Information about a task execution performed as part of a maintenance window execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaintenanceWindowExecutionTaskIdentity
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowExecutionId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string TaskExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowExecutionTaskIdentityStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 250
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(250, MinimumLength=0)]
		public string StatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string TaskArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowExecutionTaskIdentityTaskType TaskType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MaintenanceWindowExecutionTaskIdentityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED_OVERLAPPING = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MaintenanceWindowExecutionTaskIdentityTaskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN_COMMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_FUNCTIONS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA = 3,
	}
	
	/// <summary>
	/// Describes the information about a task invocation for a particular target as part of a task execution performed as part of a maintenance window execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaintenanceWindowExecutionTaskInvocationIdentity
	{
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowExecutionId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string TaskExecutionId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string InvocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowExecutionTaskInvocationIdentityTaskType TaskType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowExecutionTaskInvocationIdentityStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 250
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(250, MinimumLength=0)]
		public string StatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string OwnerInformation { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36)]
		public string WindowTargetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MaintenanceWindowExecutionTaskInvocationIdentityTaskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN_COMMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_FUNCTIONS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MaintenanceWindowExecutionTaskInvocationIdentityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED_OVERLAPPING = 7,
	}
	
	/// <summary>
	/// Filter used in the request. Supported filter keys are Name and Enabled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaintenanceWindowFilter
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowFilterValue[] Values { get; set; }
	}
	
	/// <summary>
	/// Information about the maintenance window.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaintenanceWindowIdentity
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 24
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 24)]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 23
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 23)]
		public System.Nullable<System.Int32> Cutoff { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleTimezone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextExecutionTime { get; set; }
	}
	
	/// <summary>
	/// The maintenance window to which the specified target belongs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaintenanceWindowIdentityForTarget
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// <p>The parameters for a LAMBDA task type.</p> <p>For information about specifying and updating task parameters, see <a>RegisterTaskWithMaintenanceWindow</a> and <a>UpdateMaintenanceWindowTask</a>.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p>For Lambda tasks, Systems Manager ignores any values specified for TaskParameters and LoggingInfo.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaintenanceWindowLambdaParameters
	{
		
		/// <summary>
		/// Max length: 8000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8000, MinimumLength=1)]
		public string ClientContext { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Qualifier { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096)]
		public string Payload { get; set; }
	}
	
	/// <summary>
	/// <p>The parameters for a RUN_COMMAND task type.</p> <p>For information about specifying and updating task parameters, see <a>RegisterTaskWithMaintenanceWindow</a> and <a>UpdateMaintenanceWindowTask</a>.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p>For Run Command tasks, Systems Manager uses specified values for <code>TaskParameters</code> and <code>LoggingInfo</code> only if no values are specified for <code>TaskInvocationParameters</code>. </p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaintenanceWindowRunCommandParameters
	{
		
		/// <summary>
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public string Comment { get; set; }
		
		/// <summary>
		/// Configuration options for sending command output to CloudWatch Logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchOutputConfig CloudWatchOutputConfig { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DocumentHash { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowRunCommandParametersDocumentHashType DocumentHashType { get; set; }
		
		/// <summary>
		/// Pattern: ([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentVersion { get; set; }
		
		/// <summary>
		/// Configurations for sending notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NotificationConfig NotificationConfig { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string OutputS3BucketName { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public string OutputS3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameters Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRoleArn { get; set; }
		
		/// <summary>
		/// Minimum: 30
		/// Maximum: 2592000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(30, 2592000)]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MaintenanceWindowRunCommandParametersDocumentHashType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sha256 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sha1 = 1,
	}
	
	/// <summary>
	/// <p>The parameters for a STEP_FUNCTIONS task.</p> <p>For information about specifying and updating task parameters, see <a>RegisterTaskWithMaintenanceWindow</a> and <a>UpdateMaintenanceWindowTask</a>.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p> <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs, instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> <p>For Step Functions tasks, Systems Manager ignores any values specified for <code>TaskParameters</code> and <code>LoggingInfo</code>.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaintenanceWindowStepFunctionsParameters
	{
		
		/// <summary>
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096)]
		public string Input { get; set; }
		
		/// <summary>
		/// Max length: 80
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(80, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The target registered with the maintenance window.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaintenanceWindowTarget
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowTargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowTargetResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string OwnerInformation { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MaintenanceWindowTargetResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_GROUP = 1,
	}
	
	/// <summary>
	/// Information about a task defined for a maintenance window.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaintenanceWindowTask
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 36
		/// Min length: 36
		/// Pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(36, MinimumLength=36)]
		public string WindowTaskId { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string TaskArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowTaskType Type { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowTaskParameters TaskParameters { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// <p>Information about an S3 bucket to write instance-level logs to.</p> <note> <p> <code>LoggingInfo</code> has been deprecated. To specify an S3 bucket to contain logs, instead use the <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure. For information about how Systems Manager handles these options for the supported maintenance window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoggingInfo LoggingInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRoleArn { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxConcurrency { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string MaxErrors { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MaintenanceWindowTaskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN_COMMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_FUNCTIONS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA = 3,
	}
	
	/// <summary>
	/// Defines the values for a task parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaintenanceWindowTaskParameterValueExpression
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceWindowTaskParameterValue[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NotificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Command = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invocation = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NotificationEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
	}
	
	/// <summary>
	/// One or more aggregators for viewing counts of OpsItems using different dimensions such as <code>Source</code>, <code>CreatedTime</code>, or <code>Source and CreatedTime</code>, to name a few.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OpsAggregator
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 1
		/// Pattern: ^(range|count|sum)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=1)]
		public string AggregatorType { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^(AWS|Custom):.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpsAggregatorValueMap Values { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public OpsFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public OpsAggregator[] Aggregators { get; set; }
	}
	
	/// <summary>
	/// The result of the query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OpsEntity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpsEntityItemMap Data { get; set; }
	}
	
	/// <summary>
	/// The OpsItem summaries result item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OpsEntityItem
	{
		
		/// <summary>
		/// Pattern: ^(20)[0-9][0-9]-(0[1-9]|1[012])-([12][0-9]|3[01]|0[1-9])(T)(2[0-3]|[0-1][0-9])(:[0-5][0-9])(:[0-5][0-9])(Z)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CaptureTime { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		public OpsEntityItemEntry[] Content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OpsFilterOperatorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotEqual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BeginWith = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Exists = 5,
	}
	
	/// <summary>
	/// A filter for viewing OpsItem summaries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OpsFilter
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public OpsFilterValue[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpsFilterType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OpsFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotEqual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BeginWith = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Exists = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OpsItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resolved = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OpsItemDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SearchableString = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 1,
	}
	
	/// <summary>
	/// An object that defines the value of the key and its type in the OperationalData map.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OpsItemDataValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpsItemDataValueType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OpsItemDataValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SearchableString = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OpsItemFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreatedBy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Source = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Priority = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Title = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OpsItemId = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreatedTime = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastModifiedTime = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OperationalData = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OperationalDataKey = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OperationalDataValue = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceId = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AutomationId = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Category = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Severity = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OpsItemFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Contains = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 3,
	}
	
	/// <summary>
	/// Describes an OpsItem filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OpsItemFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OpsItemFilterKey Key { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OpsItemFilterValue[] Values { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OpsItemFilterOperator Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OpsItemFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreatedBy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Source = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Priority = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Title = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OpsItemId = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreatedTime = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastModifiedTime = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OperationalData = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OperationalDataKey = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OperationalDataValue = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceId = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AutomationId = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Category = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Severity = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OpsItemFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Contains = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThan = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThan = 3,
	}
	
	/// <summary>
	/// A notification about the OpsItem.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OpsItemNotification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// A count of OpsItems.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OpsItemSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 5)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpsItemSummaryStatus Status { get; set; }
		
		/// <summary>
		/// Pattern: ^(oi)-[0-9a-f]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OpsItemId { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpsItemOperationalData OperationalData { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Category { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OpsItemSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resolved = 2,
	}
	
	/// <summary>
	/// The OpsItem data type to return.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OpsResultAttribute
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^(AWS|Custom):.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TypeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringList = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecureString = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParameterTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Advanced = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Intelligent-Tiering = 2,
	}
	
	/// <summary>
	/// Information about parameter usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ParameterHistory
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterHistoryType Type { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([a-zA-Z0-9:/_-]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string KeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedUser { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string AllowedPattern { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public ParameterLabel[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterHistoryTier Tier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterInlinePolicy[] Policies { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=0)]
		public string DataType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParameterHistoryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringList = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecureString = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParameterHistoryTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Advanced = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Intelligent-Tiering = 2,
	}
	
	/// <summary>
	/// One or more policies assigned to a parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ParameterInlinePolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyText { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyStatus { get; set; }
	}
	
	/// <summary>
	/// Metadata includes information like the ARN of the last user and the date/time the parameter was last used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ParameterMetadata
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterMetadataType Type { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([a-zA-Z0-9:/_-]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string KeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModifiedUser { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string AllowedPattern { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterMetadataTier Tier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterInlinePolicy[] Policies { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=0)]
		public string DataType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParameterMetadataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringList = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecureString = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParameterMetadataTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Advanced = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Intelligent-Tiering = 2,
	}
	
	/// <summary>
	/// <p>One or more filters. Use a filter to return a more specific list of results.</p> <important> <p>The <code>ParameterStringFilter</code> object is used by the <a>DescribeParameters</a> and <a>GetParametersByPath</a> API actions. However, not all of the pattern values listed for <code>Key</code> can be used with both actions.</p> <p>For <code>DescribeActions</code>, all of the listed patterns are valid, with the exception of <code>Label</code>.</p> <p>For <code>GetParametersByPath</code>, the following patterns listed for <code>Key</code> are not valid: <code>Name</code>, <code>Path</code>, and <code>Tier</code>.</p> <p>For examples of CLI commands demonstrating valid parameter filter constructions, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-search.html">Searching for Systems Manager parameters</a> in the <i>AWS Systems Manager User Guide</i>.</p> </important>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ParameterStringFilter
	{
		
		/// <summary>
		/// Max length: 132
		/// Min length: 1
		/// Pattern: tag:.+|Name|Type|KeyId|Path|Label|Tier|DataType
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(132, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 10
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength=1)]
		public string Option { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public ParameterStringFilterValue[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParametersFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Type = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyId = 2,
	}
	
	/// <summary>
	/// This data type is deprecated. Instead, use <a>ParameterStringFilter</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ParametersFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ParametersFilterKey Key { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public ParametersFilterValue[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParametersFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Type = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyId = 2,
	}
	
	/// <summary>
	/// Defines the basic information about a patch baseline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PatchBaselineIdentity
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 20
		/// Pattern: ^[a-zA-Z0-9_\-:/]{20,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=20)]
		public string BaselineId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string BaselineName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PatchBaselineIdentityOperatingSystem OperatingSystem { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string BaselineDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultBaseline { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PatchBaselineIdentityOperatingSystem
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UBUNTU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDHAT_ENTERPRISE_LINUX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTOS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORACLE_LINUX = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIAN = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PatchComplianceDataState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTALLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTALLED_OTHER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTALLED_PENDING_REBOOT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTALLED_REJECTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_APPLICABLE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
	}
	
	/// <summary>
	/// Information about the state of a patch on a particular instance as it relates to the patch baseline used to patch the instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PatchComplianceData
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KBId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Classification { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Severity { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PatchComplianceDataState State { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset InstalledTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PatchComplianceDataState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTALLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTALLED_OTHER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTALLED_PENDING_REBOOT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTALLED_REJECTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_APPLICABLE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PatchDeploymentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_APPROVAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLICIT_APPROVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLICIT_REJECTED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PatchFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATCH_SET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT_FAMILY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLASSIFICATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSRC_SEVERITY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATCH_ID = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECTION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIORITY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVERITY = 8,
	}
	
	/// <summary>
	/// <p> Defines which patches should be included in a patch baseline.</p> <p>A patch filter consists of a key and a set of values. The filter key is a patch property. For example, the available filter keys for WINDOWS are PATCH_SET, PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values define a matching criterion for the patch property indicated by the key. For example, if the filter key is PRODUCT and the filter values are ["Office 2013", "Office 2016"], then the filter accepts all patches where product name is either "Office 2013" or "Office 2016". The filter values can be exact values for the patch property given as a key, or a wildcard (*), which matches all values.</p> <p>You can view lists of valid values for the patch properties by running the <code>DescribePatchProperties</code> command. For information about which patch properties can be used with each major operating system, see <a>DescribePatchProperties</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PatchFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PatchFilterKey Key { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public PatchFilterValue[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PatchFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATCH_SET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT_FAMILY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLASSIFICATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSRC_SEVERITY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATCH_ID = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECTION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIORITY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVERITY = 8,
	}
	
	/// <summary>
	/// The mapping between a patch group and the patch baseline the patch group is registered with.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PatchGroupPatchBaselineMapping
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string PatchGroup { get; set; }
		
		/// <summary>
		/// Defines the basic information about a patch baseline.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PatchBaselineIdentity BaselineIdentity { get; set; }
	}
	
	/// <summary>
	/// Defines a filter used in Patch Manager APIs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PatchOrchestratorFilter
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PatchOrchestratorFilterValue[] Values { get; set; }
	}
	
	/// <summary>
	/// Defines an approval rule for a patch baseline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PatchRule
	{
		
		/// <summary>
		/// A set of patch filters, typically used for approval rules.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PatchFilterGroup PatchFilterGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PatchRuleComplianceLevel ComplianceLevel { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> ApproveAfterDays { get; set; }
		
		/// <summary>
		/// Max length: 10
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength=1)]
		public string ApproveUntilDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableNonSecurity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PatchRuleComplianceLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFORMATIONAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 5,
	}
	
	/// <summary>
	/// Information about the patches to use to update the instances, including target operating systems and source repository. Applies to Linux instances only.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PatchSource
	{
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,50}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public PatchSourceProduct[] Products { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Configuration { get; set; }
	}
	
	/// <summary>
	/// An OpsItems that shares something in common with the current OpsItem. For example, related OpsItems can include OpsItems with similar error messages, impacted resources, or statuses for the impacted resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RelatedOpsItem
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OpsItemId { get; set; }
	}
	
	/// <summary>
	/// Compliance summary information for a specific resource. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceComplianceSummaryItem
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [A-Za-z0-9_\-]\w+|Custom:[a-zA-Z0-9_\-]\w+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ComplianceType { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceComplianceSummaryItemStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceComplianceSummaryItemOverallSeverity OverallSeverity { get; set; }
		
		/// <summary>
		/// A summary of the call execution that includes an execution ID, the type of execution (for example, <code>Command</code>), and the date/time of the execution using a datetime object that is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComplianceExecutionSummary ExecutionSummary { get; set; }
		
		/// <summary>
		/// A summary of resources that are compliant. The summary is organized according to the resource count for each compliance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CompliantSummary CompliantSummary { get; set; }
		
		/// <summary>
		/// A summary of resources that are not compliant. The summary is organized according to resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NonCompliantSummary NonCompliantSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceComplianceSummaryItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_COMPLIANT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceComplianceSummaryItemOverallSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFORMATIONAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 5,
	}
	
	/// <summary>
	/// Information about the AwsOrganizationsSource resource data sync source. A sync source of this type can synchronize data from AWS Organizations or, if an AWS Organization is not present, from multiple AWS Regions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceDataSyncAwsOrganizationsSource
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string OrganizationSourceType { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public ResourceDataSyncOrganizationalUnit[] OrganizationalUnits { get; set; }
	}
	
	/// <summary>
	/// Synchronize Systems Manager Inventory data from multiple AWS accounts defined in AWS Organizations to a centralized S3 bucket. Data is synchronized to individual key prefixes in the central bucket. Each key prefix represents a different AWS account ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceDataSyncDestinationDataSharing
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string DestinationDataSharingType { get; set; }
	}
	
	/// <summary>
	/// <p>The data type name for including resource data sync state. There are four sync states:</p> <p> <code>OrganizationNotExists</code> (Your organization doesn't exist)</p> <p> <code>NoPermissions</code> (The system can't locate the service-linked role. This role is automatically created when a user creates a resource data sync in Explorer.)</p> <p> <code>InvalidOrganizationalUnit</code> (You specified or selected an invalid unit in the resource data sync configuration.)</p> <p> <code>TrustedAccessDisabled</code> (You disabled Systems Manager access in the organization in AWS Organizations.)</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceDataSyncSourceWithState
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SourceType { get; set; }
		
		/// <summary>
		/// Information about the AwsOrganizationsSource resource data sync source. A sync source of this type can synchronize data from AWS Organizations or, if an AWS Organization is not present, from multiple AWS Regions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceDataSyncAwsOrganizationsSource AwsOrganizationsSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceDataSyncSourceRegion[] SourceRegions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeFutureRegions { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string State { get; set; }
	}
	
	/// <summary>
	/// Information about a Resource Data Sync configuration, including its current status and last successful sync.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceDataSyncItem
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SyncName { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SyncType { get; set; }
		
		/// <summary>
		/// <p>The data type name for including resource data sync state. There are four sync states:</p> <p> <code>OrganizationNotExists</code> (Your organization doesn't exist)</p> <p> <code>NoPermissions</code> (The system can't locate the service-linked role. This role is automatically created when a user creates a resource data sync in Explorer.)</p> <p> <code>InvalidOrganizationalUnit</code> (You specified or selected an invalid unit in the resource data sync configuration.)</p> <p> <code>TrustedAccessDisabled</code> (You disabled Systems Manager access in the organization in AWS Organizations.)</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceDataSyncSourceWithState SyncSource { get; set; }
		
		/// <summary>
		/// Information about the target S3 bucket for the Resource Data Sync.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceDataSyncS3Destination S3Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastSyncTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastSuccessfulSyncTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SyncLastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceDataSyncItemLastStatus LastStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SyncCreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastSyncStatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceDataSyncItemLastStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Successful = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
	}
	
	/// <summary>
	/// The AWS Organizations organizational unit data source for the sync.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceDataSyncOrganizationalUnit
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string OrganizationalUnitId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceDataSyncS3Format
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JsonSerDe = 0,
	}
	
	/// <summary>
	/// The inventory item result attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResultAttribute
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^(AWS|Custom):.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TypeName { get; set; }
	}
	
	/// <summary>
	/// Information about a scheduled execution for a maintenance window.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledWindowExecution
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 20
		/// Pattern: ^mw-[0-9a-f]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=20)]
		public string WindowId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SignalType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Approve = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reject = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartStep = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StopStep = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resume = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SessionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Connected = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Connecting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disconnected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terminated = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terminating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
	}
	
	/// <summary>
	/// Reserved for future use.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SessionManagerOutputUrl
	{
		
		/// <summary>
		/// Max length: 2083
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2083, MinimumLength=1)]
		public string S3OutputUrl { get; set; }
		
		/// <summary>
		/// Max length: 2083
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2083, MinimumLength=1)]
		public string CloudWatchOutputUrl { get; set; }
	}
	
	/// <summary>
	/// Information about a Session Manager connection to an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Session
	{
		
		/// <summary>
		/// Max length: 96
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(96, MinimumLength=1)]
		public string SessionId { get; set; }
		
		/// <summary>
		/// Max length: 400
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(400, MinimumLength=1)]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SessionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// Pattern: ^[a-zA-Z0-9_\-.]{3,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DocumentName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Owner { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Details { get; set; }
		
		/// <summary>
		/// Reserved for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SessionManagerOutputUrl OutputUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SessionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Connected = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Connecting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disconnected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terminated = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terminating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SessionFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvokedAfter = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvokedBefore = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Owner = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 4,
	}
	
	/// <summary>
	/// Describes a filter for Session Manager information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SessionFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SessionFilterKey Key { get; set; }
		
		/// <summary>
		/// Max length: 400
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(400, MinimumLength=1)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SessionFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvokedAfter = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvokedBefore = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Target = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Owner = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 4,
	}
	
	/// <summary>
	/// The combination of AWS Regions and accounts targeted by the current Automation execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetLocation
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Account[] Accounts { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Region[] Regions { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string TargetLocationMaxConcurrency { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 1
		/// Pattern: ^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=1)]
		public string TargetLocationMaxErrors { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ExecutionRoleName { get; set; }
	}
	
	/// <summary>
	/// Detailed information about an the execution state of an Automation step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StepExecution
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StepName { get; set; }
		
		/// <summary>
		/// Pattern: ^aws:[a-zA-Z]{3,25}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeoutSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OnFailure { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAttempts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExecutionStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExecutionEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StepExecutionStepStatus StepStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResponseCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NormalStringMap Inputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomationParameterMap Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Response { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureMessage { get; set; }
		
		/// <summary>
		/// Information about an Automation failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FailureDetails FailureDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StepExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutomationParameterMap OverriddenParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsEnd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextStep { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsCritical { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ValidNextStep[] ValidNextSteps { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Target[] Targets { get; set; }
		
		/// <summary>
		/// The combination of AWS Regions and accounts targeted by the current Automation execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TargetLocation TargetLocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StepExecutionStepStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Waiting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelling = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StepExecutionFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartTimeBefore = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartTimeAfter = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StepExecutionStatus = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StepExecutionId = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StepName = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Action = 5,
	}
	
	/// <summary>
	/// A filter to limit the amount of step execution information returned by the call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StepExecutionFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StepExecutionFilterKey Key { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public StepExecutionFilterValue[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StepExecutionFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartTimeBefore = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartTimeAfter = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StepExecutionStatus = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StepExecutionId = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StepName = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Action = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StopType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancel = 1,
	}
	
	/// <summary>
	/// Metadata that you assign to your AWS resources. Tags enable you to categorize your resources in different ways, for example, by purpose, owner, or environment. In Systems Manager, you can apply tags to documents, managed instances, maintenance windows, Parameter Store parameters, and patch baselines.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// <p>An array of search criteria that targets instances using a Key,Value combination that you specify. </p> <p>Supported formats include the following.</p> <ul> <li> <p> <code>Key=InstanceIds,Values=<i>instance-id-1</i>,<i>instance-id-2</i>,<i>instance-id-3</i> </code> </p> </li> <li> <p> <code>Key=tag:<i>my-tag-key</i>,Values=<i>my-tag-value-1</i>,<i>my-tag-value-2</i> </code> </p> </li> <li> <p> <code>Key=tag-key,Values=<i>my-tag-key-1</i>,<i>my-tag-key-2</i> </code> </p> </li> <li> <p>(Maintenance window targets only) <code>Key=resource-groups:Name,Values=<i>resource-group-name</i> </code> </p> </li> <li> <p>(Maintenance window targets only) <code>Key=resource-groups:ResourceTypeFilters,Values=<i>resource-type-1</i>,<i>resource-type-2</i> </code> </p> </li> </ul> <p>For example:</p> <ul> <li> <p> <code>Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE</code> </p> </li> <li> <p> <code>Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3</code> </p> </li> <li> <p> <code>Key=tag-key,Values=Name,Instance-Type,CostCenter</code> </p> </li> <li> <p>(Maintenance window targets only) <code>Key=resource-groups:Name,Values=ProductionResourceGroup</code> </p> <p>This example demonstrates how to target all resources in the resource group <b>ProductionResourceGroup</b> in your maintenance window.</p> </li> <li> <p>(Maintenance window targets only) <code>Key=resource-groups:ResourceTypeFilters,Values=<i>AWS::EC2::INSTANCE</i>,<i>AWS::EC2::VPC</i> </code> </p> <p>This example demonstrates how to target only EC2 instances and VPCs in your maintenance window.</p> </li> <li> <p>(State Manager association targets only) <code>Key=InstanceIds,Values=<i>*</i> </code> </p> <p>This example demonstrates how to target all managed instances in the AWS Region where the association was created.</p> </li> </ul> <p>For information about how to send commands that target instances using <code>Key,Value</code> parameters, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting">Targeting multiple instances</a> in the <i>AWS Systems Manager User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Target
	{
		
		/// <summary>
		/// Max length: 163
		/// Min length: 1
		/// Pattern: ^[\p{L}\p{Z}\p{N}_.:/=\-@]*$|resource-groups:ResourceTypeFilters|resource-groups:Name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(163, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TargetValue[] Values { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Adds or overwrites one or more tags for the specified resource. Tags are metadata that you can assign to your documents, managed instances, maintenance windows, Parameter Store parameters, and patch baselines. Tags enable you to categorize your resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define. For example, you could define a set of tags for your account's managed instances that helps you track each instance's owner and stack level. For example: Key=Owner and Value=DbAdmin, SysAdmin, or Dev. Or Key=Stack and Value=Production, Pre-Production, or Test.</p> <p>Each resource can have a maximum of 50 tags. </p> <p>We recommend that you devise a set of tag keys that meets your needs for each resource type. Using a consistent set of tag keys makes it easier for you to manage your resources. You can search and filter the resources based on the tags you add. Tags don't have any semantic meaning to and are interpreted strictly as a string of characters. </p> <p>For more information about using tags with EC2 instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging your Amazon EC2 resources</a> in the <i>Amazon EC2 User Guide</i>.</p>
		/// AddTagsToResource /#X-Amz-Target=AmazonSSM.AddTagsToResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddTagsToResourceResult> AddTagsToResourceAsync(AddTagsToResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.AddTagsToResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AddTagsToResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attempts to cancel the command specified by the Command ID. There is no guarantee that the command will be terminated and the underlying process stopped.
		/// CancelCommand /#X-Amz-Target=AmazonSSM.CancelCommand
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CancelCommandResult> CancelCommandAsync(CancelCommandRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.CancelCommand";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CancelCommandResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops a maintenance window execution that is already in progress and cancels any tasks in the window that have not already starting running. (Tasks already in progress will continue to completion.)
		/// CancelMaintenanceWindowExecution /#X-Amz-Target=AmazonSSM.CancelMaintenanceWindowExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CancelMaintenanceWindowExecutionResult> CancelMaintenanceWindowExecutionAsync(CancelMaintenanceWindowExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.CancelMaintenanceWindowExecution";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CancelMaintenanceWindowExecutionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Generates an activation code and activation ID you can use to register your on-premises server or virtual machine (VM) with Systems Manager. Registering these machines with Systems Manager makes it possible to manage them using Systems Manager capabilities. You use the activation code and ID when installing SSM Agent on machines in your hybrid environment. For more information about requirements for managing on-premises instances and VMs using Systems Manager, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances.html">Setting up AWS Systems Manager for hybrid environments</a> in the <i>AWS Systems Manager User Guide</i>. </p> <note> <p>On-premises servers or VMs that are registered with Systems Manager and EC2 instances that you manage with Systems Manager are all called <i>managed instances</i>.</p> </note>
		/// CreateActivation /#X-Amz-Target=AmazonSSM.CreateActivation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateActivationResult> CreateActivationAsync(CreateActivationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.CreateActivation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateActivationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Associates the specified Systems Manager document with the specified instances or targets.</p> <p>When you associate a document with one or more instances, SSM Agent running on the instance processes the document and configures the instance as specified. If you associate a document with an instance that already has an associated document, the system returns the <code>AssociationAlreadyExists</code> exception.</p>
		/// CreateAssociation /#X-Amz-Target=AmazonSSM.CreateAssociation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAssociationResult> CreateAssociationAsync(CreateAssociationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.CreateAssociation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateAssociationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Associates the specified Systems Manager document with the specified instances or targets.</p> <p>When you associate a document with one or more instances using instance IDs or tags, SSM Agent running on the instance processes the document and configures the instance as specified.</p> <p>If you associate a document with an instance that already has an associated document, the system returns the AssociationAlreadyExists exception.</p>
		/// CreateAssociationBatch /#X-Amz-Target=AmazonSSM.CreateAssociationBatch
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAssociationBatchResult> CreateAssociationBatchAsync(CreateAssociationBatchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.CreateAssociationBatch";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateAssociationBatchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a Systems Manager (SSM) document. An SSM document defines the actions that Systems Manager performs on your managed instances. For more information about SSM documents, including information about supported schemas, features, and syntax, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-ssm-docs.html">AWS Systems Manager Documents</a> in the <i>AWS Systems Manager User Guide</i>.
		/// CreateDocument /#X-Amz-Target=AmazonSSM.CreateDocument
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDocumentResult> CreateDocumentAsync(CreateDocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.CreateDocument";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDocumentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new maintenance window.</p> <note> <p>The value you specify for <code>Duration</code> determines the specific end time for the maintenance window based on the time it begins. No maintenance window tasks are permitted to start after the resulting endtime minus the number of hours you specify for <code>Cutoff</code>. For example, if the maintenance window starts at 3 PM, the duration is three hours, and the value you specify for <code>Cutoff</code> is one hour, no maintenance window tasks can start after 5 PM.</p> </note>
		/// CreateMaintenanceWindow /#X-Amz-Target=AmazonSSM.CreateMaintenanceWindow
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateMaintenanceWindowResult> CreateMaintenanceWindowAsync(CreateMaintenanceWindowRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.CreateMaintenanceWindow";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateMaintenanceWindowResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new OpsItem. You must have permission in AWS Identity and Access Management (IAM) to create a new OpsItem. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their AWS resources. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">AWS Systems Manager OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>. </p>
		/// CreateOpsItem /#X-Amz-Target=AmazonSSM.CreateOpsItem
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateOpsItemResponse> CreateOpsItemAsync(CreateOpsItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.CreateOpsItem";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateOpsItemResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a patch baseline.</p> <note> <p>For information about valid key and value pairs in <code>PatchFilters</code> for each supported operating system type, see <a href="http://docs.aws.amazon.com/systems-manager/latest/APIReference/API_PatchFilter.html">PatchFilter</a>.</p> </note>
		/// CreatePatchBaseline /#X-Amz-Target=AmazonSSM.CreatePatchBaseline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreatePatchBaselineResult> CreatePatchBaselineAsync(CreatePatchBaselineRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.CreatePatchBaseline";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreatePatchBaselineResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>A resource data sync helps you view data from multiple sources in a single location. Systems Manager offers two types of resource data sync: <code>SyncToDestination</code> and <code>SyncFromSource</code>.</p> <p>You can configure Systems Manager Inventory to use the <code>SyncToDestination</code> type to synchronize Inventory data from multiple AWS Regions to a single S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-datasync.html">Configuring Resource Data Sync for Inventory</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>You can configure Systems Manager Explorer to use the <code>SyncFromSource</code> type to synchronize operational work items (OpsItems) and operational data (OpsData) from multiple AWS Regions to a single S3 bucket. This type can synchronize OpsItems and OpsData from multiple AWS accounts and Regions or <code>EntireOrganization</code> by using AWS Organizations. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resource-data-sync.html">Setting up Systems Manager Explorer to display data from multiple accounts and Regions</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>A resource data sync is an asynchronous operation that returns immediately. After a successful initial sync is completed, the system continuously syncs data. To check the status of a sync, use the <a>ListResourceDataSync</a>.</p> <note> <p>By default, data is not encrypted in Amazon S3. We strongly recommend that you enable encryption in Amazon S3 to ensure secure data storage. We also recommend that you secure access to the Amazon S3 bucket by creating a restrictive bucket policy. </p> </note>
		/// CreateResourceDataSync /#X-Amz-Target=AmazonSSM.CreateResourceDataSync
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateResourceDataSyncResult> CreateResourceDataSyncAsync(CreateResourceDataSyncRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.CreateResourceDataSync";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateResourceDataSyncResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an activation. You are not required to delete an activation. If you delete an activation, you can no longer use it to register additional managed instances. Deleting an activation does not de-register managed instances. You must manually de-register managed instances.
		/// DeleteActivation /#X-Amz-Target=AmazonSSM.DeleteActivation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteActivationResult> DeleteActivationAsync(DeleteActivationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DeleteActivation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteActivationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates the specified Systems Manager document from the specified instance.</p> <p>When you disassociate a document from an instance, it does not change the configuration of the instance. To change the configuration state of an instance after you disassociate a document, you must create a new document with the desired configuration and associate it with the instance.</p>
		/// DeleteAssociation /#X-Amz-Target=AmazonSSM.DeleteAssociation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAssociationResult> DeleteAssociationAsync(DeleteAssociationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DeleteAssociation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteAssociationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the Systems Manager document and all instance associations to the document.</p> <p>Before you delete the document, we recommend that you use <a>DeleteAssociation</a> to disassociate all instances that are associated with the document.</p>
		/// DeleteDocument /#X-Amz-Target=AmazonSSM.DeleteDocument
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDocumentResult> DeleteDocumentAsync(DeleteDocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DeleteDocument";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDocumentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a custom inventory type, or the data associated with a custom Inventory type. Deleting a custom inventory type is also referred to as deleting a custom inventory schema.
		/// DeleteInventory /#X-Amz-Target=AmazonSSM.DeleteInventory
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteInventoryResult> DeleteInventoryAsync(DeleteInventoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DeleteInventory";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteInventoryResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a maintenance window.
		/// DeleteMaintenanceWindow /#X-Amz-Target=AmazonSSM.DeleteMaintenanceWindow
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteMaintenanceWindowResult> DeleteMaintenanceWindowAsync(DeleteMaintenanceWindowRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DeleteMaintenanceWindow";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteMaintenanceWindowResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a parameter from the system.
		/// DeleteParameter /#X-Amz-Target=AmazonSSM.DeleteParameter
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteParameterResult> DeleteParameterAsync(DeleteParameterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DeleteParameter";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteParameterResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a list of parameters.
		/// DeleteParameters /#X-Amz-Target=AmazonSSM.DeleteParameters
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteParametersResult> DeleteParametersAsync(DeleteParametersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DeleteParameters";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteParametersResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a patch baseline.
		/// DeletePatchBaseline /#X-Amz-Target=AmazonSSM.DeletePatchBaseline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeletePatchBaselineResult> DeletePatchBaselineAsync(DeletePatchBaselineRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DeletePatchBaseline";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeletePatchBaselineResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Resource Data Sync configuration. After the configuration is deleted, changes to data on managed instances are no longer synced to or from the target. Deleting a sync configuration does not delete data.
		/// DeleteResourceDataSync /#X-Amz-Target=AmazonSSM.DeleteResourceDataSync
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteResourceDataSyncResult> DeleteResourceDataSyncAsync(DeleteResourceDataSyncRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DeleteResourceDataSync";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteResourceDataSyncResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the server or virtual machine from the list of registered servers. You can reregister the instance again at any time. If you don't plan to use Run Command on the server, we suggest uninstalling SSM Agent first.
		/// DeregisterManagedInstance /#X-Amz-Target=AmazonSSM.DeregisterManagedInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeregisterManagedInstanceResult> DeregisterManagedInstanceAsync(DeregisterManagedInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DeregisterManagedInstance";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeregisterManagedInstanceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a patch group from a patch baseline.
		/// DeregisterPatchBaselineForPatchGroup /#X-Amz-Target=AmazonSSM.DeregisterPatchBaselineForPatchGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeregisterPatchBaselineForPatchGroupResult> DeregisterPatchBaselineForPatchGroupAsync(DeregisterPatchBaselineForPatchGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DeregisterPatchBaselineForPatchGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeregisterPatchBaselineForPatchGroupResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a target from a maintenance window.
		/// DeregisterTargetFromMaintenanceWindow /#X-Amz-Target=AmazonSSM.DeregisterTargetFromMaintenanceWindow
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeregisterTargetFromMaintenanceWindowResult> DeregisterTargetFromMaintenanceWindowAsync(DeregisterTargetFromMaintenanceWindowRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DeregisterTargetFromMaintenanceWindow";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeregisterTargetFromMaintenanceWindowResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a task from a maintenance window.
		/// DeregisterTaskFromMaintenanceWindow /#X-Amz-Target=AmazonSSM.DeregisterTaskFromMaintenanceWindow
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeregisterTaskFromMaintenanceWindowResult> DeregisterTaskFromMaintenanceWindowAsync(DeregisterTaskFromMaintenanceWindowRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DeregisterTaskFromMaintenanceWindow";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeregisterTaskFromMaintenanceWindowResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes details about the activation, such as the date and time the activation was created, its expiration date, the IAM role assigned to the instances in the activation, and the number of instances registered by using this activation.
		/// DescribeActivations /#X-Amz-Target=AmazonSSM.DescribeActivations
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeActivationsResult> DescribeActivationsAsync(string MaxResults, string NextToken, DescribeActivationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeActivations?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeActivationsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the association for the specified target or instance. If you created the association by using the <code>Targets</code> parameter, then you must retrieve the association by using the association ID. If you created the association by specifying an instance ID and a Systems Manager document, then you retrieve the association by specifying the document name and the instance ID.
		/// DescribeAssociation /#X-Amz-Target=AmazonSSM.DescribeAssociation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAssociationResult> DescribeAssociationAsync(DescribeAssociationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeAssociation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAssociationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use this API action to view information about a specific execution of a specific association.
		/// DescribeAssociationExecutionTargets /#X-Amz-Target=AmazonSSM.DescribeAssociationExecutionTargets
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAssociationExecutionTargetsResult> DescribeAssociationExecutionTargetsAsync(DescribeAssociationExecutionTargetsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeAssociationExecutionTargets";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAssociationExecutionTargetsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use this API action to view all executions for a specific association ID.
		/// DescribeAssociationExecutions /#X-Amz-Target=AmazonSSM.DescribeAssociationExecutions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAssociationExecutionsResult> DescribeAssociationExecutionsAsync(DescribeAssociationExecutionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeAssociationExecutions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAssociationExecutionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides details about all active and terminated Automation executions.
		/// DescribeAutomationExecutions /#X-Amz-Target=AmazonSSM.DescribeAutomationExecutions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAutomationExecutionsResult> DescribeAutomationExecutionsAsync(DescribeAutomationExecutionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeAutomationExecutions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAutomationExecutionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Information about all active and terminated step executions in an Automation workflow.
		/// DescribeAutomationStepExecutions /#X-Amz-Target=AmazonSSM.DescribeAutomationStepExecutions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAutomationStepExecutionsResult> DescribeAutomationStepExecutionsAsync(DescribeAutomationStepExecutionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeAutomationStepExecutions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAutomationStepExecutionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all patches eligible to be included in a patch baseline.
		/// DescribeAvailablePatches /#X-Amz-Target=AmazonSSM.DescribeAvailablePatches
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAvailablePatchesResult> DescribeAvailablePatchesAsync(DescribeAvailablePatchesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeAvailablePatches";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAvailablePatchesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the specified Systems Manager document.
		/// DescribeDocument /#X-Amz-Target=AmazonSSM.DescribeDocument
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDocumentResult> DescribeDocumentAsync(DescribeDocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeDocument";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDocumentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the permissions for a Systems Manager document. If you created the document, you are the owner. If a document is shared, it can either be shared privately (by specifying a user's AWS account ID) or publicly (<i>All</i>).
		/// DescribeDocumentPermission /#X-Amz-Target=AmazonSSM.DescribeDocumentPermission
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDocumentPermissionResponse> DescribeDocumentPermissionAsync(DescribeDocumentPermissionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeDocumentPermission";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDocumentPermissionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// All associations for the instance(s).
		/// DescribeEffectiveInstanceAssociations /#X-Amz-Target=AmazonSSM.DescribeEffectiveInstanceAssociations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeEffectiveInstanceAssociationsResult> DescribeEffectiveInstanceAssociationsAsync(DescribeEffectiveInstanceAssociationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeEffectiveInstanceAssociations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeEffectiveInstanceAssociationsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the current effective patches (the patch and the approval state) for the specified patch baseline. Note that this API applies only to Windows patch baselines.
		/// DescribeEffectivePatchesForPatchBaseline /#X-Amz-Target=AmazonSSM.DescribeEffectivePatchesForPatchBaseline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeEffectivePatchesForPatchBaselineResult> DescribeEffectivePatchesForPatchBaselineAsync(DescribeEffectivePatchesForPatchBaselineRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeEffectivePatchesForPatchBaseline";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeEffectivePatchesForPatchBaselineResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The status of the associations for the instance(s).
		/// DescribeInstanceAssociationsStatus /#X-Amz-Target=AmazonSSM.DescribeInstanceAssociationsStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeInstanceAssociationsStatusResult> DescribeInstanceAssociationsStatusAsync(DescribeInstanceAssociationsStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeInstanceAssociationsStatus";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeInstanceAssociationsStatusResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of your instances, including information about the operating system platform, the version of SSM Agent installed on the instance, instance status, and so on.</p> <p>If you specify one or more instance IDs, it returns information for those instances. If you do not specify instance IDs, it returns information for all your instances. If you specify an instance ID that is not valid or an instance that you do not own, you receive an error.</p> <note> <p>The IamRole field for this API action is the Amazon Identity and Access Management (IAM) role assigned to on-premises instances. This call does not return the IAM role for EC2 instances.</p> </note>
		/// DescribeInstanceInformation /#X-Amz-Target=AmazonSSM.DescribeInstanceInformation
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeInstanceInformationResult> DescribeInstanceInformationAsync(string MaxResults, string NextToken, DescribeInstanceInformationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeInstanceInformation?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeInstanceInformationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the high-level patch state of one or more instances.
		/// DescribeInstancePatchStates /#X-Amz-Target=AmazonSSM.DescribeInstancePatchStates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeInstancePatchStatesResult> DescribeInstancePatchStatesAsync(DescribeInstancePatchStatesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeInstancePatchStates";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeInstancePatchStatesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the high-level patch state for the instances in the specified patch group.
		/// DescribeInstancePatchStatesForPatchGroup /#X-Amz-Target=AmazonSSM.DescribeInstancePatchStatesForPatchGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeInstancePatchStatesForPatchGroupResult> DescribeInstancePatchStatesForPatchGroupAsync(DescribeInstancePatchStatesForPatchGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeInstancePatchStatesForPatchGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeInstancePatchStatesForPatchGroupResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the patches on the specified instance and their state relative to the patch baseline being used for the instance.
		/// DescribeInstancePatches /#X-Amz-Target=AmazonSSM.DescribeInstancePatches
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeInstancePatchesResult> DescribeInstancePatchesAsync(DescribeInstancePatchesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeInstancePatches";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeInstancePatchesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes a specific delete inventory operation.
		/// DescribeInventoryDeletions /#X-Amz-Target=AmazonSSM.DescribeInventoryDeletions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeInventoryDeletionsResult> DescribeInventoryDeletionsAsync(DescribeInventoryDeletionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeInventoryDeletions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeInventoryDeletionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the individual task executions (one per target) for a particular task run as part of a maintenance window execution.
		/// DescribeMaintenanceWindowExecutionTaskInvocations /#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowExecutionTaskInvocations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeMaintenanceWindowExecutionTaskInvocationsResult> DescribeMaintenanceWindowExecutionTaskInvocationsAsync(DescribeMaintenanceWindowExecutionTaskInvocationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowExecutionTaskInvocations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeMaintenanceWindowExecutionTaskInvocationsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// For a given maintenance window execution, lists the tasks that were run.
		/// DescribeMaintenanceWindowExecutionTasks /#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowExecutionTasks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeMaintenanceWindowExecutionTasksResult> DescribeMaintenanceWindowExecutionTasksAsync(DescribeMaintenanceWindowExecutionTasksRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowExecutionTasks";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeMaintenanceWindowExecutionTasksResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the executions of a maintenance window. This includes information about when the maintenance window was scheduled to be active, and information about tasks registered and run with the maintenance window.
		/// DescribeMaintenanceWindowExecutions /#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowExecutions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeMaintenanceWindowExecutionsResult> DescribeMaintenanceWindowExecutionsAsync(DescribeMaintenanceWindowExecutionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowExecutions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeMaintenanceWindowExecutionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about upcoming executions of a maintenance window.
		/// DescribeMaintenanceWindowSchedule /#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowSchedule
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeMaintenanceWindowScheduleResult> DescribeMaintenanceWindowScheduleAsync(DescribeMaintenanceWindowScheduleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowSchedule";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeMaintenanceWindowScheduleResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the targets registered with the maintenance window.
		/// DescribeMaintenanceWindowTargets /#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowTargets
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeMaintenanceWindowTargetsResult> DescribeMaintenanceWindowTargetsAsync(DescribeMaintenanceWindowTargetsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowTargets";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeMaintenanceWindowTargetsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the tasks in a maintenance window.
		/// DescribeMaintenanceWindowTasks /#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowTasks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeMaintenanceWindowTasksResult> DescribeMaintenanceWindowTasksAsync(DescribeMaintenanceWindowTasksRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowTasks";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeMaintenanceWindowTasksResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the maintenance windows in an AWS account.
		/// DescribeMaintenanceWindows /#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindows
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeMaintenanceWindowsResult> DescribeMaintenanceWindowsAsync(DescribeMaintenanceWindowsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindows";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeMaintenanceWindowsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the maintenance window targets or tasks that an instance is associated with.
		/// DescribeMaintenanceWindowsForTarget /#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowsForTarget
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeMaintenanceWindowsForTargetResult> DescribeMaintenanceWindowsForTargetAsync(DescribeMaintenanceWindowsForTargetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeMaintenanceWindowsForTarget";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeMaintenanceWindowsForTargetResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Query a set of OpsItems. You must have permission in AWS Identity and Access Management (IAM) to query a list of OpsItems. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their AWS resources. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">AWS Systems Manager OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>. </p>
		/// DescribeOpsItems /#X-Amz-Target=AmazonSSM.DescribeOpsItems
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeOpsItemsResponse> DescribeOpsItemsAsync(DescribeOpsItemsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeOpsItems";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeOpsItemsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Get information about a parameter.</p> <note> <p>Request results are returned on a best-effort basis. If you specify <code>MaxResults</code> in the request, the response includes information up to the limit specified. The number of items returned, however, can be between zero and the value of <code>MaxResults</code>. If the service reaches an internal limit while processing the results, it stops the operation and returns the matching values up to that point and a <code>NextToken</code>. You can specify the <code>NextToken</code> in a subsequent call to get the next set of results.</p> </note>
		/// DescribeParameters /#X-Amz-Target=AmazonSSM.DescribeParameters
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeParametersResult> DescribeParametersAsync(string MaxResults, string NextToken, DescribeParametersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeParameters?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeParametersResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the patch baselines in your AWS account.
		/// DescribePatchBaselines /#X-Amz-Target=AmazonSSM.DescribePatchBaselines
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribePatchBaselinesResult> DescribePatchBaselinesAsync(DescribePatchBaselinesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribePatchBaselines";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribePatchBaselinesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns high-level aggregated patch compliance state for a patch group.
		/// DescribePatchGroupState /#X-Amz-Target=AmazonSSM.DescribePatchGroupState
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribePatchGroupStateResult> DescribePatchGroupStateAsync(DescribePatchGroupStateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribePatchGroupState";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribePatchGroupStateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all patch groups that have been registered with patch baselines.
		/// DescribePatchGroups /#X-Amz-Target=AmazonSSM.DescribePatchGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribePatchGroupsResult> DescribePatchGroupsAsync(DescribePatchGroupsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribePatchGroups";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribePatchGroupsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the properties of available patches organized by product, product family, classification, severity, and other properties of available patches. You can use the reported properties in the filters you specify in requests for actions such as <a>CreatePatchBaseline</a>, <a>UpdatePatchBaseline</a>, <a>DescribeAvailablePatches</a>, and <a>DescribePatchBaselines</a>.</p> <p>The following section lists the properties that can be used in filters for each major operating system type:</p> <dl> <dt>WINDOWS</dt> <dd> <p>Valid properties: PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, MSRC_SEVERITY</p> </dd> <dt>AMAZON_LINUX</dt> <dd> <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p> </dd> <dt>AMAZON_LINUX_2</dt> <dd> <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p> </dd> <dt>UBUNTU </dt> <dd> <p>Valid properties: PRODUCT, PRIORITY</p> </dd> <dt>REDHAT_ENTERPRISE_LINUX</dt> <dd> <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p> </dd> <dt>SUSE</dt> <dd> <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p> </dd> <dt>CENTOS</dt> <dd> <p>Valid properties: PRODUCT, CLASSIFICATION, SEVERITY</p> </dd> </dl>
		/// DescribePatchProperties /#X-Amz-Target=AmazonSSM.DescribePatchProperties
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribePatchPropertiesResult> DescribePatchPropertiesAsync(DescribePatchPropertiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribePatchProperties";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribePatchPropertiesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of all active sessions (both connected and disconnected) or terminated sessions from the past 30 days.
		/// DescribeSessions /#X-Amz-Target=AmazonSSM.DescribeSessions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeSessionsResponse> DescribeSessionsAsync(DescribeSessionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.DescribeSessions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeSessionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get detailed information about a particular Automation execution.
		/// GetAutomationExecution /#X-Amz-Target=AmazonSSM.GetAutomationExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAutomationExecutionResult> GetAutomationExecutionAsync(GetAutomationExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetAutomationExecution";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAutomationExecutionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the state of the AWS Systems Manager Change Calendar at an optional, specified time. If you specify a time, <code>GetCalendarState</code> returns the state of the calendar at a specific time, and returns the next time that the Change Calendar state will transition. If you do not specify a time, <code>GetCalendarState</code> assumes the current time. Change Calendar entries have two possible states: <code>OPEN</code> or <code>CLOSED</code>. For more information about Systems Manager Change Calendar, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar.html">AWS Systems Manager Change Calendar</a> in the <i>AWS Systems Manager User Guide</i>.
		/// GetCalendarState /#X-Amz-Target=AmazonSSM.GetCalendarState
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCalendarStateResponse> GetCalendarStateAsync(GetCalendarStateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetCalendarState";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetCalendarStateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns detailed information about command execution for an invocation or plugin.
		/// GetCommandInvocation /#X-Amz-Target=AmazonSSM.GetCommandInvocation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCommandInvocationResult> GetCommandInvocationAsync(GetCommandInvocationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetCommandInvocation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetCommandInvocationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the Session Manager connection status for an instance to determine whether it is running and ready to receive Session Manager connections.
		/// GetConnectionStatus /#X-Amz-Target=AmazonSSM.GetConnectionStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetConnectionStatusResponse> GetConnectionStatusAsync(GetConnectionStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetConnectionStatus";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetConnectionStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the default patch baseline. Note that Systems Manager supports creating multiple default patch baselines. For example, you can create a default patch baseline for each operating system.</p> <p>If you do not specify an operating system value, the default patch baseline for Windows is returned.</p>
		/// GetDefaultPatchBaseline /#X-Amz-Target=AmazonSSM.GetDefaultPatchBaseline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDefaultPatchBaselineResult> GetDefaultPatchBaselineAsync(GetDefaultPatchBaselineRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetDefaultPatchBaseline";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDefaultPatchBaselineResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the current snapshot for the patch baseline the instance uses. This API is primarily used by the AWS-RunPatchBaseline Systems Manager document.
		/// GetDeployablePatchSnapshotForInstance /#X-Amz-Target=AmazonSSM.GetDeployablePatchSnapshotForInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeployablePatchSnapshotForInstanceResult> GetDeployablePatchSnapshotForInstanceAsync(GetDeployablePatchSnapshotForInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetDeployablePatchSnapshotForInstance";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDeployablePatchSnapshotForInstanceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the contents of the specified Systems Manager document.
		/// GetDocument /#X-Amz-Target=AmazonSSM.GetDocument
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDocumentResult> GetDocumentAsync(GetDocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetDocument";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDocumentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Query inventory information.
		/// GetInventory /#X-Amz-Target=AmazonSSM.GetInventory
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInventoryResult> GetInventoryAsync(GetInventoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetInventory";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetInventoryResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Return a list of inventory type names for the account, or return a list of attribute names for a specific Inventory item type.
		/// GetInventorySchema /#X-Amz-Target=AmazonSSM.GetInventorySchema
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInventorySchemaResult> GetInventorySchemaAsync(GetInventorySchemaRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetInventorySchema";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetInventorySchemaResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a maintenance window.
		/// GetMaintenanceWindow /#X-Amz-Target=AmazonSSM.GetMaintenanceWindow
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetMaintenanceWindowResult> GetMaintenanceWindowAsync(GetMaintenanceWindowRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetMaintenanceWindow";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetMaintenanceWindowResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves details about a specific a maintenance window execution.
		/// GetMaintenanceWindowExecution /#X-Amz-Target=AmazonSSM.GetMaintenanceWindowExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetMaintenanceWindowExecutionResult> GetMaintenanceWindowExecutionAsync(GetMaintenanceWindowExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetMaintenanceWindowExecution";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetMaintenanceWindowExecutionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the details about a specific task run as part of a maintenance window execution.
		/// GetMaintenanceWindowExecutionTask /#X-Amz-Target=AmazonSSM.GetMaintenanceWindowExecutionTask
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetMaintenanceWindowExecutionTaskResult> GetMaintenanceWindowExecutionTaskAsync(GetMaintenanceWindowExecutionTaskRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetMaintenanceWindowExecutionTask";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetMaintenanceWindowExecutionTaskResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a specific task running on a specific target.
		/// GetMaintenanceWindowExecutionTaskInvocation /#X-Amz-Target=AmazonSSM.GetMaintenanceWindowExecutionTaskInvocation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetMaintenanceWindowExecutionTaskInvocationResult> GetMaintenanceWindowExecutionTaskInvocationAsync(GetMaintenanceWindowExecutionTaskInvocationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetMaintenanceWindowExecutionTaskInvocation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetMaintenanceWindowExecutionTaskInvocationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the tasks in a maintenance window.
		/// GetMaintenanceWindowTask /#X-Amz-Target=AmazonSSM.GetMaintenanceWindowTask
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetMaintenanceWindowTaskResult> GetMaintenanceWindowTaskAsync(GetMaintenanceWindowTaskRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetMaintenanceWindowTask";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetMaintenanceWindowTaskResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Get information about an OpsItem by using the ID. You must have permission in AWS Identity and Access Management (IAM) to view information about an OpsItem. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their AWS resources. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">AWS Systems Manager OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>. </p>
		/// GetOpsItem /#X-Amz-Target=AmazonSSM.GetOpsItem
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOpsItemResponse> GetOpsItemAsync(GetOpsItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetOpsItem";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetOpsItemResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View a summary of OpsItems based on specified filters and aggregators.
		/// GetOpsSummary /#X-Amz-Target=AmazonSSM.GetOpsSummary
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOpsSummaryResult> GetOpsSummaryAsync(GetOpsSummaryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetOpsSummary";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetOpsSummaryResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get information about a parameter by using the parameter name. Don't confuse this API action with the <a>GetParameters</a> API action.
		/// GetParameter /#X-Amz-Target=AmazonSSM.GetParameter
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetParameterResult> GetParameterAsync(GetParameterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetParameter";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetParameterResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Query a list of all parameters used by the AWS account.
		/// GetParameterHistory /#X-Amz-Target=AmazonSSM.GetParameterHistory
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetParameterHistoryResult> GetParameterHistoryAsync(string MaxResults, string NextToken, GetParameterHistoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetParameterHistory?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetParameterHistoryResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get details of a parameter. Don't confuse this API action with the <a>GetParameter</a> API action.
		/// GetParameters /#X-Amz-Target=AmazonSSM.GetParameters
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetParametersResult> GetParametersAsync(GetParametersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetParameters";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetParametersResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieve information about one or more parameters in a specific hierarchy. </p> <note> <p>Request results are returned on a best-effort basis. If you specify <code>MaxResults</code> in the request, the response includes information up to the limit specified. The number of items returned, however, can be between zero and the value of <code>MaxResults</code>. If the service reaches an internal limit while processing the results, it stops the operation and returns the matching values up to that point and a <code>NextToken</code>. You can specify the <code>NextToken</code> in a subsequent call to get the next set of results.</p> </note>
		/// GetParametersByPath /#X-Amz-Target=AmazonSSM.GetParametersByPath
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetParametersByPathResult> GetParametersByPathAsync(string MaxResults, string NextToken, GetParametersByPathRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetParametersByPath?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetParametersByPathResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a patch baseline.
		/// GetPatchBaseline /#X-Amz-Target=AmazonSSM.GetPatchBaseline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPatchBaselineResult> GetPatchBaselineAsync(GetPatchBaselineRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetPatchBaseline";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetPatchBaselineResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the patch baseline that should be used for the specified patch group.
		/// GetPatchBaselineForPatchGroup /#X-Amz-Target=AmazonSSM.GetPatchBaselineForPatchGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPatchBaselineForPatchGroupResult> GetPatchBaselineForPatchGroupAsync(GetPatchBaselineForPatchGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetPatchBaselineForPatchGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetPatchBaselineForPatchGroupResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> <code>ServiceSetting</code> is an account-level setting for an AWS service. This setting defines how a user interacts with or uses a service or a feature of a service. For example, if an AWS service charges money to the account based on feature or service usage, then the AWS service team might create a default setting of "false". This means the user can't use this feature unless they change the setting to "true" and intentionally opt in for a paid feature.</p> <p>Services map a <code>SettingId</code> object to a setting value. AWS services teams define the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>, but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code> permission for the setting. Use the <a>UpdateServiceSetting</a> API action to change the default setting. Or use the <a>ResetServiceSetting</a> to change the value back to the original value defined by the AWS service team.</p> <p>Query the current service setting for the account. </p>
		/// GetServiceSetting /#X-Amz-Target=AmazonSSM.GetServiceSetting
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetServiceSettingResult> GetServiceSettingAsync(GetServiceSettingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.GetServiceSetting";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetServiceSettingResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>A parameter label is a user-defined alias to help you manage different versions of a parameter. When you modify a parameter, Systems Manager automatically saves a new version and increments the version number by one. A label can help you remember the purpose of a parameter when there are multiple versions. </p> <p>Parameter labels have the following requirements and restrictions.</p> <ul> <li> <p>A version of a parameter can have a maximum of 10 labels.</p> </li> <li> <p>You can't attach the same label to different versions of the same parameter. For example, if version 1 has the label Production, then you can't attach Production to version 2.</p> </li> <li> <p>You can move a label from one version of a parameter to another.</p> </li> <li> <p>You can't create a label when you create a new parameter. You must attach a label to a specific version of a parameter.</p> </li> <li> <p>You can't delete a parameter label. If you no longer want to use a parameter label, then you must move it to a different version of a parameter.</p> </li> <li> <p>A label can have a maximum of 100 characters.</p> </li> <li> <p>Labels can contain letters (case sensitive), numbers, periods (.), hyphens (-), or underscores (_).</p> </li> <li> <p>Labels can't begin with a number, "aws," or "ssm" (not case sensitive). If a label fails to meet these requirements, then the label is not associated with a parameter and the system displays it in the list of InvalidLabels.</p> </li> </ul>
		/// LabelParameterVersion /#X-Amz-Target=AmazonSSM.LabelParameterVersion
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LabelParameterVersionResult> LabelParameterVersionAsync(LabelParameterVersionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.LabelParameterVersion";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<LabelParameterVersionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves all versions of an association for a specific association ID.
		/// ListAssociationVersions /#X-Amz-Target=AmazonSSM.ListAssociationVersions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListAssociationVersionsResult> ListAssociationVersionsAsync(ListAssociationVersionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.ListAssociationVersions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListAssociationVersionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns all State Manager associations in the current AWS account and Region. You can limit the results to a specific State Manager association document or instance by specifying a filter.
		/// ListAssociations /#X-Amz-Target=AmazonSSM.ListAssociations
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAssociationsResult> ListAssociationsAsync(string MaxResults, string NextToken, ListAssociationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.ListAssociations?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListAssociationsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// An invocation is copy of a command sent to a specific instance. A command can apply to one or more instances. A command invocation applies to one instance. For example, if a user runs SendCommand against three instances, then a command invocation is created for each requested instance ID. ListCommandInvocations provide status about command execution.
		/// ListCommandInvocations /#X-Amz-Target=AmazonSSM.ListCommandInvocations
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListCommandInvocationsResult> ListCommandInvocationsAsync(string MaxResults, string NextToken, ListCommandInvocationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.ListCommandInvocations?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListCommandInvocationsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the commands requested by users of the AWS account.
		/// ListCommands /#X-Amz-Target=AmazonSSM.ListCommands
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListCommandsResult> ListCommandsAsync(string MaxResults, string NextToken, ListCommandsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.ListCommands?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListCommandsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// For a specified resource ID, this API action returns a list of compliance statuses for different resource types. Currently, you can only specify one resource ID per call. List results depend on the criteria specified in the filter.
		/// ListComplianceItems /#X-Amz-Target=AmazonSSM.ListComplianceItems
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListComplianceItemsResult> ListComplianceItemsAsync(ListComplianceItemsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.ListComplianceItems";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListComplianceItemsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a summary count of compliant and non-compliant resources for a compliance type. For example, this call can return State Manager associations, patches, or custom compliance types according to the filter criteria that you specify.
		/// ListComplianceSummaries /#X-Amz-Target=AmazonSSM.ListComplianceSummaries
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListComplianceSummariesResult> ListComplianceSummariesAsync(ListComplianceSummariesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.ListComplianceSummaries";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListComplianceSummariesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all versions for a document.
		/// ListDocumentVersions /#X-Amz-Target=AmazonSSM.ListDocumentVersions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListDocumentVersionsResult> ListDocumentVersionsAsync(ListDocumentVersionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.ListDocumentVersions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDocumentVersionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns all Systems Manager (SSM) documents in the current AWS account and Region. You can limit the results of this request by using a filter.
		/// ListDocuments /#X-Amz-Target=AmazonSSM.ListDocuments
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDocumentsResult> ListDocumentsAsync(string MaxResults, string NextToken, ListDocumentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.ListDocuments?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDocumentsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// A list of inventory items returned by the request.
		/// ListInventoryEntries /#X-Amz-Target=AmazonSSM.ListInventoryEntries
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListInventoryEntriesResult> ListInventoryEntriesAsync(ListInventoryEntriesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.ListInventoryEntries";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListInventoryEntriesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a resource-level summary count. The summary includes information about compliant and non-compliant statuses and detailed compliance-item severity counts, according to the filter criteria you specify.
		/// ListResourceComplianceSummaries /#X-Amz-Target=AmazonSSM.ListResourceComplianceSummaries
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListResourceComplianceSummariesResult> ListResourceComplianceSummariesAsync(ListResourceComplianceSummariesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.ListResourceComplianceSummaries";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListResourceComplianceSummariesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists your resource data sync configurations. Includes information about the last time a sync attempted to start, the last sync status, and the last time a sync successfully completed.</p> <p>The number of sync configurations might be too large to return using a single call to <code>ListResourceDataSync</code>. You can limit the number of sync configurations returned by using the <code>MaxResults</code> parameter. To determine whether there are more sync configurations to list, check the value of <code>NextToken</code> in the output. If there are more sync configurations to list, you can request them by specifying the <code>NextToken</code> returned in the call to the parameter of a subsequent call. </p>
		/// ListResourceDataSync /#X-Amz-Target=AmazonSSM.ListResourceDataSync
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListResourceDataSyncResult> ListResourceDataSyncAsync(ListResourceDataSyncRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.ListResourceDataSync";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListResourceDataSyncResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the tags assigned to the specified resource.
		/// ListTagsForResource /#X-Amz-Target=AmazonSSM.ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResult> ListTagsForResourceAsync(ListTagsForResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.ListTagsForResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Shares a Systems Manager document publicly or privately. If you share a document privately, you must specify the AWS user account IDs for those people who can use the document. If you share a document publicly, you must specify <i>All</i> as the account ID.
		/// ModifyDocumentPermission /#X-Amz-Target=AmazonSSM.ModifyDocumentPermission
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ModifyDocumentPermissionResponse> ModifyDocumentPermissionAsync(ModifyDocumentPermissionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.ModifyDocumentPermission";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ModifyDocumentPermissionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Registers a compliance type and other compliance details on a designated resource. This action lets you register custom compliance details with a resource. This call overwrites existing compliance information on the resource, so you must provide a full list of compliance items each time that you send the request.</p> <p>ComplianceType can be one of the following:</p> <ul> <li> <p>ExecutionId: The execution ID when the patch, association, or custom compliance item was applied.</p> </li> <li> <p>ExecutionType: Specify patch, association, or Custom:<code>string</code>.</p> </li> <li> <p>ExecutionTime. The time the patch, association, or custom compliance item was applied to the instance.</p> </li> <li> <p>Id: The patch, association, or custom compliance ID.</p> </li> <li> <p>Title: A title.</p> </li> <li> <p>Status: The status of the compliance item. For example, <code>approved</code> for patches, or <code>Failed</code> for associations.</p> </li> <li> <p>Severity: A patch severity. For example, <code>critical</code>.</p> </li> <li> <p>DocumentName: A SSM document name. For example, AWS-RunPatchBaseline.</p> </li> <li> <p>DocumentVersion: An SSM document version number. For example, 4.</p> </li> <li> <p>Classification: A patch classification. For example, <code>security updates</code>.</p> </li> <li> <p>PatchBaselineId: A patch baseline ID.</p> </li> <li> <p>PatchSeverity: A patch severity. For example, <code>Critical</code>.</p> </li> <li> <p>PatchState: A patch state. For example, <code>InstancesWithFailedPatches</code>.</p> </li> <li> <p>PatchGroup: The name of a patch group.</p> </li> <li> <p>InstalledTime: The time the association, patch, or custom compliance item was applied to the resource. Specify the time by using the following format: yyyy-MM-dd'T'HH:mm:ss'Z'</p> </li> </ul>
		/// PutComplianceItems /#X-Amz-Target=AmazonSSM.PutComplianceItems
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutComplianceItemsResult> PutComplianceItemsAsync(PutComplianceItemsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.PutComplianceItems";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutComplianceItemsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Bulk update custom inventory items on one more instance. The request adds an inventory item, if it doesn't already exist, or updates an inventory item, if it does exist.
		/// PutInventory /#X-Amz-Target=AmazonSSM.PutInventory
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutInventoryResult> PutInventoryAsync(PutInventoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.PutInventory";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutInventoryResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a parameter to the system.
		/// PutParameter /#X-Amz-Target=AmazonSSM.PutParameter
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutParameterResult> PutParameterAsync(PutParameterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.PutParameter";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutParameterResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Defines the default patch baseline for the relevant operating system.</p> <p>To reset the AWS predefined patch baseline as the default, specify the full patch baseline ARN as the baseline ID value. For example, for CentOS, specify <code>arn:aws:ssm:us-east-2:733109147000:patchbaseline/pb-0574b43a65ea646ed</code> instead of <code>pb-0574b43a65ea646ed</code>.</p>
		/// RegisterDefaultPatchBaseline /#X-Amz-Target=AmazonSSM.RegisterDefaultPatchBaseline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterDefaultPatchBaselineResult> RegisterDefaultPatchBaselineAsync(RegisterDefaultPatchBaselineRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.RegisterDefaultPatchBaseline";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RegisterDefaultPatchBaselineResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Registers a patch baseline for a patch group.
		/// RegisterPatchBaselineForPatchGroup /#X-Amz-Target=AmazonSSM.RegisterPatchBaselineForPatchGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterPatchBaselineForPatchGroupResult> RegisterPatchBaselineForPatchGroupAsync(RegisterPatchBaselineForPatchGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.RegisterPatchBaselineForPatchGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RegisterPatchBaselineForPatchGroupResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Registers a target with a maintenance window.
		/// RegisterTargetWithMaintenanceWindow /#X-Amz-Target=AmazonSSM.RegisterTargetWithMaintenanceWindow
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterTargetWithMaintenanceWindowResult> RegisterTargetWithMaintenanceWindowAsync(RegisterTargetWithMaintenanceWindowRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.RegisterTargetWithMaintenanceWindow";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RegisterTargetWithMaintenanceWindowResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds a new task to a maintenance window.
		/// RegisterTaskWithMaintenanceWindow /#X-Amz-Target=AmazonSSM.RegisterTaskWithMaintenanceWindow
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterTaskWithMaintenanceWindowResult> RegisterTaskWithMaintenanceWindowAsync(RegisterTaskWithMaintenanceWindowRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.RegisterTaskWithMaintenanceWindow";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RegisterTaskWithMaintenanceWindowResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes tag keys from the specified resource.
		/// RemoveTagsFromResource /#X-Amz-Target=AmazonSSM.RemoveTagsFromResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RemoveTagsFromResourceResult> RemoveTagsFromResourceAsync(RemoveTagsFromResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.RemoveTagsFromResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RemoveTagsFromResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> <code>ServiceSetting</code> is an account-level setting for an AWS service. This setting defines how a user interacts with or uses a service or a feature of a service. For example, if an AWS service charges money to the account based on feature or service usage, then the AWS service team might create a default setting of "false". This means the user can't use this feature unless they change the setting to "true" and intentionally opt in for a paid feature.</p> <p>Services map a <code>SettingId</code> object to a setting value. AWS services teams define the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>, but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code> permission for the setting. Use the <a>GetServiceSetting</a> API action to view the current value. Use the <a>UpdateServiceSetting</a> API action to change the default setting. </p> <p>Reset the service setting for the account to the default value as provisioned by the AWS service team. </p>
		/// ResetServiceSetting /#X-Amz-Target=AmazonSSM.ResetServiceSetting
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ResetServiceSettingResult> ResetServiceSettingAsync(ResetServiceSettingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.ResetServiceSetting";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ResetServiceSettingResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Reconnects a session to an instance after it has been disconnected. Connections can be resumed for disconnected sessions, but not terminated sessions.</p> <note> <p>This command is primarily for use by client machines to automatically reconnect during intermittent network issues. It is not intended for any other use.</p> </note>
		/// ResumeSession /#X-Amz-Target=AmazonSSM.ResumeSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ResumeSessionResponse> ResumeSessionAsync(ResumeSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.ResumeSession";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ResumeSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sends a signal to an Automation execution to change the current behavior or status of the execution.
		/// SendAutomationSignal /#X-Amz-Target=AmazonSSM.SendAutomationSignal
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SendAutomationSignalResult> SendAutomationSignalAsync(SendAutomationSignalRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.SendAutomationSignal";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SendAutomationSignalResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Runs commands on one or more managed instances.
		/// SendCommand /#X-Amz-Target=AmazonSSM.SendCommand
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SendCommandResult> SendCommandAsync(SendCommandRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.SendCommand";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SendCommandResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use this API action to run an association immediately and only one time. This action can be helpful when troubleshooting associations.
		/// StartAssociationsOnce /#X-Amz-Target=AmazonSSM.StartAssociationsOnce
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartAssociationsOnceResult> StartAssociationsOnceAsync(StartAssociationsOnceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.StartAssociationsOnce";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartAssociationsOnceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Initiates execution of an Automation document.
		/// StartAutomationExecution /#X-Amz-Target=AmazonSSM.StartAutomationExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartAutomationExecutionResult> StartAutomationExecutionAsync(StartAutomationExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.StartAutomationExecution";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartAutomationExecutionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Initiates a connection to a target (for example, an instance) for a Session Manager session. Returns a URL and token that can be used to open a WebSocket connection for sending input and receiving outputs.</p> <note> <p>AWS CLI usage: <code>start-session</code> is an interactive command that requires the Session Manager plugin to be installed on the client machine making the call. For information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html">Install the Session Manager plugin for the AWS CLI</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>AWS Tools for PowerShell usage: Start-SSMSession is not currently supported by AWS Tools for PowerShell on Windows local machines.</p> </note>
		/// StartSession /#X-Amz-Target=AmazonSSM.StartSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartSessionResponse> StartSessionAsync(StartSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.StartSession";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stop an Automation that is currently running.
		/// StopAutomationExecution /#X-Amz-Target=AmazonSSM.StopAutomationExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopAutomationExecutionResult> StopAutomationExecutionAsync(StopAutomationExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.StopAutomationExecution";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopAutomationExecutionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Permanently ends a session and closes the data connection between the Session Manager client and SSM Agent on the instance. A terminated session cannot be resumed.
		/// TerminateSession /#X-Amz-Target=AmazonSSM.TerminateSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TerminateSessionResponse> TerminateSessionAsync(TerminateSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.TerminateSession";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TerminateSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates an association. You can update the association name and version, the document version, schedule, parameters, and Amazon S3 output. </p> <p>In order to call this API action, your IAM user account, group, or role must be configured with permission to call the <a>DescribeAssociation</a> API action. If you don't have permission to call DescribeAssociation, then you receive the following error: <code>An error occurred (AccessDeniedException) when calling the UpdateAssociation operation: User: &lt;user_arn&gt; is not authorized to perform: ssm:DescribeAssociation on resource: &lt;resource_arn&gt;</code> </p> <important> <p>When you update an association, the association immediately runs against the specified targets.</p> </important>
		/// UpdateAssociation /#X-Amz-Target=AmazonSSM.UpdateAssociation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateAssociationResult> UpdateAssociationAsync(UpdateAssociationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.UpdateAssociation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateAssociationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the status of the Systems Manager document associated with the specified instance.
		/// UpdateAssociationStatus /#X-Amz-Target=AmazonSSM.UpdateAssociationStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateAssociationStatusResult> UpdateAssociationStatusAsync(UpdateAssociationStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.UpdateAssociationStatus";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateAssociationStatusResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates one or more values for an SSM document.
		/// UpdateDocument /#X-Amz-Target=AmazonSSM.UpdateDocument
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDocumentResult> UpdateDocumentAsync(UpdateDocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.UpdateDocument";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDocumentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Set the default version of a document.
		/// UpdateDocumentDefaultVersion /#X-Amz-Target=AmazonSSM.UpdateDocumentDefaultVersion
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDocumentDefaultVersionResult> UpdateDocumentDefaultVersionAsync(UpdateDocumentDefaultVersionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.UpdateDocumentDefaultVersion";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDocumentDefaultVersionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates an existing maintenance window. Only specified parameters are modified.</p> <note> <p>The value you specify for <code>Duration</code> determines the specific end time for the maintenance window based on the time it begins. No maintenance window tasks are permitted to start after the resulting endtime minus the number of hours you specify for <code>Cutoff</code>. For example, if the maintenance window starts at 3 PM, the duration is three hours, and the value you specify for <code>Cutoff</code> is one hour, no maintenance window tasks can start after 5 PM.</p> </note>
		/// UpdateMaintenanceWindow /#X-Amz-Target=AmazonSSM.UpdateMaintenanceWindow
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateMaintenanceWindowResult> UpdateMaintenanceWindowAsync(UpdateMaintenanceWindowRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.UpdateMaintenanceWindow";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateMaintenanceWindowResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the target of an existing maintenance window. You can change the following:</p> <ul> <li> <p>Name</p> </li> <li> <p>Description</p> </li> <li> <p>Owner</p> </li> <li> <p>IDs for an ID target</p> </li> <li> <p>Tags for a Tag target</p> </li> <li> <p>From any supported tag type to another. The three supported tag types are ID target, Tag target, and resource group. For more information, see <a>Target</a>.</p> </li> </ul> <note> <p>If a parameter is null, then the corresponding field is not modified.</p> </note>
		/// UpdateMaintenanceWindowTarget /#X-Amz-Target=AmazonSSM.UpdateMaintenanceWindowTarget
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateMaintenanceWindowTargetResult> UpdateMaintenanceWindowTargetAsync(UpdateMaintenanceWindowTargetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.UpdateMaintenanceWindowTarget";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateMaintenanceWindowTargetResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies a task assigned to a maintenance window. You can't change the task type, but you can change the following values:</p> <ul> <li> <p>TaskARN. For example, you can change a RUN_COMMAND task from AWS-RunPowerShellScript to AWS-RunShellScript.</p> </li> <li> <p>ServiceRoleArn</p> </li> <li> <p>TaskInvocationParameters</p> </li> <li> <p>Priority</p> </li> <li> <p>MaxConcurrency</p> </li> <li> <p>MaxErrors</p> </li> </ul> <p>If a parameter is null, then the corresponding field is not modified. Also, if you set Replace to true, then all fields required by the <a>RegisterTaskWithMaintenanceWindow</a> action are required for this request. Optional fields that aren't specified are set to null.</p>
		/// UpdateMaintenanceWindowTask /#X-Amz-Target=AmazonSSM.UpdateMaintenanceWindowTask
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateMaintenanceWindowTaskResult> UpdateMaintenanceWindowTaskAsync(UpdateMaintenanceWindowTaskRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.UpdateMaintenanceWindowTask";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateMaintenanceWindowTaskResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Changes the Amazon Identity and Access Management (IAM) role that is assigned to the on-premises instance or virtual machines (VM). IAM roles are first assigned to these hybrid instances during the activation process. For more information, see <a>CreateActivation</a>.
		/// UpdateManagedInstanceRole /#X-Amz-Target=AmazonSSM.UpdateManagedInstanceRole
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateManagedInstanceRoleResult> UpdateManagedInstanceRoleAsync(UpdateManagedInstanceRoleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.UpdateManagedInstanceRole";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateManagedInstanceRoleResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Edit or change an OpsItem. You must have permission in AWS Identity and Access Management (IAM) to update an OpsItem. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>.</p> <p>Operations engineers and IT professionals use OpsCenter to view, investigate, and remediate operational issues impacting the performance and health of their AWS resources. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">AWS Systems Manager OpsCenter</a> in the <i>AWS Systems Manager User Guide</i>. </p>
		/// UpdateOpsItem /#X-Amz-Target=AmazonSSM.UpdateOpsItem
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateOpsItemResponse> UpdateOpsItemAsync(UpdateOpsItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.UpdateOpsItem";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateOpsItemResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies an existing patch baseline. Fields not specified in the request are left unchanged.</p> <note> <p>For information about valid key and value pairs in <code>PatchFilters</code> for each supported operating system type, see <a href="http://docs.aws.amazon.com/systems-manager/latest/APIReference/API_PatchFilter.html">PatchFilter</a>.</p> </note>
		/// UpdatePatchBaseline /#X-Amz-Target=AmazonSSM.UpdatePatchBaseline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdatePatchBaselineResult> UpdatePatchBaselineAsync(UpdatePatchBaselineRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.UpdatePatchBaseline";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdatePatchBaselineResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Update a resource data sync. After you create a resource data sync for a Region, you can't change the account options for that sync. For example, if you create a sync in the us-east-2 (Ohio) Region and you choose the Include only the current account option, you can't edit that sync later and choose the Include all accounts from my AWS Organizations configuration option. Instead, you must delete the first resource data sync, and create a new one.</p> <note> <p>This API action only supports a resource data sync that was created with a SyncFromSource <code>SyncType</code>.</p> </note>
		/// UpdateResourceDataSync /#X-Amz-Target=AmazonSSM.UpdateResourceDataSync
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateResourceDataSyncResult> UpdateResourceDataSyncAsync(UpdateResourceDataSyncRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.UpdateResourceDataSync";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateResourceDataSyncResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> <code>ServiceSetting</code> is an account-level setting for an AWS service. This setting defines how a user interacts with or uses a service or a feature of a service. For example, if an AWS service charges money to the account based on feature or service usage, then the AWS service team might create a default setting of "false". This means the user can't use this feature unless they change the setting to "true" and intentionally opt in for a paid feature.</p> <p>Services map a <code>SettingId</code> object to a setting value. AWS services teams define the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>, but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code> permission for the setting. Use the <a>GetServiceSetting</a> API action to view the current value. Or, use the <a>ResetServiceSetting</a> to change the value back to the original value defined by the AWS service team.</p> <p>Update the service setting for the account. </p>
		/// UpdateServiceSetting /#X-Amz-Target=AmazonSSM.UpdateServiceSetting
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateServiceSettingResult> UpdateServiceSettingAsync(UpdateServiceSettingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonSSM.UpdateServiceSetting";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateServiceSettingResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
