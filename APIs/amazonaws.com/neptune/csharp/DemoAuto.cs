//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddSourceIdentifierToSubscriptionResult
	{
		
		/// <summary>
		/// Contains the results of a successful invocation of the <a>DescribeEventSubscriptions</a> action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventSubscription EventSubscription { get; set; }
	}
	
	/// <summary>
	/// Metadata assigned to an Amazon Neptune resource consisting of a key-value pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplyPendingMaintenanceActionResult
	{
		
		/// <summary>
		/// Describes the pending maintenance actions for a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourcePendingMaintenanceActions ResourcePendingMaintenanceActions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyDBClusterParameterGroupResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB cluster parameter group.</p> <p>This data type is used as a response element in the <a>DescribeDBClusterParameterGroups</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBClusterParameterGroup DBClusterParameterGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyDBClusterSnapshotResult
	{
		
		/// <summary>
		/// <p>Contains the details for an Amazon Neptune DB cluster snapshot</p> <p>This data type is used as a response element in the <a>DescribeDBClusterSnapshots</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBClusterSnapshot DBClusterSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyDBParameterGroupResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB parameter group.</p> <p>This data type is used as a response element in the <a>DescribeDBParameterGroups</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBParameterGroup DBParameterGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBClusterResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB cluster.</p> <p>This data type is used as a response element in the <a>DescribeDBClusters</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBClusterParameterGroupResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB cluster parameter group.</p> <p>This data type is used as a response element in the <a>DescribeDBClusterParameterGroups</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBClusterParameterGroup DBClusterParameterGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBClusterSnapshotResult
	{
		
		/// <summary>
		/// <p>Contains the details for an Amazon Neptune DB cluster snapshot</p> <p>This data type is used as a response element in the <a>DescribeDBClusterSnapshots</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBClusterSnapshot DBClusterSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBInstanceResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB instance.</p> <p>This data type is used as a response element in the <a>DescribeDBInstances</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBInstance DBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBParameterGroupResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB parameter group.</p> <p>This data type is used as a response element in the <a>DescribeDBParameterGroups</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBParameterGroup DBParameterGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBSubnetGroupResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB subnet group.</p> <p>This data type is used as a response element in the <a>DescribeDBSubnetGroups</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBSubnetGroup DBSubnetGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateEventSubscriptionResult
	{
		
		/// <summary>
		/// Contains the results of a successful invocation of the <a>DescribeEventSubscriptions</a> action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventSubscription EventSubscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBClusterResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB cluster.</p> <p>This data type is used as a response element in the <a>DescribeDBClusters</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBClusterSnapshotResult
	{
		
		/// <summary>
		/// <p>Contains the details for an Amazon Neptune DB cluster snapshot</p> <p>This data type is used as a response element in the <a>DescribeDBClusterSnapshots</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBClusterSnapshot DBClusterSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBInstanceResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB instance.</p> <p>This data type is used as a response element in the <a>DescribeDBInstances</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBInstance DBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteEventSubscriptionResult
	{
		
		/// <summary>
		/// Contains the results of a successful invocation of the <a>DescribeEventSubscriptions</a> action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventSubscription EventSubscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterParameterGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBClusterParameterGroup[] DBClusterParameterGroups { get; set; }
	}
	
	/// <summary>
	/// This type is not currently supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Filter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterParameterGroupDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBClusterSnapshotAttributesResult
	{
		
		/// <summary>
		/// <p>Contains the results of a successful call to the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p> <p>Manual DB cluster snapshot attributes are used to authorize other AWS accounts to copy or restore a manual DB cluster snapshot. For more information, see the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBClusterSnapshotAttributesResult DBClusterSnapshotAttributesResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterSnapshotMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBClusterSnapshot[] DBClusterSnapshots { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBCluster[] DBClusters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBEngineVersionMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBEngineVersion[] DBEngineVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBInstanceMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBInstance[] DBInstances { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBParameterGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBParameterGroup[] DBParameterGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBParameterGroupDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBSubnetGroupMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBSubnetGroup[] DBSubnetGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEngineDefaultClusterParametersResult
	{
		
		/// <summary>
		///  Contains the result of a successful invocation of the <a>DescribeEngineDefaultParameters</a> action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EngineDefaults EngineDefaults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEngineDefaultParametersResult
	{
		
		/// <summary>
		///  Contains the result of a successful invocation of the <a>DescribeEngineDefaultParameters</a> action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EngineDefaults EngineDefaults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventCategoriesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventCategoriesMap[] EventCategoriesMapList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventSubscriptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventSubscription[] EventSubscriptionsList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Event[] Events { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrderableDBInstanceOptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrderableDBInstanceOption[] OrderableDBInstanceOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PendingMaintenanceActionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourcePendingMaintenanceActions[] PendingMaintenanceActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeValidDBInstanceModificationsResult
	{
		
		/// <summary>
		/// Information about valid modifications that you can make to your DB instance. Contains the result of a successful call to the <a>DescribeValidDBInstanceModifications</a> action. You can use this information when you call <a>ModifyDBInstance</a>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ValidDBInstanceModificationsMessage ValidDBInstanceModificationsMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FailoverDBClusterResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB cluster.</p> <p>This data type is used as a response element in the <a>DescribeDBClusters</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagListMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBClusterResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB cluster.</p> <p>This data type is used as a response element in the <a>DescribeDBClusters</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterParameterGroupNameMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
	}
	
	/// <summary>
	/// Specifies a parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Parameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApplyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllowedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsModifiable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinimumEngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterApplyMethod ApplyMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParameterApplyMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		immediate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending-reboot = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBClusterSnapshotAttributeResult
	{
		
		/// <summary>
		/// <p>Contains the results of a successful call to the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p> <p>Manual DB cluster snapshot attributes are used to authorize other AWS accounts to copy or restore a manual DB cluster snapshot. For more information, see the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBClusterSnapshotAttributesResult DBClusterSnapshotAttributesResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBInstanceResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB instance.</p> <p>This data type is used as a response element in the <a>DescribeDBInstances</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBInstance DBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBParameterGroupNameMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBSubnetGroupResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB subnet group.</p> <p>This data type is used as a response element in the <a>DescribeDBSubnetGroups</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBSubnetGroup DBSubnetGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyEventSubscriptionResult
	{
		
		/// <summary>
		/// Contains the results of a successful invocation of the <a>DescribeEventSubscriptions</a> action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventSubscription EventSubscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PromoteReadReplicaDBClusterResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB cluster.</p> <p>This data type is used as a response element in the <a>DescribeDBClusters</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebootDBInstanceResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB instance.</p> <p>This data type is used as a response element in the <a>DescribeDBInstances</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBInstance DBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveSourceIdentifierFromSubscriptionResult
	{
		
		/// <summary>
		/// Contains the results of a successful invocation of the <a>DescribeEventSubscriptions</a> action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventSubscription EventSubscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreDBClusterFromSnapshotResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB cluster.</p> <p>This data type is used as a response element in the <a>DescribeDBClusters</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreDBClusterToPointInTimeResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB cluster.</p> <p>This data type is used as a response element in the <a>DescribeDBClusters</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartDBClusterResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB cluster.</p> <p>This data type is used as a response element in the <a>DescribeDBClusters</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopDBClusterResult
	{
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB cluster.</p> <p>This data type is used as a response element in the <a>DescribeDBClusters</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddRoleToDBClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddSourceIdentifierToSubscriptionMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
	}
	
	/// <summary>
	/// Contains the results of a successful invocation of the <a>DescribeEventSubscriptions</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventSubscription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerAwsId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustSubscriptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionCreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] SourceIdsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EventCategoriesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventSubscriptionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddTagsToResourceMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ApplyMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		immediate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending-reboot = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplyPendingMaintenanceActionMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ApplyAction { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptInType { get; set; }
	}
	
	/// <summary>
	/// Describes the pending maintenance actions for a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourcePendingMaintenanceActions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PendingMaintenanceAction[] PendingMaintenanceActionDetails { get; set; }
	}
	
	/// <summary>
	/// Specifies an Availability Zone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailabilityZone
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Specifies a character set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CharacterSet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CharacterSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CharacterSetDescription { get; set; }
	}
	
	/// <summary>
	/// <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudwatchLogsExportConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EnableLogTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] DisableLogTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyDBClusterParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceDBClusterParameterGroupIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetDBClusterParameterGroupIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetDBClusterParameterGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p>Contains the details of an Amazon Neptune DB cluster parameter group.</p> <p>This data type is used as a response element in the <a>DescribeDBClusterParameterGroups</a> action.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterParameterGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyDBClusterSnapshotMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceDBClusterSnapshotIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetDBClusterSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreSignedUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p>Contains the details for an Amazon Neptune DB cluster snapshot</p> <p>This data type is used as a response element in the <a>DescribeDBClusterSnapshots</a> action.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterSnapshot
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SnapshotCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AllocatedStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ClusterCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PercentProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> StorageEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterSnapshotArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceDBClusterSnapshotArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IAMDatabaseAuthenticationEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyDBParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceDBParameterGroupIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetDBParameterGroupIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetDBParameterGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p>Contains the details of an Amazon Neptune DB parameter group.</p> <p>This data type is used as a response element in the <a>DescribeDBParameterGroups</a> action.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBParameterGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBClusterMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CharacterSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationSourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> StorageEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreSignedUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableIAMDatabaseAuthentication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EnableCloudwatchLogsExports { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBClusterParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p>Contains the details of an Amazon Neptune DB cluster.</p> <p>This data type is used as a response element in the <a>DescribeDBClusters</a> action.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBCluster
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AllocatedStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CharacterSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PercentProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EarliestRestorableTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReaderEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LatestRestorableTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBClusterOptionGroupStatus[] DBClusterOptionGroupMemberships { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicationSourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ReadReplicaIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBClusterMember[] DBClusterMembers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcSecurityGroupMembership[] VpcSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostedZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> StorageEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DbClusterResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBClusterRole[] AssociatedRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IAMDatabaseAuthenticationEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CloneGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ClusterCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EnabledCloudwatchLogsExports { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBClusterSnapshotMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterSnapshotIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBInstanceMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AllocatedStorage { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] DBSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CharacterSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StorageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TdeCredentialArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TdeCredentialPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> StorageEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CopyTagsToSnapshot { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MonitoringInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainIAMRoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PromotionTier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableIAMDatabaseAuthentication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnablePerformanceInsights { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PerformanceInsightsKMSKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EnableCloudwatchLogsExports { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtection { get; set; }
	}
	
	/// <summary>
	/// <p>Contains the details of an Amazon Neptune DB instance.</p> <p>This data type is used as a response element in the <a>DescribeDBInstances</a> action.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBInstance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBName { get; set; }
		
		/// <summary>
		/// Specifies a connection endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Endpoint Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AllocatedStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> InstanceCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBSecurityGroupMembership[] DBSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcSecurityGroupMembership[] VpcSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBParameterGroupStatus[] DBParameterGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// <p>Contains the details of an Amazon Neptune DB subnet group.</p> <p>This data type is used as a response element in the <a>DescribeDBSubnetGroups</a> action.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBSubnetGroup DBSubnetGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		/// <summary>
		///  This data type is used as a response element in the <a>ModifyDBInstance</a> action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PendingModifiedValues PendingModifiedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LatestRestorableTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReadReplicaSourceDBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ReadReplicaDBInstanceIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ReadReplicaDBClusterIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OptionGroupMembership[] OptionGroupMemberships { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CharacterSetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecondaryAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBInstanceStatusInfo[] StatusInfos { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StorageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TdeCredentialArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DbInstancePort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> StorageEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DbiResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CACertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainMembership[] DomainMemberships { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CopyTagsToSnapshot { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MonitoringInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnhancedMonitoringResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PromotionTier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IAMDatabaseAuthenticationEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PerformanceInsightsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PerformanceInsightsKMSKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EnabledCloudwatchLogsExports { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBSubnetGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupDescription { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p>Contains the details of an Amazon Neptune DB subnet group.</p> <p>This data type is used as a response element in the <a>DescribeDBSubnetGroups</a> action.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBSubnetGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetGroupStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Subnet[] Subnets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateEventSubscriptionMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] SourceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Contains information about an instance that is part of a DB cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterMember
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsClusterWriter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PromotionTier { get; set; }
	}
	
	/// <summary>
	/// Contains status information for a DB cluster option group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterOptionGroupStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterOptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Describes an AWS Identity and Access Management (IAM) role that is associated with a DB cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterRole
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// <p>Contains the name and values of a manual DB cluster snapshot attribute.</p> <p>Manual DB cluster snapshot attributes are used to authorize other AWS accounts to restore a manual DB cluster snapshot. For more information, see the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterSnapshotAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AttributeValues { get; set; }
	}
	
	/// <summary>
	/// <p>Contains the results of a successful call to the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p> <p>Manual DB cluster snapshot attributes are used to authorize other AWS accounts to copy or restore a manual DB cluster snapshot. For more information, see the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterSnapshotAttributesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBClusterSnapshotAttribute[] DBClusterSnapshotAttributes { get; set; }
	}
	
	/// <summary>
	///  This data type is used as a response element in the action <a>DescribeDBEngineVersions</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBEngineVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBEngineDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBEngineVersionDescription { get; set; }
		
		/// <summary>
		/// Specifies a character set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CharacterSet DefaultCharacterSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CharacterSet[] SupportedCharacterSets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpgradeTarget[] ValidUpgradeTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Timezone[] SupportedTimezones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ExportableLogTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsLogExportsToCloudwatchLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsReadReplica { get; set; }
	}
	
	/// <summary>
	/// Specifies a connection endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Endpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostedZoneId { get; set; }
	}
	
	/// <summary>
	///  This data type is used as a response element in the <a>ModifyDBInstance</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PendingModifiedValues
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AllocatedStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StorageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CACertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		/// <summary>
		/// A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PendingCloudwatchLogsExports PendingCloudwatchLogsExports { get; set; }
	}
	
	/// <summary>
	/// Provides a list of status information for a DB instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBInstanceStatusInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Normal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// <p>The status of the DB parameter group.</p> <p>This data type is used as a response element in the following actions:</p> <ul> <li> <p> <a>CreateDBInstance</a> </p> </li> <li> <p> <a>DeleteDBInstance</a> </p> </li> <li> <p> <a>ModifyDBInstance</a> </p> </li> <li> <p> <a>RebootDBInstance</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBParameterGroupStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterApplyStatus { get; set; }
	}
	
	/// <summary>
	/// Specifies membership in a designated DB security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBSecurityGroupMembership
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipFinalSnapshot { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FinalDBSnapshotIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBClusterParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBClusterSnapshotMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterSnapshotIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBInstanceMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipFinalSnapshot { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FinalDBSnapshotIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBSubnetGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteEventSubscriptionMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBClusterParameterGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBClusterParametersMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBClusterSnapshotAttributesMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterSnapshotIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBClusterSnapshotsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeShared { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludePublic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBClustersMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBEngineVersionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ListSupportedCharacterSets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ListSupportedTimezones { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBInstancesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBParameterGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBParametersMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBSubnetGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEngineDefaultClusterParametersMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	///  Contains the result of a successful invocation of the <a>DescribeEngineDefaultParameters</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EngineDefaults
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEngineDefaultParametersMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEventCategoriesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEventSubscriptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-parameter-group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-security-group = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-snapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-cluster = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-cluster-snapshot = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEventsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeEventsMessageSourceType SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeEventsMessageSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-parameter-group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-security-group = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-snapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-cluster = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-cluster-snapshot = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeOrderableDBInstanceOptionsMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Vpc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePendingMaintenanceActionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeValidDBInstanceModificationsMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
	}
	
	/// <summary>
	/// Information about valid modifications that you can make to your DB instance. Contains the result of a successful call to the <a>DescribeValidDBInstanceModifications</a> action. You can use this information when you call <a>ModifyDBInstance</a>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidDBInstanceModificationsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ValidStorageOptions[] Storage { get; set; }
	}
	
	/// <summary>
	/// An Active Directory Domain membership record associated with a DB instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainMembership
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FQDN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IAMRoleName { get; set; }
	}
	
	/// <summary>
	/// A range of double values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DoubleRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> From { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> To { get; set; }
	}
	
	/// <summary>
	///  This data type is used as a response element in the <a>DescribeEvents</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Event
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventSourceType SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-parameter-group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-security-group = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-snapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-cluster = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-cluster-snapshot = 5,
	}
	
	/// <summary>
	/// Contains the results of a successful invocation of the <a>DescribeEventCategories</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventCategoriesMap
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EventCategories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FailoverDBClusterMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetDBInstanceIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NewDBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplyImmediately { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableIAMDatabaseAuthentication { get; set; }
		
		/// <summary>
		/// <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudwatchLogsExportConfiguration CloudwatchLogsExportConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBClusterParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBClusterSnapshotAttributeMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterSnapshotIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ValuesToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ValuesToRemove { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBInstanceMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AllocatedStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] DBSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplyImmediately { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowMajorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NewDBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StorageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TdeCredentialArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TdeCredentialPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CACertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CopyTagsToSnapshot { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MonitoringInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DBPortNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MonitoringRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainIAMRoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PromotionTier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableIAMDatabaseAuthentication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnablePerformanceInsights { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PerformanceInsightsKMSKeyId { get; set; }
		
		/// <summary>
		/// <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudwatchLogsExportConfiguration CloudwatchLogsExportConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBSubnetGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupDescription { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] SubnetIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyEventSubscriptionMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Provides information on the option groups the DB instance is a member of.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OptionGroupMembership
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// <p>Contains a list of available options for a DB instance.</p> <p> This data type is used as a response element in the <a>DescribeOrderableDBInstanceOptions</a> action.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrderableDBInstanceOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZCapable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReadReplicaCapable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Vpc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsStorageEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StorageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsIops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsEnhancedMonitoring { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsIAMDatabaseAuthentication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsPerformanceInsights { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinStorageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxStorageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinIopsPerDbInstance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxIopsPerDbInstance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MinIopsPerGib { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MaxIopsPerGib { get; set; }
	}
	
	/// <summary>
	/// A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PendingCloudwatchLogsExports
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] LogTypesToEnable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] LogTypesToDisable { get; set; }
	}
	
	/// <summary>
	/// Provides information about a pending maintenance action for a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PendingMaintenanceAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AutoAppliedAfterDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ForcedApplyDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptInStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CurrentApplyDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PromoteReadReplicaDBClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
	}
	
	/// <summary>
	/// A range of integer values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Range
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> From { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> To { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Step { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebootDBInstanceMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceFailover { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveRoleFromDBClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveSourceIdentifierFromSubscriptionMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveTagsFromResourceMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResetDBClusterParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ResetAllParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResetDBParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ResetAllParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreDBClusterFromSnapshotMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AvailabilityZones { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableIAMDatabaseAuthentication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EnableCloudwatchLogsExports { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreDBClusterToPointInTimeMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RestoreType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceDBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RestoreToTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseLatestRestorableTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableIAMDatabaseAuthentication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EnableCloudwatchLogsExports { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartDBClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopDBClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
	}
	
	/// <summary>
	/// <p>Specifies a subnet.</p> <p> This data type is used as a response element in the <a>DescribeDBSubnetGroups</a> action.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Subnet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetIdentifier { get; set; }
		
		/// <summary>
		/// Specifies an Availability Zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone SubnetAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetStatus { get; set; }
	}
	
	/// <summary>
	/// A time zone associated with a <a>DBInstance</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Timezone
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TimezoneName { get; set; }
	}
	
	/// <summary>
	/// The version of the database engine that a DB instance can be upgraded to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpgradeTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsMajorVersionUpgrade { get; set; }
	}
	
	/// <summary>
	/// <p>Information about valid modifications that you can make to your DB instance.</p> <p>Contains the result of a successful call to the <a>DescribeValidDBInstanceModifications</a> action.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidStorageOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StorageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Range[] StorageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Range[] ProvisionedIops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DoubleRange[] IopsToStorageRatio { get; set; }
	}
	
	/// <summary>
	/// This data type is used as a response element for queries on VPC security group membership.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcSecurityGroupMembership
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcSecurityGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Associates an Identity and Access Management (IAM) role from an Neptune DB cluster.
		/// GET_AddRoleToDBCluster /#Action=AddRoleToDBCluster
		/// </summary>
		/// <param name="DBClusterIdentifier">The name of the DB cluster to associate the IAM role with.</param>
		/// <param name="RoleArn">The Amazon Resource Name (ARN) of the IAM role to associate with the Neptune DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_AddRoleToDBClusterAsync(string DBClusterIdentifier, string RoleArn, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=AddRoleToDBCluster?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&RoleArn=" + (RoleArn==null? "" : Uri.EscapeDataString(RoleArn))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a source identifier to an existing event notification subscription.
		/// GET_AddSourceIdentifierToSubscription /#Action=AddSourceIdentifierToSubscription
		/// </summary>
		/// <param name="SubscriptionName">The name of the event notification subscription you want to add a source identifier to.</param>
		/// <param name="SourceIdentifier"><p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_AddSourceIdentifierToSubscriptionAsync(string SubscriptionName, string SourceIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=AddSourceIdentifierToSubscription?SubscriptionName=" + (SubscriptionName==null? "" : Uri.EscapeDataString(SubscriptionName))+"&SourceIdentifier=" + (SourceIdentifier==null? "" : Uri.EscapeDataString(SourceIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds metadata tags to an Amazon Neptune resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon Neptune resources, or used in a Condition statement in an IAM policy for Amazon Neptune.
		/// GET_AddTagsToResource /#Action=AddTagsToResource
		/// </summary>
		/// <param name="ResourceName">The Amazon Neptune resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</param>
		/// <param name="Tags">The tags to be assigned to the Amazon Neptune resource.</param>
		/// <returns>Success</returns>
		public async Task GET_AddTagsToResourceAsync(string ResourceName, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=AddTagsToResource?ResourceName=" + (ResourceName==null? "" : Uri.EscapeDataString(ResourceName))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies a pending maintenance action to a resource (for example, to a DB instance).
		/// GET_ApplyPendingMaintenanceAction /#Action=ApplyPendingMaintenanceAction
		/// </summary>
		/// <param name="ResourceIdentifier">The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</param>
		/// <param name="ApplyAction"><p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p></param>
		/// <param name="OptInType"><p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_ApplyPendingMaintenanceActionAsync(string ResourceIdentifier, string ApplyAction, string OptInType, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ApplyPendingMaintenanceAction?ResourceIdentifier=" + (ResourceIdentifier==null? "" : Uri.EscapeDataString(ResourceIdentifier))+"&ApplyAction=" + (ApplyAction==null? "" : Uri.EscapeDataString(ApplyAction))+"&OptInType=" + (OptInType==null? "" : Uri.EscapeDataString(OptInType))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Copies the specified DB cluster parameter group.
		/// GET_CopyDBClusterParameterGroup /#Action=CopyDBClusterParameterGroup
		/// </summary>
		/// <param name="SourceDBClusterParameterGroupIdentifier"><p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul></param>
		/// <param name="TargetDBClusterParameterGroupIdentifier"><p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p></param>
		/// <param name="TargetDBClusterParameterGroupDescription">A description for the copied DB cluster parameter group.</param>
		/// <param name="Tags">The tags to be assigned to the copied DB cluster parameter group.</param>
		/// <returns>Success</returns>
		public async Task GET_CopyDBClusterParameterGroupAsync(string SourceDBClusterParameterGroupIdentifier, string TargetDBClusterParameterGroupIdentifier, string TargetDBClusterParameterGroupDescription, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CopyDBClusterParameterGroup?SourceDBClusterParameterGroupIdentifier=" + (SourceDBClusterParameterGroupIdentifier==null? "" : Uri.EscapeDataString(SourceDBClusterParameterGroupIdentifier))+"&TargetDBClusterParameterGroupIdentifier=" + (TargetDBClusterParameterGroupIdentifier==null? "" : Uri.EscapeDataString(TargetDBClusterParameterGroupIdentifier))+"&TargetDBClusterParameterGroupDescription=" + (TargetDBClusterParameterGroupDescription==null? "" : Uri.EscapeDataString(TargetDBClusterParameterGroupDescription))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p>
		/// GET_CopyDBClusterSnapshot /#Action=CopyDBClusterSnapshot
		/// </summary>
		/// <param name="SourceDBClusterSnapshotIdentifier"><p>The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive.</p> <p>You can't copy from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>Specify a valid DB snapshot identifier.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p></param>
		/// <param name="TargetDBClusterSnapshotIdentifier"><p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p></param>
		/// <param name="KmsKeyId"><p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>.</p> <p> KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>You cannot encrypt an unencrypted DB cluster snapshot when you copy it. If you try to copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.</p></param>
		/// <param name="PreSignedUrl">Not currently supported.</param>
		/// <param name="CopyTags">True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.</param>
		/// <param name="Tags">The tags to assign to the new DB cluster snapshot copy.</param>
		/// <returns>Success</returns>
		public async Task GET_CopyDBClusterSnapshotAsync(string SourceDBClusterSnapshotIdentifier, string TargetDBClusterSnapshotIdentifier, string KmsKeyId, string PreSignedUrl, bool CopyTags, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CopyDBClusterSnapshot?SourceDBClusterSnapshotIdentifier=" + (SourceDBClusterSnapshotIdentifier==null? "" : Uri.EscapeDataString(SourceDBClusterSnapshotIdentifier))+"&TargetDBClusterSnapshotIdentifier=" + (TargetDBClusterSnapshotIdentifier==null? "" : Uri.EscapeDataString(TargetDBClusterSnapshotIdentifier))+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&PreSignedUrl=" + (PreSignedUrl==null? "" : Uri.EscapeDataString(PreSignedUrl))+"&CopyTags="+CopyTags+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Copies the specified DB parameter group.
		/// GET_CopyDBParameterGroup /#Action=CopyDBParameterGroup
		/// </summary>
		/// <param name="SourceDBParameterGroupIdentifier"><p>The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul></param>
		/// <param name="TargetDBParameterGroupIdentifier"><p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p></param>
		/// <param name="TargetDBParameterGroupDescription">A description for the copied DB parameter group.</param>
		/// <param name="Tags">The tags to be assigned to the copied DB parameter group.</param>
		/// <returns>Success</returns>
		public async Task GET_CopyDBParameterGroupAsync(string SourceDBParameterGroupIdentifier, string TargetDBParameterGroupIdentifier, string TargetDBParameterGroupDescription, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CopyDBParameterGroup?SourceDBParameterGroupIdentifier=" + (SourceDBParameterGroupIdentifier==null? "" : Uri.EscapeDataString(SourceDBParameterGroupIdentifier))+"&TargetDBParameterGroupIdentifier=" + (TargetDBParameterGroupIdentifier==null? "" : Uri.EscapeDataString(TargetDBParameterGroupIdentifier))+"&TargetDBParameterGroupDescription=" + (TargetDBParameterGroupDescription==null? "" : Uri.EscapeDataString(TargetDBParameterGroupDescription))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new Amazon Neptune DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon Neptune DB instance.</p> <p>Note that when you create a new cluster using <code>CreateDBCluster</code> directly, deletion protection is disabled by default (when you create a new production cluster in the console, deletion protection is enabled by default). You can only delete a DB cluster if its <code>DeletionProtection</code> field is set to <code>false</code>.</p>
		/// GET_CreateDBCluster /#Action=CreateDBCluster
		/// </summary>
		/// <param name="AvailabilityZones">A list of EC2 Availability Zones that instances in the DB cluster can be created in.</param>
		/// <param name="BackupRetentionPeriod"><p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul></param>
		/// <param name="CharacterSetName"> <i>(Not supported by Neptune)</i> </param>
		/// <param name="DatabaseName">The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Neptune will not create a database in the DB cluster you are creating.</param>
		/// <param name="DBClusterIdentifier"><p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p></param>
		/// <param name="DBClusterParameterGroupName"><p> The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul></param>
		/// <param name="VpcSecurityGroupIds">A list of EC2 VPC security groups to associate with this DB cluster.</param>
		/// <param name="DBSubnetGroupName"><p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p></param>
		/// <param name="Engine"><p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>neptune</code> </p></param>
		/// <param name="EngineVersion"><p>The version number of the database engine to use. Currently, setting this parameter has no effect.</p> <p>Example: <code>1.0.1</code> </p></param>
		/// <param name="Port"><p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>8182</code> </p></param>
		/// <param name="MasterUsername"><p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul></param>
		/// <param name="MasterUserPassword"><p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p></param>
		/// <param name="OptionGroupName"> <i>(Not supported by Neptune)</i> </param>
		/// <param name="PreferredBackupWindow"><p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul></param>
		/// <param name="PreferredMaintenanceWindow"><p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Neptune User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p></param>
		/// <param name="ReplicationSourceIdentifier">The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.</param>
		/// <param name="Tags">The tags to assign to the new DB cluster.</param>
		/// <param name="StorageEncrypted">Specifies whether the DB cluster is encrypted.</param>
		/// <param name="KmsKeyId"><p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon Neptune will use the encryption key used to encrypt the source. Otherwise, Amazon Neptune will use your default encryption key.</p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is true and <code>ReplicationSourceIdentifier</code> is not specified, then Amazon Neptune will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p></param>
		/// <param name="PreSignedUrl">This parameter is not currently supported.</param>
		/// <param name="EnableIAMDatabaseAuthentication"><p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p></param>
		/// <param name="EnableCloudwatchLogsExports">The list of log types that need to be enabled for exporting to CloudWatch Logs.</param>
		/// <param name="DeletionProtection">A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is enabled.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateDBClusterAsync(
					String[] AvailabilityZones, 
					int BackupRetentionPeriod, 
					string CharacterSetName, 
					string DatabaseName, 
					string DBClusterIdentifier, 
					string DBClusterParameterGroupName, 
					String[] VpcSecurityGroupIds, 
					string DBSubnetGroupName, 
					string Engine, 
					string EngineVersion, 
					int Port, 
					string MasterUsername, 
					string MasterUserPassword, 
					string OptionGroupName, 
					string PreferredBackupWindow, 
					string PreferredMaintenanceWindow, 
					string ReplicationSourceIdentifier, 
					Tag[] Tags, 
					bool StorageEncrypted, 
					string KmsKeyId, 
					string PreSignedUrl, 
					bool EnableIAMDatabaseAuthentication, 
					String[] EnableCloudwatchLogsExports, 
					bool DeletionProtection, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateDBCluster?"+String.Join("&", AvailabilityZones.Select(z => $"AvailabilityZones={z}"))+"&BackupRetentionPeriod="+BackupRetentionPeriod+"&CharacterSetName=" + (CharacterSetName==null? "" : Uri.EscapeDataString(CharacterSetName))+"&DatabaseName=" + (DatabaseName==null? "" : Uri.EscapeDataString(DatabaseName))+"&DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&"+String.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={z}"))+"&DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : Uri.EscapeDataString(DBSubnetGroupName))+"&Engine=" + (Engine==null? "" : Uri.EscapeDataString(Engine))+"&EngineVersion=" + (EngineVersion==null? "" : Uri.EscapeDataString(EngineVersion))+"&Port="+Port+"&MasterUsername=" + (MasterUsername==null? "" : Uri.EscapeDataString(MasterUsername))+"&MasterUserPassword=" + (MasterUserPassword==null? "" : Uri.EscapeDataString(MasterUserPassword))+"&OptionGroupName=" + (OptionGroupName==null? "" : Uri.EscapeDataString(OptionGroupName))+"&PreferredBackupWindow=" + (PreferredBackupWindow==null? "" : Uri.EscapeDataString(PreferredBackupWindow))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : Uri.EscapeDataString(PreferredMaintenanceWindow))+"&ReplicationSourceIdentifier=" + (ReplicationSourceIdentifier==null? "" : Uri.EscapeDataString(ReplicationSourceIdentifier))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&StorageEncrypted="+StorageEncrypted+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&PreSignedUrl=" + (PreSignedUrl==null? "" : Uri.EscapeDataString(PreSignedUrl))+"&EnableIAMDatabaseAuthentication="+EnableIAMDatabaseAuthentication+"&"+String.Join("&", EnableCloudwatchLogsExports.Select(z => $"EnableCloudwatchLogsExports={z}"))+"&DeletionProtection="+DeletionProtection+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <a>ModifyDBClusterParameterGroup</a>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <a>ModifyDBCluster</a>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon Neptune console</a> or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
		/// GET_CreateDBClusterParameterGroup /#Action=CreateDBClusterParameterGroup
		/// </summary>
		/// <param name="DBClusterParameterGroupName"><p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBClusterParameterGroup.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note></param>
		/// <param name="DBParameterGroupFamily">The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</param>
		/// <param name="Description">The description for the DB cluster parameter group.</param>
		/// <param name="Tags">The tags to be assigned to the new DB cluster parameter group.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateDBClusterParameterGroupAsync(string DBClusterParameterGroupName, string DBParameterGroupFamily, string Description, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateDBClusterParameterGroup?DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&DBParameterGroupFamily=" + (DBParameterGroupFamily==null? "" : Uri.EscapeDataString(DBParameterGroupFamily))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a snapshot of a DB cluster.
		/// GET_CreateDBClusterSnapshot /#Action=CreateDBClusterSnapshot
		/// </summary>
		/// <param name="DBClusterSnapshotIdentifier"><p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p></param>
		/// <param name="DBClusterIdentifier"><p>The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p></param>
		/// <param name="Tags">The tags to be assigned to the DB cluster snapshot.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateDBClusterSnapshotAsync(string DBClusterSnapshotIdentifier, string DBClusterIdentifier, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateDBClusterSnapshot?DBClusterSnapshotIdentifier=" + (DBClusterSnapshotIdentifier==null? "" : Uri.EscapeDataString(DBClusterSnapshotIdentifier))+"&DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new DB instance.
		/// GET_CreateDBInstance /#Action=CreateDBInstance
		/// </summary>
		/// <param name="DBName">Not supported.</param>
		/// <param name="DBInstanceIdentifier"><p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p></param>
		/// <param name="AllocatedStorage"><p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p>Not applicable. Neptune cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in a Neptune cluster volume.</p></param>
		/// <param name="DBInstanceClass">The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</param>
		/// <param name="Engine"><p>The name of the database engine to be used for this instance.</p> <p>Valid Values: <code>neptune</code> </p></param>
		/// <param name="MasterUsername">The name for the master user. Not used.</param>
		/// <param name="MasterUserPassword"><p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Not used.</p></param>
		/// <param name="DBSecurityGroups"><p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p></param>
		/// <param name="VpcSecurityGroupIds"><p>A list of EC2 VPC security groups to associate with this DB instance.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p></param>
		/// <param name="AvailabilityZone"><p> The EC2 Availability Zone that the DB instance is created in</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint.</p></param>
		/// <param name="DBSubnetGroupName"><p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p></param>
		/// <param name="PreferredMaintenanceWindow"><p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p></param>
		/// <param name="DBParameterGroupName"><p>The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul></param>
		/// <param name="BackupRetentionPeriod"><p>The number of days for which automated backups are retained.</p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Cannot be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul></param>
		/// <param name="PreferredBackupWindow"><p> The daily time range during which automated backups are created.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p></param>
		/// <param name="Port"><p>The port number on which the database accepts connections.</p> <p>Not applicable. The port is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p> Default: <code>8182</code> </p> <p>Type: Integer</p></param>
		/// <param name="MultiAZ">Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.</param>
		/// <param name="EngineVersion">The version number of the database engine to use. Currently, setting this parameter has no effect.</param>
		/// <param name="AutoMinorVersionUpgrade"><p>Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window.</p> <p>Default: <code>true</code> </p></param>
		/// <param name="LicenseModel"><p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p></param>
		/// <param name="Iops">The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</param>
		/// <param name="OptionGroupName"> <i>(Not supported by Neptune)</i> </param>
		/// <param name="CharacterSetName"> <i>(Not supported by Neptune)</i> </param>
		/// <param name="PubliclyAccessible">This flag should no longer be used.</param>
		/// <param name="Tags">The tags to assign to the new instance.</param>
		/// <param name="DBClusterIdentifier"><p>The identifier of the DB cluster that the instance will belong to.</p> <p>For information on creating a DB cluster, see <a>CreateDBCluster</a>.</p> <p>Type: String</p></param>
		/// <param name="StorageType"><p>Specifies the storage type to be associated with the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p></param>
		/// <param name="TdeCredentialArn">The ARN from the key store with which to associate the instance for TDE encryption.</param>
		/// <param name="TdeCredentialPassword">The password for the given ARN from the key store in order to access the device.</param>
		/// <param name="StorageEncrypted"><p>Specifies whether the DB instance is encrypted.</p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>Default: false</p></param>
		/// <param name="KmsKeyId"><p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <a>CreateDBCluster</a>.</p> <p>If the <code>StorageEncrypted</code> parameter is true, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon Neptune will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p></param>
		/// <param name="Domain">Specify the Active Directory Domain to create the instance in.</param>
		/// <param name="CopyTagsToSnapshot">True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.</param>
		/// <param name="MonitoringInterval"><p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p></param>
		/// <param name="MonitoringRoleArn"><p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p></param>
		/// <param name="DomainIAMRoleName">Specify the name of the IAM role to be used when making API calls to the Directory Service.</param>
		/// <param name="PromotionTier"><p>A value that specifies the order in which an Read Replica is promoted to the primary instance after a failure of the existing primary instance. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p></param>
		/// <param name="Timezone">The time zone of the DB instance.</param>
		/// <param name="EnableIAMDatabaseAuthentication"><p>True to enable AWS Identity and Access Management (IAM) authentication for Neptune.</p> <p>Default: <code>false</code> </p></param>
		/// <param name="EnablePerformanceInsights"> <i>(Not supported by Neptune)</i> </param>
		/// <param name="PerformanceInsightsKMSKeyId"> <i>(Not supported by Neptune)</i> </param>
		/// <param name="EnableCloudwatchLogsExports">The list of log types that need to be enabled for exporting to CloudWatch Logs.</param>
		/// <param name="DeletionProtection"><p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html">Deleting a DB Instance</a>.</p> <p>DB instances in a DB cluster can be deleted even when deletion protection is enabled in their parent DB cluster.</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreateDBInstanceAsync(
					string DBName, 
					string DBInstanceIdentifier, 
					int AllocatedStorage, 
					string DBInstanceClass, 
					string Engine, 
					string MasterUsername, 
					string MasterUserPassword, 
					String[] DBSecurityGroups, 
					String[] VpcSecurityGroupIds, 
					string AvailabilityZone, 
					string DBSubnetGroupName, 
					string PreferredMaintenanceWindow, 
					string DBParameterGroupName, 
					int BackupRetentionPeriod, 
					string PreferredBackupWindow, 
					int Port, 
					bool MultiAZ, 
					string EngineVersion, 
					bool AutoMinorVersionUpgrade, 
					string LicenseModel, 
					int Iops, 
					string OptionGroupName, 
					string CharacterSetName, 
					bool PubliclyAccessible, 
					Tag[] Tags, 
					string DBClusterIdentifier, 
					string StorageType, 
					string TdeCredentialArn, 
					string TdeCredentialPassword, 
					bool StorageEncrypted, 
					string KmsKeyId, 
					string Domain, 
					bool CopyTagsToSnapshot, 
					int MonitoringInterval, 
					string MonitoringRoleArn, 
					string DomainIAMRoleName, 
					int PromotionTier, 
					string Timezone, 
					bool EnableIAMDatabaseAuthentication, 
					bool EnablePerformanceInsights, 
					string PerformanceInsightsKMSKeyId, 
					String[] EnableCloudwatchLogsExports, 
					bool DeletionProtection, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateDBInstance?DBName=" + (DBName==null? "" : Uri.EscapeDataString(DBName))+"&DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : Uri.EscapeDataString(DBInstanceIdentifier))+"&AllocatedStorage="+AllocatedStorage+"&DBInstanceClass=" + (DBInstanceClass==null? "" : Uri.EscapeDataString(DBInstanceClass))+"&Engine=" + (Engine==null? "" : Uri.EscapeDataString(Engine))+"&MasterUsername=" + (MasterUsername==null? "" : Uri.EscapeDataString(MasterUsername))+"&MasterUserPassword=" + (MasterUserPassword==null? "" : Uri.EscapeDataString(MasterUserPassword))+"&"+String.Join("&", DBSecurityGroups.Select(z => $"DBSecurityGroups={z}"))+"&"+String.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={z}"))+"&AvailabilityZone=" + (AvailabilityZone==null? "" : Uri.EscapeDataString(AvailabilityZone))+"&DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : Uri.EscapeDataString(DBSubnetGroupName))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : Uri.EscapeDataString(PreferredMaintenanceWindow))+"&DBParameterGroupName=" + (DBParameterGroupName==null? "" : Uri.EscapeDataString(DBParameterGroupName))+"&BackupRetentionPeriod="+BackupRetentionPeriod+"&PreferredBackupWindow=" + (PreferredBackupWindow==null? "" : Uri.EscapeDataString(PreferredBackupWindow))+"&Port="+Port+"&MultiAZ="+MultiAZ+"&EngineVersion=" + (EngineVersion==null? "" : Uri.EscapeDataString(EngineVersion))+"&AutoMinorVersionUpgrade="+AutoMinorVersionUpgrade+"&LicenseModel=" + (LicenseModel==null? "" : Uri.EscapeDataString(LicenseModel))+"&Iops="+Iops+"&OptionGroupName=" + (OptionGroupName==null? "" : Uri.EscapeDataString(OptionGroupName))+"&CharacterSetName=" + (CharacterSetName==null? "" : Uri.EscapeDataString(CharacterSetName))+"&PubliclyAccessible="+PubliclyAccessible+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&StorageType=" + (StorageType==null? "" : Uri.EscapeDataString(StorageType))+"&TdeCredentialArn=" + (TdeCredentialArn==null? "" : Uri.EscapeDataString(TdeCredentialArn))+"&TdeCredentialPassword=" + (TdeCredentialPassword==null? "" : Uri.EscapeDataString(TdeCredentialPassword))+"&StorageEncrypted="+StorageEncrypted+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&Domain=" + (Domain==null? "" : Uri.EscapeDataString(Domain))+"&CopyTagsToSnapshot="+CopyTagsToSnapshot+"&MonitoringInterval="+MonitoringInterval+"&MonitoringRoleArn=" + (MonitoringRoleArn==null? "" : Uri.EscapeDataString(MonitoringRoleArn))+"&DomainIAMRoleName=" + (DomainIAMRoleName==null? "" : Uri.EscapeDataString(DomainIAMRoleName))+"&PromotionTier="+PromotionTier+"&Timezone=" + (Timezone==null? "" : Uri.EscapeDataString(Timezone))+"&EnableIAMDatabaseAuthentication="+EnableIAMDatabaseAuthentication+"&EnablePerformanceInsights="+EnablePerformanceInsights+"&PerformanceInsightsKMSKeyId=" + (PerformanceInsightsKMSKeyId==null? "" : Uri.EscapeDataString(PerformanceInsightsKMSKeyId))+"&"+String.Join("&", EnableCloudwatchLogsExports.Select(z => $"EnableCloudwatchLogsExports={z}"))+"&DeletionProtection="+DeletionProtection+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new DB parameter group.</p> <p>A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect.</p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
		/// GET_CreateDBParameterGroup /#Action=CreateDBParameterGroup
		/// </summary>
		/// <param name="DBParameterGroupName"><p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note></param>
		/// <param name="DBParameterGroupFamily">The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</param>
		/// <param name="Description">The description for the DB parameter group.</param>
		/// <param name="Tags">The tags to be assigned to the new DB parameter group.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateDBParameterGroupAsync(string DBParameterGroupName, string DBParameterGroupFamily, string Description, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateDBParameterGroup?DBParameterGroupName=" + (DBParameterGroupName==null? "" : Uri.EscapeDataString(DBParameterGroupName))+"&DBParameterGroupFamily=" + (DBParameterGroupFamily==null? "" : Uri.EscapeDataString(DBParameterGroupFamily))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
		/// GET_CreateDBSubnetGroup /#Action=CreateDBSubnetGroup
		/// </summary>
		/// <param name="DBSubnetGroupName"><p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p></param>
		/// <param name="DBSubnetGroupDescription">The description for the DB subnet group.</param>
		/// <param name="SubnetIds">The EC2 Subnet IDs for the DB subnet group.</param>
		/// <param name="Tags">The tags to be assigned to the new DB subnet group.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateDBSubnetGroupAsync(string DBSubnetGroupName, string DBSubnetGroupDescription, String[] SubnetIds, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateDBSubnetGroup?DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : Uri.EscapeDataString(DBSubnetGroupName))+"&DBSubnetGroupDescription=" + (DBSubnetGroupDescription==null? "" : Uri.EscapeDataString(DBSubnetGroupDescription))+"&"+String.Join("&", SubnetIds.Select(z => $"SubnetIds={z}"))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the Neptune console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of Neptune sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Neptune sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all Neptune sources belonging to your customer account.</p>
		/// GET_CreateEventSubscription /#Action=CreateEventSubscription
		/// </summary>
		/// <param name="SubscriptionName"><p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p></param>
		/// <param name="SnsTopicArn">The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</param>
		/// <param name="SourceType"><p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p></param>
		/// <param name="EventCategories"> A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</param>
		/// <param name="SourceIds"><p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul></param>
		/// <param name="Enabled"> A Boolean value; set to <b>true</b> to activate the subscription, set to <b>false</b> to create the subscription but not active it.</param>
		/// <param name="Tags">The tags to be applied to the new event subscription.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateEventSubscriptionAsync(string SubscriptionName, string SnsTopicArn, string SourceType, String[] EventCategories, String[] SourceIds, bool Enabled, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateEventSubscription?SubscriptionName=" + (SubscriptionName==null? "" : Uri.EscapeDataString(SubscriptionName))+"&SnsTopicArn=" + (SnsTopicArn==null? "" : Uri.EscapeDataString(SnsTopicArn))+"&SourceType=" + (SourceType==null? "" : Uri.EscapeDataString(SourceType))+"&"+String.Join("&", EventCategories.Select(z => $"EventCategories={z}"))+"&"+String.Join("&", SourceIds.Select(z => $"SourceIds={z}"))+"&Enabled="+Enabled+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p>Note that the DB Cluster cannot be deleted if deletion protection is enabled. To delete it, you must first set its <code>DeletionProtection</code> field to <code>False</code>.</p>
		/// GET_DeleteDBCluster /#Action=DeleteDBCluster
		/// </summary>
		/// <param name="DBClusterIdentifier"><p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul></param>
		/// <param name="SkipFinalSnapshot"><p> Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If <code>true</code> is specified, no DB cluster snapshot is created. If <code>false</code> is specified, a DB cluster snapshot is created before the DB cluster is deleted.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p></param>
		/// <param name="FinalDBSnapshotIdentifier"><p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>.</p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteDBClusterAsync(string DBClusterIdentifier, bool SkipFinalSnapshot, string FinalDBSnapshotIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteDBCluster?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&SkipFinalSnapshot="+SkipFinalSnapshot+"&FinalDBSnapshotIdentifier=" + (FinalDBSnapshotIdentifier==null? "" : Uri.EscapeDataString(FinalDBSnapshotIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.
		/// GET_DeleteDBClusterParameterGroup /#Action=DeleteDBClusterParameterGroup
		/// </summary>
		/// <param name="DBClusterParameterGroupName"><p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Cannot be associated with any DB clusters.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteDBClusterParameterGroupAsync(string DBClusterParameterGroupName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteDBClusterParameterGroup?DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
		/// GET_DeleteDBClusterSnapshot /#Action=DeleteDBClusterSnapshot
		/// </summary>
		/// <param name="DBClusterSnapshotIdentifier"><p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteDBClusterSnapshotAsync(string DBClusterSnapshotIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteDBClusterSnapshot?DBClusterSnapshotIdentifier=" + (DBClusterSnapshotIdentifier==null? "" : Uri.EscapeDataString(DBClusterSnapshotIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon Neptune DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when the <code>SkipFinalSnapshot</code> parameter is set to <code>true</code>.</p> <p>You can't delete a DB instance if it is the only instance in the DB cluster, or if it has deletion protection enabled.</p>
		/// GET_DeleteDBInstance /#Action=DeleteDBInstance
		/// </summary>
		/// <param name="DBInstanceIdentifier"><p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul></param>
		/// <param name="SkipFinalSnapshot"><p> Determines whether a final DB snapshot is created before the DB instance is deleted. If <code>true</code> is specified, no DBSnapshot is created. If <code>false</code> is specified, a DB snapshot is created before the DB instance is deleted.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true".</p> <p>Specify <code>true</code> when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p></param>
		/// <param name="FinalDBSnapshotIdentifier"><p> The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to <code>false</code>.</p> <note> <p>Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Cannot be specified when deleting a Read Replica.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteDBInstanceAsync(string DBInstanceIdentifier, bool SkipFinalSnapshot, string FinalDBSnapshotIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteDBInstance?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : Uri.EscapeDataString(DBInstanceIdentifier))+"&SkipFinalSnapshot="+SkipFinalSnapshot+"&FinalDBSnapshotIdentifier=" + (FinalDBSnapshotIdentifier==null? "" : Uri.EscapeDataString(FinalDBSnapshotIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a specified DBParameterGroup. The DBParameterGroup to be deleted can't be associated with any DB instances.
		/// GET_DeleteDBParameterGroup /#Action=DeleteDBParameterGroup
		/// </summary>
		/// <param name="DBParameterGroupName"><p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Cannot be associated with any DB instances</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteDBParameterGroupAsync(string DBParameterGroupName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteDBParameterGroup?DBParameterGroupName=" + (DBParameterGroupName==null? "" : Uri.EscapeDataString(DBParameterGroupName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
		/// GET_DeleteDBSubnetGroup /#Action=DeleteDBSubnetGroup
		/// </summary>
		/// <param name="DBSubnetGroupName"><p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteDBSubnetGroupAsync(string DBSubnetGroupName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteDBSubnetGroup?DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : Uri.EscapeDataString(DBSubnetGroupName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an event notification subscription.
		/// GET_DeleteEventSubscription /#Action=DeleteEventSubscription
		/// </summary>
		/// <param name="SubscriptionName">The name of the event notification subscription you want to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteEventSubscriptionAsync(string SubscriptionName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteEventSubscription?SubscriptionName=" + (SubscriptionName==null? "" : Uri.EscapeDataString(SubscriptionName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group.
		/// GET_DescribeDBClusterParameterGroups /#Action=DescribeDBClusterParameterGroups
		/// </summary>
		/// <param name="DBClusterParameterGroupName"><p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul></param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker"> An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBClusterParameterGroupsAsync(string DBClusterParameterGroupName, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBClusterParameterGroups?DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the detailed parameter list for a particular DB cluster parameter group.
		/// GET_DescribeDBClusterParameters /#Action=DescribeDBClusterParameters
		/// </summary>
		/// <param name="DBClusterParameterGroupName"><p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul></param>
		/// <param name="Source"> A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>.</param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker"> An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBClusterParametersAsync(string DBClusterParameterGroupName, string Source, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBClusterParameters?DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&Source=" + (Source==null? "" : Uri.EscapeDataString(Source))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
		/// GET_DescribeDBClusterSnapshotAttributes /#Action=DescribeDBClusterSnapshotAttributes
		/// </summary>
		/// <param name="DBClusterSnapshotIdentifier">The identifier for the DB cluster snapshot to describe the attributes for.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBClusterSnapshotAttributesAsync(string DBClusterSnapshotIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBClusterSnapshotAttributes?DBClusterSnapshotIdentifier=" + (DBClusterSnapshotIdentifier==null? "" : Uri.EscapeDataString(DBClusterSnapshotIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about DB cluster snapshots. This API action supports pagination.
		/// GET_DescribeDBClusterSnapshots /#Action=DescribeDBClusterSnapshots
		/// </summary>
		/// <param name="DBClusterIdentifier"><p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul></param>
		/// <param name="DBClusterSnapshotIdentifier"><p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul></param>
		/// <param name="SnapshotType"><p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon Neptune for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public DB cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p></param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. </param>
		/// <param name="IncludeShared"><p>True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is <code>false</code>.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p></param>
		/// <param name="IncludePublic"><p>True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is <code>false</code>. The default is false.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBClusterSnapshotsAsync(string DBClusterIdentifier, string DBClusterSnapshotIdentifier, string SnapshotType, Filter[] Filters, int MaxRecords, string Marker, bool IncludeShared, bool IncludePublic, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBClusterSnapshots?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&DBClusterSnapshotIdentifier=" + (DBClusterSnapshotIdentifier==null? "" : Uri.EscapeDataString(DBClusterSnapshotIdentifier))+"&SnapshotType=" + (SnapshotType==null? "" : Uri.EscapeDataString(SnapshotType))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&IncludeShared="+IncludeShared+"&IncludePublic="+IncludePublic+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about provisioned DB clusters, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS clusters and Amazon DocDB clusters.</p> </note>
		/// GET_DescribeDBClusters /#Action=DescribeDBClusters
		/// </summary>
		/// <param name="DBClusterIdentifier"><p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul></param>
		/// <param name="Filters"><p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>engine</code> - Accepts an engine name (such as <code>neptune</code>), and restricts the results list to DB clusters created by that engine.</p> </li> </ul> <p>For example, to invoke this API from the AWS CLI and filter so that only Neptune DB clusters are returned, you could use the following command:</p></param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional pagination token provided by a previous <a>DescribeDBClusters</a> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBClustersAsync(string DBClusterIdentifier, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBClusters?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the available DB engines.
		/// GET_DescribeDBEngineVersions /#Action=DescribeDBEngineVersions
		/// </summary>
		/// <param name="Engine">The database engine to return.</param>
		/// <param name="EngineVersion"><p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p></param>
		/// <param name="DBParameterGroupFamily"><p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul></param>
		/// <param name="Filters">Not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker"> An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <param name="DefaultOnly">Indicates that only the default version of the specified engine or engine and major version combination is returned.</param>
		/// <param name="ListSupportedCharacterSets">If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.</param>
		/// <param name="ListSupportedTimezones">If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBEngineVersionsAsync(string Engine, string EngineVersion, string DBParameterGroupFamily, Filter[] Filters, int MaxRecords, string Marker, bool DefaultOnly, bool ListSupportedCharacterSets, bool ListSupportedTimezones, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBEngineVersions?Engine=" + (Engine==null? "" : Uri.EscapeDataString(Engine))+"&EngineVersion=" + (EngineVersion==null? "" : Uri.EscapeDataString(EngineVersion))+"&DBParameterGroupFamily=" + (DBParameterGroupFamily==null? "" : Uri.EscapeDataString(DBParameterGroupFamily))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&DefaultOnly="+DefaultOnly+"&ListSupportedCharacterSets="+ListSupportedCharacterSets+"&ListSupportedTimezones="+ListSupportedTimezones+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about provisioned instances, and supports pagination.</p> <note> <p>This operation can also return information for Amazon RDS instances and Amazon DocDB instances.</p> </note>
		/// GET_DescribeDBInstances /#Action=DescribeDBInstances
		/// </summary>
		/// <param name="DBInstanceIdentifier"><p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul></param>
		/// <param name="Filters"><p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>engine</code> - Accepts an engine name (such as <code>neptune</code>), and restricts the results list to DB instances created by that engine.</p> </li> </ul> <p>For example, to invoke this API from the AWS CLI and filter so that only Neptune DB instances are returned, you could use the following command:</p></param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker"> An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBInstancesAsync(string DBInstanceIdentifier, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBInstances?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : Uri.EscapeDataString(DBInstanceIdentifier))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group.
		/// GET_DescribeDBParameterGroups /#Action=DescribeDBParameterGroups
		/// </summary>
		/// <param name="DBParameterGroupName"><p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul></param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBParameterGroupsAsync(string DBParameterGroupName, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBParameterGroups?DBParameterGroupName=" + (DBParameterGroupName==null? "" : Uri.EscapeDataString(DBParameterGroupName))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the detailed parameter list for a particular DB parameter group.
		/// GET_DescribeDBParameters /#Action=DescribeDBParameters
		/// </summary>
		/// <param name="DBParameterGroupName"><p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul></param>
		/// <param name="Source"><p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p></param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBParametersAsync(string DBParameterGroupName, string Source, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBParameters?DBParameterGroupName=" + (DBParameterGroupName==null? "" : Uri.EscapeDataString(DBParameterGroupName))+"&Source=" + (Source==null? "" : Uri.EscapeDataString(Source))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
		/// GET_DescribeDBSubnetGroups /#Action=DescribeDBSubnetGroups
		/// </summary>
		/// <param name="DBSubnetGroupName">The name of the DB subnet group to return details for.</param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker"> An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBSubnetGroupsAsync(string DBSubnetGroupName, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBSubnetGroups?DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : Uri.EscapeDataString(DBSubnetGroupName))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the default engine and system parameter information for the cluster database engine.
		/// GET_DescribeEngineDefaultClusterParameters /#Action=DescribeEngineDefaultClusterParameters
		/// </summary>
		/// <param name="DBParameterGroupFamily">The name of the DB cluster parameter group family to return engine parameter information for.</param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker"> An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEngineDefaultClusterParametersAsync(string DBParameterGroupFamily, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEngineDefaultClusterParameters?DBParameterGroupFamily=" + (DBParameterGroupFamily==null? "" : Uri.EscapeDataString(DBParameterGroupFamily))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the default engine and system parameter information for the specified database engine.
		/// GET_DescribeEngineDefaultParameters /#Action=DescribeEngineDefaultParameters
		/// </summary>
		/// <param name="DBParameterGroupFamily">The name of the DB parameter group family.</param>
		/// <param name="Filters">Not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker"> An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEngineDefaultParametersAsync(string DBParameterGroupFamily, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEngineDefaultParameters?DBParameterGroupFamily=" + (DBParameterGroupFamily==null? "" : Uri.EscapeDataString(DBParameterGroupFamily))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays a list of categories for all event source types, or, if specified, for a specified source type.
		/// GET_DescribeEventCategories /#Action=DescribeEventCategories
		/// </summary>
		/// <param name="SourceType"><p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p></param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEventCategoriesAsync(string SourceType, Filter[] Filters, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEventCategories?SourceType=" + (SourceType==null? "" : Uri.EscapeDataString(SourceType))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
		/// GET_DescribeEventSubscriptions /#Action=DescribeEventSubscriptions
		/// </summary>
		/// <param name="SubscriptionName">The name of the event notification subscription you want to describe.</param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker"> An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEventSubscriptionsAsync(string SubscriptionName, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEventSubscriptions?SubscriptionName=" + (SubscriptionName==null? "" : Uri.EscapeDataString(SubscriptionName))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
		/// GET_DescribeEvents /#Action=DescribeEvents
		/// </summary>
		/// <param name="SourceIdentifier"><p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul></param>
		/// <param name="SourceType">The event source to retrieve events for. If no value is specified, all events are returned.</param>
		/// <param name="StartTime"><p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p></param>
		/// <param name="EndTime"><p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p></param>
		/// <param name="Duration"><p>The number of minutes to retrieve events for.</p> <p>Default: 60</p></param>
		/// <param name="EventCategories">A list of event categories that trigger notifications for a event notification subscription.</param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker"> An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEventsAsync(string SourceIdentifier, SourceType SourceType, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, int Duration, String[] EventCategories, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEvents?SourceIdentifier=" + (SourceIdentifier==null? "" : Uri.EscapeDataString(SourceIdentifier))+"&SourceType=" + SourceType+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Duration="+Duration+"&"+String.Join("&", EventCategories.Select(z => $"EventCategories={z}"))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of orderable DB instance options for the specified engine.
		/// GET_DescribeOrderableDBInstanceOptions /#Action=DescribeOrderableDBInstanceOptions
		/// </summary>
		/// <param name="Engine">The name of the engine to retrieve DB instance options for.</param>
		/// <param name="EngineVersion">The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.</param>
		/// <param name="DBInstanceClass">The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.</param>
		/// <param name="LicenseModel">The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.</param>
		/// <param name="Vpc">The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.</param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker"> An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> .</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeOrderableDBInstanceOptionsAsync(string Engine, string EngineVersion, string DBInstanceClass, string LicenseModel, bool Vpc, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeOrderableDBInstanceOptions?Engine=" + (Engine==null? "" : Uri.EscapeDataString(Engine))+"&EngineVersion=" + (EngineVersion==null? "" : Uri.EscapeDataString(EngineVersion))+"&DBInstanceClass=" + (DBInstanceClass==null? "" : Uri.EscapeDataString(DBInstanceClass))+"&LicenseModel=" + (LicenseModel==null? "" : Uri.EscapeDataString(LicenseModel))+"&Vpc="+Vpc+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
		/// GET_DescribePendingMaintenanceActions /#Action=DescribePendingMaintenanceActions
		/// </summary>
		/// <param name="ResourceIdentifier">The ARN of a resource to return pending maintenance actions for.</param>
		/// <param name="Filters"><p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul></param>
		/// <param name="Marker"> An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DescribePendingMaintenanceActionsAsync(string ResourceIdentifier, Filter[] Filters, string Marker, int MaxRecords, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribePendingMaintenanceActions?ResourceIdentifier=" + (ResourceIdentifier==null? "" : Uri.EscapeDataString(ResourceIdentifier))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&MaxRecords="+MaxRecords+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// You can call <a>DescribeValidDBInstanceModifications</a> to learn what modifications you can make to your DB instance. You can use this information when you call <a>ModifyDBInstance</a>.
		/// GET_DescribeValidDBInstanceModifications /#Action=DescribeValidDBInstanceModifications
		/// </summary>
		/// <param name="DBInstanceIdentifier">The customer identifier or the ARN of your DB instance.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeValidDBInstanceModificationsAsync(string DBInstanceIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeValidDBInstanceModifications?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : Uri.EscapeDataString(DBInstanceIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Read Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Neptune will automatically fail over to a Read Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p>
		/// GET_FailoverDBCluster /#Action=FailoverDBCluster
		/// </summary>
		/// <param name="DBClusterIdentifier"><p>A DB cluster identifier to force a failover for. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul></param>
		/// <param name="TargetDBInstanceIdentifier"><p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Read Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_FailoverDBClusterAsync(string DBClusterIdentifier, string TargetDBInstanceIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=FailoverDBCluster?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&TargetDBInstanceIdentifier=" + (TargetDBInstanceIdentifier==null? "" : Uri.EscapeDataString(TargetDBInstanceIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all tags on an Amazon Neptune resource.
		/// GET_ListTagsForResource /#Action=ListTagsForResource
		/// </summary>
		/// <param name="ResourceName">The Amazon Neptune resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <returns>Success</returns>
		public async Task GET_ListTagsForResourceAsync(string ResourceName, Filter[] Filters, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ListTagsForResource?ResourceName=" + (ResourceName==null? "" : Uri.EscapeDataString(ResourceName))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify a setting for a DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
		/// GET_ModifyDBCluster /#Action=ModifyDBCluster
		/// </summary>
		/// <param name="DBClusterIdentifier"><p>The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul></param>
		/// <param name="NewDBClusterIdentifier"><p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p></param>
		/// <param name="ApplyImmediately"><p>A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is set to <code>false</code>, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set the <code>ApplyImmediately</code> parameter value to false, then changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p></param>
		/// <param name="BackupRetentionPeriod"><p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul></param>
		/// <param name="DBClusterParameterGroupName">The name of the DB cluster parameter group to use for the DB cluster.</param>
		/// <param name="VpcSecurityGroupIds">A list of VPC security groups that the DB cluster will belong to.</param>
		/// <param name="Port"><p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p></param>
		/// <param name="MasterUserPassword"><p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p></param>
		/// <param name="OptionGroupName"> <i>(Not supported by Neptune)</i> </param>
		/// <param name="PreferredBackupWindow"><p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter.</p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul></param>
		/// <param name="PreferredMaintenanceWindow"><p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p></param>
		/// <param name="EnableIAMDatabaseAuthentication"><p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p></param>
		/// <param name="CloudwatchLogsExportConfiguration">The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB cluster.</param>
		/// <param name="EngineVersion"><p>The version number of the database engine. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.</p> <p>For a list of valid engine versions, see <a>CreateDBInstance</a>, or call <a>DescribeDBEngineVersions</a>.</p></param>
		/// <param name="DeletionProtection">A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyDBClusterAsync(
					string DBClusterIdentifier, 
					string NewDBClusterIdentifier, 
					bool ApplyImmediately, 
					int BackupRetentionPeriod, 
					string DBClusterParameterGroupName, 
					String[] VpcSecurityGroupIds, 
					int Port, 
					string MasterUserPassword, 
					string OptionGroupName, 
					string PreferredBackupWindow, 
					string PreferredMaintenanceWindow, 
					bool EnableIAMDatabaseAuthentication, 
					string CloudwatchLogsExportConfiguration, 
					string EngineVersion, 
					bool DeletionProtection, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyDBCluster?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&NewDBClusterIdentifier=" + (NewDBClusterIdentifier==null? "" : Uri.EscapeDataString(NewDBClusterIdentifier))+"&ApplyImmediately="+ApplyImmediately+"&BackupRetentionPeriod="+BackupRetentionPeriod+"&DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&"+String.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={z}"))+"&Port="+Port+"&MasterUserPassword=" + (MasterUserPassword==null? "" : Uri.EscapeDataString(MasterUserPassword))+"&OptionGroupName=" + (OptionGroupName==null? "" : Uri.EscapeDataString(OptionGroupName))+"&PreferredBackupWindow=" + (PreferredBackupWindow==null? "" : Uri.EscapeDataString(PreferredBackupWindow))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : Uri.EscapeDataString(PreferredMaintenanceWindow))+"&EnableIAMDatabaseAuthentication="+EnableIAMDatabaseAuthentication+"&CloudwatchLogsExportConfiguration=" + (CloudwatchLogsExportConfiguration==null? "" : Uri.EscapeDataString(CloudwatchLogsExportConfiguration))+"&EngineVersion=" + (EngineVersion==null? "" : Uri.EscapeDataString(EngineVersion))+"&DeletionProtection="+DeletionProtection+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon Neptune to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <a>DescribeDBClusterParameters</a> command to verify that your DB cluster parameter group has been created or modified.</p> </important>
		/// GET_ModifyDBClusterParameterGroup /#Action=ModifyDBClusterParameterGroup
		/// </summary>
		/// <param name="DBClusterParameterGroupName">The name of the DB cluster parameter group to modify.</param>
		/// <param name="Parameters">A list of parameters in the DB cluster parameter group to modify.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyDBClusterParameterGroupAsync(string DBClusterParameterGroupName, Parameter[] Parameters, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyDBClusterParameterGroup?DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&"+String.Join("&", Parameters.Select(z => $"Parameters={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
		/// GET_ModifyDBClusterSnapshotAttribute /#Action=ModifyDBClusterSnapshotAttribute
		/// </summary>
		/// <param name="DBClusterSnapshotIdentifier">The identifier for the DB cluster snapshot to modify the attributes for.</param>
		/// <param name="AttributeName"><p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p></param>
		/// <param name="ValuesToAdd"><p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p></param>
		/// <param name="ValuesToRemove"><p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ModifyDBClusterSnapshotAttributeAsync(string DBClusterSnapshotIdentifier, string AttributeName, String[] ValuesToAdd, String[] ValuesToRemove, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyDBClusterSnapshotAttribute?DBClusterSnapshotIdentifier=" + (DBClusterSnapshotIdentifier==null? "" : Uri.EscapeDataString(DBClusterSnapshotIdentifier))+"&AttributeName=" + (AttributeName==null? "" : Uri.EscapeDataString(AttributeName))+"&"+String.Join("&", ValuesToAdd.Select(z => $"ValuesToAdd={z}"))+"&"+String.Join("&", ValuesToRemove.Select(z => $"ValuesToRemove={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <a>DescribeValidDBInstanceModifications</a> before you call <a>ModifyDBInstance</a>.
		/// GET_ModifyDBInstance /#Action=ModifyDBInstance
		/// </summary>
		/// <param name="DBInstanceIdentifier"><p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul></param>
		/// <param name="AllocatedStorage"><p>The new amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Not applicable. Storage is managed by the DB Cluster.</p></param>
		/// <param name="DBInstanceClass"><p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions.</p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request.</p> <p>Default: Uses existing setting</p></param>
		/// <param name="DBSubnetGroupName"><p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC.</p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify <code>true</code> for the <code>ApplyImmediately</code> parameter.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p></param>
		/// <param name="DBSecurityGroups"><p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul></param>
		/// <param name="VpcSecurityGroupIds"><p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul></param>
		/// <param name="ApplyImmediately"><p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance.</p> <p> If this parameter is set to <code>false</code>, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.</p> <p>Default: <code>false</code> </p></param>
		/// <param name="MasterUserPassword">Not applicable.</param>
		/// <param name="DBParameterGroupName"><p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p></param>
		/// <param name="BackupRetentionPeriod"><p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: Uses existing setting</p></param>
		/// <param name="PreferredBackupWindow"><p> The daily time range during which automated backups are created if automated backups are enabled.</p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul></param>
		/// <param name="PreferredMaintenanceWindow"><p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p></param>
		/// <param name="MultiAZ">Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</param>
		/// <param name="EngineVersion">The version number of the database engine to upgrade to. Currently, setting this parameter has no effect. To upgrade your database engine to the most recent release, use the <a>ApplyPendingMaintenanceAction</a> API.</param>
		/// <param name="AllowMajorVersionUpgrade">Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</param>
		/// <param name="AutoMinorVersionUpgrade"> Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Neptune has enabled auto patching for that engine version.</param>
		/// <param name="LicenseModel">Not supported.</param>
		/// <param name="Iops"><p>The new Provisioned IOPS (I/O operations per second) value for the instance.</p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code> for this request.</p> <p>Default: Uses existing setting</p></param>
		/// <param name="OptionGroupName"> <i>(Not supported by Neptune)</i> </param>
		/// <param name="NewDBInstanceIdentifier"><p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set <code>Apply Immediately</code> to true, or will occur during the next maintenance window if <code>Apply Immediately</code> to false. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p></param>
		/// <param name="StorageType">Not supported.</param>
		/// <param name="TdeCredentialArn">The ARN from the key store with which to associate the instance for TDE encryption.</param>
		/// <param name="TdeCredentialPassword">The password for the given ARN from the key store in order to access the device.</param>
		/// <param name="CACertificateIdentifier">Indicates the certificate that needs to be associated with the instance.</param>
		/// <param name="Domain">Not supported.</param>
		/// <param name="CopyTagsToSnapshot">True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.</param>
		/// <param name="MonitoringInterval"><p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p></param>
		/// <param name="DBPortNumber"><p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> Default: <code>8182</code> </p></param>
		/// <param name="PubliclyAccessible">This flag should no longer be used.</param>
		/// <param name="MonitoringRoleArn"><p>The ARN for the IAM role that permits Neptune to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p></param>
		/// <param name="DomainIAMRoleName">Not supported</param>
		/// <param name="PromotionTier"><p>A value that specifies the order in which a Read Replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p></param>
		/// <param name="EnableIAMDatabaseAuthentication"><p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>You can enable IAM database authentication for the following database engines</p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see <a>ModifyDBCluster</a>.</p> <p>Default: <code>false</code> </p></param>
		/// <param name="EnablePerformanceInsights"> <i>(Not supported by Neptune)</i> </param>
		/// <param name="PerformanceInsightsKMSKeyId"> <i>(Not supported by Neptune)</i> </param>
		/// <param name="CloudwatchLogsExportConfiguration">The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</param>
		/// <param name="DeletionProtection">A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. See <a href="https://docs.aws.amazon.com/neptune/latest/userguide/manage-console-instances-delete.html">Deleting a DB Instance</a>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyDBInstanceAsync(
					string DBInstanceIdentifier, 
					int AllocatedStorage, 
					string DBInstanceClass, 
					string DBSubnetGroupName, 
					String[] DBSecurityGroups, 
					String[] VpcSecurityGroupIds, 
					bool ApplyImmediately, 
					string MasterUserPassword, 
					string DBParameterGroupName, 
					int BackupRetentionPeriod, 
					string PreferredBackupWindow, 
					string PreferredMaintenanceWindow, 
					bool MultiAZ, 
					string EngineVersion, 
					bool AllowMajorVersionUpgrade, 
					bool AutoMinorVersionUpgrade, 
					string LicenseModel, 
					int Iops, 
					string OptionGroupName, 
					string NewDBInstanceIdentifier, 
					string StorageType, 
					string TdeCredentialArn, 
					string TdeCredentialPassword, 
					string CACertificateIdentifier, 
					string Domain, 
					bool CopyTagsToSnapshot, 
					int MonitoringInterval, 
					int DBPortNumber, 
					bool PubliclyAccessible, 
					string MonitoringRoleArn, 
					string DomainIAMRoleName, 
					int PromotionTier, 
					bool EnableIAMDatabaseAuthentication, 
					bool EnablePerformanceInsights, 
					string PerformanceInsightsKMSKeyId, 
					string CloudwatchLogsExportConfiguration, 
					bool DeletionProtection, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyDBInstance?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : Uri.EscapeDataString(DBInstanceIdentifier))+"&AllocatedStorage="+AllocatedStorage+"&DBInstanceClass=" + (DBInstanceClass==null? "" : Uri.EscapeDataString(DBInstanceClass))+"&DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : Uri.EscapeDataString(DBSubnetGroupName))+"&"+String.Join("&", DBSecurityGroups.Select(z => $"DBSecurityGroups={z}"))+"&"+String.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={z}"))+"&ApplyImmediately="+ApplyImmediately+"&MasterUserPassword=" + (MasterUserPassword==null? "" : Uri.EscapeDataString(MasterUserPassword))+"&DBParameterGroupName=" + (DBParameterGroupName==null? "" : Uri.EscapeDataString(DBParameterGroupName))+"&BackupRetentionPeriod="+BackupRetentionPeriod+"&PreferredBackupWindow=" + (PreferredBackupWindow==null? "" : Uri.EscapeDataString(PreferredBackupWindow))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : Uri.EscapeDataString(PreferredMaintenanceWindow))+"&MultiAZ="+MultiAZ+"&EngineVersion=" + (EngineVersion==null? "" : Uri.EscapeDataString(EngineVersion))+"&AllowMajorVersionUpgrade="+AllowMajorVersionUpgrade+"&AutoMinorVersionUpgrade="+AutoMinorVersionUpgrade+"&LicenseModel=" + (LicenseModel==null? "" : Uri.EscapeDataString(LicenseModel))+"&Iops="+Iops+"&OptionGroupName=" + (OptionGroupName==null? "" : Uri.EscapeDataString(OptionGroupName))+"&NewDBInstanceIdentifier=" + (NewDBInstanceIdentifier==null? "" : Uri.EscapeDataString(NewDBInstanceIdentifier))+"&StorageType=" + (StorageType==null? "" : Uri.EscapeDataString(StorageType))+"&TdeCredentialArn=" + (TdeCredentialArn==null? "" : Uri.EscapeDataString(TdeCredentialArn))+"&TdeCredentialPassword=" + (TdeCredentialPassword==null? "" : Uri.EscapeDataString(TdeCredentialPassword))+"&CACertificateIdentifier=" + (CACertificateIdentifier==null? "" : Uri.EscapeDataString(CACertificateIdentifier))+"&Domain=" + (Domain==null? "" : Uri.EscapeDataString(Domain))+"&CopyTagsToSnapshot="+CopyTagsToSnapshot+"&MonitoringInterval="+MonitoringInterval+"&DBPortNumber="+DBPortNumber+"&PubliclyAccessible="+PubliclyAccessible+"&MonitoringRoleArn=" + (MonitoringRoleArn==null? "" : Uri.EscapeDataString(MonitoringRoleArn))+"&DomainIAMRoleName=" + (DomainIAMRoleName==null? "" : Uri.EscapeDataString(DomainIAMRoleName))+"&PromotionTier="+PromotionTier+"&EnableIAMDatabaseAuthentication="+EnableIAMDatabaseAuthentication+"&EnablePerformanceInsights="+EnablePerformanceInsights+"&PerformanceInsightsKMSKeyId=" + (PerformanceInsightsKMSKeyId==null? "" : Uri.EscapeDataString(PerformanceInsightsKMSKeyId))+"&CloudwatchLogsExportConfiguration=" + (CloudwatchLogsExportConfiguration==null? "" : Uri.EscapeDataString(CloudwatchLogsExportConfiguration))+"&DeletionProtection="+DeletionProtection+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon Neptune to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the Amazon Neptune console or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
		/// GET_ModifyDBParameterGroup /#Action=ModifyDBParameterGroup
		/// </summary>
		/// <param name="DBParameterGroupName"><p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul></param>
		/// <param name="Parameters"><p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note></param>
		/// <returns>Success</returns>
		public async Task GET_ModifyDBParameterGroupAsync(string DBParameterGroupName, Parameter[] Parameters, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyDBParameterGroup?DBParameterGroupName=" + (DBParameterGroupName==null? "" : Uri.EscapeDataString(DBParameterGroupName))+"&"+String.Join("&", Parameters.Select(z => $"Parameters={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
		/// GET_ModifyDBSubnetGroup /#Action=ModifyDBSubnetGroup
		/// </summary>
		/// <param name="DBSubnetGroupName"><p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p></param>
		/// <param name="DBSubnetGroupDescription">The description for the DB subnet group.</param>
		/// <param name="SubnetIds">The EC2 subnet IDs for the DB subnet group.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyDBSubnetGroupAsync(string DBSubnetGroupName, string DBSubnetGroupDescription, String[] SubnetIds, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyDBSubnetGroup?DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : Uri.EscapeDataString(DBSubnetGroupName))+"&DBSubnetGroupDescription=" + (DBSubnetGroupDescription==null? "" : Uri.EscapeDataString(DBSubnetGroupDescription))+"&"+String.Join("&", SubnetIds.Select(z => $"SubnetIds={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies an existing event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <a>AddSourceIdentifierToSubscription</a> and <a>RemoveSourceIdentifierFromSubscription</a> calls.</p> <p>You can see a list of the event categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</p>
		/// GET_ModifyEventSubscription /#Action=ModifyEventSubscription
		/// </summary>
		/// <param name="SubscriptionName">The name of the event notification subscription.</param>
		/// <param name="SnsTopicArn">The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</param>
		/// <param name="SourceType"><p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p></param>
		/// <param name="EventCategories"> A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType by using the <b>DescribeEventCategories</b> action.</param>
		/// <param name="Enabled"> A Boolean value; set to <b>true</b> to activate the subscription.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyEventSubscriptionAsync(string SubscriptionName, string SnsTopicArn, string SourceType, String[] EventCategories, bool Enabled, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyEventSubscription?SubscriptionName=" + (SubscriptionName==null? "" : Uri.EscapeDataString(SubscriptionName))+"&SnsTopicArn=" + (SnsTopicArn==null? "" : Uri.EscapeDataString(SnsTopicArn))+"&SourceType=" + (SourceType==null? "" : Uri.EscapeDataString(SourceType))+"&"+String.Join("&", EventCategories.Select(z => $"EventCategories={z}"))+"&Enabled="+Enabled+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Not supported.
		/// GET_PromoteReadReplicaDBCluster /#Action=PromoteReadReplicaDBCluster
		/// </summary>
		/// <param name="DBClusterIdentifier">Not supported.</param>
		/// <returns>Success</returns>
		public async Task GET_PromoteReadReplicaDBClusterAsync(string DBClusterIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=PromoteReadReplicaDBCluster?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect.</p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
		/// GET_RebootDBInstance /#Action=RebootDBInstance
		/// </summary>
		/// <param name="DBInstanceIdentifier"><p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul></param>
		/// <param name="ForceFailover"><p> When <code>true</code>, the reboot is conducted through a MultiAZ failover.</p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for MultiAZ.</p></param>
		/// <returns>Success</returns>
		public async Task GET_RebootDBInstanceAsync(string DBInstanceIdentifier, bool ForceFailover, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RebootDBInstance?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : Uri.EscapeDataString(DBInstanceIdentifier))+"&ForceFailover="+ForceFailover+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates an Identity and Access Management (IAM) role from a DB cluster.
		/// GET_RemoveRoleFromDBCluster /#Action=RemoveRoleFromDBCluster
		/// </summary>
		/// <param name="DBClusterIdentifier">The name of the DB cluster to disassociate the IAM role from.</param>
		/// <param name="RoleArn">The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB cluster, for example <code>arn:aws:iam::123456789012:role/NeptuneAccessRole</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_RemoveRoleFromDBClusterAsync(string DBClusterIdentifier, string RoleArn, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RemoveRoleFromDBCluster?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&RoleArn=" + (RoleArn==null? "" : Uri.EscapeDataString(RoleArn))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a source identifier from an existing event notification subscription.
		/// GET_RemoveSourceIdentifierFromSubscription /#Action=RemoveSourceIdentifierFromSubscription
		/// </summary>
		/// <param name="SubscriptionName">The name of the event notification subscription you want to remove a source identifier from.</param>
		/// <param name="SourceIdentifier"> The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group.</param>
		/// <returns>Success</returns>
		public async Task GET_RemoveSourceIdentifierFromSubscriptionAsync(string SubscriptionName, string SourceIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RemoveSourceIdentifierFromSubscription?SubscriptionName=" + (SubscriptionName==null? "" : Uri.EscapeDataString(SubscriptionName))+"&SourceIdentifier=" + (SourceIdentifier==null? "" : Uri.EscapeDataString(SourceIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes metadata tags from an Amazon Neptune resource.
		/// GET_RemoveTagsFromResource /#Action=RemoveTagsFromResource
		/// </summary>
		/// <param name="ResourceName">The Amazon Neptune resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a href="https://docs.aws.amazon.com/neptune/latest/UserGuide/tagging.ARN.html#tagging.ARN.Constructing"> Constructing an Amazon Resource Name (ARN)</a>.</param>
		/// <param name="TagKeys">The tag key (name) of the tag to be removed.</param>
		/// <returns>Success</returns>
		public async Task GET_RemoveTagsFromResourceAsync(string ResourceName, String[] TagKeys, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RemoveTagsFromResource?ResourceName=" + (ResourceName==null? "" : Uri.EscapeDataString(ResourceName))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters.</p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <a>RebootDBInstance</a> request. You must call <a>RebootDBInstance</a> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
		/// GET_ResetDBClusterParameterGroup /#Action=ResetDBClusterParameterGroup
		/// </summary>
		/// <param name="DBClusterParameterGroupName">The name of the DB cluster parameter group to reset.</param>
		/// <param name="ResetAllParameters">A value that is set to <code>true</code> to reset all parameters in the DB cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.</param>
		/// <param name="Parameters">A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ResetDBClusterParameterGroupAsync(string DBClusterParameterGroupName, bool ResetAllParameters, Parameter[] Parameters, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ResetDBClusterParameterGroup?DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&ResetAllParameters="+ResetAllParameters+"&"+String.Join("&", Parameters.Select(z => $"Parameters={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request.
		/// GET_ResetDBParameterGroup /#Action=ResetDBParameterGroup
		/// </summary>
		/// <param name="DBParameterGroupName"><p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DBParameterGroup.</p> </li> </ul></param>
		/// <param name="ResetAllParameters"><p>Specifies whether (<code>true</code>) or not (<code>false</code>) to reset all parameters in the DB parameter group to default values.</p> <p>Default: <code>true</code> </p></param>
		/// <param name="Parameters"><p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p></param>
		/// <returns>Success</returns>
		public async Task GET_ResetDBParameterGroupAsync(string DBParameterGroupName, bool ResetAllParameters, Parameter[] Parameters, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ResetDBParameterGroup?DBParameterGroupName=" + (DBParameterGroupName==null? "" : Uri.EscapeDataString(DBParameterGroupName))+"&ResetAllParameters="+ResetAllParameters+"&"+String.Join("&", Parameters.Select(z => $"Parameters={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster, except that the new DB cluster is created with the default security group.</p>
		/// GET_RestoreDBClusterFromSnapshot /#Action=RestoreDBClusterFromSnapshot
		/// </summary>
		/// <param name="AvailabilityZones">Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.</param>
		/// <param name="DBClusterIdentifier"><p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p></param>
		/// <param name="SnapshotIdentifier"><p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul></param>
		/// <param name="Engine"><p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p></param>
		/// <param name="EngineVersion">The version of the database engine to use for the new DB cluster.</param>
		/// <param name="Port"><p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p></param>
		/// <param name="DBSubnetGroupName"><p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p></param>
		/// <param name="DatabaseName">Not supported.</param>
		/// <param name="OptionGroupName"> <i>(Not supported by Neptune)</i> </param>
		/// <param name="VpcSecurityGroupIds">A list of VPC security groups that the new DB cluster will belong to.</param>
		/// <param name="Tags">The tags to be assigned to the restored DB cluster.</param>
		/// <param name="KmsKeyId"><p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul></param>
		/// <param name="EnableIAMDatabaseAuthentication"><p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p></param>
		/// <param name="EnableCloudwatchLogsExports">The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.</param>
		/// <param name="DBClusterParameterGroupName"><p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul></param>
		/// <param name="DeletionProtection">A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. </param>
		/// <returns>Success</returns>
		public async Task GET_RestoreDBClusterFromSnapshotAsync(
					String[] AvailabilityZones, 
					string DBClusterIdentifier, 
					string SnapshotIdentifier, 
					string Engine, 
					string EngineVersion, 
					int Port, 
					string DBSubnetGroupName, 
					string DatabaseName, 
					string OptionGroupName, 
					String[] VpcSecurityGroupIds, 
					Tag[] Tags, 
					string KmsKeyId, 
					bool EnableIAMDatabaseAuthentication, 
					String[] EnableCloudwatchLogsExports, 
					string DBClusterParameterGroupName, 
					bool DeletionProtection, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RestoreDBClusterFromSnapshot?"+String.Join("&", AvailabilityZones.Select(z => $"AvailabilityZones={z}"))+"&DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : Uri.EscapeDataString(SnapshotIdentifier))+"&Engine=" + (Engine==null? "" : Uri.EscapeDataString(Engine))+"&EngineVersion=" + (EngineVersion==null? "" : Uri.EscapeDataString(EngineVersion))+"&Port="+Port+"&DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : Uri.EscapeDataString(DBSubnetGroupName))+"&DatabaseName=" + (DatabaseName==null? "" : Uri.EscapeDataString(DatabaseName))+"&OptionGroupName=" + (OptionGroupName==null? "" : Uri.EscapeDataString(OptionGroupName))+"&"+String.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={z}"))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&EnableIAMDatabaseAuthentication="+EnableIAMDatabaseAuthentication+"&"+String.Join("&", EnableCloudwatchLogsExports.Select(z => $"EnableCloudwatchLogsExports={z}"))+"&DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&DeletionProtection="+DeletionProtection+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group.</p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <a>CreateDBInstance</a> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note>
		/// GET_RestoreDBClusterToPointInTime /#Action=RestoreDBClusterToPointInTime
		/// </summary>
		/// <param name="DBClusterIdentifier"><p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul></param>
		/// <param name="RestoreType"><p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p></param>
		/// <param name="SourceDBClusterIdentifier"><p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul></param>
		/// <param name="RestoreToTime"><p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter is not provided</p> </li> <li> <p>Cannot be specified if <code>UseLatestRestorableTime</code> parameter is true</p> </li> <li> <p>Cannot be specified if <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p></param>
		/// <param name="UseLatestRestorableTime"><p>A value that is set to <code>true</code> to restore the DB cluster to the latest restorable backup time, and <code>false</code> otherwise.</p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if <code>RestoreToTime</code> parameter is provided.</p></param>
		/// <param name="Port"><p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p></param>
		/// <param name="DBSubnetGroupName"><p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p></param>
		/// <param name="OptionGroupName"> <i>(Not supported by Neptune)</i> </param>
		/// <param name="VpcSecurityGroupIds">A list of VPC security groups that the new DB cluster belongs to.</param>
		/// <param name="Tags">The tags to be applied to the restored DB cluster.</param>
		/// <param name="KmsKeyId"><p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following will occur:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that is not encrypted, then the restore request is rejected.</p></param>
		/// <param name="EnableIAMDatabaseAuthentication"><p>True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.</p> <p>Default: <code>false</code> </p></param>
		/// <param name="EnableCloudwatchLogsExports">The list of logs that the restored DB cluster is to export to CloudWatch Logs.</param>
		/// <param name="DBClusterParameterGroupName"><p>The name of the DB cluster parameter group to associate with the new DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul></param>
		/// <param name="DeletionProtection">A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. </param>
		/// <returns>Success</returns>
		public async Task GET_RestoreDBClusterToPointInTimeAsync(
					string DBClusterIdentifier, 
					string RestoreType, 
					string SourceDBClusterIdentifier, 
					System.DateTimeOffset RestoreToTime, 
					bool UseLatestRestorableTime, 
					int Port, 
					string DBSubnetGroupName, 
					string OptionGroupName, 
					String[] VpcSecurityGroupIds, 
					Tag[] Tags, 
					string KmsKeyId, 
					bool EnableIAMDatabaseAuthentication, 
					String[] EnableCloudwatchLogsExports, 
					string DBClusterParameterGroupName, 
					bool DeletionProtection, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RestoreDBClusterToPointInTime?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&RestoreType=" + (RestoreType==null? "" : Uri.EscapeDataString(RestoreType))+"&SourceDBClusterIdentifier=" + (SourceDBClusterIdentifier==null? "" : Uri.EscapeDataString(SourceDBClusterIdentifier))+"&RestoreToTime=" + RestoreToTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&UseLatestRestorableTime="+UseLatestRestorableTime+"&Port="+Port+"&DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : Uri.EscapeDataString(DBSubnetGroupName))+"&OptionGroupName=" + (OptionGroupName==null? "" : Uri.EscapeDataString(OptionGroupName))+"&"+String.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={z}"))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&EnableIAMDatabaseAuthentication="+EnableIAMDatabaseAuthentication+"&"+String.Join("&", EnableCloudwatchLogsExports.Select(z => $"EnableCloudwatchLogsExports={z}"))+"&DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&DeletionProtection="+DeletionProtection+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts an Amazon Neptune DB cluster that was stopped using the AWS console, the AWS CLI stop-db-cluster command, or the StopDBCluster API.
		/// GET_StartDBCluster /#Action=StartDBCluster
		/// </summary>
		/// <param name="DBClusterIdentifier">The DB cluster identifier of the Neptune DB cluster to be started. This parameter is stored as a lowercase string.</param>
		/// <returns>Success</returns>
		public async Task GET_StartDBClusterAsync(string DBClusterIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=StartDBCluster?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Stops an Amazon Neptune DB cluster. When you stop a DB cluster, Neptune retains the DB cluster's metadata, including its endpoints and DB parameter groups.</p> <p>Neptune also retains the transaction logs so you can do a point-in-time restore if necessary.</p>
		/// GET_StopDBCluster /#Action=StopDBCluster
		/// </summary>
		/// <param name="DBClusterIdentifier">The DB cluster identifier of the Neptune DB cluster to be stopped. This parameter is stored as a lowercase string.</param>
		/// <returns>Success</returns>
		public async Task GET_StopDBClusterAsync(string DBClusterIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=StopDBCluster?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
