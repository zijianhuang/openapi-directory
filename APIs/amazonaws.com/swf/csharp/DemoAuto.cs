//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Contains the count of workflow executions returned from <a>CountOpenWorkflowExecutions</a> or <a>CountClosedWorkflowExecutions</a> 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecutionCount
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Truncated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CountClosedWorkflowExecutionsInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Used to filter the workflow executions in visibility APIs by various time-based rules. Each parameter, if specified, defines a rule that must be satisfied by each returned query result. The parameter values are in the <a href="https://en.wikipedia.org/wiki/Unix_time">Unix Time format</a>. For example: <code>"oldestDate": 1325376070.</code> 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExecutionTimeFilter StartTimeFilter { get; set; }
		
		/// <summary>
		/// Used to filter the workflow executions in visibility APIs by various time-based rules. Each parameter, if specified, defines a rule that must be satisfied by each returned query result. The parameter values are in the <a href="https://en.wikipedia.org/wiki/Unix_time">Unix Time format</a>. For example: <code>"oldestDate": 1325376070.</code> 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExecutionTimeFilter CloseTimeFilter { get; set; }
		
		/// <summary>
		/// Used to filter the workflow executions in visibility APIs by their <code>workflowId</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionFilter ExecutionFilter { get; set; }
		
		/// <summary>
		/// Used to filter workflow execution query results by type. Each parameter, if specified, defines a rule that must be satisfied by each returned result.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowTypeFilter TypeFilter { get; set; }
		
		/// <summary>
		/// Used to filter the workflow executions in visibility APIs based on a tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TagFilter TagFilter { get; set; }
		
		/// <summary>
		/// Used to filter the closed workflow executions in visibility APIs by their close status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloseStatusFilter CloseStatusFilter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CountOpenWorkflowExecutionsInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Used to filter the workflow executions in visibility APIs by various time-based rules. Each parameter, if specified, defines a rule that must be satisfied by each returned query result. The parameter values are in the <a href="https://en.wikipedia.org/wiki/Unix_time">Unix Time format</a>. For example: <code>"oldestDate": 1325376070.</code> 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExecutionTimeFilter StartTimeFilter { get; set; }
		
		/// <summary>
		/// Used to filter workflow execution query results by type. Each parameter, if specified, defines a rule that must be satisfied by each returned result.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowTypeFilter TypeFilter { get; set; }
		
		/// <summary>
		/// Used to filter the workflow executions in visibility APIs based on a tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TagFilter TagFilter { get; set; }
		
		/// <summary>
		/// Used to filter the workflow executions in visibility APIs by their <code>workflowId</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionFilter ExecutionFilter { get; set; }
	}
	
	/// <summary>
	/// Contains the count of tasks in a task list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PendingTaskCount
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Truncated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CountPendingActivityTasksInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TaskList TaskList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CountPendingDecisionTasksInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TaskList TaskList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeprecateActivityTypeInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Represents an activity type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActivityType ActivityType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeprecateDomainInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeprecateWorkflowTypeInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
	}
	
	/// <summary>
	/// Detailed information about an activity type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActivityTypeDetail
	{
		
		/// <summary>
		/// Detailed information about an activity type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActivityTypeInfo TypeInfo { get; set; }
		
		/// <summary>
		/// Configuration settings registered with the activity type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActivityTypeConfiguration Configuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeActivityTypeInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Represents an activity type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActivityType ActivityType { get; set; }
	}
	
	/// <summary>
	/// Contains details of a domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainDetail
	{
		
		/// <summary>
		/// Contains general information about a domain.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainInfo DomainInfo { get; set; }
		
		/// <summary>
		/// Contains the configuration settings of a domain.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainConfiguration Configuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDomainInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Contains details about a workflow execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecutionDetail
	{
		
		/// <summary>
		/// Contains information about a workflow execution.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionInfo ExecutionInfo { get; set; }
		
		/// <summary>
		/// The configuration settings for a workflow execution including timeout values, tasklist etc. These configuration settings are determined from the defaults specified when registering the workflow type and those specified when starting the workflow execution.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionConfiguration ExecutionConfiguration { get; set; }
		
		/// <summary>
		/// Contains the counts of open tasks, child workflow executions and timers for a workflow execution.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionOpenCounts OpenCounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LatestActivityTaskTimestamp { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string LatestExecutionContext { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeWorkflowExecutionInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution Execution { get; set; }
	}
	
	/// <summary>
	/// Contains details about a workflow type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowTypeDetail
	{
		
		/// <summary>
		/// Contains information about a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowTypeInfo TypeInfo { get; set; }
		
		/// <summary>
		/// The configuration settings of a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowTypeConfiguration Configuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeWorkflowTypeInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
	}
	
	/// <summary>
	/// Paginated representation of a workflow history for a workflow execution. This is the up to date, complete and authoritative record of the events related to all tasks and events in the life of the workflow execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class History
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HistoryEvent[] Events { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetWorkflowExecutionHistoryInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution Execution { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> MaximumPageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReverseOrder { get; set; }
	}
	
	/// <summary>
	/// Contains a paginated list of activity type information structures.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActivityTypeInfos
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActivityTypeInfo[] TypeInfos { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListActivityTypesInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListActivityTypesInputRegistrationStatus RegistrationStatus { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> MaximumPageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReverseOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListActivityTypesInputRegistrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED = 1,
	}
	
	/// <summary>
	/// Contains a paginated list of information about workflow executions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecutionInfos
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionInfo[] ExecutionInfos { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListClosedWorkflowExecutionsInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Used to filter the workflow executions in visibility APIs by various time-based rules. Each parameter, if specified, defines a rule that must be satisfied by each returned query result. The parameter values are in the <a href="https://en.wikipedia.org/wiki/Unix_time">Unix Time format</a>. For example: <code>"oldestDate": 1325376070.</code> 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExecutionTimeFilter StartTimeFilter { get; set; }
		
		/// <summary>
		/// Used to filter the workflow executions in visibility APIs by various time-based rules. Each parameter, if specified, defines a rule that must be satisfied by each returned query result. The parameter values are in the <a href="https://en.wikipedia.org/wiki/Unix_time">Unix Time format</a>. For example: <code>"oldestDate": 1325376070.</code> 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExecutionTimeFilter CloseTimeFilter { get; set; }
		
		/// <summary>
		/// Used to filter the workflow executions in visibility APIs by their <code>workflowId</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionFilter ExecutionFilter { get; set; }
		
		/// <summary>
		/// Used to filter the closed workflow executions in visibility APIs by their close status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloseStatusFilter CloseStatusFilter { get; set; }
		
		/// <summary>
		/// Used to filter workflow execution query results by type. Each parameter, if specified, defines a rule that must be satisfied by each returned result.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowTypeFilter TypeFilter { get; set; }
		
		/// <summary>
		/// Used to filter the workflow executions in visibility APIs based on a tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TagFilter TagFilter { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> MaximumPageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReverseOrder { get; set; }
	}
	
	/// <summary>
	/// Contains a paginated collection of DomainInfo structures.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainInfos
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainInfo[] DomainInfos1 { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDomainsInput
	{
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string NextPageToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListDomainsInputRegistrationStatus RegistrationStatus { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> MaximumPageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReverseOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListDomainsInputRegistrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListOpenWorkflowExecutionsInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Used to filter the workflow executions in visibility APIs by various time-based rules. Each parameter, if specified, defines a rule that must be satisfied by each returned query result. The parameter values are in the <a href="https://en.wikipedia.org/wiki/Unix_time">Unix Time format</a>. For example: <code>"oldestDate": 1325376070.</code> 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExecutionTimeFilter StartTimeFilter { get; set; }
		
		/// <summary>
		/// Used to filter workflow execution query results by type. Each parameter, if specified, defines a rule that must be satisfied by each returned result.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowTypeFilter TypeFilter { get; set; }
		
		/// <summary>
		/// Used to filter the workflow executions in visibility APIs based on a tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TagFilter TagFilter { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> MaximumPageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReverseOrder { get; set; }
		
		/// <summary>
		/// Used to filter the workflow executions in visibility APIs by their <code>workflowId</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionFilter ExecutionFilter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceTag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceInput
	{
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string ResourceArn { get; set; }
	}
	
	/// <summary>
	/// Contains a paginated list of information structures about workflow types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowTypeInfos
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowTypeInfo[] TypeInfos { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListWorkflowTypesInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListWorkflowTypesInputRegistrationStatus RegistrationStatus { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> MaximumPageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReverseOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListWorkflowTypesInputRegistrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED = 1,
	}
	
	/// <summary>
	/// Unit of work sent to an activity worker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActivityTask
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string TaskToken { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ActivityId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Represents an activity type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActivityType ActivityType { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PollForActivityTaskInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TaskList TaskList { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Identity { get; set; }
	}
	
	/// <summary>
	/// A structure that represents a decision task. Decision tasks are sent to deciders in order for them to make decisions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DecisionTask
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string TaskToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HistoryEvent[] Events { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PreviousStartedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PollForDecisionTaskInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TaskList TaskList { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Identity { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> MaximumPageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReverseOrder { get; set; }
	}
	
	/// <summary>
	/// Status information about an activity task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActivityTaskStatus
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool CancelRequested { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RecordActivityTaskHeartbeatInput
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string TaskToken { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterActivityTypeInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Version { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string DefaultTaskStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string DefaultTaskHeartbeatTimeout { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TaskList DefaultTaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultTaskPriority { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string DefaultTaskScheduleToStartTimeout { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string DefaultTaskScheduleToCloseTimeout { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterDomainInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string WorkflowExecutionRetentionPeriodInDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceTag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterWorkflowTypeInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Version { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string DefaultTaskStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string DefaultExecutionStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TaskList DefaultTaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultTaskPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RegisterWorkflowTypeInputDefaultChildPolicy DefaultChildPolicy { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string DefaultLambdaRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegisterWorkflowTypeInputDefaultChildPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestCancelWorkflowExecutionInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string RunId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RespondActivityTaskCanceledInput
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string TaskToken { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RespondActivityTaskCompletedInput
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string TaskToken { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RespondActivityTaskFailedInput
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string TaskToken { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Reason { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Details { get; set; }
	}
	
	/// <summary>
	/// Input data for a TaskCompleted response to a decision task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RespondDecisionTaskCompletedInput
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string TaskToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Decision[] Decisions { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string ExecutionContext { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SignalWorkflowExecutionInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string RunId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string SignalName { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Input { get; set; }
	}
	
	/// <summary>
	/// Specifies the <code>runId</code> of a workflow execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Run
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string RunId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartWorkflowExecutionInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskPriority { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Input { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string ExecutionStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Tag[] TagList { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string TaskStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StartWorkflowExecutionInputChildPolicy ChildPolicy { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string LambdaRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartWorkflowExecutionInputChildPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceInput
	{
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string ResourceArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceTag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TerminateWorkflowExecutionInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string RunId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Reason { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TerminateWorkflowExecutionInputChildPolicy ChildPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TerminateWorkflowExecutionInputChildPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UndeprecateActivityTypeInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Represents an activity type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActivityType ActivityType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UndeprecateDomainInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UndeprecateWorkflowTypeInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceInput
	{
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string ResourceArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceTagKey[] TagKeys { get; set; }
	}
	
	/// <summary>
	/// Represents a workflow execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecution
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string RunId { get; set; }
	}
	
	/// <summary>
	/// Represents an activity type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActivityType
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ActivityTaskCancelRequested</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActivityTaskCancelRequestedEventAttributes
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ActivityId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ActivityTaskCanceled</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActivityTaskCanceledEventAttributes
	{
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Details { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScheduledEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LatestCancelRequestedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ActivityTaskCompleted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActivityTaskCompletedEventAttributes
	{
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Result { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScheduledEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ActivityTaskFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActivityTaskFailedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Reason { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Details { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScheduledEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	/// Represents a task list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaskList
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ActivityTaskScheduled</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActivityTaskScheduledEventAttributes
	{
		
		/// <summary>
		/// Represents an activity type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActivityType ActivityType { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ActivityId { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Input { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Control { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string ScheduleToStartTimeout { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string ScheduleToCloseTimeout { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string StartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskPriority { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string HeartbeatTimeout { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ActivityTaskStarted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActivityTaskStartedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Identity { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScheduledEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ActivityTaskTimeoutType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_TO_CLOSE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULE_TO_START = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULE_TO_CLOSE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARTBEAT = 3,
	}
	
	/// <summary>
	/// Provides the details of the <code>ActivityTaskTimedOut</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActivityTaskTimedOutEventAttributes
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActivityTaskTimedOutEventAttributesTimeoutType TimeoutType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScheduledEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ActivityTaskTimedOutEventAttributesTimeoutType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_TO_CLOSE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULE_TO_START = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULE_TO_CLOSE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARTBEAT = 3,
	}
	
	/// <summary>
	/// Configuration settings registered with the activity type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActivityTypeConfiguration
	{
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string DefaultTaskStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string DefaultTaskHeartbeatTimeout { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TaskList DefaultTaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultTaskPriority { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string DefaultTaskScheduleToStartTimeout { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string DefaultTaskScheduleToCloseTimeout { get; set; }
	}
	
	/// <summary>
	/// Detailed information about an activity type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActivityTypeInfo
	{
		
		/// <summary>
		/// Represents an activity type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActivityType ActivityType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActivityTypeInfoStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024)]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeprecationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ActivityTypeInfoStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegistrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED = 1,
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>CancelTimer</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelTimerDecisionAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string TimerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CancelTimerFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMER_ID_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 1,
	}
	
	/// <summary>
	/// Provides the details of the <code>CancelTimerFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelTimerFailedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string TimerId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CancelTimerFailedEventAttributesCause Cause { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CancelTimerFailedEventAttributesCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMER_ID_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 1,
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>CancelWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelWorkflowExecutionDecisionAttributes
	{
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CancelWorkflowExecutionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHANDLED_DECISION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 1,
	}
	
	/// <summary>
	/// Provides the details of the <code>CancelWorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelWorkflowExecutionFailedEventAttributes
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CancelWorkflowExecutionFailedEventAttributesCause Cause { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CancelWorkflowExecutionFailedEventAttributesCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHANDLED_DECISION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChildPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON = 2,
	}
	
	/// <summary>
	/// Represents a workflow type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowType
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Provide details of the <code>ChildWorkflowExecutionCanceled</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChildWorkflowExecutionCanceledEventAttributes
	{
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Details { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InitiatedEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ChildWorkflowExecutionCompleted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChildWorkflowExecutionCompletedEventAttributes
	{
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Result { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InitiatedEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ChildWorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChildWorkflowExecutionFailedEventAttributes
	{
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Reason { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Details { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InitiatedEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ChildWorkflowExecutionStarted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChildWorkflowExecutionStartedEventAttributes
	{
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InitiatedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ChildWorkflowExecutionTerminated</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChildWorkflowExecutionTerminatedEventAttributes
	{
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InitiatedEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkflowExecutionTimeoutType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_TO_CLOSE = 0,
	}
	
	/// <summary>
	/// Provides the details of the <code>ChildWorkflowExecutionTimedOut</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChildWorkflowExecutionTimedOutEventAttributes
	{
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ChildWorkflowExecutionTimedOutEventAttributesTimeoutType TimeoutType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InitiatedEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChildWorkflowExecutionTimedOutEventAttributesTimeoutType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_TO_CLOSE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CloseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUED_AS_NEW = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 5,
	}
	
	/// <summary>
	/// Used to filter the closed workflow executions in visibility APIs by their close status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloseStatusFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CloseStatusFilterStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CloseStatusFilterStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUED_AS_NEW = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 5,
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>CompleteWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CompleteWorkflowExecutionDecisionAttributes
	{
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CompleteWorkflowExecutionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHANDLED_DECISION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 1,
	}
	
	/// <summary>
	/// Provides the details of the <code>CompleteWorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CompleteWorkflowExecutionFailedEventAttributes
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CompleteWorkflowExecutionFailedEventAttributesCause Cause { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CompleteWorkflowExecutionFailedEventAttributesCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHANDLED_DECISION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 1,
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>ContinueAsNewWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tag</code> – A tag used to identify the workflow execution</p> </li> <li> <p> <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p> </li> <li> <p> <code>workflowType.version</code> – String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContinueAsNewWorkflowExecutionDecisionAttributes
	{
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Input { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string ExecutionStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskPriority { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string TaskStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContinueAsNewWorkflowExecutionDecisionAttributesChildPolicy ChildPolicy { get; set; }
		
		/// <summary>
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Tag[] TagList { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string WorkflowTypeVersion { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string LambdaRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContinueAsNewWorkflowExecutionDecisionAttributesChildPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContinueAsNewWorkflowExecutionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHANDLED_DECISION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOW_TYPE_DEPRECATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOW_TYPE_DOES_NOT_EXIST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_TASK_LIST_UNDEFINED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_CHILD_POLICY_UNDEFINED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUE_AS_NEW_WORKFLOW_EXECUTION_RATE_EXCEEDED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 8,
	}
	
	/// <summary>
	/// Provides the details of the <code>ContinueAsNewWorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContinueAsNewWorkflowExecutionFailedEventAttributes
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContinueAsNewWorkflowExecutionFailedEventAttributesCause Cause { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContinueAsNewWorkflowExecutionFailedEventAttributesCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHANDLED_DECISION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOW_TYPE_DEPRECATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOW_TYPE_DOES_NOT_EXIST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_TASK_LIST_UNDEFINED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_CHILD_POLICY_UNDEFINED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUE_AS_NEW_WORKFLOW_EXECUTION_RATE_EXCEEDED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 8,
	}
	
	/// <summary>
	/// Used to filter the workflow executions in visibility APIs by various time-based rules. Each parameter, if specified, defines a rule that must be satisfied by each returned query result. The parameter values are in the <a href="https://en.wikipedia.org/wiki/Unix_time">Unix Time format</a>. For example: <code>"oldestDate": 1325376070.</code> 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExecutionTimeFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset OldestDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LatestDate { get; set; }
	}
	
	/// <summary>
	/// Used to filter the workflow executions in visibility APIs by their <code>workflowId</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecutionFilter
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string WorkflowId { get; set; }
	}
	
	/// <summary>
	/// Used to filter workflow execution query results by type. Each parameter, if specified, defines a rule that must be satisfied by each returned result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowTypeFilter
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Used to filter the workflow executions in visibility APIs based on a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagFilter
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DecisionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduleActivityTask = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCancelActivityTask = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CompleteWorkflowExecution = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailWorkflowExecution = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancelWorkflowExecution = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContinueAsNewWorkflowExecution = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecordMarker = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartTimer = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancelTimer = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignalExternalWorkflowExecution = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCancelExternalWorkflowExecution = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartChildWorkflowExecution = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduleLambdaFunction = 12,
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>ScheduleActivityTask</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>activityType.name</code> – String constraint. The key is <code>swf:activityType.name</code>.</p> </li> <li> <p> <code>activityType.version</code> – String constraint. The key is <code>swf:activityType.version</code>.</p> </li> <li> <p> <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduleActivityTaskDecisionAttributes
	{
		
		/// <summary>
		/// Represents an activity type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActivityType ActivityType { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ActivityId { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Control { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Input { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string ScheduleToCloseTimeout { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskPriority { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string ScheduleToStartTimeout { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string StartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string HeartbeatTimeout { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>RequestCancelActivityTask</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestCancelActivityTaskDecisionAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ActivityId { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>FailWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FailWorkflowExecutionDecisionAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Reason { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Details { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>RecordMarker</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RecordMarkerDecisionAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string MarkerName { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Details { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>StartTimer</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartTimerDecisionAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string TimerId { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Control { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string StartToFireTimeout { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>SignalExternalWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SignalExternalWorkflowExecutionDecisionAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string RunId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string SignalName { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Input { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Control { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>RequestCancelExternalWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestCancelExternalWorkflowExecutionDecisionAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string RunId { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Control { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>StartChildWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagList.member.N</code> – The key is "swf:tagList.N" where N is the tag number from 0 to 4, inclusive.</p> </li> <li> <p> <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p> </li> <li> <p> <code>workflowType.name</code> – String constraint. The key is <code>swf:workflowType.name</code>.</p> </li> <li> <p> <code>workflowType.version</code> – String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartChildWorkflowExecutionDecisionAttributes
	{
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Control { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Input { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string ExecutionStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskPriority { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string TaskStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StartChildWorkflowExecutionDecisionAttributesChildPolicy ChildPolicy { get; set; }
		
		/// <summary>
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Tag[] TagList { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string LambdaRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartChildWorkflowExecutionDecisionAttributesChildPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON = 2,
	}
	
	/// <summary>
	/// Decision attributes specified in <code>scheduleLambdaFunctionDecisionAttributes</code> within the list of decisions <code>decisions</code> passed to <a>RespondDecisionTaskCompleted</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduleLambdaFunctionDecisionAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Control { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768, MinimumLength=0)]
		public string Input { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string StartToCloseTimeout { get; set; }
	}
	
	/// <summary>
	/// <p>Specifies a decision made by the decider. A decision can be one of these types:</p> <ul> <li> <p> <code>CancelTimer</code> – Cancels a previously started timer and records a <code>TimerCanceled</code> event in the history.</p> </li> <li> <p> <code>CancelWorkflowExecution</code> – Closes the workflow execution and records a <code>WorkflowExecutionCanceled</code> event in the history.</p> </li> <li> <p> <code>CompleteWorkflowExecution</code> – Closes the workflow execution and records a <code>WorkflowExecutionCompleted</code> event in the history .</p> </li> <li> <p> <code>ContinueAsNewWorkflowExecution</code> – Closes the workflow execution and starts a new workflow execution of the same type using the same workflow ID and a unique run Id. A <code>WorkflowExecutionContinuedAsNew</code> event is recorded in the history.</p> </li> <li> <p> <code>FailWorkflowExecution</code> – Closes the workflow execution and records a <code>WorkflowExecutionFailed</code> event in the history.</p> </li> <li> <p> <code>RecordMarker</code> – Records a <code>MarkerRecorded</code> event in the history. Markers can be used for adding custom information in the history for instance to let deciders know that they don't need to look at the history beyond the marker event.</p> </li> <li> <p> <code>RequestCancelActivityTask</code> – Attempts to cancel a previously scheduled activity task. If the activity task was scheduled but has not been assigned to a worker, then it is canceled. If the activity task was already assigned to a worker, then the worker is informed that cancellation has been requested in the response to <a>RecordActivityTaskHeartbeat</a>.</p> </li> <li> <p> <code>RequestCancelExternalWorkflowExecution</code> – Requests that a request be made to cancel the specified external workflow execution and records a <code>RequestCancelExternalWorkflowExecutionInitiated</code> event in the history.</p> </li> <li> <p> <code>ScheduleActivityTask</code> – Schedules an activity task.</p> </li> <li> <p> <code>SignalExternalWorkflowExecution</code> – Requests a signal to be delivered to the specified external workflow execution and records a <code>SignalExternalWorkflowExecutionInitiated</code> event in the history.</p> </li> <li> <p> <code>StartChildWorkflowExecution</code> – Requests that a child workflow execution be started and records a <code>StartChildWorkflowExecutionInitiated</code> event in the history. The child workflow execution is a separate workflow execution with its own history.</p> </li> <li> <p> <code>StartTimer</code> – Starts a timer for this workflow execution and records a <code>TimerStarted</code> event in the history. This timer fires after the specified delay and record a <code>TimerFired</code> event.</p> </li> </ul> <p> <b>Access Control</b> </p> <p>If you grant permission to use <code>RespondDecisionTaskCompleted</code>, you can use IAM policies to express permissions for the list of decisions returned by this action as if they were members of the API. Treating decisions as a pseudo API maintains a uniform conceptual model and helps keep policies readable. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> <p> <b>Decision Failure</b> </p> <p>Decisions can fail for several reasons</p> <ul> <li> <p>The ordering of decisions should follow a logical flow. Some decisions might not make sense in the current context of the workflow execution and therefore fails.</p> </li> <li> <p>A limit on your account was reached.</p> </li> <li> <p>The decision lacks sufficient permissions.</p> </li> </ul> <p>One of the following events might be added to the history to indicate an error. The event attribute's <code>cause</code> parameter indicates the cause. If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> <ul> <li> <p> <code>ScheduleActivityTaskFailed</code> – A <code>ScheduleActivityTask</code> decision failed. This could happen if the activity type specified in the decision isn't registered, is in a deprecated state, or the decision isn't properly configured.</p> </li> <li> <p> <code>RequestCancelActivityTaskFailed</code> – A <code>RequestCancelActivityTask</code> decision failed. This could happen if there is no open activity task with the specified activityId.</p> </li> <li> <p> <code>StartTimerFailed</code> – A <code>StartTimer</code> decision failed. This could happen if there is another open timer with the same timerId.</p> </li> <li> <p> <code>CancelTimerFailed</code> – A <code>CancelTimer</code> decision failed. This could happen if there is no open timer with the specified timerId.</p> </li> <li> <p> <code>StartChildWorkflowExecutionFailed</code> – A <code>StartChildWorkflowExecution</code> decision failed. This could happen if the workflow type specified isn't registered, is deprecated, or the decision isn't properly configured.</p> </li> <li> <p> <code>SignalExternalWorkflowExecutionFailed</code> – A <code>SignalExternalWorkflowExecution</code> decision failed. This could happen if the <code>workflowID</code> specified in the decision was incorrect.</p> </li> <li> <p> <code>RequestCancelExternalWorkflowExecutionFailed</code> – A <code>RequestCancelExternalWorkflowExecution</code> decision failed. This could happen if the <code>workflowID</code> specified in the decision was incorrect.</p> </li> <li> <p> <code>CancelWorkflowExecutionFailed</code> – A <code>CancelWorkflowExecution</code> decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.</p> </li> <li> <p> <code>CompleteWorkflowExecutionFailed</code> – A <code>CompleteWorkflowExecution</code> decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.</p> </li> <li> <p> <code>ContinueAsNewWorkflowExecutionFailed</code> – A <code>ContinueAsNewWorkflowExecution</code> decision failed. This could happen if there is an unhandled decision task pending in the workflow execution or the ContinueAsNewWorkflowExecution decision was not configured correctly.</p> </li> <li> <p> <code>FailWorkflowExecutionFailed</code> – A <code>FailWorkflowExecution</code> decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.</p> </li> </ul> <p>The preceding error events might occur due to an error in the decider logic, which might put the workflow execution in an unstable state The cause field in the event structure for the error event indicates the cause of the error.</p> <note> <p>A workflow execution may be closed by the decider by returning one of the following decisions when completing a decision task: <code>CompleteWorkflowExecution</code>, <code>FailWorkflowExecution</code>, <code>CancelWorkflowExecution</code> and <code>ContinueAsNewWorkflowExecution</code>. An <code>UnhandledDecision</code> fault is returned if a workflow closing decision is specified and a signal or activity event had been added to the history while the decision task was being performed by the decider. Unlike the above situations which are logic issues, this fault is always possible because of race conditions in a distributed system. The right action here is to call <a>RespondDecisionTaskCompleted</a> without any decisions. This would result in another decision task with these new events included in the history. The decider should handle the new events and may decide to close the workflow execution.</p> </note> <p> <b>How to Code a Decision</b> </p> <p>You code a decision by first setting the decision type field to one of the above decision values, and then set the corresponding attributes field shown below:</p> <ul> <li> <p> <code> <a>ScheduleActivityTaskDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>RequestCancelActivityTaskDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>CompleteWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>FailWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>CancelWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>ContinueAsNewWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>RecordMarkerDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>StartTimerDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>CancelTimerDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>SignalExternalWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>RequestCancelExternalWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>StartChildWorkflowExecutionDecisionAttributes</a> </code> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Decision
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DecisionDecisionType DecisionType { get; set; }
		
		/// <summary>
		/// <p>Provides the details of the <code>ScheduleActivityTask</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>activityType.name</code> – String constraint. The key is <code>swf:activityType.name</code>.</p> </li> <li> <p> <code>activityType.version</code> – String constraint. The key is <code>swf:activityType.version</code>.</p> </li> <li> <p> <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScheduleActivityTaskDecisionAttributes ScheduleActivityTaskDecisionAttributes { get; set; }
		
		/// <summary>
		/// <p>Provides the details of the <code>RequestCancelActivityTask</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RequestCancelActivityTaskDecisionAttributes RequestCancelActivityTaskDecisionAttributes { get; set; }
		
		/// <summary>
		/// <p>Provides the details of the <code>CompleteWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CompleteWorkflowExecutionDecisionAttributes CompleteWorkflowExecutionDecisionAttributes { get; set; }
		
		/// <summary>
		/// <p>Provides the details of the <code>FailWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FailWorkflowExecutionDecisionAttributes FailWorkflowExecutionDecisionAttributes { get; set; }
		
		/// <summary>
		/// <p>Provides the details of the <code>CancelWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CancelWorkflowExecutionDecisionAttributes CancelWorkflowExecutionDecisionAttributes { get; set; }
		
		/// <summary>
		/// <p>Provides the details of the <code>ContinueAsNewWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tag</code> – A tag used to identify the workflow execution</p> </li> <li> <p> <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p> </li> <li> <p> <code>workflowType.version</code> – String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContinueAsNewWorkflowExecutionDecisionAttributes ContinueAsNewWorkflowExecutionDecisionAttributes { get; set; }
		
		/// <summary>
		/// <p>Provides the details of the <code>RecordMarker</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecordMarkerDecisionAttributes RecordMarkerDecisionAttributes { get; set; }
		
		/// <summary>
		/// <p>Provides the details of the <code>StartTimer</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StartTimerDecisionAttributes StartTimerDecisionAttributes { get; set; }
		
		/// <summary>
		/// <p>Provides the details of the <code>CancelTimer</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CancelTimerDecisionAttributes CancelTimerDecisionAttributes { get; set; }
		
		/// <summary>
		/// <p>Provides the details of the <code>SignalExternalWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SignalExternalWorkflowExecutionDecisionAttributes SignalExternalWorkflowExecutionDecisionAttributes { get; set; }
		
		/// <summary>
		/// <p>Provides the details of the <code>RequestCancelExternalWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RequestCancelExternalWorkflowExecutionDecisionAttributes RequestCancelExternalWorkflowExecutionDecisionAttributes { get; set; }
		
		/// <summary>
		/// <p>Provides the details of the <code>StartChildWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagList.member.N</code> – The key is "swf:tagList.N" where N is the tag number from 0 to 4, inclusive.</p> </li> <li> <p> <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p> </li> <li> <p> <code>workflowType.name</code> – String constraint. The key is <code>swf:workflowType.name</code>.</p> </li> <li> <p> <code>workflowType.version</code> – String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StartChildWorkflowExecutionDecisionAttributes StartChildWorkflowExecutionDecisionAttributes { get; set; }
		
		/// <summary>
		/// Decision attributes specified in <code>scheduleLambdaFunctionDecisionAttributes</code> within the list of decisions <code>decisions</code> passed to <a>RespondDecisionTaskCompleted</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScheduleLambdaFunctionDecisionAttributes ScheduleLambdaFunctionDecisionAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DecisionDecisionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduleActivityTask = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCancelActivityTask = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CompleteWorkflowExecution = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailWorkflowExecution = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancelWorkflowExecution = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContinueAsNewWorkflowExecution = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecordMarker = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartTimer = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancelTimer = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignalExternalWorkflowExecution = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCancelExternalWorkflowExecution = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartChildWorkflowExecution = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduleLambdaFunction = 12,
	}
	
	/// <summary>
	/// Provides the details of the <code>DecisionTaskCompleted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DecisionTaskCompletedEventAttributes
	{
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string ExecutionContext { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScheduledEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides details about the <code>DecisionTaskScheduled</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DecisionTaskScheduledEventAttributes
	{
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskPriority { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string StartToCloseTimeout { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>DecisionTaskStarted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DecisionTaskStartedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Identity { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScheduledEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DecisionTaskTimeoutType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_TO_CLOSE = 0,
	}
	
	/// <summary>
	/// Provides the details of the <code>DecisionTaskTimedOut</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DecisionTaskTimedOutEventAttributes
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DecisionTaskTimedOutEventAttributesTimeoutType TimeoutType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScheduledEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DecisionTaskTimedOutEventAttributesTimeoutType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_TO_CLOSE = 0,
	}
	
	/// <summary>
	/// Contains the configuration settings of a domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainConfiguration
	{
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string WorkflowExecutionRetentionPeriodInDays { get; set; }
	}
	
	/// <summary>
	/// Contains general information about a domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainInfo
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainInfoStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainInfoStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionStarted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionCancelRequested = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionCompleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CompleteWorkflowExecutionFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionFailed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailWorkflowExecutionFailed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionTimedOut = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionCanceled = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancelWorkflowExecutionFailed = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionContinuedAsNew = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContinueAsNewWorkflowExecutionFailed = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionTerminated = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DecisionTaskScheduled = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DecisionTaskStarted = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DecisionTaskCompleted = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DecisionTaskTimedOut = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskScheduled = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduleActivityTaskFailed = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskStarted = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskCompleted = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskFailed = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskTimedOut = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskCanceled = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskCancelRequested = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCancelActivityTaskFailed = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionSignaled = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MarkerRecorded = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecordMarkerFailed = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimerStarted = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartTimerFailed = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimerFired = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimerCanceled = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancelTimerFailed = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartChildWorkflowExecutionInitiated = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartChildWorkflowExecutionFailed = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionStarted = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionCompleted = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionFailed = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionTimedOut = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionCanceled = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionTerminated = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignalExternalWorkflowExecutionInitiated = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignalExternalWorkflowExecutionFailed = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExternalWorkflowExecutionSignaled = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCancelExternalWorkflowExecutionInitiated = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCancelExternalWorkflowExecutionFailed = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExternalWorkflowExecutionCancelRequested = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaFunctionScheduled = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaFunctionStarted = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaFunctionCompleted = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaFunctionFailed = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaFunctionTimedOut = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduleLambdaFunctionFailed = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartLambdaFunctionFailed = 53,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 1,
	}
	
	/// <summary>
	/// Provides the details of the <code>ExternalWorkflowExecutionCancelRequested</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExternalWorkflowExecutionCancelRequestedEventAttributes
	{
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InitiatedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ExternalWorkflowExecutionSignaled</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExternalWorkflowExecutionSignaledEventAttributes
	{
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InitiatedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FailWorkflowExecutionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHANDLED_DECISION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 1,
	}
	
	/// <summary>
	/// Provides the details of the <code>FailWorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FailWorkflowExecutionFailedEventAttributes
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FailWorkflowExecutionFailedEventAttributesCause Cause { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FailWorkflowExecutionFailedEventAttributesCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHANDLED_DECISION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 1,
	}
	
	/// <summary>
	/// Provides details of <code>WorkflowExecutionStarted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecutionStartedEventAttributes
	{
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Input { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string ExecutionStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string TaskStartToCloseTimeout { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionStartedEventAttributesChildPolicy ChildPolicy { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskPriority { get; set; }
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Tag[] TagList { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string ContinuedExecutionRunId { get; set; }
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution ParentWorkflowExecution { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ParentInitiatedEventId { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string LambdaRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkflowExecutionStartedEventAttributesChildPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON = 2,
	}
	
	/// <summary>
	/// Provides the details of the <code>WorkflowExecutionCompleted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecutionCompletedEventAttributes
	{
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Result { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>WorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecutionFailedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Reason { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Details { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>WorkflowExecutionTimedOut</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecutionTimedOutEventAttributes
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionTimedOutEventAttributesTimeoutType TimeoutType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionTimedOutEventAttributesChildPolicy ChildPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkflowExecutionTimedOutEventAttributesTimeoutType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_TO_CLOSE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkflowExecutionTimedOutEventAttributesChildPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON = 2,
	}
	
	/// <summary>
	/// Provides the details of the <code>WorkflowExecutionCanceled</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecutionCanceledEventAttributes
	{
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Details { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>WorkflowExecutionContinuedAsNew</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecutionContinuedAsNewEventAttributes
	{
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Input { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string NewExecutionRunId { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string ExecutionStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskPriority { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string TaskStartToCloseTimeout { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionContinuedAsNewEventAttributesChildPolicy ChildPolicy { get; set; }
		
		/// <summary>
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Tag[] TagList { get; set; }
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string LambdaRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkflowExecutionContinuedAsNewEventAttributesChildPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON = 2,
	}
	
	/// <summary>
	/// Provides the details of the <code>WorkflowExecutionTerminated</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecutionTerminatedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Reason { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Details { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionTerminatedEventAttributesChildPolicy ChildPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionTerminatedEventAttributesCause Cause { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkflowExecutionTerminatedEventAttributesChildPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkflowExecutionTerminatedEventAttributesCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD_POLICY_APPLIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT_LIMIT_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATOR_INITIATED = 2,
	}
	
	/// <summary>
	/// Provides the details of the <code>WorkflowExecutionCancelRequested</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecutionCancelRequestedEventAttributes
	{
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution ExternalWorkflowExecution { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExternalInitiatedEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionCancelRequestedEventAttributesCause Cause { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkflowExecutionCancelRequestedEventAttributesCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD_POLICY_APPLIED = 0,
	}
	
	/// <summary>
	/// Provides the details of the <code>WorkflowExecutionSignaled</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecutionSignaledEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string SignalName { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Input { get; set; }
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution ExternalWorkflowExecution { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExternalInitiatedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>MarkerRecorded</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MarkerRecordedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string MarkerName { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Details { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>RecordMarkerFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RecordMarkerFailedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string MarkerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecordMarkerFailedEventAttributesCause Cause { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RecordMarkerFailedEventAttributesCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 0,
	}
	
	/// <summary>
	/// Provides the details of the <code>TimerStarted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimerStartedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string TimerId { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Control { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string StartToFireTimeout { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>TimerFired</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimerFiredEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string TimerId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	///  Provides the details of the <code>TimerCanceled</code> event. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimerCanceledEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string TimerId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>StartChildWorkflowExecutionInitiated</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartChildWorkflowExecutionInitiatedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Control { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Input { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string ExecutionStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskPriority { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartChildWorkflowExecutionInitiatedEventAttributesChildPolicy ChildPolicy { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string TaskStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Tag[] TagList { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string LambdaRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartChildWorkflowExecutionInitiatedEventAttributesChildPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON = 2,
	}
	
	/// <summary>
	/// Provides the details of the <code>SignalExternalWorkflowExecutionInitiated</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SignalExternalWorkflowExecutionInitiatedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string RunId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string SignalName { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Input { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Control { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>SignalExternalWorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SignalExternalWorkflowExecutionFailedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string RunId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SignalExternalWorkflowExecutionFailedEventAttributesCause Cause { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InitiatedEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Control { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SignalExternalWorkflowExecutionFailedEventAttributesCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 2,
	}
	
	/// <summary>
	/// Provides the details of the <code>RequestCancelExternalWorkflowExecutionInitiated</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestCancelExternalWorkflowExecutionInitiatedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string RunId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Control { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>RequestCancelExternalWorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestCancelExternalWorkflowExecutionFailedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string RunId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RequestCancelExternalWorkflowExecutionFailedEventAttributesCause Cause { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InitiatedEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Control { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RequestCancelExternalWorkflowExecutionFailedEventAttributesCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 2,
	}
	
	/// <summary>
	/// Provides the details of the <code>ScheduleActivityTaskFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduleActivityTaskFailedEventAttributes
	{
		
		/// <summary>
		/// Represents an activity type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ActivityType ActivityType { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ActivityId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleActivityTaskFailedEventAttributesCause Cause { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScheduleActivityTaskFailedEventAttributesCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_TYPE_DEPRECATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_TYPE_DOES_NOT_EXIST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_ID_ALREADY_IN_USE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_ACTIVITIES_LIMIT_EXCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_CREATION_RATE_EXCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_TASK_LIST_UNDEFINED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 10,
	}
	
	/// <summary>
	/// Provides the details of the <code>RequestCancelActivityTaskFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestCancelActivityTaskFailedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ActivityId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RequestCancelActivityTaskFailedEventAttributesCause Cause { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RequestCancelActivityTaskFailedEventAttributesCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_ID_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 1,
	}
	
	/// <summary>
	/// Provides the details of the <code>StartTimerFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartTimerFailedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string TimerId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartTimerFailedEventAttributesCause Cause { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartTimerFailedEventAttributesCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMER_ID_ALREADY_IN_USE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_TIMERS_LIMIT_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMER_CREATION_RATE_EXCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 3,
	}
	
	/// <summary>
	/// Provides the details of the <code>StartChildWorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartChildWorkflowExecutionFailedEventAttributes
	{
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartChildWorkflowExecutionFailedEventAttributesCause Cause { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string WorkflowId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InitiatedEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Control { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartChildWorkflowExecutionFailedEventAttributesCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOW_TYPE_DOES_NOT_EXIST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOW_TYPE_DEPRECATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_CHILDREN_LIMIT_EXCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_WORKFLOWS_LIMIT_EXCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD_CREATION_RATE_EXCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOW_ALREADY_RUNNING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_TASK_LIST_UNDEFINED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_CHILD_POLICY_UNDEFINED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 10,
	}
	
	/// <summary>
	/// Provides the details of the <code>LambdaFunctionScheduled</code> event. It isn't set for other event types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LambdaFunctionScheduledEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Control { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768, MinimumLength=0)]
		public string Input { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string StartToCloseTimeout { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>LambdaFunctionStarted</code> event. It isn't set for other event types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LambdaFunctionStartedEventAttributes
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScheduledEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>LambdaFunctionCompleted</code> event. It isn't set for other event types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LambdaFunctionCompletedEventAttributes
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScheduledEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Result { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>LambdaFunctionFailed</code> event. It isn't set for other event types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LambdaFunctionFailedEventAttributes
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScheduledEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Reason { get; set; }
		
		/// <summary>
		/// Max length: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32768)]
		public string Details { get; set; }
	}
	
	/// <summary>
	/// Provides details of the <code>LambdaFunctionTimedOut</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LambdaFunctionTimedOutEventAttributes
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScheduledEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int StartedEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LambdaFunctionTimedOutEventAttributesTimeoutType TimeoutType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LambdaFunctionTimedOutEventAttributesTimeoutType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_TO_CLOSE = 0,
	}
	
	/// <summary>
	/// Provides the details of the <code>ScheduleLambdaFunctionFailed</code> event. It isn't set for other event types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduleLambdaFunctionFailedEventAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleLambdaFunctionFailedEventAttributesCause Cause { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScheduleLambdaFunctionFailedEventAttributesCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID_ALREADY_IN_USE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION = 3,
	}
	
	/// <summary>
	/// Provides the details of the <code>StartLambdaFunctionFailed</code> event. It isn't set for other event types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartLambdaFunctionFailedEventAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ScheduledEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StartLambdaFunctionFailedEventAttributesCause Cause { get; set; }
		
		/// <summary>
		/// Max length: 1728
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1728)]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartLambdaFunctionFailedEventAttributesCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSUME_ROLE_FAILED = 0,
	}
	
	/// <summary>
	/// <p>Event within a workflow execution. A history event can be one of these types:</p> <ul> <li> <p> <code>ActivityTaskCancelRequested</code> – A <code>RequestCancelActivityTask</code> decision was received by the system.</p> </li> <li> <p> <code>ActivityTaskCanceled</code> – The activity task was successfully canceled.</p> </li> <li> <p> <code>ActivityTaskCompleted</code> – An activity worker successfully completed an activity task by calling <a>RespondActivityTaskCompleted</a>.</p> </li> <li> <p> <code>ActivityTaskFailed</code> – An activity worker failed an activity task by calling <a>RespondActivityTaskFailed</a>.</p> </li> <li> <p> <code>ActivityTaskScheduled</code> – An activity task was scheduled for execution.</p> </li> <li> <p> <code>ActivityTaskStarted</code> – The scheduled activity task was dispatched to a worker.</p> </li> <li> <p> <code>ActivityTaskTimedOut</code> – The activity task timed out.</p> </li> <li> <p> <code>CancelTimerFailed</code> – Failed to process CancelTimer decision. This happens when the decision isn't configured properly, for example no timer exists with the specified timer Id.</p> </li> <li> <p> <code>CancelWorkflowExecutionFailed</code> – A request to cancel a workflow execution failed.</p> </li> <li> <p> <code>ChildWorkflowExecutionCanceled</code> – A child workflow execution, started by this workflow execution, was canceled and closed.</p> </li> <li> <p> <code>ChildWorkflowExecutionCompleted</code> – A child workflow execution, started by this workflow execution, completed successfully and was closed.</p> </li> <li> <p> <code>ChildWorkflowExecutionFailed</code> – A child workflow execution, started by this workflow execution, failed to complete successfully and was closed.</p> </li> <li> <p> <code>ChildWorkflowExecutionStarted</code> – A child workflow execution was successfully started.</p> </li> <li> <p> <code>ChildWorkflowExecutionTerminated</code> – A child workflow execution, started by this workflow execution, was terminated.</p> </li> <li> <p> <code>ChildWorkflowExecutionTimedOut</code> – A child workflow execution, started by this workflow execution, timed out and was closed.</p> </li> <li> <p> <code>CompleteWorkflowExecutionFailed</code> – The workflow execution failed to complete.</p> </li> <li> <p> <code>ContinueAsNewWorkflowExecutionFailed</code> – The workflow execution failed to complete after being continued as a new workflow execution.</p> </li> <li> <p> <code>DecisionTaskCompleted</code> – The decider successfully completed a decision task by calling <a>RespondDecisionTaskCompleted</a>.</p> </li> <li> <p> <code>DecisionTaskScheduled</code> – A decision task was scheduled for the workflow execution.</p> </li> <li> <p> <code>DecisionTaskStarted</code> – The decision task was dispatched to a decider.</p> </li> <li> <p> <code>DecisionTaskTimedOut</code> – The decision task timed out.</p> </li> <li> <p> <code>ExternalWorkflowExecutionCancelRequested</code> – Request to cancel an external workflow execution was successfully delivered to the target execution.</p> </li> <li> <p> <code>ExternalWorkflowExecutionSignaled</code> – A signal, requested by this workflow execution, was successfully delivered to the target external workflow execution.</p> </li> <li> <p> <code>FailWorkflowExecutionFailed</code> – A request to mark a workflow execution as failed, itself failed.</p> </li> <li> <p> <code>MarkerRecorded</code> – A marker was recorded in the workflow history as the result of a <code>RecordMarker</code> decision.</p> </li> <li> <p> <code>RecordMarkerFailed</code> – A <code>RecordMarker</code> decision was returned as failed.</p> </li> <li> <p> <code>RequestCancelActivityTaskFailed</code> – Failed to process RequestCancelActivityTask decision. This happens when the decision isn't configured properly.</p> </li> <li> <p> <code>RequestCancelExternalWorkflowExecutionFailed</code> – Request to cancel an external workflow execution failed.</p> </li> <li> <p> <code>RequestCancelExternalWorkflowExecutionInitiated</code> – A request was made to request the cancellation of an external workflow execution.</p> </li> <li> <p> <code>ScheduleActivityTaskFailed</code> – Failed to process ScheduleActivityTask decision. This happens when the decision isn't configured properly, for example the activity type specified isn't registered.</p> </li> <li> <p> <code>SignalExternalWorkflowExecutionFailed</code> – The request to signal an external workflow execution failed.</p> </li> <li> <p> <code>SignalExternalWorkflowExecutionInitiated</code> – A request to signal an external workflow was made.</p> </li> <li> <p> <code>StartActivityTaskFailed</code> – A scheduled activity task failed to start.</p> </li> <li> <p> <code>StartChildWorkflowExecutionFailed</code> – Failed to process StartChildWorkflowExecution decision. This happens when the decision isn't configured properly, for example the workflow type specified isn't registered.</p> </li> <li> <p> <code>StartChildWorkflowExecutionInitiated</code> – A request was made to start a child workflow execution.</p> </li> <li> <p> <code>StartTimerFailed</code> – Failed to process StartTimer decision. This happens when the decision isn't configured properly, for example a timer already exists with the specified timer Id.</p> </li> <li> <p> <code>TimerCanceled</code> – A timer, previously started for this workflow execution, was successfully canceled.</p> </li> <li> <p> <code>TimerFired</code> – A timer, previously started for this workflow execution, fired.</p> </li> <li> <p> <code>TimerStarted</code> – A timer was started for the workflow execution due to a <code>StartTimer</code> decision.</p> </li> <li> <p> <code>WorkflowExecutionCancelRequested</code> – A request to cancel this workflow execution was made.</p> </li> <li> <p> <code>WorkflowExecutionCanceled</code> – The workflow execution was successfully canceled and closed.</p> </li> <li> <p> <code>WorkflowExecutionCompleted</code> – The workflow execution was closed due to successful completion.</p> </li> <li> <p> <code>WorkflowExecutionContinuedAsNew</code> – The workflow execution was closed and a new execution of the same type was created with the same workflowId.</p> </li> <li> <p> <code>WorkflowExecutionFailed</code> – The workflow execution closed due to a failure.</p> </li> <li> <p> <code>WorkflowExecutionSignaled</code> – An external signal was received for the workflow execution.</p> </li> <li> <p> <code>WorkflowExecutionStarted</code> – The workflow execution was started.</p> </li> <li> <p> <code>WorkflowExecutionTerminated</code> – The workflow execution was terminated.</p> </li> <li> <p> <code>WorkflowExecutionTimedOut</code> – The workflow execution was closed because a time out was exceeded.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HistoryEvent
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EventTimestamp { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HistoryEventEventType EventType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EventId { get; set; }
		
		/// <summary>
		/// Provides details of <code>WorkflowExecutionStarted</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionStartedEventAttributes WorkflowExecutionStartedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>WorkflowExecutionCompleted</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionCompletedEventAttributes WorkflowExecutionCompletedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>CompleteWorkflowExecutionFailed</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CompleteWorkflowExecutionFailedEventAttributes CompleteWorkflowExecutionFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>WorkflowExecutionFailed</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionFailedEventAttributes WorkflowExecutionFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>FailWorkflowExecutionFailed</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FailWorkflowExecutionFailedEventAttributes FailWorkflowExecutionFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>WorkflowExecutionTimedOut</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionTimedOutEventAttributes WorkflowExecutionTimedOutEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>WorkflowExecutionCanceled</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionCanceledEventAttributes WorkflowExecutionCanceledEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>CancelWorkflowExecutionFailed</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CancelWorkflowExecutionFailedEventAttributes CancelWorkflowExecutionFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>WorkflowExecutionContinuedAsNew</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionContinuedAsNewEventAttributes WorkflowExecutionContinuedAsNewEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ContinueAsNewWorkflowExecutionFailed</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContinueAsNewWorkflowExecutionFailedEventAttributes ContinueAsNewWorkflowExecutionFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>WorkflowExecutionTerminated</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionTerminatedEventAttributes WorkflowExecutionTerminatedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>WorkflowExecutionCancelRequested</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionCancelRequestedEventAttributes WorkflowExecutionCancelRequestedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides details about the <code>DecisionTaskScheduled</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DecisionTaskScheduledEventAttributes DecisionTaskScheduledEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>DecisionTaskStarted</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DecisionTaskStartedEventAttributes DecisionTaskStartedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>DecisionTaskCompleted</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DecisionTaskCompletedEventAttributes DecisionTaskCompletedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>DecisionTaskTimedOut</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DecisionTaskTimedOutEventAttributes DecisionTaskTimedOutEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ActivityTaskScheduled</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ActivityTaskScheduledEventAttributes ActivityTaskScheduledEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ActivityTaskStarted</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ActivityTaskStartedEventAttributes ActivityTaskStartedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ActivityTaskCompleted</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ActivityTaskCompletedEventAttributes ActivityTaskCompletedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ActivityTaskFailed</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ActivityTaskFailedEventAttributes ActivityTaskFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ActivityTaskTimedOut</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ActivityTaskTimedOutEventAttributes ActivityTaskTimedOutEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ActivityTaskCanceled</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ActivityTaskCanceledEventAttributes ActivityTaskCanceledEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ActivityTaskCancelRequested</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ActivityTaskCancelRequestedEventAttributes ActivityTaskCancelRequestedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>WorkflowExecutionSignaled</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionSignaledEventAttributes WorkflowExecutionSignaledEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>MarkerRecorded</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MarkerRecordedEventAttributes MarkerRecordedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>RecordMarkerFailed</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecordMarkerFailedEventAttributes RecordMarkerFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>TimerStarted</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimerStartedEventAttributes TimerStartedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>TimerFired</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimerFiredEventAttributes TimerFiredEventAttributes { get; set; }
		
		/// <summary>
		///  Provides the details of the <code>TimerCanceled</code> event. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimerCanceledEventAttributes TimerCanceledEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>StartChildWorkflowExecutionInitiated</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StartChildWorkflowExecutionInitiatedEventAttributes StartChildWorkflowExecutionInitiatedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ChildWorkflowExecutionStarted</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChildWorkflowExecutionStartedEventAttributes ChildWorkflowExecutionStartedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ChildWorkflowExecutionCompleted</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChildWorkflowExecutionCompletedEventAttributes ChildWorkflowExecutionCompletedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ChildWorkflowExecutionFailed</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChildWorkflowExecutionFailedEventAttributes ChildWorkflowExecutionFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ChildWorkflowExecutionTimedOut</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChildWorkflowExecutionTimedOutEventAttributes ChildWorkflowExecutionTimedOutEventAttributes { get; set; }
		
		/// <summary>
		/// Provide details of the <code>ChildWorkflowExecutionCanceled</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChildWorkflowExecutionCanceledEventAttributes ChildWorkflowExecutionCanceledEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ChildWorkflowExecutionTerminated</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChildWorkflowExecutionTerminatedEventAttributes ChildWorkflowExecutionTerminatedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>SignalExternalWorkflowExecutionInitiated</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SignalExternalWorkflowExecutionInitiatedEventAttributes SignalExternalWorkflowExecutionInitiatedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ExternalWorkflowExecutionSignaled</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExternalWorkflowExecutionSignaledEventAttributes ExternalWorkflowExecutionSignaledEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>SignalExternalWorkflowExecutionFailed</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SignalExternalWorkflowExecutionFailedEventAttributes SignalExternalWorkflowExecutionFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ExternalWorkflowExecutionCancelRequested</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExternalWorkflowExecutionCancelRequestedEventAttributes ExternalWorkflowExecutionCancelRequestedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>RequestCancelExternalWorkflowExecutionInitiated</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RequestCancelExternalWorkflowExecutionInitiatedEventAttributes RequestCancelExternalWorkflowExecutionInitiatedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>RequestCancelExternalWorkflowExecutionFailed</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RequestCancelExternalWorkflowExecutionFailedEventAttributes RequestCancelExternalWorkflowExecutionFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ScheduleActivityTaskFailed</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScheduleActivityTaskFailedEventAttributes ScheduleActivityTaskFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>RequestCancelActivityTaskFailed</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RequestCancelActivityTaskFailedEventAttributes RequestCancelActivityTaskFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>StartTimerFailed</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StartTimerFailedEventAttributes StartTimerFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>CancelTimerFailed</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CancelTimerFailedEventAttributes CancelTimerFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>StartChildWorkflowExecutionFailed</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StartChildWorkflowExecutionFailedEventAttributes StartChildWorkflowExecutionFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>LambdaFunctionScheduled</code> event. It isn't set for other event types.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LambdaFunctionScheduledEventAttributes LambdaFunctionScheduledEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>LambdaFunctionStarted</code> event. It isn't set for other event types.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LambdaFunctionStartedEventAttributes LambdaFunctionStartedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>LambdaFunctionCompleted</code> event. It isn't set for other event types.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LambdaFunctionCompletedEventAttributes LambdaFunctionCompletedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>LambdaFunctionFailed</code> event. It isn't set for other event types.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LambdaFunctionFailedEventAttributes LambdaFunctionFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides details of the <code>LambdaFunctionTimedOut</code> event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LambdaFunctionTimedOutEventAttributes LambdaFunctionTimedOutEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>ScheduleLambdaFunctionFailed</code> event. It isn't set for other event types.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScheduleLambdaFunctionFailedEventAttributes ScheduleLambdaFunctionFailedEventAttributes { get; set; }
		
		/// <summary>
		/// Provides the details of the <code>StartLambdaFunctionFailed</code> event. It isn't set for other event types.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StartLambdaFunctionFailedEventAttributes StartLambdaFunctionFailedEventAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HistoryEventEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionStarted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionCancelRequested = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionCompleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CompleteWorkflowExecutionFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionFailed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailWorkflowExecutionFailed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionTimedOut = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionCanceled = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancelWorkflowExecutionFailed = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionContinuedAsNew = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContinueAsNewWorkflowExecutionFailed = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionTerminated = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DecisionTaskScheduled = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DecisionTaskStarted = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DecisionTaskCompleted = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DecisionTaskTimedOut = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskScheduled = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduleActivityTaskFailed = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskStarted = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskCompleted = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskFailed = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskTimedOut = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskCanceled = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskCancelRequested = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCancelActivityTaskFailed = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionSignaled = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MarkerRecorded = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecordMarkerFailed = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimerStarted = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartTimerFailed = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimerFired = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimerCanceled = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancelTimerFailed = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartChildWorkflowExecutionInitiated = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartChildWorkflowExecutionFailed = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionStarted = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionCompleted = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionFailed = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionTimedOut = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionCanceled = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionTerminated = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignalExternalWorkflowExecutionInitiated = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignalExternalWorkflowExecutionFailed = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExternalWorkflowExecutionSignaled = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCancelExternalWorkflowExecutionInitiated = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCancelExternalWorkflowExecutionFailed = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExternalWorkflowExecutionCancelRequested = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaFunctionScheduled = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaFunctionStarted = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaFunctionCompleted = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaFunctionFailed = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaFunctionTimedOut = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduleLambdaFunctionFailed = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartLambdaFunctionFailed = 53,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LambdaFunctionTimeoutType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_TO_CLOSE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RecordMarkerFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RequestCancelActivityTaskFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_ID_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RequestCancelExternalWorkflowExecutionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 2,
	}
	
	/// <summary>
	/// <p>Tags are key-value pairs that can be associated with Amazon SWF state machines and activities.</p> <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceTag
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScheduleActivityTaskFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_TYPE_DEPRECATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_TYPE_DOES_NOT_EXIST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_ID_ALREADY_IN_USE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_ACTIVITIES_LIMIT_EXCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_CREATION_RATE_EXCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_TASK_LIST_UNDEFINED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScheduleLambdaFunctionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID_ALREADY_IN_USE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SignalExternalWorkflowExecutionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartChildWorkflowExecutionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOW_TYPE_DOES_NOT_EXIST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOW_TYPE_DEPRECATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_CHILDREN_LIMIT_EXCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_WORKFLOWS_LIMIT_EXCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD_CREATION_RATE_EXCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOW_ALREADY_RUNNING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_TASK_LIST_UNDEFINED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_CHILD_POLICY_UNDEFINED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartLambdaFunctionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSUME_ROLE_FAILED = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartTimerFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMER_ID_ALREADY_IN_USE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_TIMERS_LIMIT_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMER_CREATION_RATE_EXCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkflowExecutionCancelRequestedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD_POLICY_APPLIED = 0,
	}
	
	/// <summary>
	/// The configuration settings for a workflow execution including timeout values, tasklist etc. These configuration settings are determined from the defaults specified when registering the workflow type and those specified when starting the workflow execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecutionConfiguration
	{
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string TaskStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string ExecutionStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskPriority { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionConfigurationChildPolicy ChildPolicy { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string LambdaRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkflowExecutionConfigurationChildPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON = 2,
	}
	
	/// <summary>
	/// Contains information about a workflow execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecutionInfo
	{
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution Execution { get; set; }
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CloseTimestamp { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionInfoExecutionStatus ExecutionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecutionInfoCloseStatus CloseStatus { get; set; }
		
		/// <summary>
		/// Represents a workflow execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkflowExecution Parent { get; set; }
		
		/// <summary>
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Tag[] TagList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CancelRequested { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkflowExecutionInfoExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkflowExecutionInfoCloseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUED_AS_NEW = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 5,
	}
	
	/// <summary>
	/// Contains the counts of open tasks, child workflow executions and timers for a workflow execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowExecutionOpenCounts
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int OpenActivityTasks { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public int OpenDecisionTasks { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int OpenTimers { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int OpenChildWorkflowExecutions { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> OpenLambdaFunctions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkflowExecutionTerminatedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD_POLICY_APPLIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT_LIMIT_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATOR_INITIATED = 2,
	}
	
	/// <summary>
	/// The configuration settings of a workflow type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowTypeConfiguration
	{
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string DefaultTaskStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string DefaultExecutionStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Represents a task list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TaskList DefaultTaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultTaskPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkflowTypeConfigurationDefaultChildPolicy DefaultChildPolicy { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string DefaultLambdaRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkflowTypeConfigurationDefaultChildPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON = 2,
	}
	
	/// <summary>
	/// Contains information about a workflow type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WorkflowTypeInfo
	{
		
		/// <summary>
		/// Represents a workflow type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowType WorkflowType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkflowTypeInfoStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024)]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeprecationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WorkflowTypeInfoStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED = 1,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Returns the number of closed workflow executions within the given domain that meet the specified filtering criteria.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagFilter.tag</code>: String constraint. The key is <code>swf:tagFilter.tag</code>.</p> </li> <li> <p> <code>typeFilter.name</code>: String constraint. The key is <code>swf:typeFilter.name</code>.</p> </li> <li> <p> <code>typeFilter.version</code>: String constraint. The key is <code>swf:typeFilter.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// CountClosedWorkflowExecutions /#X-Amz-Target=SimpleWorkflowService.CountClosedWorkflowExecutions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<WorkflowExecutionCount> CountClosedWorkflowExecutionsAsync(CountClosedWorkflowExecutionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.CountClosedWorkflowExecutions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkflowExecutionCount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the number of open workflow executions within the given domain that meet the specified filtering criteria.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagFilter.tag</code>: String constraint. The key is <code>swf:tagFilter.tag</code>.</p> </li> <li> <p> <code>typeFilter.name</code>: String constraint. The key is <code>swf:typeFilter.name</code>.</p> </li> <li> <p> <code>typeFilter.version</code>: String constraint. The key is <code>swf:typeFilter.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// CountOpenWorkflowExecutions /#X-Amz-Target=SimpleWorkflowService.CountOpenWorkflowExecutions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<WorkflowExecutionCount> CountOpenWorkflowExecutionsAsync(CountOpenWorkflowExecutionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.CountOpenWorkflowExecutions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkflowExecutionCount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the estimated number of activity tasks in the specified task list. The count returned is an approximation and isn't guaranteed to be exact. If you specify a task list that no activity task was ever scheduled in then <code>0</code> is returned.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the <code>taskList.name</code> parameter by using a <code>Condition</code> element with the <code>swf:taskList.name</code> key to allow the action to access only certain task lists.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// CountPendingActivityTasks /#X-Amz-Target=SimpleWorkflowService.CountPendingActivityTasks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PendingTaskCount> CountPendingActivityTasksAsync(CountPendingActivityTasksInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.CountPendingActivityTasks";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PendingTaskCount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the estimated number of decision tasks in the specified task list. The count returned is an approximation and isn't guaranteed to be exact. If you specify a task list that no decision task was ever scheduled in then <code>0</code> is returned.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the <code>taskList.name</code> parameter by using a <code>Condition</code> element with the <code>swf:taskList.name</code> key to allow the action to access only certain task lists.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// CountPendingDecisionTasks /#X-Amz-Target=SimpleWorkflowService.CountPendingDecisionTasks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PendingTaskCount> CountPendingDecisionTasksAsync(CountPendingDecisionTasksInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.CountPendingDecisionTasks";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PendingTaskCount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deprecates the specified <i>activity type</i>. After an activity type has been deprecated, you cannot create new tasks of that activity type. Tasks of this type that were scheduled before the type was deprecated continue to run.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>activityType.name</code>: String constraint. The key is <code>swf:activityType.name</code>.</p> </li> <li> <p> <code>activityType.version</code>: String constraint. The key is <code>swf:activityType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// DeprecateActivityType /#X-Amz-Target=SimpleWorkflowService.DeprecateActivityType
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeprecateActivityTypeAsync(DeprecateActivityTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.DeprecateActivityType";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deprecates the specified domain. After a domain has been deprecated it cannot be used to create new workflow executions or register new types. However, you can still use visibility actions on this domain. Deprecating a domain also deprecates all activity and workflow types registered in the domain. Executions that were started before the domain was deprecated continues to run.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// DeprecateDomain /#X-Amz-Target=SimpleWorkflowService.DeprecateDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeprecateDomainAsync(DeprecateDomainInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.DeprecateDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deprecates the specified <i>workflow type</i>. After a workflow type has been deprecated, you cannot create new executions of that type. Executions that were started before the type was deprecated continues to run. A deprecated workflow type may still be used when calling visibility actions.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>workflowType.name</code>: String constraint. The key is <code>swf:workflowType.name</code>.</p> </li> <li> <p> <code>workflowType.version</code>: String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// DeprecateWorkflowType /#X-Amz-Target=SimpleWorkflowService.DeprecateWorkflowType
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeprecateWorkflowTypeAsync(DeprecateWorkflowTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.DeprecateWorkflowType";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the specified activity type. This includes configuration settings provided when the type was registered and other general information about the type.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>activityType.name</code>: String constraint. The key is <code>swf:activityType.name</code>.</p> </li> <li> <p> <code>activityType.version</code>: String constraint. The key is <code>swf:activityType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// DescribeActivityType /#X-Amz-Target=SimpleWorkflowService.DescribeActivityType
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ActivityTypeDetail> DescribeActivityTypeAsync(DescribeActivityTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.DescribeActivityType";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ActivityTypeDetail>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the specified domain, including description and status.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// DescribeDomain /#X-Amz-Target=SimpleWorkflowService.DescribeDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DomainDetail> DescribeDomainAsync(DescribeDomainInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.DescribeDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DomainDetail>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the specified workflow execution including its type and some statistics.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// DescribeWorkflowExecution /#X-Amz-Target=SimpleWorkflowService.DescribeWorkflowExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<WorkflowExecutionDetail> DescribeWorkflowExecutionAsync(DescribeWorkflowExecutionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.DescribeWorkflowExecution";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkflowExecutionDetail>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the specified <i>workflow type</i>. This includes configuration settings specified when the type was registered and other information such as creation date, current status, etc.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>workflowType.name</code>: String constraint. The key is <code>swf:workflowType.name</code>.</p> </li> <li> <p> <code>workflowType.version</code>: String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// DescribeWorkflowType /#X-Amz-Target=SimpleWorkflowService.DescribeWorkflowType
		/// </summary>
		/// <returns>Success</returns>
		public async Task<WorkflowTypeDetail> DescribeWorkflowTypeAsync(DescribeWorkflowTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.DescribeWorkflowType";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkflowTypeDetail>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the history of the specified workflow execution. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the <code>nextPageToken</code> returned by the initial call.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// GetWorkflowExecutionHistory /#X-Amz-Target=SimpleWorkflowService.GetWorkflowExecutionHistory
		/// </summary>
		/// <param name="maximumPageSize">Pagination limit</param>
		/// <param name="nextPageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<History> GetWorkflowExecutionHistoryAsync(string maximumPageSize, string nextPageToken, GetWorkflowExecutionHistoryInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.GetWorkflowExecutionHistory?maximumPageSize=" + (maximumPageSize==null? "" : Uri.EscapeDataString(maximumPageSize))+"&nextPageToken=" + (nextPageToken==null? "" : Uri.EscapeDataString(nextPageToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<History>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about all activities registered in the specified domain that match the specified name and registration status. The result includes information like creation date, current status of the activity, etc. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the <code>nextPageToken</code> returned by the initial call.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// ListActivityTypes /#X-Amz-Target=SimpleWorkflowService.ListActivityTypes
		/// </summary>
		/// <param name="maximumPageSize">Pagination limit</param>
		/// <param name="nextPageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ActivityTypeInfos> ListActivityTypesAsync(string maximumPageSize, string nextPageToken, ListActivityTypesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.ListActivityTypes?maximumPageSize=" + (maximumPageSize==null? "" : Uri.EscapeDataString(maximumPageSize))+"&nextPageToken=" + (nextPageToken==null? "" : Uri.EscapeDataString(nextPageToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ActivityTypeInfos>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of closed workflow executions in the specified domain that meet the filtering criteria. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the nextPageToken returned by the initial call.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagFilter.tag</code>: String constraint. The key is <code>swf:tagFilter.tag</code>.</p> </li> <li> <p> <code>typeFilter.name</code>: String constraint. The key is <code>swf:typeFilter.name</code>.</p> </li> <li> <p> <code>typeFilter.version</code>: String constraint. The key is <code>swf:typeFilter.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// ListClosedWorkflowExecutions /#X-Amz-Target=SimpleWorkflowService.ListClosedWorkflowExecutions
		/// </summary>
		/// <param name="maximumPageSize">Pagination limit</param>
		/// <param name="nextPageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<WorkflowExecutionInfos> ListClosedWorkflowExecutionsAsync(string maximumPageSize, string nextPageToken, ListClosedWorkflowExecutionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.ListClosedWorkflowExecutions?maximumPageSize=" + (maximumPageSize==null? "" : Uri.EscapeDataString(maximumPageSize))+"&nextPageToken=" + (nextPageToken==null? "" : Uri.EscapeDataString(nextPageToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkflowExecutionInfos>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the list of domains registered in the account. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the nextPageToken returned by the initial call.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains. The element must be set to <code>arn:aws:swf::AccountID:domain/*</code>, where <i>AccountID</i> is the account ID, with no dashes.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// ListDomains /#X-Amz-Target=SimpleWorkflowService.ListDomains
		/// </summary>
		/// <param name="maximumPageSize">Pagination limit</param>
		/// <param name="nextPageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DomainInfos> ListDomainsAsync(string maximumPageSize, string nextPageToken, ListDomainsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.ListDomains?maximumPageSize=" + (maximumPageSize==null? "" : Uri.EscapeDataString(maximumPageSize))+"&nextPageToken=" + (nextPageToken==null? "" : Uri.EscapeDataString(nextPageToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DomainInfos>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of open workflow executions in the specified domain that meet the filtering criteria. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the nextPageToken returned by the initial call.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagFilter.tag</code>: String constraint. The key is <code>swf:tagFilter.tag</code>.</p> </li> <li> <p> <code>typeFilter.name</code>: String constraint. The key is <code>swf:typeFilter.name</code>.</p> </li> <li> <p> <code>typeFilter.version</code>: String constraint. The key is <code>swf:typeFilter.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// ListOpenWorkflowExecutions /#X-Amz-Target=SimpleWorkflowService.ListOpenWorkflowExecutions
		/// </summary>
		/// <param name="maximumPageSize">Pagination limit</param>
		/// <param name="nextPageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<WorkflowExecutionInfos> ListOpenWorkflowExecutionsAsync(string maximumPageSize, string nextPageToken, ListOpenWorkflowExecutionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.ListOpenWorkflowExecutions?maximumPageSize=" + (maximumPageSize==null? "" : Uri.EscapeDataString(maximumPageSize))+"&nextPageToken=" + (nextPageToken==null? "" : Uri.EscapeDataString(nextPageToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkflowExecutionInfos>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List tags for a given domain.
		/// ListTagsForResource /#X-Amz-Target=SimpleWorkflowService.ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceOutput> ListTagsForResourceAsync(ListTagsForResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.ListTagsForResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about workflow types in the specified domain. The results may be split into multiple pages that can be retrieved by making the call repeatedly.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// ListWorkflowTypes /#X-Amz-Target=SimpleWorkflowService.ListWorkflowTypes
		/// </summary>
		/// <param name="maximumPageSize">Pagination limit</param>
		/// <param name="nextPageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<WorkflowTypeInfos> ListWorkflowTypesAsync(string maximumPageSize, string nextPageToken, ListWorkflowTypesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.ListWorkflowTypes?maximumPageSize=" + (maximumPageSize==null? "" : Uri.EscapeDataString(maximumPageSize))+"&nextPageToken=" + (nextPageToken==null? "" : Uri.EscapeDataString(nextPageToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WorkflowTypeInfos>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Used by workers to get an <a>ActivityTask</a> from the specified activity <code>taskList</code>. This initiates a long poll, where the service holds the HTTP connection open and responds as soon as a task becomes available. The maximum time the service holds on to the request before responding is 60 seconds. If no task is available within 60 seconds, the poll returns an empty result. An empty result, in this context, means that an ActivityTask is returned, but that the value of taskToken is an empty string. If a task is returned, the worker should use its type to identify and process it correctly.</p> <important> <p>Workers should set their client side socket timeout to at least 70 seconds (10 seconds higher than the maximum time service may hold the poll request).</p> </important> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the <code>taskList.name</code> parameter by using a <code>Condition</code> element with the <code>swf:taskList.name</code> key to allow the action to access only certain task lists.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// PollForActivityTask /#X-Amz-Target=SimpleWorkflowService.PollForActivityTask
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ActivityTask> PollForActivityTaskAsync(PollForActivityTaskInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.PollForActivityTask";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ActivityTask>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Used by deciders to get a <a>DecisionTask</a> from the specified decision <code>taskList</code>. A decision task may be returned for any open workflow execution that is using the specified task list. The task includes a paginated view of the history of the workflow execution. The decider should use the workflow type and the history to determine how to properly handle the task.</p> <p>This action initiates a long poll, where the service holds the HTTP connection open and responds as soon a task becomes available. If no decision task is available in the specified task list before the timeout of 60 seconds expires, an empty result is returned. An empty result, in this context, means that a DecisionTask is returned, but that the value of taskToken is an empty string.</p> <important> <p>Deciders should set their client side socket timeout to at least 70 seconds (10 seconds higher than the timeout).</p> </important> <important> <p>Because the number of workflow history events for a single workflow execution might be very large, the result returned might be split up across a number of pages. To retrieve subsequent pages, make additional calls to <code>PollForDecisionTask</code> using the <code>nextPageToken</code> returned by the initial call. Note that you do <i>not</i> call <code>GetWorkflowExecutionHistory</code> with this <code>nextPageToken</code>. Instead, call <code>PollForDecisionTask</code> again.</p> </important> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the <code>taskList.name</code> parameter by using a <code>Condition</code> element with the <code>swf:taskList.name</code> key to allow the action to access only certain task lists.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// PollForDecisionTask /#X-Amz-Target=SimpleWorkflowService.PollForDecisionTask
		/// </summary>
		/// <param name="maximumPageSize">Pagination limit</param>
		/// <param name="nextPageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DecisionTask> PollForDecisionTaskAsync(string maximumPageSize, string nextPageToken, PollForDecisionTaskInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.PollForDecisionTask?maximumPageSize=" + (maximumPageSize==null? "" : Uri.EscapeDataString(maximumPageSize))+"&nextPageToken=" + (nextPageToken==null? "" : Uri.EscapeDataString(nextPageToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DecisionTask>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Used by activity workers to report to the service that the <a>ActivityTask</a> represented by the specified <code>taskToken</code> is still making progress. The worker can also specify details of the progress, for example percent complete, using the <code>details</code> parameter. This action can also be used by the worker as a mechanism to check if cancellation is being requested for the activity task. If a cancellation is being attempted for the specified task, then the boolean <code>cancelRequested</code> flag returned by the service is set to <code>true</code>.</p> <p>This action resets the <code>taskHeartbeatTimeout</code> clock. The <code>taskHeartbeatTimeout</code> is specified in <a>RegisterActivityType</a>.</p> <p>This action doesn't in itself create an event in the workflow execution history. However, if the task times out, the workflow execution history contains a <code>ActivityTaskTimedOut</code> event that contains the information from the last heartbeat generated by the activity worker.</p> <note> <p>The <code>taskStartToCloseTimeout</code> of an activity type is the maximum duration of an activity task, regardless of the number of <a>RecordActivityTaskHeartbeat</a> requests received. The <code>taskStartToCloseTimeout</code> is also specified in <a>RegisterActivityType</a>.</p> </note> <note> <p>This operation is only useful for long-lived activities to report liveliness of the task and to determine if a cancellation is being attempted.</p> </note> <important> <p>If the <code>cancelRequested</code> flag returns <code>true</code>, a cancellation is being attempted. If the worker can cancel the activity, it should respond with <a>RespondActivityTaskCanceled</a>. Otherwise, it should ignore the cancellation request.</p> </important> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RecordActivityTaskHeartbeat /#X-Amz-Target=SimpleWorkflowService.RecordActivityTaskHeartbeat
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ActivityTaskStatus> RecordActivityTaskHeartbeatAsync(RecordActivityTaskHeartbeatInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.RecordActivityTaskHeartbeat";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ActivityTaskStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Registers a new <i>activity type</i> along with its configuration settings in the specified domain.</p> <important> <p>A <code>TypeAlreadyExists</code> fault is returned if the type already exists in the domain. You cannot change any configuration settings of the type after its registration, and it must be registered as a new version.</p> </important> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>defaultTaskList.name</code>: String constraint. The key is <code>swf:defaultTaskList.name</code>.</p> </li> <li> <p> <code>name</code>: String constraint. The key is <code>swf:name</code>.</p> </li> <li> <p> <code>version</code>: String constraint. The key is <code>swf:version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RegisterActivityType /#X-Amz-Target=SimpleWorkflowService.RegisterActivityType
		/// </summary>
		/// <returns>Success</returns>
		public async Task RegisterActivityTypeAsync(RegisterActivityTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.RegisterActivityType";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Registers a new domain.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>You cannot use an IAM policy to control domain access for this action. The name of the domain being registered is available as the resource of this action.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RegisterDomain /#X-Amz-Target=SimpleWorkflowService.RegisterDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task RegisterDomainAsync(RegisterDomainInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.RegisterDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Registers a new <i>workflow type</i> and its configuration settings in the specified domain.</p> <p>The retention period for the workflow history is set by the <a>RegisterDomain</a> action.</p> <important> <p>If the type already exists, then a <code>TypeAlreadyExists</code> fault is returned. You cannot change the configuration settings of a workflow type once it is registered and it must be registered as a new version.</p> </important> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>defaultTaskList.name</code>: String constraint. The key is <code>swf:defaultTaskList.name</code>.</p> </li> <li> <p> <code>name</code>: String constraint. The key is <code>swf:name</code>.</p> </li> <li> <p> <code>version</code>: String constraint. The key is <code>swf:version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RegisterWorkflowType /#X-Amz-Target=SimpleWorkflowService.RegisterWorkflowType
		/// </summary>
		/// <returns>Success</returns>
		public async Task RegisterWorkflowTypeAsync(RegisterWorkflowTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.RegisterWorkflowType";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Records a <code>WorkflowExecutionCancelRequested</code> event in the currently running workflow execution identified by the given domain, workflowId, and runId. This logically requests the cancellation of the workflow execution as a whole. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> <note> <p>If the runId isn't specified, the <code>WorkflowExecutionCancelRequested</code> event is recorded in the history of the current open workflow execution with the specified workflowId in the domain.</p> </note> <note> <p>Because this action allows the workflow to properly clean up and gracefully close, it should be used instead of <a>TerminateWorkflowExecution</a> when possible.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RequestCancelWorkflowExecution /#X-Amz-Target=SimpleWorkflowService.RequestCancelWorkflowExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task RequestCancelWorkflowExecutionAsync(RequestCancelWorkflowExecutionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.RequestCancelWorkflowExecution";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Used by workers to tell the service that the <a>ActivityTask</a> identified by the <code>taskToken</code> was successfully canceled. Additional <code>details</code> can be provided using the <code>details</code> argument.</p> <p>These <code>details</code> (if provided) appear in the <code>ActivityTaskCanceled</code> event added to the workflow history.</p> <important> <p>Only use this operation if the <code>canceled</code> flag of a <a>RecordActivityTaskHeartbeat</a> request returns <code>true</code> and if the activity can be safely undone or abandoned.</p> </important> <p>A task is considered open from the time that it is scheduled until it is closed. Therefore a task is reported as open while a worker is processing it. A task is closed after it has been specified in a call to <a>RespondActivityTaskCompleted</a>, RespondActivityTaskCanceled, <a>RespondActivityTaskFailed</a>, or the task has <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-basic.html#swf-dev-timeout-types">timed out</a>.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RespondActivityTaskCanceled /#X-Amz-Target=SimpleWorkflowService.RespondActivityTaskCanceled
		/// </summary>
		/// <returns>Success</returns>
		public async Task RespondActivityTaskCanceledAsync(RespondActivityTaskCanceledInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.RespondActivityTaskCanceled";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Used by workers to tell the service that the <a>ActivityTask</a> identified by the <code>taskToken</code> completed successfully with a <code>result</code> (if provided). The <code>result</code> appears in the <code>ActivityTaskCompleted</code> event in the workflow history.</p> <important> <p>If the requested task doesn't complete successfully, use <a>RespondActivityTaskFailed</a> instead. If the worker finds that the task is canceled through the <code>canceled</code> flag returned by <a>RecordActivityTaskHeartbeat</a>, it should cancel the task, clean up and then call <a>RespondActivityTaskCanceled</a>.</p> </important> <p>A task is considered open from the time that it is scheduled until it is closed. Therefore a task is reported as open while a worker is processing it. A task is closed after it has been specified in a call to RespondActivityTaskCompleted, <a>RespondActivityTaskCanceled</a>, <a>RespondActivityTaskFailed</a>, or the task has <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-basic.html#swf-dev-timeout-types">timed out</a>.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RespondActivityTaskCompleted /#X-Amz-Target=SimpleWorkflowService.RespondActivityTaskCompleted
		/// </summary>
		/// <returns>Success</returns>
		public async Task RespondActivityTaskCompletedAsync(RespondActivityTaskCompletedInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.RespondActivityTaskCompleted";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Used by workers to tell the service that the <a>ActivityTask</a> identified by the <code>taskToken</code> has failed with <code>reason</code> (if specified). The <code>reason</code> and <code>details</code> appear in the <code>ActivityTaskFailed</code> event added to the workflow history.</p> <p>A task is considered open from the time that it is scheduled until it is closed. Therefore a task is reported as open while a worker is processing it. A task is closed after it has been specified in a call to <a>RespondActivityTaskCompleted</a>, <a>RespondActivityTaskCanceled</a>, RespondActivityTaskFailed, or the task has <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-basic.html#swf-dev-timeout-types">timed out</a>.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RespondActivityTaskFailed /#X-Amz-Target=SimpleWorkflowService.RespondActivityTaskFailed
		/// </summary>
		/// <returns>Success</returns>
		public async Task RespondActivityTaskFailedAsync(RespondActivityTaskFailedInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.RespondActivityTaskFailed";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Used by deciders to tell the service that the <a>DecisionTask</a> identified by the <code>taskToken</code> has successfully completed. The <code>decisions</code> argument specifies the list of decisions made while processing the task.</p> <p>A <code>DecisionTaskCompleted</code> event is added to the workflow history. The <code>executionContext</code> specified is attached to the event in the workflow execution history.</p> <p> <b>Access Control</b> </p> <p>If an IAM policy grants permission to use <code>RespondDecisionTaskCompleted</code>, it can express permissions for the list of decisions in the <code>decisions</code> parameter. Each of the decisions has one or more parameters, much like a regular API call. To allow for policies to be as readable as possible, you can express permissions on decisions as if they were actual API calls, including applying conditions to some parameters. For more information, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RespondDecisionTaskCompleted /#X-Amz-Target=SimpleWorkflowService.RespondDecisionTaskCompleted
		/// </summary>
		/// <returns>Success</returns>
		public async Task RespondDecisionTaskCompletedAsync(RespondDecisionTaskCompletedInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.RespondDecisionTaskCompleted";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Records a <code>WorkflowExecutionSignaled</code> event in the workflow execution history and creates a decision task for the workflow execution identified by the given domain, workflowId and runId. The event is recorded with the specified user defined signalName and input (if provided).</p> <note> <p>If a runId isn't specified, then the <code>WorkflowExecutionSignaled</code> event is recorded in the history of the current open workflow with the matching workflowId in the domain.</p> </note> <note> <p>If the specified workflow execution isn't open, this method fails with <code>UnknownResource</code>.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// SignalWorkflowExecution /#X-Amz-Target=SimpleWorkflowService.SignalWorkflowExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task SignalWorkflowExecutionAsync(SignalWorkflowExecutionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.SignalWorkflowExecution";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts an execution of the workflow type in the specified domain using the provided <code>workflowId</code> and input data.</p> <p>This action returns the newly started workflow execution.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagList.member.0</code>: The key is <code>swf:tagList.member.0</code>.</p> </li> <li> <p> <code>tagList.member.1</code>: The key is <code>swf:tagList.member.1</code>.</p> </li> <li> <p> <code>tagList.member.2</code>: The key is <code>swf:tagList.member.2</code>.</p> </li> <li> <p> <code>tagList.member.3</code>: The key is <code>swf:tagList.member.3</code>.</p> </li> <li> <p> <code>tagList.member.4</code>: The key is <code>swf:tagList.member.4</code>.</p> </li> <li> <p> <code>taskList</code>: String constraint. The key is <code>swf:taskList.name</code>.</p> </li> <li> <p> <code>workflowType.name</code>: String constraint. The key is <code>swf:workflowType.name</code>.</p> </li> <li> <p> <code>workflowType.version</code>: String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// StartWorkflowExecution /#X-Amz-Target=SimpleWorkflowService.StartWorkflowExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Run> StartWorkflowExecutionAsync(StartWorkflowExecutionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.StartWorkflowExecution";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Run>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Add a tag to a Amazon SWF domain.</p> <note> <p>Amazon SWF supports a maximum of 50 tags per resource.</p> </note>
		/// TagResource /#X-Amz-Target=SimpleWorkflowService.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task TagResourceAsync(TagResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.TagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Records a <code>WorkflowExecutionTerminated</code> event and forces closure of the workflow execution identified by the given domain, runId, and workflowId. The child policy, registered with the workflow type or specified when starting this execution, is applied to any open child workflow executions of this workflow execution.</p> <important> <p>If the identified workflow execution was in progress, it is terminated immediately.</p> </important> <note> <p>If a runId isn't specified, then the <code>WorkflowExecutionTerminated</code> event is recorded in the history of the current open workflow with the matching workflowId in the domain.</p> </note> <note> <p>You should consider using <a>RequestCancelWorkflowExecution</a> action instead because it allows the workflow to gracefully close while <a>TerminateWorkflowExecution</a> doesn't.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// TerminateWorkflowExecution /#X-Amz-Target=SimpleWorkflowService.TerminateWorkflowExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task TerminateWorkflowExecutionAsync(TerminateWorkflowExecutionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.TerminateWorkflowExecution";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Undeprecates a previously deprecated <i>activity type</i>. After an activity type has been undeprecated, you can create new tasks of that activity type.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>activityType.name</code>: String constraint. The key is <code>swf:activityType.name</code>.</p> </li> <li> <p> <code>activityType.version</code>: String constraint. The key is <code>swf:activityType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// UndeprecateActivityType /#X-Amz-Target=SimpleWorkflowService.UndeprecateActivityType
		/// </summary>
		/// <returns>Success</returns>
		public async Task UndeprecateActivityTypeAsync(UndeprecateActivityTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.UndeprecateActivityType";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Undeprecates a previously deprecated domain. After a domain has been undeprecated it can be used to create new workflow executions or register new types.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// UndeprecateDomain /#X-Amz-Target=SimpleWorkflowService.UndeprecateDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task UndeprecateDomainAsync(UndeprecateDomainInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.UndeprecateDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Undeprecates a previously deprecated <i>workflow type</i>. After a workflow type has been undeprecated, you can create new executions of that type. </p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>workflowType.name</code>: String constraint. The key is <code>swf:workflowType.name</code>.</p> </li> <li> <p> <code>workflowType.version</code>: String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// UndeprecateWorkflowType /#X-Amz-Target=SimpleWorkflowService.UndeprecateWorkflowType
		/// </summary>
		/// <returns>Success</returns>
		public async Task UndeprecateWorkflowTypeAsync(UndeprecateWorkflowTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.UndeprecateWorkflowType";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a tag from a Amazon SWF domain.
		/// UntagResource /#X-Amz-Target=SimpleWorkflowService.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task UntagResourceAsync(UntagResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=SimpleWorkflowService.UntagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
