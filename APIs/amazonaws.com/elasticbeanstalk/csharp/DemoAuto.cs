//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The result message containing information about the managed action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplyEnvironmentManagedActionResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApplyEnvironmentManagedActionResultActionType ActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ApplyEnvironmentManagedActionResultActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceRefresh = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlatformUpdate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 2,
	}
	
	/// <summary>
	/// Indicates if the specified CNAME is available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CheckDNSAvailabilityResultMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Available { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string FullyQualifiedCNAME { get; set; }
	}
	
	/// <summary>
	/// Result message containing a list of environment descriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnvironmentDescriptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentDescription[] Environments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Result message containing a single description of an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplicationDescriptionMessage
	{
		
		/// <summary>
		/// Describes the properties of an application.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ApplicationDescription Application { get; set; }
	}
	
	/// <summary>
	/// <p>The application version lifecycle settings for an application. Defines the rules that Elastic Beanstalk applies to an application's versions in order to avoid hitting the per-region limit for application versions.</p> <p>When Elastic Beanstalk deletes an application version from its database, you can no longer deploy that version to an environment. The source bundle remains in S3 unless you configure the rule to delete it.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplicationVersionLifecycleConfig
	{
		
		/// <summary>
		/// A lifecycle rule that deletes the oldest application version when the maximum count is exceeded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MaxCountRule MaxCountRule { get; set; }
		
		/// <summary>
		/// A lifecycle rule that deletes application versions after the specified number of days.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MaxAgeRule MaxAgeRule { get; set; }
	}
	
	/// <summary>
	/// Describes a tag applied to a resource in an environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Result message wrapping a single description of an application version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplicationVersionDescriptionMessage
	{
		
		/// <summary>
		/// Describes the properties of an application version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ApplicationVersionDescription ApplicationVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Git = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Zip = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SourceRepository
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodeCommit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComputeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_SMALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_MEDIUM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_LARGE = 2,
	}
	
	/// <summary>
	/// Describes the settings for a configuration set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationSettingsDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SolutionStackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformArn { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationSettingsDescriptionDeploymentStatus DeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationOptionSetting[] OptionSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigurationSettingsDescriptionDeploymentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deployed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
	}
	
	/// <summary>
	/// A specification identifying an individual configuration option along with its current value. For a list of possible namespaces and option values, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html">Option Values</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationOptionSetting
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of an environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnvironmentDescription
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string VersionLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SolutionStackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformArn { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointURL { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string CNAME { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentDescriptionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AbortableOperationInProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentDescriptionHealth Health { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentDescriptionHealthStatus HealthStatus { get; set; }
		
		/// <summary>
		/// Describes the AWS resources in use by this environment. This data is not live data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentResourcesDescription Resources { get; set; }
		
		/// <summary>
		/// Describes the properties of an environment tier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentTier Tier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentLink[] EnvironmentLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string OperationsRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EnvironmentDescriptionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Launching = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terminating = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terminated = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EnvironmentDescriptionHealth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Green = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yellow = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Red = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Grey = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EnvironmentDescriptionHealthStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoData = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ok = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Info = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warning = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Degraded = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Severe = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 8,
	}
	
	/// <summary>
	/// A specification identifying an individual configuration option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OptionSpecification
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePlatformVersionResult
	{
		
		/// <summary>
		/// Summary information about a platform version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PlatformSummary PlatformSummary { get; set; }
		
		/// <summary>
		/// The builder used to build the custom platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Builder Builder { get; set; }
	}
	
	/// <summary>
	/// Results of a <a>CreateStorageLocationResult</a> call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateStorageLocationResultMessage
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string S3Bucket { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeletePlatformVersionResult
	{
		
		/// <summary>
		/// Summary information about a platform version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PlatformSummary PlatformSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAccountAttributesResult
	{
		
		/// <summary>
		/// A set of per-resource AWS Elastic Beanstalk quotas associated with an AWS account. They reflect Elastic Beanstalk resource limits for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceQuotas ResourceQuotas { get; set; }
	}
	
	/// <summary>
	/// Result message wrapping a list of application version descriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplicationVersionDescriptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ApplicationVersionDescription[] ApplicationVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Result message containing a list of application descriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplicationDescriptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ApplicationDescription[] Applications { get; set; }
	}
	
	/// <summary>
	/// Describes the settings for a specified configuration set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationOptionsDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SolutionStackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationOptionDescription[] Options { get; set; }
	}
	
	/// <summary>
	/// The results from a request to change the configuration settings of an environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationSettingsDescriptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationSettingsDescription[] ConfigurationSettings { get; set; }
	}
	
	/// <summary>
	/// Health details for an AWS Elastic Beanstalk environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEnvironmentHealthResult
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HealthStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeEnvironmentHealthResultStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cause[] Causes { get; set; }
		
		/// <summary>
		/// Application request metrics for an AWS Elastic Beanstalk environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ApplicationMetrics ApplicationMetrics { get; set; }
		
		/// <summary>
		/// Represents summary information about the health of an instance. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">Health Colors and Statuses</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceHealthSummary InstancesHealth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RefreshedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeEnvironmentHealthResultStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Green = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yellow = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Red = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Grey = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EnvironmentHealthAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Status = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Color = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Causes = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ApplicationMetrics = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstancesHealth = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HealthStatus = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RefreshedAt = 7,
	}
	
	/// <summary>
	/// A result message containing a list of completed and failed managed actions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEnvironmentManagedActionHistoryResult
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ManagedActionHistoryItem[] ManagedActionHistoryItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The result message containing a list of managed actions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEnvironmentManagedActionsResult
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ManagedAction[] ManagedActions { get; set; }
	}
	
	/// <summary>
	/// Result message containing a list of environment resource descriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnvironmentResourceDescriptionsMessage
	{
		
		/// <summary>
		/// Describes the AWS resources in use by this environment. This data is live.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentResourceDescription EnvironmentResources { get; set; }
	}
	
	/// <summary>
	/// Result message wrapping a list of event descriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventDescriptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventDescription[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Detailed health information about the Amazon EC2 instances in an AWS Elastic Beanstalk environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstancesHealthResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SingleInstanceHealth[] InstanceHealthList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RefreshedAt { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstancesHealthAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HealthStatus = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Color = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Causes = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ApplicationMetrics = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RefreshedAt = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LaunchedAt = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		System = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deployment = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AvailabilityZone = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceType = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePlatformVersionResult
	{
		
		/// <summary>
		/// Detailed information about a platform version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PlatformDescription PlatformDescription { get; set; }
	}
	
	/// <summary>
	/// A list of available AWS Elastic Beanstalk solution stacks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAvailableSolutionStacksResultMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SolutionStackName[] SolutionStacks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SolutionStackDescription[] SolutionStackDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPlatformBranchesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PlatformBranchSummary[] PlatformBranchSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p>Describes criteria to restrict a list of results.</p> <p>For operators that apply a single value to the attribute, the filter is evaluated as follows: <code>Attribute Operator Values[1]</code> </p> <p>Some operators, e.g. <code>in</code>, can apply multiple values. In this case, the filter is evaluated as a logical union (OR) of applications of the operator to the attribute with each one of the values: <code>(Attribute Operator Values[1]) OR (Attribute Operator Values[2]) OR ...</code> </p> <p>The valid values for attributes of <code>SearchFilter</code> depend on the API action. For valid values, see the reference page for the API action you're calling that takes a <code>SearchFilter</code> parameter.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SearchFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SearchFilterValue[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPlatformVersionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PlatformSummary[] PlatformSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p>Describes criteria to restrict the results when listing platform versions.</p> <p>The filter is evaluated as follows: <code>Type Operator Values[1]</code> </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PlatformFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlatformFilterValue[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceTagsDescriptionMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] ResourceTags { get; set; }
	}
	
	/// <summary>
	/// Result message containing a description of the requested environment info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RetrieveEnvironmentInfoResultMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentInfoDescription[] EnvironmentInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplicationResourceLifecycleDescriptionMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// The resource lifecycle configuration for an application. Defines lifecycle settings for resources that belong to the application, and the service role that AWS Elastic Beanstalk assumes in order to apply lifecycle settings. The version lifecycle configuration defines lifecycle settings for application versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ApplicationResourceLifecycleConfig ResourceLifecycleConfig { get; set; }
	}
	
	/// <summary>
	/// Provides a list of validation messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationSettingsValidationMessages
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ValidationMessage[] Messages { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AbortEnvironmentUpdateMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ActionHistoryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ActionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scheduled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceRefresh = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlatformUpdate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 2,
	}
	
	/// <summary>
	/// The resource lifecycle configuration for an application. Defines lifecycle settings for resources that belong to the application, and the service role that AWS Elastic Beanstalk assumes in order to apply lifecycle settings. The version lifecycle configuration defines lifecycle settings for application versions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplicationResourceLifecycleConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRole { get; set; }
		
		/// <summary>
		/// <p>The application version lifecycle settings for an application. Defines the rules that Elastic Beanstalk applies to an application's versions in order to avoid hitting the per-region limit for application versions.</p> <p>When Elastic Beanstalk deletes an application version from its database, you can no longer deploy that version to an environment. The source bundle remains in S3 unless you configure the rule to delete it.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ApplicationVersionLifecycleConfig VersionLifecycleConfig { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplicationDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApplicationArn { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VersionLabel[] Versions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationTemplateName[] ConfigurationTemplates { get; set; }
		
		/// <summary>
		/// The resource lifecycle configuration for an application. Defines lifecycle settings for resources that belong to the application, and the service role that AWS Elastic Beanstalk assumes in order to apply lifecycle settings. The version lifecycle configuration defines lifecycle settings for application versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ApplicationResourceLifecycleConfig ResourceLifecycleConfig { get; set; }
	}
	
	/// <summary>
	/// Represents the percentage of requests over the last 10 seconds that resulted in each type of status code response. For more information, see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">Status Code Definitions</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StatusCodes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status2xx { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status3xx { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status4xx { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status5xx { get; set; }
	}
	
	/// <summary>
	/// Represents the average latency for the slowest X percent of requests over the last 10 seconds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Latency
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> P999 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> P99 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> P95 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> P90 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> P85 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> P75 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> P50 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> P10 { get; set; }
	}
	
	/// <summary>
	/// Application request metrics for an AWS Elastic Beanstalk environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplicationMetrics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RequestCount { get; set; }
		
		/// <summary>
		/// Represents the percentage of requests over the last 10 seconds that resulted in each type of status code response. For more information, see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">Status Code Definitions</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StatusCodes StatusCodes { get; set; }
		
		/// <summary>
		/// Represents the average latency for the slowest X percent of requests over the last 10 seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Latency Latency { get; set; }
	}
	
	/// <summary>
	/// Location of the source code for an application version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SourceBuildInformation
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SourceBuildInformationSourceType SourceType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SourceBuildInformationSourceRepository SourceRepository { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 3
		/// Pattern: .+/.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=3)]
		public string SourceLocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SourceBuildInformationSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Git = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Zip = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SourceBuildInformationSourceRepository
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodeCommit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 1,
	}
	
	/// <summary>
	/// The bucket and key of an item stored in Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3Location
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string S3Bucket { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024)]
		public string S3Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ApplicationVersionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unprocessed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Building = 4,
	}
	
	/// <summary>
	/// Describes the properties of an application version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplicationVersionDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApplicationVersionArn { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string VersionLabel { get; set; }
		
		/// <summary>
		/// Location of the source code for an application version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SourceBuildInformation SourceBuildInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BuildArn { get; set; }
		
		/// <summary>
		/// The bucket and key of an item stored in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Location SourceBundle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApplicationVersionDescriptionStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ApplicationVersionDescriptionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unprocessed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Building = 4,
	}
	
	/// <summary>
	/// A lifecycle rule that deletes the oldest application version when the maximum count is exceeded.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaxCountRule
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteSourceFromS3 { get; set; }
	}
	
	/// <summary>
	/// A lifecycle rule that deletes application versions after the specified number of days.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaxAgeRule
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAgeInDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteSourceFromS3 { get; set; }
	}
	
	/// <summary>
	/// Request to execute a scheduled managed action immediately.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplyEnvironmentManagedActionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ActionId { get; set; }
	}
	
	/// <summary>
	/// Request to add or change the operations role used by an environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateEnvironmentOperationsRoleMessage
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string OperationsRole { get; set; }
	}
	
	/// <summary>
	/// Describes an Auto Scaling launch configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AutoScalingGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Describes the solution stack.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SolutionStackDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SolutionStackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FileTypeExtension[] PermittedFileTypes { get; set; }
	}
	
	/// <summary>
	/// Settings for an AWS CodeBuild build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactName { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CodeBuildServiceRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BuildConfigurationComputeType ComputeType { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeoutInMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BuildConfigurationComputeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_SMALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_MEDIUM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_LARGE = 2,
	}
	
	/// <summary>
	/// The builder used to build the custom platform.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Builder
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
	}
	
	/// <summary>
	/// CPU utilization metrics for an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CPUUtilization
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> User { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Nice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> System { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Idle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> IOWait { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> IRQ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SoftIRQ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Privileged { get; set; }
	}
	
	/// <summary>
	/// Results message indicating whether a CNAME is available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CheckDNSAvailabilityMessage
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=4)]
		public string CNAMEPrefix { get; set; }
	}
	
	/// <summary>
	/// Request to create or update a group of environments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ComposeEnvironmentsMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 19
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(19, MinimumLength=1)]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VersionLabel[] VersionLabels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigurationDeploymentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deployed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigurationOptionValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scalar = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		List = 1,
	}
	
	/// <summary>
	/// A regular expression representing a restriction on a string configuration option value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OptionRestrictionRegex
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Pattern { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Label { get; set; }
	}
	
	/// <summary>
	/// Describes the possible values for a configuration option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationOptionDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChangeSeverity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UserDefined { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationOptionDescriptionValueType ValueType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationOptionPossibleValue[] ValueOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxLength { get; set; }
		
		/// <summary>
		/// A regular expression representing a restriction on a string configuration option value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OptionRestrictionRegex Regex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigurationOptionDescriptionValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scalar = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		List = 1,
	}
	
	/// <summary>
	/// Request to create an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateApplicationMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// The resource lifecycle configuration for an application. Defines lifecycle settings for resources that belong to the application, and the service role that AWS Elastic Beanstalk assumes in order to apply lifecycle settings. The version lifecycle configuration defines lifecycle settings for application versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ApplicationResourceLifecycleConfig ResourceLifecycleConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateApplicationVersionMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string VersionLabel { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// Location of the source code for an application version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SourceBuildInformation SourceBuildInformation { get; set; }
		
		/// <summary>
		/// The bucket and key of an item stored in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Location SourceBundle { get; set; }
		
		/// <summary>
		/// Settings for an AWS CodeBuild build.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildConfiguration BuildConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoCreateApplication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Process { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A specification for an environment configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SourceConfiguration
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TemplateName { get; set; }
	}
	
	/// <summary>
	/// Request to create a configuration template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateConfigurationTemplateMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SolutionStackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformArn { get; set; }
		
		/// <summary>
		/// A specification for an environment configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SourceConfiguration SourceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationOptionSetting[] OptionSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of an environment tier
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnvironmentTier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateEnvironmentMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		/// <summary>
		/// Max length: 19
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(19, MinimumLength=1)]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=4)]
		public string CNAMEPrefix { get; set; }
		
		/// <summary>
		/// Describes the properties of an environment tier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentTier Tier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string VersionLabel { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SolutionStackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationOptionSetting[] OptionSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OptionSpecification[] OptionsToRemove { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string OperationsRole { get; set; }
	}
	
	/// <summary>
	/// Request to create a new platform version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePlatformVersionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PlatformName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PlatformVersion { get; set; }
		
		/// <summary>
		/// The bucket and key of an item stored in Amazon S3.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3Location PlatformDefinitionBundle { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationOptionSetting[] OptionSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Summary information about a platform version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PlatformSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlatformSummaryPlatformStatus PlatformStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformCategory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperatingSystemName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperatingSystemVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SupportedTier[] SupportedTierList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SupportedAddon[] SupportedAddonList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformLifecycleState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformBranchName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformBranchLifecycleState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PlatformSummaryPlatformStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 4,
	}
	
	/// <summary>
	/// A custom AMI available to platforms.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomAmi
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualizationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
	}
	
	/// <summary>
	/// Request to delete an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteApplicationMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TerminateEnvByForce { get; set; }
	}
	
	/// <summary>
	/// Request to delete an application version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteApplicationVersionMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string VersionLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteSourceBundle { get; set; }
	}
	
	/// <summary>
	/// Request to delete a configuration template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteConfigurationTemplateMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TemplateName { get; set; }
	}
	
	/// <summary>
	/// Request to delete a draft environment configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteEnvironmentConfigurationMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeletePlatformVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformArn { get; set; }
	}
	
	/// <summary>
	/// Information about an application version deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Deployment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeploymentTime { get; set; }
	}
	
	/// <summary>
	/// A set of per-resource AWS Elastic Beanstalk quotas associated with an AWS account. They reflect Elastic Beanstalk resource limits for this account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceQuotas
	{
		
		/// <summary>
		/// The AWS Elastic Beanstalk quota information for a single resource type in an AWS account. It reflects the resource's limits for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceQuota ApplicationQuota { get; set; }
		
		/// <summary>
		/// The AWS Elastic Beanstalk quota information for a single resource type in an AWS account. It reflects the resource's limits for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceQuota ApplicationVersionQuota { get; set; }
		
		/// <summary>
		/// The AWS Elastic Beanstalk quota information for a single resource type in an AWS account. It reflects the resource's limits for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceQuota EnvironmentQuota { get; set; }
		
		/// <summary>
		/// The AWS Elastic Beanstalk quota information for a single resource type in an AWS account. It reflects the resource's limits for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceQuota ConfigurationTemplateQuota { get; set; }
		
		/// <summary>
		/// The AWS Elastic Beanstalk quota information for a single resource type in an AWS account. It reflects the resource's limits for this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceQuota CustomPlatformQuota { get; set; }
	}
	
	/// <summary>
	/// Request to describe application versions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeApplicationVersionsMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VersionLabel[] VersionLabels { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Request to describe one or more applications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeApplicationsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ApplicationName[] ApplicationNames { get; set; }
	}
	
	/// <summary>
	/// Result message containing a list of application version descriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConfigurationOptionsMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SolutionStackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OptionSpecification[] Options { get; set; }
	}
	
	/// <summary>
	/// Result message containing all of the configuration settings for a specified solution stack or configuration template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConfigurationSettingsMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
	}
	
	/// <summary>
	/// See the example below to learn how to create a request body.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEnvironmentHealthRequest
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentHealthAttribute[] AttributeNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EnvironmentHealth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Green = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yellow = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Red = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Grey = 3,
	}
	
	/// <summary>
	/// Represents summary information about the health of an instance. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-status.html">Health Colors and Statuses</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceHealthSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NoData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Unknown { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Pending { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Ok { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Info { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Warning { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Degraded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Severe { get; set; }
	}
	
	/// <summary>
	/// Request to list completed and failed managed actions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEnvironmentManagedActionHistoryRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	/// <summary>
	/// Request to list an environment's upcoming and in-progress managed actions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEnvironmentManagedActionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeEnvironmentManagedActionsRequestStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeEnvironmentManagedActionsRequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scheduled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 3,
	}
	
	/// <summary>
	/// Request to describe the resources in an environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEnvironmentResourcesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
	}
	
	/// <summary>
	/// Request to describe one or more environments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEnvironmentsMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string VersionLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentId[] EnvironmentIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentName[] EnvironmentNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeDeleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> IncludedDeletedBackTo { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FATAL = 5,
	}
	
	/// <summary>
	/// Request to retrieve a list of events for an environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEventsMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string VersionLabel { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeEventsMessageSeverity Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeEventsMessageSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FATAL = 5,
	}
	
	/// <summary>
	/// Parameters for a call to <code>DescribeInstancesHealth</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstancesHealthRequest
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstancesHealthAttribute[] AttributeNames { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePlatformVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformArn { get; set; }
	}
	
	/// <summary>
	/// Detailed information about a platform version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PlatformDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SolutionStackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlatformDescriptionPlatformStatus PlatformStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformCategory { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Maintainer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperatingSystemName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperatingSystemVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlatformProgrammingLanguage[] ProgrammingLanguages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlatformFramework[] Frameworks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomAmi[] CustomAmiList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SupportedTier[] SupportedTierList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SupportedAddon[] SupportedAddonList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformLifecycleState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformBranchName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformBranchLifecycleState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PlatformDescriptionPlatformStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 4,
	}
	
	/// <summary>
	/// Request to disassociate the operations role from an environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateEnvironmentOperationsRoleMessage
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EnvironmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Launching = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terminating = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terminated = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EnvironmentHealthStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoData = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ok = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Info = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warning = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Degraded = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Severe = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 8,
	}
	
	/// <summary>
	/// Describes the AWS resources in use by this environment. This data is not live data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnvironmentResourcesDescription
	{
		
		/// <summary>
		/// Describes the details of a LoadBalancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerDescription LoadBalancer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EnvironmentInfoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tail = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bundle = 1,
	}
	
	/// <summary>
	/// The information retrieved from the Amazon EC2 instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnvironmentInfoDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentInfoDescriptionInfoType InfoType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ec2InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SampleTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EnvironmentInfoDescriptionInfoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tail = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bundle = 1,
	}
	
	/// <summary>
	/// A link to another environment, defined in the environment's manifest. Links provide connection information in system properties that can be used to connect to another environment in the same group. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html">Environment Manifest (env.yaml)</a> for details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnvironmentLink
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentName { get; set; }
	}
	
	/// <summary>
	/// Describes the AWS resources in use by this environment. This data is live.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnvironmentResourceDescription
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingGroup[] AutoScalingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Instance[] Instances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchConfiguration[] LaunchConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplate[] LaunchTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancer[] LoadBalancers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Trigger[] Triggers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Queue[] Queues { get; set; }
	}
	
	/// <summary>
	/// Describes the details of a LoadBalancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadBalancerDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Listener[] Listeners { get; set; }
	}
	
	/// <summary>
	/// Describes an event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EventDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string VersionLabel { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventDescriptionSeverity Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventDescriptionSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FATAL = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FailureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateCancelled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancellationFailed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RollbackFailed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RollbackSuccessful = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalFailure = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidEnvironmentState = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PermissionsError = 6,
	}
	
	/// <summary>
	/// The description of an Amazon EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Instance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Detailed health information about an Amazon EC2 instance in your Elastic Beanstalk environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SingleInstanceHealth
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HealthStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cause[] Causes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LaunchedAt { get; set; }
		
		/// <summary>
		/// Application request metrics for an AWS Elastic Beanstalk environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ApplicationMetrics ApplicationMetrics { get; set; }
		
		/// <summary>
		/// CPU utilization and load average metrics for an Amazon EC2 instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SystemStatus System { get; set; }
		
		/// <summary>
		/// Information about an application version deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Deployment Deployment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
	}
	
	/// <summary>
	/// Describes an Auto Scaling launch configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Describes an Amazon EC2 launch template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPlatformBranchesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SearchFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPlatformVersionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PlatformFilter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of a Listener for the LoadBalancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Listener
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
	}
	
	/// <summary>
	/// Describes a LoadBalancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadBalancer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The record of an upcoming or in-progress managed action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ManagedAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ManagedActionActionType ActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ManagedActionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> WindowStartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ManagedActionActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceRefresh = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlatformUpdate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ManagedActionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scheduled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 3,
	}
	
	/// <summary>
	/// The record of a completed or failed managed action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ManagedActionHistoryItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ManagedActionHistoryItemActionType ActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ManagedActionHistoryItemFailureType FailureType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ManagedActionHistoryItemStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExecutedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FinishedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ManagedActionHistoryItemActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceRefresh = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlatformUpdate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ManagedActionHistoryItemFailureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateCancelled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancellationFailed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RollbackFailed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RollbackSuccessful = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalFailure = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidEnvironmentState = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PermissionsError = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ManagedActionHistoryItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 2,
	}
	
	/// <summary>
	/// Summary information about a platform branch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PlatformBranchSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BranchName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BranchOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SupportedTier[] SupportedTierList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PlatformStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 4,
	}
	
	/// <summary>
	/// A framework supported by the platform.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PlatformFramework
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// A programming language supported by the platform.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PlatformProgrammingLanguage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Describes a queue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Queue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string URL { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebuildEnvironmentMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
	}
	
	/// <summary>
	/// Request to retrieve logs from an environment and store them in your Elastic Beanstalk storage bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestEnvironmentInfoMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RequestEnvironmentInfoMessageInfoType InfoType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RequestEnvironmentInfoMessageInfoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tail = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bundle = 1,
	}
	
	/// <summary>
	/// The AWS Elastic Beanstalk quota information for a single resource type in an AWS account. It reflects the resource's limits for this account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceQuota
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Maximum { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestartAppServerMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
	}
	
	/// <summary>
	/// Request to download logs retrieved with <a>RequestEnvironmentInfo</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RetrieveEnvironmentInfoMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RetrieveEnvironmentInfoMessageInfoType InfoType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RetrieveEnvironmentInfoMessageInfoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tail = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bundle = 1,
	}
	
	/// <summary>
	/// CPU utilization and load average metrics for an Amazon EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SystemStatus
	{
		
		/// <summary>
		/// CPU utilization metrics for an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CPUUtilization CPUUtilization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadAverageValue[] LoadAverage { get; set; }
	}
	
	/// <summary>
	/// Swaps the CNAMEs of two environments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SwapEnvironmentCNAMEsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceEnvironmentId { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string SourceEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationEnvironmentId { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string DestinationEnvironmentName { get; set; }
	}
	
	/// <summary>
	/// Request to terminate an environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TerminateEnvironmentMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TerminateResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceTerminate { get; set; }
	}
	
	/// <summary>
	/// Describes a trigger.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Trigger
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Request to update an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateApplicationMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateApplicationResourceLifecycleMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// The resource lifecycle configuration for an application. Defines lifecycle settings for resources that belong to the application, and the service role that AWS Elastic Beanstalk assumes in order to apply lifecycle settings. The version lifecycle configuration defines lifecycle settings for application versions.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ApplicationResourceLifecycleConfig ResourceLifecycleConfig { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateApplicationVersionMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string VersionLabel { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// The result message containing the options for the specified solution stack.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateConfigurationTemplateMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationOptionSetting[] OptionSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OptionSpecification[] OptionsToRemove { get; set; }
	}
	
	/// <summary>
	/// Request to update an environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateEnvironmentMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentId { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		/// <summary>
		/// Max length: 19
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(19, MinimumLength=1)]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes the properties of an environment tier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentTier Tier { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string VersionLabel { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SolutionStackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationOptionSetting[] OptionSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OptionSpecification[] OptionsToRemove { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTagsForResourceMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagsToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagKey[] TagsToRemove { get; set; }
	}
	
	/// <summary>
	/// A list of validation messages for a specified configuration template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidateConfigurationSettingsMessage
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string TemplateName { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=4)]
		public string EnvironmentName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationOptionSetting[] OptionSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ValidationSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		warning = 1,
	}
	
	/// <summary>
	/// An error or warning for a desired configuration option value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidationMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ValidationMessageSeverity Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ValidationMessageSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		warning = 1,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Cancels in-progress environment configuration update or application version deployment.
		/// GET_AbortEnvironmentUpdate /#Action=AbortEnvironmentUpdate
		/// </summary>
		/// <param name="EnvironmentId">This specifies the ID of the environment with the in-progress update that you want to cancel.</param>
		/// <param name="EnvironmentName">This specifies the name of the environment with the in-progress update that you want to cancel.</param>
		/// <returns>Success</returns>
		public async Task GET_AbortEnvironmentUpdateAsync(string EnvironmentId, string EnvironmentName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=AbortEnvironmentUpdate?EnvironmentId=" + (EnvironmentId==null? "" : Uri.EscapeDataString(EnvironmentId))+"&EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies a scheduled managed action immediately. A managed action can be applied only if its status is <code>Scheduled</code>. Get the status and action ID of a managed action with <a>DescribeEnvironmentManagedActions</a>.
		/// GET_ApplyEnvironmentManagedAction /#Action=ApplyEnvironmentManagedAction
		/// </summary>
		/// <param name="EnvironmentName">The name of the target environment.</param>
		/// <param name="EnvironmentId">The environment ID of the target environment.</param>
		/// <param name="ActionId">The action ID of the scheduled managed action to execute.</param>
		/// <returns>Success</returns>
		public async Task GET_ApplyEnvironmentManagedActionAsync(string EnvironmentName, string EnvironmentId, string ActionId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ApplyEnvironmentManagedAction?EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&EnvironmentId=" + (EnvironmentId==null? "" : Uri.EscapeDataString(EnvironmentId))+"&ActionId=" + (ActionId==null? "" : Uri.EscapeDataString(ActionId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add or change the operations role used by an environment. After this call is made, Elastic Beanstalk uses the associated operations role for permissions to downstream services during subsequent calls acting on this environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.
		/// GET_AssociateEnvironmentOperationsRole /#Action=AssociateEnvironmentOperationsRole
		/// </summary>
		/// <param name="EnvironmentName">The name of the environment to which to set the operations role.</param>
		/// <param name="OperationsRole">The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment's operations role.</param>
		/// <returns>Success</returns>
		public async Task GET_AssociateEnvironmentOperationsRoleAsync(string EnvironmentName, string OperationsRole, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=AssociateEnvironmentOperationsRole?EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&OperationsRole=" + (OperationsRole==null? "" : Uri.EscapeDataString(OperationsRole))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks if the specified CNAME is available.
		/// GET_CheckDNSAvailability /#Action=CheckDNSAvailability
		/// </summary>
		/// <param name="CNAMEPrefix">The prefix used when this CNAME is reserved.</param>
		/// <returns>Success</returns>
		public async Task GET_CheckDNSAvailabilityAsync(string CNAMEPrefix, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CheckDNSAvailability?CNAMEPrefix=" + (CNAMEPrefix==null? "" : Uri.EscapeDataString(CNAMEPrefix))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a group of environments that each run a separate component of a single application. Takes a list of version labels that specify application source bundles for each of the environments to create or update. The name of each environment and other required information must be included in the source bundles in an environment manifest named <code>env.yaml</code>. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-mgmt-compose.html">Compose Environments</a> for details.
		/// GET_ComposeEnvironments /#Action=ComposeEnvironments
		/// </summary>
		/// <param name="ApplicationName">The name of the application to which the specified source bundles belong.</param>
		/// <param name="GroupName">The name of the group to which the target environments belong. Specify a group name only if the environment name defined in each target environment's manifest ends with a + (plus) character. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html">Environment Manifest (env.yaml)</a> for details.</param>
		/// <param name="VersionLabels">A list of version labels, specifying one or more application source bundles that belong to the target application. Each source bundle must include an environment manifest that specifies the name of the environment and the name of the solution stack to use, and optionally can specify environment links to create.</param>
		/// <returns>Success</returns>
		public async Task GET_ComposeEnvironmentsAsync(string ApplicationName, string GroupName, VersionLabel[] VersionLabels, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ComposeEnvironments?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&GroupName=" + (GroupName==null? "" : Uri.EscapeDataString(GroupName))+"&"+String.Join("&", VersionLabels.Select(z => $"VersionLabels={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an application that has one configuration template named <code>default</code> and no application versions.
		/// GET_CreateApplication /#Action=CreateApplication
		/// </summary>
		/// <param name="ApplicationName">The name of the application. Must be unique within your account.</param>
		/// <param name="Description">Your description of the application.</param>
		/// <param name="ResourceLifecycleConfig">Specifies an application resource lifecycle configuration to prevent your application from accumulating too many versions.</param>
		/// <param name="Tags"><p>Specifies the tags applied to the application.</p> <p>Elastic Beanstalk applies these tags only to the application. Environments that you create in the application don't inherit the tags.</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreateApplicationAsync(string ApplicationName, string Description, string ResourceLifecycleConfig, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateApplication?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&ResourceLifecycleConfig=" + (ResourceLifecycleConfig==null? "" : Uri.EscapeDataString(ResourceLifecycleConfig))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an application version for the specified application. You can create an application version from a source bundle in Amazon S3, a commit in AWS CodeCommit, or the output of an AWS CodeBuild build as follows:</p> <p>Specify a commit in an AWS CodeCommit repository with <code>SourceBuildInformation</code>.</p> <p>Specify a build in an AWS CodeBuild with <code>SourceBuildInformation</code> and <code>BuildConfiguration</code>.</p> <p>Specify a source bundle in S3 with <code>SourceBundle</code> </p> <p>Omit both <code>SourceBuildInformation</code> and <code>SourceBundle</code> to use the default sample application.</p> <note> <p>After you create an application version with a specified Amazon S3 bucket and key location, you can't change that Amazon S3 location. If you change the Amazon S3 location, you receive an exception when you attempt to launch an environment from the application version.</p> </note>
		/// GET_CreateApplicationVersion /#Action=CreateApplicationVersion
		/// </summary>
		/// <param name="ApplicationName"> The name of the application. If no application is found with this name, and <code>AutoCreateApplication</code> is <code>false</code>, returns an <code>InvalidParameterValue</code> error. </param>
		/// <param name="VersionLabel"><p>A label identifying this version.</p> <p>Constraint: Must be unique per application. If an application version already exists with this label for the specified application, AWS Elastic Beanstalk returns an <code>InvalidParameterValue</code> error. </p></param>
		/// <param name="Description">A description of this application version.</param>
		/// <param name="SourceBuildInformation">Specify a commit in an AWS CodeCommit Git repository to use as the source code for the application version.</param>
		/// <param name="SourceBundle"><p>The Amazon S3 bucket and key that identify the location of the source bundle for this version.</p> <note> <p>The Amazon S3 bucket must be in the same region as the environment.</p> </note> <p>Specify a source bundle in S3 or a commit in an AWS CodeCommit repository (with <code>SourceBuildInformation</code>), but not both. If neither <code>SourceBundle</code> nor <code>SourceBuildInformation</code> are provided, Elastic Beanstalk uses a sample application.</p></param>
		/// <param name="BuildConfiguration">Settings for an AWS CodeBuild build.</param>
		/// <param name="AutoCreateApplication">Set to <code>true</code> to create an application with the specified name if it doesn't already exist.</param>
		/// <param name="Process"><p>Pre-processes and validates the environment manifest (<code>env.yaml</code>) and configuration files (<code>*.config</code> files in the <code>.ebextensions</code> folder) in the source bundle. Validating configuration files can identify issues prior to deploying the application version to an environment.</p> <p>You must turn processing on for application versions that you create using AWS CodeBuild or AWS CodeCommit. For application versions built from a source bundle in Amazon S3, processing is optional.</p> <note> <p>The <code>Process</code> option validates Elastic Beanstalk configuration files. It doesn't validate your application's configuration files, like proxy server or Docker configuration.</p> </note></param>
		/// <param name="Tags"><p>Specifies the tags applied to the application version.</p> <p>Elastic Beanstalk applies these tags only to the application version. Environments that use the application version don't inherit the tags.</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreateApplicationVersionAsync(string ApplicationName, string VersionLabel, string Description, string SourceBuildInformation, string SourceBundle, string BuildConfiguration, bool AutoCreateApplication, bool Process, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateApplicationVersion?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&VersionLabel=" + (VersionLabel==null? "" : Uri.EscapeDataString(VersionLabel))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&SourceBuildInformation=" + (SourceBuildInformation==null? "" : Uri.EscapeDataString(SourceBuildInformation))+"&SourceBundle=" + (SourceBundle==null? "" : Uri.EscapeDataString(SourceBundle))+"&BuildConfiguration=" + (BuildConfiguration==null? "" : Uri.EscapeDataString(BuildConfiguration))+"&AutoCreateApplication="+AutoCreateApplication+"&Process="+Process+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an AWS Elastic Beanstalk configuration template, associated with a specific Elastic Beanstalk application. You define application configuration settings in a configuration template. You can then use the configuration template to deploy different versions of the application with the same configuration settings.</p> <p>Templates aren't associated with any environment. The <code>EnvironmentName</code> response element is always <code>null</code>.</p> <p>Related Topics</p> <ul> <li> <p> <a>DescribeConfigurationOptions</a> </p> </li> <li> <p> <a>DescribeConfigurationSettings</a> </p> </li> <li> <p> <a>ListAvailableSolutionStacks</a> </p> </li> </ul>
		/// GET_CreateConfigurationTemplate /#Action=CreateConfigurationTemplate
		/// </summary>
		/// <param name="ApplicationName">The name of the Elastic Beanstalk application to associate with this configuration template.</param>
		/// <param name="TemplateName"><p>The name of the configuration template.</p> <p>Constraint: This name must be unique per application.</p></param>
		/// <param name="SolutionStackName"><p>The name of an Elastic Beanstalk solution stack (platform version) that this configuration uses. For example, <code>64bit Amazon Linux 2013.09 running Tomcat 7 Java 7</code>. A solution stack specifies the operating system, runtime, and application server for a configuration template. It also determines the set of configuration options as well as the possible and default values. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.platforms.html">Supported Platforms</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.</p> <p>You must specify <code>SolutionStackName</code> if you don't specify <code>PlatformArn</code>, <code>EnvironmentId</code>, or <code>SourceConfiguration</code>.</p> <p>Use the <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_ListAvailableSolutionStacks.html"> <code>ListAvailableSolutionStacks</code> </a> API to obtain a list of available solution stacks.</p></param>
		/// <param name="PlatformArn"><p>The Amazon Resource Name (ARN) of the custom platform. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html"> Custom Platforms</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.</p> <note> <p>If you specify <code>PlatformArn</code>, then don't specify <code>SolutionStackName</code>.</p> </note></param>
		/// <param name="SourceConfiguration"><p>An Elastic Beanstalk configuration template to base this one on. If specified, Elastic Beanstalk uses the configuration values from the specified configuration template to create a new configuration.</p> <p>Values specified in <code>OptionSettings</code> override any values obtained from the <code>SourceConfiguration</code>.</p> <p>You must specify <code>SourceConfiguration</code> if you don't specify <code>PlatformArn</code>, <code>EnvironmentId</code>, or <code>SolutionStackName</code>.</p> <p>Constraint: If both solution stack name and source configuration are specified, the solution stack of the source configuration template must match the specified solution stack name.</p></param>
		/// <param name="EnvironmentId">The ID of an environment whose settings you want to use to create the configuration template. You must specify <code>EnvironmentId</code> if you don't specify <code>PlatformArn</code>, <code>SolutionStackName</code>, or <code>SourceConfiguration</code>.</param>
		/// <param name="Description">An optional description for this configuration.</param>
		/// <param name="OptionSettings">Option values for the Elastic Beanstalk configuration, such as the instance type. If specified, these values override the values obtained from the solution stack or the source configuration template. For a complete list of Elastic Beanstalk configuration options, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options.html">Option Values</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.</param>
		/// <param name="Tags">Specifies the tags applied to the configuration template.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateConfigurationTemplateAsync(string ApplicationName, string TemplateName, string SolutionStackName, string PlatformArn, string SourceConfiguration, string EnvironmentId, string Description, ConfigurationOptionSetting[] OptionSettings, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateConfigurationTemplate?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&TemplateName=" + (TemplateName==null? "" : Uri.EscapeDataString(TemplateName))+"&SolutionStackName=" + (SolutionStackName==null? "" : Uri.EscapeDataString(SolutionStackName))+"&PlatformArn=" + (PlatformArn==null? "" : Uri.EscapeDataString(PlatformArn))+"&SourceConfiguration=" + (SourceConfiguration==null? "" : Uri.EscapeDataString(SourceConfiguration))+"&EnvironmentId=" + (EnvironmentId==null? "" : Uri.EscapeDataString(EnvironmentId))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&"+String.Join("&", OptionSettings.Select(z => $"OptionSettings={z}"))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Launches an AWS Elastic Beanstalk environment for the specified application using the specified configuration.
		/// GET_CreateEnvironment /#Action=CreateEnvironment
		/// </summary>
		/// <param name="ApplicationName">The name of the application that is associated with this environment.</param>
		/// <param name="EnvironmentName"><p>A unique name for the environment.</p> <p>Constraint: Must be from 4 to 40 characters in length. The name can contain only letters, numbers, and hyphens. It can't start or end with a hyphen. This name must be unique within a region in your account. If the specified name already exists in the region, Elastic Beanstalk returns an <code>InvalidParameterValue</code> error. </p> <p>If you don't specify the <code>CNAMEPrefix</code> parameter, the environment name becomes part of the CNAME, and therefore part of the visible URL for your application.</p></param>
		/// <param name="GroupName">The name of the group to which the target environment belongs. Specify a group name only if the environment's name is specified in an environment manifest and not with the environment name parameter. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html">Environment Manifest (env.yaml)</a> for details.</param>
		/// <param name="Description">Your description for this environment.</param>
		/// <param name="CNAMEPrefix">If specified, the environment attempts to use this value as the prefix for the CNAME in your Elastic Beanstalk environment URL. If not specified, the CNAME is generated automatically by appending a random alphanumeric string to the environment name.</param>
		/// <param name="Tier">Specifies the tier to use in creating this environment. The environment tier that you choose determines whether Elastic Beanstalk provisions resources to support a web application that handles HTTP(S) requests or a web application that handles background-processing tasks.</param>
		/// <param name="Tags">Specifies the tags applied to resources in the environment.</param>
		/// <param name="VersionLabel"><p>The name of the application version to deploy.</p> <p>Default: If not specified, Elastic Beanstalk attempts to deploy the sample application.</p></param>
		/// <param name="TemplateName"><p>The name of the Elastic Beanstalk configuration template to use with the environment.</p> <note> <p>If you specify <code>TemplateName</code>, then don't specify <code>SolutionStackName</code>.</p> </note></param>
		/// <param name="SolutionStackName"><p>The name of an Elastic Beanstalk solution stack (platform version) to use with the environment. If specified, Elastic Beanstalk sets the configuration values to the default values associated with the specified solution stack. For a list of current solution stacks, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/platforms/platforms-supported.html">Elastic Beanstalk Supported Platforms</a> in the <i>AWS Elastic Beanstalk Platforms</i> guide.</p> <note> <p>If you specify <code>SolutionStackName</code>, don't specify <code>PlatformArn</code> or <code>TemplateName</code>.</p> </note></param>
		/// <param name="PlatformArn"><p>The Amazon Resource Name (ARN) of the custom platform to use with the environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/custom-platforms.html">Custom Platforms</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.</p> <note> <p>If you specify <code>PlatformArn</code>, don't specify <code>SolutionStackName</code>.</p> </note></param>
		/// <param name="OptionSettings">If specified, AWS Elastic Beanstalk sets the specified configuration options to the requested value in the configuration set for the new environment. These override the values obtained from the solution stack or the configuration template.</param>
		/// <param name="OptionsToRemove">A list of custom user-defined configuration options to remove from the configuration set for this new environment.</param>
		/// <param name="OperationsRole">The Amazon Resource Name (ARN) of an existing IAM role to be used as the environment's operations role. If specified, Elastic Beanstalk uses the operations role for permissions to downstream services during this call and during subsequent calls acting on this environment. To specify an operations role, you must have the <code>iam:PassRole</code> permission for the role. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateEnvironmentAsync(
					string ApplicationName, 
					string EnvironmentName, 
					string GroupName, 
					string Description, 
					string CNAMEPrefix, 
					string Tier, 
					Tag[] Tags, 
					string VersionLabel, 
					string TemplateName, 
					string SolutionStackName, 
					string PlatformArn, 
					ConfigurationOptionSetting[] OptionSettings, 
					OptionSpecification[] OptionsToRemove, 
					string OperationsRole, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateEnvironment?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&GroupName=" + (GroupName==null? "" : Uri.EscapeDataString(GroupName))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&CNAMEPrefix=" + (CNAMEPrefix==null? "" : Uri.EscapeDataString(CNAMEPrefix))+"&Tier=" + (Tier==null? "" : Uri.EscapeDataString(Tier))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&VersionLabel=" + (VersionLabel==null? "" : Uri.EscapeDataString(VersionLabel))+"&TemplateName=" + (TemplateName==null? "" : Uri.EscapeDataString(TemplateName))+"&SolutionStackName=" + (SolutionStackName==null? "" : Uri.EscapeDataString(SolutionStackName))+"&PlatformArn=" + (PlatformArn==null? "" : Uri.EscapeDataString(PlatformArn))+"&"+String.Join("&", OptionSettings.Select(z => $"OptionSettings={z}"))+"&"+String.Join("&", OptionsToRemove.Select(z => $"OptionsToRemove={z}"))+"&OperationsRole=" + (OperationsRole==null? "" : Uri.EscapeDataString(OperationsRole))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new version of your custom platform.
		/// GET_CreatePlatformVersion /#Action=CreatePlatformVersion
		/// </summary>
		/// <param name="PlatformName">The name of your custom platform.</param>
		/// <param name="PlatformVersion">The number, such as 1.0.2, for the new platform version.</param>
		/// <param name="PlatformDefinitionBundle">The location of the platform definition archive in Amazon S3.</param>
		/// <param name="EnvironmentName">The name of the builder environment.</param>
		/// <param name="OptionSettings">The configuration option settings to apply to the builder environment.</param>
		/// <param name="Tags"><p>Specifies the tags applied to the new platform version.</p> <p>Elastic Beanstalk applies these tags only to the platform version. Environments that you create using the platform version don't inherit the tags.</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreatePlatformVersionAsync(string PlatformName, string PlatformVersion, string PlatformDefinitionBundle, string EnvironmentName, ConfigurationOptionSetting[] OptionSettings, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreatePlatformVersion?PlatformName=" + (PlatformName==null? "" : Uri.EscapeDataString(PlatformName))+"&PlatformVersion=" + (PlatformVersion==null? "" : Uri.EscapeDataString(PlatformVersion))+"&PlatformDefinitionBundle=" + (PlatformDefinitionBundle==null? "" : Uri.EscapeDataString(PlatformDefinitionBundle))+"&EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&"+String.Join("&", OptionSettings.Select(z => $"OptionSettings={z}"))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a bucket in Amazon S3 to store application versions, logs, and other files used by Elastic Beanstalk environments. The Elastic Beanstalk console and EB CLI call this API the first time you create an environment in a region. If the storage location already exists, <code>CreateStorageLocation</code> still returns the bucket name but does not create a new bucket.
		/// GET_CreateStorageLocation /#Action=CreateStorageLocation
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_CreateStorageLocationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateStorageLocation?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a bucket in Amazon S3 to store application versions, logs, and other files used by Elastic Beanstalk environments. The Elastic Beanstalk console and EB CLI call this API the first time you create an environment in a region. If the storage location already exists, <code>CreateStorageLocation</code> still returns the bucket name but does not create a new bucket.
		/// POST_CreateStorageLocation /#Action=CreateStorageLocation
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateStorageLocationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateStorageLocation?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified application along with all associated versions and configurations. The application versions will not be deleted from your Amazon S3 bucket.</p> <note> <p>You cannot delete an application that has a running environment.</p> </note>
		/// GET_DeleteApplication /#Action=DeleteApplication
		/// </summary>
		/// <param name="ApplicationName">The name of the application to delete.</param>
		/// <param name="TerminateEnvByForce">When set to true, running environments will be terminated before deleting the application.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteApplicationAsync(string ApplicationName, bool TerminateEnvByForce, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteApplication?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&TerminateEnvByForce="+TerminateEnvByForce+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified version from the specified application.</p> <note> <p>You cannot delete an application version that is associated with a running environment.</p> </note>
		/// GET_DeleteApplicationVersion /#Action=DeleteApplicationVersion
		/// </summary>
		/// <param name="ApplicationName">The name of the application to which the version belongs.</param>
		/// <param name="VersionLabel">The label of the version to delete.</param>
		/// <param name="DeleteSourceBundle">Set to <code>true</code> to delete the source bundle from your storage bucket. Otherwise, the application version is deleted only from Elastic Beanstalk and the source bundle remains in Amazon S3.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteApplicationVersionAsync(string ApplicationName, string VersionLabel, bool DeleteSourceBundle, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteApplicationVersion?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&VersionLabel=" + (VersionLabel==null? "" : Uri.EscapeDataString(VersionLabel))+"&DeleteSourceBundle="+DeleteSourceBundle+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified configuration template.</p> <note> <p>When you launch an environment using a configuration template, the environment gets a copy of the template. You can delete or modify the environment's copy of the template without affecting the running environment.</p> </note>
		/// GET_DeleteConfigurationTemplate /#Action=DeleteConfigurationTemplate
		/// </summary>
		/// <param name="ApplicationName">The name of the application to delete the configuration template from.</param>
		/// <param name="TemplateName">The name of the configuration template to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteConfigurationTemplateAsync(string ApplicationName, string TemplateName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteConfigurationTemplate?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&TemplateName=" + (TemplateName==null? "" : Uri.EscapeDataString(TemplateName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the draft configuration associated with the running environment.</p> <p>Updating a running environment with any configuration changes creates a draft configuration set. You can get the draft configuration using <a>DescribeConfigurationSettings</a> while the update is in progress or if the update fails. The <code>DeploymentStatus</code> for the draft configuration indicates whether the deployment is in process or has failed. The draft configuration remains in existence until it is deleted with this action.</p>
		/// GET_DeleteEnvironmentConfiguration /#Action=DeleteEnvironmentConfiguration
		/// </summary>
		/// <param name="ApplicationName">The name of the application the environment is associated with.</param>
		/// <param name="EnvironmentName">The name of the environment to delete the draft configuration from.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteEnvironmentConfigurationAsync(string ApplicationName, string EnvironmentName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteEnvironmentConfiguration?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified version of a custom platform.
		/// GET_DeletePlatformVersion /#Action=DeletePlatformVersion
		/// </summary>
		/// <param name="PlatformArn">The ARN of the version of the custom platform.</param>
		/// <returns>Success</returns>
		public async Task GET_DeletePlatformVersionAsync(string PlatformArn, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeletePlatformVersion?PlatformArn=" + (PlatformArn==null? "" : Uri.EscapeDataString(PlatformArn))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns attributes related to AWS Elastic Beanstalk that are associated with the calling AWS account.</p> <p>The result currently has one set of attributes—resource quotas.</p>
		/// GET_DescribeAccountAttributes /#Action=DescribeAccountAttributes
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeAccountAttributesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeAccountAttributes?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns attributes related to AWS Elastic Beanstalk that are associated with the calling AWS account.</p> <p>The result currently has one set of attributes—resource quotas.</p>
		/// POST_DescribeAccountAttributes /#Action=DescribeAccountAttributes
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeAccountAttributesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeAccountAttributes?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of application versions.
		/// GET_DescribeApplicationVersions /#Action=DescribeApplicationVersions
		/// </summary>
		/// <param name="ApplicationName">Specify an application name to show only application versions for that application.</param>
		/// <param name="VersionLabels">Specify a version label to show a specific application version.</param>
		/// <param name="MaxRecords"><p>For a paginated request. Specify a maximum number of application versions to include in each response.</p> <p>If no <code>MaxRecords</code> is specified, all available application versions are retrieved in a single response.</p></param>
		/// <param name="NextToken"><p>For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.</p> <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeApplicationVersionsAsync(string ApplicationName, VersionLabel[] VersionLabels, int MaxRecords, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeApplicationVersions?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&"+String.Join("&", VersionLabels.Select(z => $"VersionLabels={z}"))+"&MaxRecords="+MaxRecords+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the descriptions of existing applications.
		/// GET_DescribeApplications /#Action=DescribeApplications
		/// </summary>
		/// <param name="ApplicationNames">If specified, AWS Elastic Beanstalk restricts the returned descriptions to only include those with the specified names.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeApplicationsAsync(ApplicationName[] ApplicationNames, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeApplications?"+String.Join("&", ApplicationNames.Select(z => $"ApplicationNames={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the configuration options that are used in a particular configuration template or environment, or that a specified solution stack defines. The description includes the values the options, their default values, and an indication of the required action on a running environment if an option value is changed.
		/// GET_DescribeConfigurationOptions /#Action=DescribeConfigurationOptions
		/// </summary>
		/// <param name="ApplicationName">The name of the application associated with the configuration template or environment. Only needed if you want to describe the configuration options associated with either the configuration template or environment.</param>
		/// <param name="TemplateName">The name of the configuration template whose configuration options you want to describe.</param>
		/// <param name="EnvironmentName">The name of the environment whose configuration options you want to describe.</param>
		/// <param name="SolutionStackName">The name of the solution stack whose configuration options you want to describe.</param>
		/// <param name="PlatformArn">The ARN of the custom platform.</param>
		/// <param name="Options">If specified, restricts the descriptions to only the specified options.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeConfigurationOptionsAsync(string ApplicationName, string TemplateName, string EnvironmentName, string SolutionStackName, string PlatformArn, OptionSpecification[] Options, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeConfigurationOptions?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&TemplateName=" + (TemplateName==null? "" : Uri.EscapeDataString(TemplateName))+"&EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&SolutionStackName=" + (SolutionStackName==null? "" : Uri.EscapeDataString(SolutionStackName))+"&PlatformArn=" + (PlatformArn==null? "" : Uri.EscapeDataString(PlatformArn))+"&"+String.Join("&", Options.Select(z => $"Options={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a description of the settings for the specified configuration set, that is, either a configuration template or the configuration set associated with a running environment.</p> <p>When describing the settings for the configuration set associated with a running environment, it is possible to receive two sets of setting descriptions. One is the deployed configuration set, and the other is a draft configuration of an environment that is either in the process of deployment or that failed to deploy.</p> <p>Related Topics</p> <ul> <li> <p> <a>DeleteEnvironmentConfiguration</a> </p> </li> </ul>
		/// GET_DescribeConfigurationSettings /#Action=DescribeConfigurationSettings
		/// </summary>
		/// <param name="ApplicationName">The application for the environment or configuration template.</param>
		/// <param name="TemplateName"><p>The name of the configuration template to describe.</p> <p> Conditional: You must specify either this parameter or an EnvironmentName, but not both. If you specify both, AWS Elastic Beanstalk returns an <code>InvalidParameterCombination</code> error. If you do not specify either, AWS Elastic Beanstalk returns a <code>MissingRequiredParameter</code> error. </p></param>
		/// <param name="EnvironmentName"><p>The name of the environment to describe.</p> <p> Condition: You must specify either this or a TemplateName, but not both. If you specify both, AWS Elastic Beanstalk returns an <code>InvalidParameterCombination</code> error. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeConfigurationSettingsAsync(string ApplicationName, string TemplateName, string EnvironmentName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeConfigurationSettings?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&TemplateName=" + (TemplateName==null? "" : Uri.EscapeDataString(TemplateName))+"&EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the overall health of the specified environment. The <b>DescribeEnvironmentHealth</b> operation is only available with AWS Elastic Beanstalk Enhanced Health.
		/// GET_DescribeEnvironmentHealth /#Action=DescribeEnvironmentHealth
		/// </summary>
		/// <param name="EnvironmentName"><p>Specify the environment by name.</p> <p>You must specify either this or an EnvironmentName, or both.</p></param>
		/// <param name="EnvironmentId"><p>Specify the environment by ID.</p> <p>You must specify either this or an EnvironmentName, or both.</p></param>
		/// <param name="AttributeNames">Specify the response elements to return. To retrieve all attributes, set to <code>All</code>. If no attribute names are specified, returns the name of the environment.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEnvironmentHealthAsync(string EnvironmentName, string EnvironmentId, EnvironmentHealthAttribute[] AttributeNames, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEnvironmentHealth?EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&EnvironmentId=" + (EnvironmentId==null? "" : Uri.EscapeDataString(EnvironmentId))+"&"+String.Join("&", AttributeNames.Select(z => $"AttributeNames={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists an environment's completed and failed managed actions.
		/// GET_DescribeEnvironmentManagedActionHistory /#Action=DescribeEnvironmentManagedActionHistory
		/// </summary>
		/// <param name="EnvironmentId">The environment ID of the target environment.</param>
		/// <param name="EnvironmentName">The name of the target environment.</param>
		/// <param name="NextToken">The pagination token returned by a previous request.</param>
		/// <param name="MaxItems">The maximum number of items to return for a single request.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEnvironmentManagedActionHistoryAsync(string EnvironmentId, string EnvironmentName, string NextToken, int MaxItems, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEnvironmentManagedActionHistory?EnvironmentId=" + (EnvironmentId==null? "" : Uri.EscapeDataString(EnvironmentId))+"&EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxItems="+MaxItems+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists an environment's upcoming and in-progress managed actions.
		/// GET_DescribeEnvironmentManagedActions /#Action=DescribeEnvironmentManagedActions
		/// </summary>
		/// <param name="EnvironmentName">The name of the target environment.</param>
		/// <param name="EnvironmentId">The environment ID of the target environment.</param>
		/// <param name="Status">To show only actions with a particular status, specify a status.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEnvironmentManagedActionsAsync(string EnvironmentName, string EnvironmentId, ActionStatus Status, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEnvironmentManagedActions?EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&EnvironmentId=" + (EnvironmentId==null? "" : Uri.EscapeDataString(EnvironmentId))+"&Status=" + Status+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns AWS resources for this environment.
		/// GET_DescribeEnvironmentResources /#Action=DescribeEnvironmentResources
		/// </summary>
		/// <param name="EnvironmentId"><p>The ID of the environment to retrieve AWS resource usage data.</p> <p> Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p></param>
		/// <param name="EnvironmentName"><p>The name of the environment to retrieve AWS resource usage data.</p> <p> Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEnvironmentResourcesAsync(string EnvironmentId, string EnvironmentName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEnvironmentResources?EnvironmentId=" + (EnvironmentId==null? "" : Uri.EscapeDataString(EnvironmentId))+"&EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns descriptions for existing environments.
		/// GET_DescribeEnvironments /#Action=DescribeEnvironments
		/// </summary>
		/// <param name="ApplicationName">If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application.</param>
		/// <param name="VersionLabel">If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application version.</param>
		/// <param name="EnvironmentIds">If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified IDs.</param>
		/// <param name="EnvironmentNames">If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified names.</param>
		/// <param name="IncludeDeleted"><p>Indicates whether to include deleted environments:</p> <p> <code>true</code>: Environments that have been deleted after <code>IncludedDeletedBackTo</code> are displayed.</p> <p> <code>false</code>: Do not include deleted environments.</p></param>
		/// <param name="IncludedDeletedBackTo"> If specified when <code>IncludeDeleted</code> is set to <code>true</code>, then environments deleted after this date are displayed. </param>
		/// <param name="MaxRecords"><p>For a paginated request. Specify a maximum number of environments to include in each response.</p> <p>If no <code>MaxRecords</code> is specified, all available environments are retrieved in a single response.</p></param>
		/// <param name="NextToken"><p>For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.</p> <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEnvironmentsAsync(string ApplicationName, string VersionLabel, EnvironmentId[] EnvironmentIds, EnvironmentName[] EnvironmentNames, bool IncludeDeleted, System.DateTimeOffset IncludedDeletedBackTo, int MaxRecords, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEnvironments?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&VersionLabel=" + (VersionLabel==null? "" : Uri.EscapeDataString(VersionLabel))+"&"+String.Join("&", EnvironmentIds.Select(z => $"EnvironmentIds={z}"))+"&"+String.Join("&", EnvironmentNames.Select(z => $"EnvironmentNames={z}"))+"&IncludeDeleted="+IncludeDeleted+"&IncludedDeletedBackTo=" + IncludedDeletedBackTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&MaxRecords="+MaxRecords+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns list of event descriptions matching criteria up to the last 6 weeks.</p> <note> <p>This action returns the most recent 1,000 events from the specified <code>NextToken</code>.</p> </note>
		/// GET_DescribeEvents /#Action=DescribeEvents
		/// </summary>
		/// <param name="ApplicationName">If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those associated with this application.</param>
		/// <param name="VersionLabel">If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this application version.</param>
		/// <param name="TemplateName">If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that are associated with this environment configuration.</param>
		/// <param name="EnvironmentId">If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment.</param>
		/// <param name="EnvironmentName">If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment.</param>
		/// <param name="PlatformArn">The ARN of a custom platform version. If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this custom platform version.</param>
		/// <param name="RequestId">If specified, AWS Elastic Beanstalk restricts the described events to include only those associated with this request ID.</param>
		/// <param name="Severity">If specified, limits the events returned from this call to include only those with the specified severity or higher.</param>
		/// <param name="StartTime">If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur on or after this time.</param>
		/// <param name="EndTime"> If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur up to, but not including, the <code>EndTime</code>. </param>
		/// <param name="MaxRecords">Specifies the maximum number of events that can be returned, beginning with the most recent event.</param>
		/// <param name="NextToken">Pagination token. If specified, the events return the next batch of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEventsAsync(string ApplicationName, string VersionLabel, string TemplateName, string EnvironmentId, string EnvironmentName, string PlatformArn, string RequestId, EventSeverity Severity, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, int MaxRecords, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEvents?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&VersionLabel=" + (VersionLabel==null? "" : Uri.EscapeDataString(VersionLabel))+"&TemplateName=" + (TemplateName==null? "" : Uri.EscapeDataString(TemplateName))+"&EnvironmentId=" + (EnvironmentId==null? "" : Uri.EscapeDataString(EnvironmentId))+"&EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&PlatformArn=" + (PlatformArn==null? "" : Uri.EscapeDataString(PlatformArn))+"&RequestId=" + (RequestId==null? "" : Uri.EscapeDataString(RequestId))+"&Severity=" + Severity+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&MaxRecords="+MaxRecords+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves detailed information about the health of instances in your AWS Elastic Beanstalk. This operation requires <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced.html">enhanced health reporting</a>.
		/// GET_DescribeInstancesHealth /#Action=DescribeInstancesHealth
		/// </summary>
		/// <param name="EnvironmentName">Specify the AWS Elastic Beanstalk environment by name.</param>
		/// <param name="EnvironmentId">Specify the AWS Elastic Beanstalk environment by ID.</param>
		/// <param name="AttributeNames">Specifies the response elements you wish to receive. To retrieve all attributes, set to <code>All</code>. If no attribute names are specified, returns a list of instances.</param>
		/// <param name="NextToken">Specify the pagination token returned by a previous call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeInstancesHealthAsync(string EnvironmentName, string EnvironmentId, InstancesHealthAttribute[] AttributeNames, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeInstancesHealth?EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&EnvironmentId=" + (EnvironmentId==null? "" : Uri.EscapeDataString(EnvironmentId))+"&"+String.Join("&", AttributeNames.Select(z => $"AttributeNames={z}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes a platform version. Provides full details. Compare to <a>ListPlatformVersions</a>, which provides summary information about a list of platform versions.</p> <p>For definitions of platform version and other platform-related terms, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html">AWS Elastic Beanstalk Platforms Glossary</a>.</p>
		/// GET_DescribePlatformVersion /#Action=DescribePlatformVersion
		/// </summary>
		/// <param name="PlatformArn">The ARN of the platform version.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribePlatformVersionAsync(string PlatformArn, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribePlatformVersion?PlatformArn=" + (PlatformArn==null? "" : Uri.EscapeDataString(PlatformArn))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociate the operations role from an environment. After this call is made, Elastic Beanstalk uses the caller's permissions for permissions to downstream services during subsequent calls acting on this environment. For more information, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-operationsrole.html">Operations roles</a> in the <i>AWS Elastic Beanstalk Developer Guide</i>.
		/// GET_DisassociateEnvironmentOperationsRole /#Action=DisassociateEnvironmentOperationsRole
		/// </summary>
		/// <param name="EnvironmentName">The name of the environment from which to disassociate the operations role.</param>
		/// <returns>Success</returns>
		public async Task GET_DisassociateEnvironmentOperationsRoleAsync(string EnvironmentName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DisassociateEnvironmentOperationsRole?EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the available solution stack names, with the public version first and then in reverse chronological order.
		/// GET_ListAvailableSolutionStacks /#Action=ListAvailableSolutionStacks
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_ListAvailableSolutionStacksAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ListAvailableSolutionStacks?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the available solution stack names, with the public version first and then in reverse chronological order.
		/// POST_ListAvailableSolutionStacks /#Action=ListAvailableSolutionStacks
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ListAvailableSolutionStacksAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ListAvailableSolutionStacks?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the platform branches available for your account in an AWS Region. Provides summary information about each platform branch.</p> <p>For definitions of platform branch and other platform-related terms, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html">AWS Elastic Beanstalk Platforms Glossary</a>.</p>
		/// GET_ListPlatformBranches /#Action=ListPlatformBranches
		/// </summary>
		/// <param name="Filters"><p>Criteria for restricting the resulting list of platform branches. The filter is evaluated as a logical conjunction (AND) of the separate <code>SearchFilter</code> terms.</p> <p>The following list shows valid attribute values for each of the <code>SearchFilter</code> terms. Most operators take a single value. The <code>in</code> and <code>not_in</code> operators can take multiple values.</p> <ul> <li> <p> <code>Attribute = BranchName</code>:</p> <ul> <li> <p> <code>Operator</code>: <code>=</code> | <code>!=</code> | <code>begins_with</code> | <code>ends_with</code> | <code>contains</code> | <code>in</code> | <code>not_in</code> </p> </li> </ul> </li> <li> <p> <code>Attribute = LifecycleState</code>:</p> <ul> <li> <p> <code>Operator</code>: <code>=</code> | <code>!=</code> | <code>in</code> | <code>not_in</code> </p> </li> <li> <p> <code>Values</code>: <code>beta</code> | <code>supported</code> | <code>deprecated</code> | <code>retired</code> </p> </li> </ul> </li> <li> <p> <code>Attribute = PlatformName</code>:</p> <ul> <li> <p> <code>Operator</code>: <code>=</code> | <code>!=</code> | <code>begins_with</code> | <code>ends_with</code> | <code>contains</code> | <code>in</code> | <code>not_in</code> </p> </li> </ul> </li> <li> <p> <code>Attribute = TierType</code>:</p> <ul> <li> <p> <code>Operator</code>: <code>=</code> | <code>!=</code> </p> </li> <li> <p> <code>Values</code>: <code>WebServer/Standard</code> | <code>Worker/SQS/HTTP</code> </p> </li> </ul> </li> </ul> <p>Array size: limited to 10 <code>SearchFilter</code> objects.</p> <p>Within each <code>SearchFilter</code> item, the <code>Values</code> array is limited to 10 items.</p></param>
		/// <param name="MaxRecords">The maximum number of platform branch values returned in one call.</param>
		/// <param name="NextToken"><p>For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.</p> <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListPlatformBranchesAsync(SearchFilter[] Filters, int MaxRecords, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ListPlatformBranches?"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the platform versions available for your account in an AWS Region. Provides summary information about each platform version. Compare to <a>DescribePlatformVersion</a>, which provides full details about a single platform version.</p> <p>For definitions of platform version and other platform-related terms, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-glossary.html">AWS Elastic Beanstalk Platforms Glossary</a>.</p>
		/// GET_ListPlatformVersions /#Action=ListPlatformVersions
		/// </summary>
		/// <param name="Filters">Criteria for restricting the resulting list of platform versions. The filter is interpreted as a logical conjunction (AND) of the separate <code>PlatformFilter</code> terms.</param>
		/// <param name="MaxRecords">The maximum number of platform version values returned in one call.</param>
		/// <param name="NextToken"><p>For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request.</p> <p>If no <code>NextToken</code> is specified, the first page is retrieved.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListPlatformVersionsAsync(PlatformFilter[] Filters, int MaxRecords, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ListPlatformVersions?"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Return the tags applied to an AWS Elastic Beanstalk resource. The response contains a list of tag key-value pairs.</p> <p>Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html">Tagging Application Resources</a>.</p>
		/// GET_ListTagsForResource /#Action=ListTagsForResource
		/// </summary>
		/// <param name="ResourceArn"><p>The Amazon Resource Name (ARN) of the resouce for which a tag list is requested.</p> <p>Must be the ARN of an Elastic Beanstalk resource.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListTagsForResourceAsync(string ResourceArn, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ListTagsForResource?ResourceArn=" + (ResourceArn==null? "" : Uri.EscapeDataString(ResourceArn))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes and recreates all of the AWS resources (for example: the Auto Scaling group, load balancer, etc.) for a specified environment and forces a restart.
		/// GET_RebuildEnvironment /#Action=RebuildEnvironment
		/// </summary>
		/// <param name="EnvironmentId"><p>The ID of the environment to rebuild.</p> <p> Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p></param>
		/// <param name="EnvironmentName"><p>The name of the environment to rebuild.</p> <p> Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p></param>
		/// <returns>Success</returns>
		public async Task GET_RebuildEnvironmentAsync(string EnvironmentId, string EnvironmentName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RebuildEnvironment?EnvironmentId=" + (EnvironmentId==null? "" : Uri.EscapeDataString(EnvironmentId))+"&EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Initiates a request to compile the specified type of information of the deployed environment.</p> <p> Setting the <code>InfoType</code> to <code>tail</code> compiles the last lines from the application server log files of every Amazon EC2 instance in your environment. </p> <p> Setting the <code>InfoType</code> to <code>bundle</code> compresses the application server log files for every Amazon EC2 instance into a <code>.zip</code> file. Legacy and .NET containers do not support bundle logs. </p> <p> Use <a>RetrieveEnvironmentInfo</a> to obtain the set of logs. </p> <p>Related Topics</p> <ul> <li> <p> <a>RetrieveEnvironmentInfo</a> </p> </li> </ul>
		/// GET_RequestEnvironmentInfo /#Action=RequestEnvironmentInfo
		/// </summary>
		/// <param name="EnvironmentId"><p>The ID of the environment of the requested data.</p> <p>If no such environment is found, <code>RequestEnvironmentInfo</code> returns an <code>InvalidParameterValue</code> error. </p> <p>Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p></param>
		/// <param name="EnvironmentName"><p>The name of the environment of the requested data.</p> <p>If no such environment is found, <code>RequestEnvironmentInfo</code> returns an <code>InvalidParameterValue</code> error. </p> <p>Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p></param>
		/// <param name="InfoType">The type of information to request.</param>
		/// <returns>Success</returns>
		public async Task GET_RequestEnvironmentInfoAsync(string EnvironmentId, string EnvironmentName, EnvironmentInfoType InfoType, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RequestEnvironmentInfo?EnvironmentId=" + (EnvironmentId==null? "" : Uri.EscapeDataString(EnvironmentId))+"&EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&InfoType=" + InfoType+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Causes the environment to restart the application container server running on each Amazon EC2 instance.
		/// GET_RestartAppServer /#Action=RestartAppServer
		/// </summary>
		/// <param name="EnvironmentId"><p>The ID of the environment to restart the server for.</p> <p> Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p></param>
		/// <param name="EnvironmentName"><p>The name of the environment to restart the server for.</p> <p> Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p></param>
		/// <returns>Success</returns>
		public async Task GET_RestartAppServerAsync(string EnvironmentId, string EnvironmentName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RestartAppServer?EnvironmentId=" + (EnvironmentId==null? "" : Uri.EscapeDataString(EnvironmentId))+"&EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the compiled information from a <a>RequestEnvironmentInfo</a> request.</p> <p>Related Topics</p> <ul> <li> <p> <a>RequestEnvironmentInfo</a> </p> </li> </ul>
		/// GET_RetrieveEnvironmentInfo /#Action=RetrieveEnvironmentInfo
		/// </summary>
		/// <param name="EnvironmentId"><p>The ID of the data's environment.</p> <p>If no such environment is found, returns an <code>InvalidParameterValue</code> error.</p> <p>Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error.</p></param>
		/// <param name="EnvironmentName"><p>The name of the data's environment.</p> <p> If no such environment is found, returns an <code>InvalidParameterValue</code> error. </p> <p> Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p></param>
		/// <param name="InfoType">The type of information to retrieve.</param>
		/// <returns>Success</returns>
		public async Task GET_RetrieveEnvironmentInfoAsync(string EnvironmentId, string EnvironmentName, EnvironmentInfoType InfoType, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RetrieveEnvironmentInfo?EnvironmentId=" + (EnvironmentId==null? "" : Uri.EscapeDataString(EnvironmentId))+"&EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&InfoType=" + InfoType+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Swaps the CNAMEs of two environments.
		/// GET_SwapEnvironmentCNAMEs /#Action=SwapEnvironmentCNAMEs
		/// </summary>
		/// <param name="SourceEnvironmentId"><p>The ID of the source environment.</p> <p> Condition: You must specify at least the <code>SourceEnvironmentID</code> or the <code>SourceEnvironmentName</code>. You may also specify both. If you specify the <code>SourceEnvironmentId</code>, you must specify the <code>DestinationEnvironmentId</code>. </p></param>
		/// <param name="SourceEnvironmentName"><p>The name of the source environment.</p> <p> Condition: You must specify at least the <code>SourceEnvironmentID</code> or the <code>SourceEnvironmentName</code>. You may also specify both. If you specify the <code>SourceEnvironmentName</code>, you must specify the <code>DestinationEnvironmentName</code>. </p></param>
		/// <param name="DestinationEnvironmentId"><p>The ID of the destination environment.</p> <p> Condition: You must specify at least the <code>DestinationEnvironmentID</code> or the <code>DestinationEnvironmentName</code>. You may also specify both. You must specify the <code>SourceEnvironmentId</code> with the <code>DestinationEnvironmentId</code>. </p></param>
		/// <param name="DestinationEnvironmentName"><p>The name of the destination environment.</p> <p> Condition: You must specify at least the <code>DestinationEnvironmentID</code> or the <code>DestinationEnvironmentName</code>. You may also specify both. You must specify the <code>SourceEnvironmentName</code> with the <code>DestinationEnvironmentName</code>. </p></param>
		/// <returns>Success</returns>
		public async Task GET_SwapEnvironmentCNAMEsAsync(string SourceEnvironmentId, string SourceEnvironmentName, string DestinationEnvironmentId, string DestinationEnvironmentName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=SwapEnvironmentCNAMEs?SourceEnvironmentId=" + (SourceEnvironmentId==null? "" : Uri.EscapeDataString(SourceEnvironmentId))+"&SourceEnvironmentName=" + (SourceEnvironmentName==null? "" : Uri.EscapeDataString(SourceEnvironmentName))+"&DestinationEnvironmentId=" + (DestinationEnvironmentId==null? "" : Uri.EscapeDataString(DestinationEnvironmentId))+"&DestinationEnvironmentName=" + (DestinationEnvironmentName==null? "" : Uri.EscapeDataString(DestinationEnvironmentName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Terminates the specified environment.
		/// GET_TerminateEnvironment /#Action=TerminateEnvironment
		/// </summary>
		/// <param name="EnvironmentId"><p>The ID of the environment to terminate.</p> <p> Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p></param>
		/// <param name="EnvironmentName"><p>The name of the environment to terminate.</p> <p> Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p></param>
		/// <param name="TerminateResources"><p>Indicates whether the associated AWS resources should shut down when the environment is terminated:</p> <ul> <li> <p> <code>true</code>: The specified environment as well as the associated AWS resources, such as Auto Scaling group and LoadBalancer, are terminated.</p> </li> <li> <p> <code>false</code>: AWS Elastic Beanstalk resource management is removed from the environment, but the AWS resources continue to operate.</p> </li> </ul> <p> For more information, see the <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/ug/"> AWS Elastic Beanstalk User Guide. </a> </p> <p> Default: <code>true</code> </p> <p> Valid Values: <code>true</code> | <code>false</code> </p></param>
		/// <param name="ForceTerminate">Terminates the target environment even if another environment in the same group is dependent on it.</param>
		/// <returns>Success</returns>
		public async Task GET_TerminateEnvironmentAsync(string EnvironmentId, string EnvironmentName, bool TerminateResources, bool ForceTerminate, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=TerminateEnvironment?EnvironmentId=" + (EnvironmentId==null? "" : Uri.EscapeDataString(EnvironmentId))+"&EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&TerminateResources="+TerminateResources+"&ForceTerminate="+ForceTerminate+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified application to have the specified properties.</p> <note> <p>If a property (for example, <code>description</code>) is not provided, the value remains unchanged. To clear these properties, specify an empty string.</p> </note>
		/// GET_UpdateApplication /#Action=UpdateApplication
		/// </summary>
		/// <param name="ApplicationName">The name of the application to update. If no such application is found, <code>UpdateApplication</code> returns an <code>InvalidParameterValue</code> error. </param>
		/// <param name="Description"><p>A new description for the application.</p> <p>Default: If not specified, AWS Elastic Beanstalk does not update the description.</p></param>
		/// <returns>Success</returns>
		public async Task GET_UpdateApplicationAsync(string ApplicationName, string Description, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=UpdateApplication?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies lifecycle settings for an application.
		/// GET_UpdateApplicationResourceLifecycle /#Action=UpdateApplicationResourceLifecycle
		/// </summary>
		/// <param name="ApplicationName">The name of the application.</param>
		/// <param name="ResourceLifecycleConfig">The lifecycle configuration.</param>
		/// <returns>Success</returns>
		public async Task GET_UpdateApplicationResourceLifecycleAsync(string ApplicationName, string ResourceLifecycleConfig, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=UpdateApplicationResourceLifecycle?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&ResourceLifecycleConfig=" + (ResourceLifecycleConfig==null? "" : Uri.EscapeDataString(ResourceLifecycleConfig))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified application version to have the specified properties.</p> <note> <p>If a property (for example, <code>description</code>) is not provided, the value remains unchanged. To clear properties, specify an empty string.</p> </note>
		/// GET_UpdateApplicationVersion /#Action=UpdateApplicationVersion
		/// </summary>
		/// <param name="ApplicationName"><p>The name of the application associated with this version.</p> <p> If no application is found with this name, <code>UpdateApplication</code> returns an <code>InvalidParameterValue</code> error.</p></param>
		/// <param name="VersionLabel"><p>The name of the version to update.</p> <p>If no application version is found with this label, <code>UpdateApplication</code> returns an <code>InvalidParameterValue</code> error. </p></param>
		/// <param name="Description">A new description for this version.</param>
		/// <returns>Success</returns>
		public async Task GET_UpdateApplicationVersionAsync(string ApplicationName, string VersionLabel, string Description, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=UpdateApplicationVersion?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&VersionLabel=" + (VersionLabel==null? "" : Uri.EscapeDataString(VersionLabel))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified configuration template to have the specified properties or configuration option values.</p> <note> <p>If a property (for example, <code>ApplicationName</code>) is not provided, its value remains unchanged. To clear such properties, specify an empty string.</p> </note> <p>Related Topics</p> <ul> <li> <p> <a>DescribeConfigurationOptions</a> </p> </li> </ul>
		/// GET_UpdateConfigurationTemplate /#Action=UpdateConfigurationTemplate
		/// </summary>
		/// <param name="ApplicationName"><p>The name of the application associated with the configuration template to update.</p> <p> If no application is found with this name, <code>UpdateConfigurationTemplate</code> returns an <code>InvalidParameterValue</code> error. </p></param>
		/// <param name="TemplateName"><p>The name of the configuration template to update.</p> <p> If no configuration template is found with this name, <code>UpdateConfigurationTemplate</code> returns an <code>InvalidParameterValue</code> error. </p></param>
		/// <param name="Description">A new description for the configuration.</param>
		/// <param name="OptionSettings">A list of configuration option settings to update with the new specified option value.</param>
		/// <param name="OptionsToRemove"><p>A list of configuration options to remove from the configuration set.</p> <p> Constraint: You can remove only <code>UserDefined</code> configuration options. </p></param>
		/// <returns>Success</returns>
		public async Task GET_UpdateConfigurationTemplateAsync(string ApplicationName, string TemplateName, string Description, ConfigurationOptionSetting[] OptionSettings, OptionSpecification[] OptionsToRemove, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=UpdateConfigurationTemplate?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&TemplateName=" + (TemplateName==null? "" : Uri.EscapeDataString(TemplateName))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&"+String.Join("&", OptionSettings.Select(z => $"OptionSettings={z}"))+"&"+String.Join("&", OptionsToRemove.Select(z => $"OptionsToRemove={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the environment description, deploys a new application version, updates the configuration settings to an entirely new configuration template, or updates select configuration option values in the running environment.</p> <p> Attempting to update both the release and configuration is not allowed and AWS Elastic Beanstalk returns an <code>InvalidParameterCombination</code> error. </p> <p> When updating the configuration settings to a new template or individual settings, a draft configuration is created and <a>DescribeConfigurationSettings</a> for this environment returns two setting descriptions with different <code>DeploymentStatus</code> values. </p>
		/// GET_UpdateEnvironment /#Action=UpdateEnvironment
		/// </summary>
		/// <param name="ApplicationName">The name of the application with which the environment is associated.</param>
		/// <param name="EnvironmentId"><p>The ID of the environment to update.</p> <p>If no environment with this ID exists, AWS Elastic Beanstalk returns an <code>InvalidParameterValue</code> error.</p> <p>Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p></param>
		/// <param name="EnvironmentName"><p>The name of the environment to update. If no environment with this name exists, AWS Elastic Beanstalk returns an <code>InvalidParameterValue</code> error. </p> <p>Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns <code>MissingRequiredParameter</code> error. </p></param>
		/// <param name="GroupName">The name of the group to which the target environment belongs. Specify a group name only if the environment's name is specified in an environment manifest and not with the environment name or environment ID parameters. See <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html">Environment Manifest (env.yaml)</a> for details.</param>
		/// <param name="Description">If this parameter is specified, AWS Elastic Beanstalk updates the description of this environment.</param>
		/// <param name="Tier"><p>This specifies the tier to use to update the environment.</p> <p>Condition: At this time, if you change the tier version, name, or type, AWS Elastic Beanstalk returns <code>InvalidParameterValue</code> error. </p></param>
		/// <param name="VersionLabel">If this parameter is specified, AWS Elastic Beanstalk deploys the named application version to the environment. If no such application version is found, returns an <code>InvalidParameterValue</code> error. </param>
		/// <param name="TemplateName">If this parameter is specified, AWS Elastic Beanstalk deploys this configuration template to the environment. If no such configuration template is found, AWS Elastic Beanstalk returns an <code>InvalidParameterValue</code> error. </param>
		/// <param name="SolutionStackName">This specifies the platform version that the environment will run after the environment is updated.</param>
		/// <param name="PlatformArn">The ARN of the platform, if used.</param>
		/// <param name="OptionSettings">If specified, AWS Elastic Beanstalk updates the configuration set associated with the running environment and sets the specified configuration options to the requested value.</param>
		/// <param name="OptionsToRemove">A list of custom user-defined configuration options to remove from the configuration set for this environment.</param>
		/// <returns>Success</returns>
		public async Task GET_UpdateEnvironmentAsync(string ApplicationName, string EnvironmentId, string EnvironmentName, string GroupName, string Description, string Tier, string VersionLabel, string TemplateName, string SolutionStackName, string PlatformArn, ConfigurationOptionSetting[] OptionSettings, OptionSpecification[] OptionsToRemove, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=UpdateEnvironment?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&EnvironmentId=" + (EnvironmentId==null? "" : Uri.EscapeDataString(EnvironmentId))+"&EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&GroupName=" + (GroupName==null? "" : Uri.EscapeDataString(GroupName))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&Tier=" + (Tier==null? "" : Uri.EscapeDataString(Tier))+"&VersionLabel=" + (VersionLabel==null? "" : Uri.EscapeDataString(VersionLabel))+"&TemplateName=" + (TemplateName==null? "" : Uri.EscapeDataString(TemplateName))+"&SolutionStackName=" + (SolutionStackName==null? "" : Uri.EscapeDataString(SolutionStackName))+"&PlatformArn=" + (PlatformArn==null? "" : Uri.EscapeDataString(PlatformArn))+"&"+String.Join("&", OptionSettings.Select(z => $"OptionSettings={z}"))+"&"+String.Join("&", OptionsToRemove.Select(z => $"OptionsToRemove={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Update the list of tags applied to an AWS Elastic Beanstalk resource. Two lists can be passed: <code>TagsToAdd</code> for tags to add or update, and <code>TagsToRemove</code>.</p> <p>Elastic Beanstalk supports tagging of all of its resources. For details about resource tagging, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/applications-tagging-resources.html">Tagging Application Resources</a>.</p> <p>If you create a custom IAM user policy to control permission to this operation, specify one of the following two virtual actions (or both) instead of the API operation name:</p> <dl> <dt>elasticbeanstalk:AddTags</dt> <dd> <p>Controls permission to call <code>UpdateTagsForResource</code> and pass a list of tags to add in the <code>TagsToAdd</code> parameter.</p> </dd> <dt>elasticbeanstalk:RemoveTags</dt> <dd> <p>Controls permission to call <code>UpdateTagsForResource</code> and pass a list of tag keys to remove in the <code>TagsToRemove</code> parameter.</p> </dd> </dl> <p>For details about creating a custom user policy, see <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.iam.managed-policies.html#AWSHowTo.iam.policies">Creating a Custom User Policy</a>.</p>
		/// GET_UpdateTagsForResource /#Action=UpdateTagsForResource
		/// </summary>
		/// <param name="ResourceArn"><p>The Amazon Resource Name (ARN) of the resouce to be updated.</p> <p>Must be the ARN of an Elastic Beanstalk resource.</p></param>
		/// <param name="TagsToAdd"><p>A list of tags to add or update. If a key of an existing tag is added, the tag's value is updated.</p> <p>Specify at least one of these parameters: <code>TagsToAdd</code>, <code>TagsToRemove</code>.</p></param>
		/// <param name="TagsToRemove"><p>A list of tag keys to remove. If a tag key doesn't exist, it is silently ignored.</p> <p>Specify at least one of these parameters: <code>TagsToAdd</code>, <code>TagsToRemove</code>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_UpdateTagsForResourceAsync(string ResourceArn, Tag[] TagsToAdd, TagKey[] TagsToRemove, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=UpdateTagsForResource?ResourceArn=" + (ResourceArn==null? "" : Uri.EscapeDataString(ResourceArn))+"&"+String.Join("&", TagsToAdd.Select(z => $"TagsToAdd={z}"))+"&"+String.Join("&", TagsToRemove.Select(z => $"TagsToRemove={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Takes a set of configuration settings and either a configuration template or environment, and determines whether those values are valid.</p> <p>This action returns a list of messages indicating any errors or warnings associated with the selection of option values.</p>
		/// GET_ValidateConfigurationSettings /#Action=ValidateConfigurationSettings
		/// </summary>
		/// <param name="ApplicationName">The name of the application that the configuration template or environment belongs to.</param>
		/// <param name="TemplateName"><p>The name of the configuration template to validate the settings against.</p> <p>Condition: You cannot specify both this and an environment name.</p></param>
		/// <param name="EnvironmentName"><p>The name of the environment to validate the settings against.</p> <p>Condition: You cannot specify both this and a configuration template name.</p></param>
		/// <param name="OptionSettings">A list of the options and desired values to evaluate.</param>
		/// <returns>Success</returns>
		public async Task GET_ValidateConfigurationSettingsAsync(string ApplicationName, string TemplateName, string EnvironmentName, ConfigurationOptionSetting[] OptionSettings, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ValidateConfigurationSettings?ApplicationName=" + (ApplicationName==null? "" : Uri.EscapeDataString(ApplicationName))+"&TemplateName=" + (TemplateName==null? "" : Uri.EscapeDataString(TemplateName))+"&EnvironmentName=" + (EnvironmentName==null? "" : Uri.EscapeDataString(EnvironmentName))+"&"+String.Join("&", OptionSettings.Select(z => $"OptionSettings={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
