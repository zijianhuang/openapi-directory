//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents the request to add custom attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddCustomAttributesRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public SchemaAttributeType[] CustomAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminAddUserToGroupRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string GroupName { get; set; }
	}
	
	/// <summary>
	/// Represents the request to confirm user registration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminConfirmSignUpRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientMetadataType ClientMetadata { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server to the request to create the user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminCreateUserResponse
	{
		
		/// <summary>
		/// The user type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserType User { get; set; }
	}
	
	/// <summary>
	/// Represents the request to create a user in the specified user pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminCreateUserRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeType[] UserAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeType[] ValidationData { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 6
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=6)]
		public string TemporaryPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceAliasCreation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdminCreateUserRequestMessageAction MessageAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeliveryMediumType[] DesiredDeliveryMediums { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientMetadataType ClientMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdminCreateUserRequestMessageAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESEND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPPRESS = 1,
	}
	
	/// <summary>
	/// Represents the request to delete a user as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminDeleteUserRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Represents the request to delete user attributes as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminDeleteUserAttributesRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeNameType[] UserAttributeNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminDisableProviderForUserRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// A container for information about an identity provider for a user pool.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProviderUserIdentifierType User { get; set; }
	}
	
	/// <summary>
	/// Represents the request to disable any user as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminDisableUserRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Represents the request that enables the user as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminEnableUserRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Sends the forgot device request, as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminForgetDeviceRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string DeviceKey { get; set; }
	}
	
	/// <summary>
	/// Gets the device response, as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminGetDeviceResponse
	{
		
		/// <summary>
		/// The device type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeviceType Device { get; set; }
	}
	
	/// <summary>
	/// Represents the request to get the device, as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminGetDeviceRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string DeviceKey { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server from the request to get the specified user as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminGetUserResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeType[] UserAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UserCreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UserLastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdminGetUserResponseUserStatus UserStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MFAOptionType[] MFAOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMfaSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringType[] UserMFASettingList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdminGetUserResponseUserStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNCONFIRMED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIRMED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPROMISED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESET_REQUIRED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_CHANGE_PASSWORD = 6,
	}
	
	/// <summary>
	/// Represents the request to get the specified user as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminGetUserRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Initiates the authentication response, as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminInitiateAuthResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AdminInitiateAuthResponseChallengeName ChallengeName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string Session { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChallengeParametersType ChallengeParameters { get; set; }
		
		/// <summary>
		/// The authentication result.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationResultType AuthenticationResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdminInitiateAuthResponseChallengeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS_MFA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFTWARE_TOKEN_MFA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELECT_MFA_TYPE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MFA_SETUP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD_VERIFIER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_CHALLENGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_SRP_AUTH = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_PASSWORD_VERIFIER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_NO_SRP_AUTH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_PASSWORD_REQUIRED = 9,
	}
	
	/// <summary>
	/// Initiates the authorization request, as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminInitiateAuthRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AdminInitiateAuthRequestAuthFlow AuthFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthParametersType AuthParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientMetadataType ClientMetadata { get; set; }
		
		/// <summary>
		/// <p>An Amazon Pinpoint analytics endpoint.</p> <p>An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics.</p> <note> <p>Cognito User Pools only supports sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the region in which the user pool resides.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsMetadataType AnalyticsMetadata { get; set; }
		
		/// <summary>
		/// Contextual user data type used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContextDataType ContextData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdminInitiateAuthRequestAuthFlow
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_SRP_AUTH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFRESH_TOKEN_AUTH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFRESH_TOKEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_AUTH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_NO_SRP_AUTH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_PASSWORD_AUTH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_USER_PASSWORD_AUTH = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminLinkProviderForUserRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// A container for information about an identity provider for a user pool.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProviderUserIdentifierType DestinationUser { get; set; }
		
		/// <summary>
		/// A container for information about an identity provider for a user pool.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProviderUserIdentifierType SourceUser { get; set; }
	}
	
	/// <summary>
	/// Lists the device's response, as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminListDevicesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceType[] Devices { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PaginationToken { get; set; }
	}
	
	/// <summary>
	/// Represents the request to list devices, as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminListDevicesRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 60)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PaginationToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminListGroupsForUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroupType[] Groups { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminListGroupsForUserRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 60)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminListUserAuthEventsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthEventType[] AuthEvents { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminListUserAuthEventsRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 60)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminRemoveUserFromGroupRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string GroupName { get; set; }
	}
	
	/// <summary>
	/// Represents the request to reset a user's password as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminResetUserPasswordRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientMetadataType ClientMetadata { get; set; }
	}
	
	/// <summary>
	/// Responds to the authentication challenge, as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminRespondToAuthChallengeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AdminRespondToAuthChallengeResponseChallengeName ChallengeName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string Session { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChallengeParametersType ChallengeParameters { get; set; }
		
		/// <summary>
		/// The authentication result.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationResultType AuthenticationResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdminRespondToAuthChallengeResponseChallengeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS_MFA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFTWARE_TOKEN_MFA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELECT_MFA_TYPE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MFA_SETUP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD_VERIFIER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_CHALLENGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_SRP_AUTH = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_PASSWORD_VERIFIER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_NO_SRP_AUTH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_PASSWORD_REQUIRED = 9,
	}
	
	/// <summary>
	/// The request to respond to the authentication challenge, as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminRespondToAuthChallengeRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AdminRespondToAuthChallengeRequestChallengeName ChallengeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChallengeResponsesType ChallengeResponses { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string Session { get; set; }
		
		/// <summary>
		/// <p>An Amazon Pinpoint analytics endpoint.</p> <p>An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics.</p> <note> <p>Cognito User Pools only supports sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the region in which the user pool resides.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsMetadataType AnalyticsMetadata { get; set; }
		
		/// <summary>
		/// Contextual user data type used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContextDataType ContextData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientMetadataType ClientMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdminRespondToAuthChallengeRequestChallengeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS_MFA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFTWARE_TOKEN_MFA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELECT_MFA_TYPE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MFA_SETUP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD_VERIFIER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_CHALLENGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_SRP_AUTH = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_PASSWORD_VERIFIER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_NO_SRP_AUTH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_PASSWORD_REQUIRED = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminSetUserMFAPreferenceRequest
	{
		
		/// <summary>
		/// The type used for enabling SMS MFA at the user level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SMSMfaSettingsType SMSMfaSettings { get; set; }
		
		/// <summary>
		/// The type used for enabling software token MFA at the user level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SoftwareTokenMfaSettingsType SoftwareTokenMfaSettings { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminSetUserPasswordRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 6
		/// Pattern: [\S]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=6)]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Permanent { get; set; }
	}
	
	/// <summary>
	/// You can use this parameter to set an MFA configuration that uses the SMS delivery medium.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminSetUserSettingsRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MFAOptionType[] MFAOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminUpdateAuthEventFeedbackRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// Pattern: [\w+-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string EventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AdminUpdateAuthEventFeedbackRequestFeedbackValue FeedbackValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdminUpdateAuthEventFeedbackRequestFeedbackValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Valid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 1,
	}
	
	/// <summary>
	/// The request to update the device status, as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminUpdateDeviceStatusRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string DeviceKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdminUpdateDeviceStatusRequestDeviceRememberedStatus DeviceRememberedStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdminUpdateDeviceStatusRequestDeviceRememberedStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		remembered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not_remembered = 1,
	}
	
	/// <summary>
	/// Represents the request to update the user's attributes as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminUpdateUserAttributesRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeType[] UserAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientMetadataType ClientMetadata { get; set; }
	}
	
	/// <summary>
	/// The request to sign out of all devices, as an administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminUserGlobalSignOutRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateSoftwareTokenResponse
	{
		
		/// <summary>
		/// Min length: 16
		/// Pattern: [A-Za-z0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=16)]
		public string SecretCode { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string Session { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateSoftwareTokenRequest
	{
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string Session { get; set; }
	}
	
	/// <summary>
	/// Represents the request to change a user password.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChangePasswordRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 6
		/// Pattern: [\S]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=6)]
		public string PreviousPassword { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 6
		/// Pattern: [\S]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=6)]
		public string ProposedPassword { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
	}
	
	/// <summary>
	/// Confirms the device response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfirmDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UserConfirmationNecessary { get; set; }
	}
	
	/// <summary>
	/// Confirms the device request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfirmDeviceRequest
	{
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string DeviceKey { get; set; }
		
		/// <summary>
		/// The device verifier against which it will be authenticated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceSecretVerifierConfigType DeviceSecretVerifierConfig { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string DeviceName { get; set; }
	}
	
	/// <summary>
	/// The request representing the confirmation for a password reset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfirmForgotPasswordRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+=/]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string SecretHash { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ConfirmationCode { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 6
		/// Pattern: [\S]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=6)]
		public string Password { get; set; }
		
		/// <summary>
		/// <p>An Amazon Pinpoint analytics endpoint.</p> <p>An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics.</p> <note> <p>Cognito User Pools only supports sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the region in which the user pool resides.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsMetadataType AnalyticsMetadata { get; set; }
		
		/// <summary>
		/// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContextDataType UserContextData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientMetadataType ClientMetadata { get; set; }
	}
	
	/// <summary>
	/// Represents the request to confirm registration of a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfirmSignUpRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+=/]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string SecretHash { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string ConfirmationCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceAliasCreation { get; set; }
		
		/// <summary>
		/// <p>An Amazon Pinpoint analytics endpoint.</p> <p>An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics.</p> <note> <p>Cognito User Pools only supports sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the region in which the user pool resides.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsMetadataType AnalyticsMetadata { get; set; }
		
		/// <summary>
		/// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContextDataType UserContextData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientMetadataType ClientMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateGroupResponse
	{
		
		/// <summary>
		/// The group type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GroupType Group { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateGroupRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Precedence { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateIdentityProviderResponse
	{
		
		/// <summary>
		/// A container for information about an identity provider.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IdentityProviderType IdentityProvider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateIdentityProviderRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: [^_][\p{L}\p{M}\p{S}\p{N}\p{P}][^_]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string ProviderName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateIdentityProviderRequestProviderType ProviderType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProviderDetailsType ProviderDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeMappingType AttributeMapping { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public IdpIdentifierType[] IdpIdentifiers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateIdentityProviderRequestProviderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAML = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Facebook = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Google = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoginWithAmazon = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignInWithApple = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OIDC = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateResourceServerResponse
	{
		
		/// <summary>
		/// A container for information about a resource server for a user pool.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceServerType ResourceServer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateResourceServerRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\x21\x23-\x5B\x5D-\x7E]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Identifier { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\s+=,.@-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ResourceServerScopeType[] Scopes { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server to the request to create the user import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUserImportJobResponse
	{
		
		/// <summary>
		/// The user import job type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserImportJobType UserImportJob { get; set; }
	}
	
	/// <summary>
	/// Represents the request to create the user import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUserImportJobRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w\s+=,.@-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string JobName { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CloudWatchLogsRoleArn { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server for the request to create a user pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUserPoolResponse
	{
		
		/// <summary>
		/// A container for information about the user pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserPoolType UserPool { get; set; }
	}
	
	/// <summary>
	/// Represents the request to create a user pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUserPoolRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w\s+=,.@-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string PoolName { get; set; }
		
		/// <summary>
		/// The policy associated with a user pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserPoolPolicyType Policies { get; set; }
		
		/// <summary>
		/// Specifies the configuration for AWS Lambda triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LambdaConfigType LambdaConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VerifiedAttributeType[] AutoVerifiedAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AliasAttributeType[] AliasAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsernameAttributeType[] UsernameAttributes { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 6
		/// Pattern: .*\{####\}.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=6)]
		public string SmsVerificationMessage { get; set; }
		
		/// <summary>
		/// Max length: 20000
		/// Min length: 6
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*\{####\}[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20000, MinimumLength=6)]
		public string EmailVerificationMessage { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}\s]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string EmailVerificationSubject { get; set; }
		
		/// <summary>
		/// The template for verification messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VerificationMessageTemplateType VerificationMessageTemplate { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 6
		/// Pattern: .*\{####\}.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=6)]
		public string SmsAuthenticationMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateUserPoolRequestMfaConfiguration MfaConfiguration { get; set; }
		
		/// <summary>
		/// The configuration for the user pool's device tracking.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceConfigurationType DeviceConfiguration { get; set; }
		
		/// <summary>
		/// The email configuration type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmailConfigurationType EmailConfiguration { get; set; }
		
		/// <summary>
		/// The SMS configuration type that includes the settings the Cognito User Pool needs to call for the Amazon SNS service to send an SMS message from your AWS account. The Cognito User Pool makes the request to the Amazon SNS Service by using an AWS IAM role that you provide for your AWS account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SmsConfigurationType SmsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserPoolTagsType UserPoolTags { get; set; }
		
		/// <summary>
		/// The configuration for creating a new user profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AdminCreateUserConfigType AdminCreateUserConfig { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public SchemaAttributeType[] Schema { get; set; }
		
		/// <summary>
		/// The user pool add-ons type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserPoolAddOnsType UserPoolAddOns { get; set; }
		
		/// <summary>
		/// The username configuration type. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UsernameConfigurationType UsernameConfiguration { get; set; }
		
		/// <summary>
		/// The data type for <code>AccountRecoverySetting</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountRecoverySettingType AccountRecoverySetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateUserPoolRequestMfaConfiguration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONAL = 2,
	}
	
	/// <summary>
	/// Represents the response from the server to create a user pool client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUserPoolClientResponse
	{
		
		/// <summary>
		/// Contains information about a user pool client.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserPoolClientType UserPoolClient { get; set; }
	}
	
	/// <summary>
	/// Represents the request to create a user pool client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUserPoolClientRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w\s+=,.@-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> GenerateSecret { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 3650
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 3650)]
		public System.Nullable<System.Int32> RefreshTokenValidity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientPermissionType[] ReadAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientPermissionType[] WriteAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExplicitAuthFlowsType[] ExplicitAuthFlows { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProviderNameType[] SupportedIdentityProviders { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public RedirectUrlType[] CallbackURLs { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public RedirectUrlType[] LogoutURLs { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string DefaultRedirectURI { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public OAuthFlowType[] AllowedOAuthFlows { get; set; }
		
		/// <summary>
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public ScopeType[] AllowedOAuthScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowedOAuthFlowsUserPoolClient { get; set; }
		
		/// <summary>
		/// <p>The Amazon Pinpoint analytics configuration for collecting metrics for a user pool.</p> <note> <p>Cognito User Pools only supports sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the region in which the user pool resides.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsConfigurationType AnalyticsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateUserPoolClientRequestPreventUserExistenceErrors PreventUserExistenceErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateUserPoolClientRequestPreventUserExistenceErrors
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGACY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUserPoolDomainResponse
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string CloudFrontDomain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUserPoolDomainRequest
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomDomainConfigType CustomDomainConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteGroupRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteIdentityProviderRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string ProviderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteResourceServerRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\x21\x23-\x5B\x5D-\x7E]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Identifier { get; set; }
	}
	
	/// <summary>
	/// Represents the request to delete a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteUserRequest
	{
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
	}
	
	/// <summary>
	/// Represents the request to delete user attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteUserAttributesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeNameType[] UserAttributeNames { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
	}
	
	/// <summary>
	/// Represents the request to delete a user pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteUserPoolRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
	}
	
	/// <summary>
	/// Represents the request to delete a user pool client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteUserPoolClientRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteUserPoolDomainRequest
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIdentityProviderResponse
	{
		
		/// <summary>
		/// A container for information about an identity provider.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IdentityProviderType IdentityProvider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIdentityProviderRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string ProviderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeResourceServerResponse
	{
		
		/// <summary>
		/// A container for information about a resource server for a user pool.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceServerType ResourceServer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeResourceServerRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\x21\x23-\x5B\x5D-\x7E]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Identifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRiskConfigurationResponse
	{
		
		/// <summary>
		/// The risk configuration type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RiskConfigurationType RiskConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRiskConfigurationRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server to the request to describe the user import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeUserImportJobResponse
	{
		
		/// <summary>
		/// The user import job type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserImportJobType UserImportJob { get; set; }
	}
	
	/// <summary>
	/// Represents the request to describe the user import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeUserImportJobRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: import-[0-9a-zA-Z-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	/// <summary>
	/// Represents the response to describe the user pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeUserPoolResponse
	{
		
		/// <summary>
		/// A container for information about the user pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserPoolType UserPool { get; set; }
	}
	
	/// <summary>
	/// Represents the request to describe the user pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeUserPoolRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server from a request to describe the user pool client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeUserPoolClientResponse
	{
		
		/// <summary>
		/// Contains information about a user pool client.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserPoolClientType UserPoolClient { get; set; }
	}
	
	/// <summary>
	/// Represents the request to describe a user pool client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeUserPoolClientRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeUserPoolDomainResponse
	{
		
		/// <summary>
		/// A container for information about a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DomainDescriptionType DomainDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeUserPoolDomainRequest
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string Domain { get; set; }
	}
	
	/// <summary>
	/// Represents the request to forget the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ForgetDeviceRequest
	{
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string DeviceKey { get; set; }
	}
	
	/// <summary>
	/// Respresents the response from the server regarding the request to reset a password.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ForgotPasswordResponse
	{
		
		/// <summary>
		/// The code delivery details being returned from the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CodeDeliveryDetailsType CodeDeliveryDetails { get; set; }
	}
	
	/// <summary>
	/// Represents the request to reset a user's password.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ForgotPasswordRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+=/]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string SecretHash { get; set; }
		
		/// <summary>
		/// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContextDataType UserContextData { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// <p>An Amazon Pinpoint analytics endpoint.</p> <p>An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics.</p> <note> <p>Cognito User Pools only supports sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the region in which the user pool resides.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsMetadataType AnalyticsMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientMetadataType ClientMetadata { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server to the request to get the header information for the .csv file for the user import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCSVHeaderResponse
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringType[] CSVHeader { get; set; }
	}
	
	/// <summary>
	/// Represents the request to get the header information for the .csv file for the user import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCSVHeaderRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
	}
	
	/// <summary>
	/// Gets the device response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeviceResponse
	{
		
		/// <summary>
		/// The device type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeviceType Device { get; set; }
	}
	
	/// <summary>
	/// Represents the request to get the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeviceRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string DeviceKey { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetGroupResponse
	{
		
		/// <summary>
		/// The group type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GroupType Group { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetGroupRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetIdentityProviderByIdentifierResponse
	{
		
		/// <summary>
		/// A container for information about an identity provider.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IdentityProviderType IdentityProvider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetIdentityProviderByIdentifierRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// Pattern: [\w\s+=.@-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string IdpIdentifier { get; set; }
	}
	
	/// <summary>
	/// Response from Cognito for a signing certificate request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSigningCertificateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Certificate { get; set; }
	}
	
	/// <summary>
	/// Request to get a signing certificate from Cognito.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSigningCertificateRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetUICustomizationResponse
	{
		
		/// <summary>
		/// A container for the UI customization information for a user pool's built-in app UI.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UICustomizationType UICustomization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetUICustomizationRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server from the request to get information about the user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetUserResponse
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeType[] UserAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MFAOptionType[] MFAOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMfaSetting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringType[] UserMFASettingList { get; set; }
	}
	
	/// <summary>
	/// Represents the request to get information about the user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetUserRequest
	{
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
	}
	
	/// <summary>
	/// The verification code response returned by the server response to get the user attribute verification code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetUserAttributeVerificationCodeResponse
	{
		
		/// <summary>
		/// The code delivery details being returned from the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CodeDeliveryDetailsType CodeDeliveryDetails { get; set; }
	}
	
	/// <summary>
	/// Represents the request to get user attribute verification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetUserAttributeVerificationCodeRequest
	{
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientMetadataType ClientMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetUserPoolMfaConfigResponse
	{
		
		/// <summary>
		/// The SMS text message multi-factor authentication (MFA) configuration type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SmsMfaConfigType SmsMfaConfiguration { get; set; }
		
		/// <summary>
		/// The type used for enabling software token MFA at the user pool level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SoftwareTokenMfaConfigType SoftwareTokenMfaConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetUserPoolMfaConfigResponseMfaConfiguration MfaConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetUserPoolMfaConfigResponseMfaConfiguration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONAL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetUserPoolMfaConfigRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
	}
	
	/// <summary>
	/// Represents the request to sign out all devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GlobalSignOutRequest
	{
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
	}
	
	/// <summary>
	/// Initiates the authentication response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InitiateAuthResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InitiateAuthResponseChallengeName ChallengeName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string Session { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChallengeParametersType ChallengeParameters { get; set; }
		
		/// <summary>
		/// The authentication result.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationResultType AuthenticationResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InitiateAuthResponseChallengeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS_MFA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFTWARE_TOKEN_MFA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELECT_MFA_TYPE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MFA_SETUP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD_VERIFIER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_CHALLENGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_SRP_AUTH = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_PASSWORD_VERIFIER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_NO_SRP_AUTH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_PASSWORD_REQUIRED = 9,
	}
	
	/// <summary>
	/// Initiates the authentication request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InitiateAuthRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InitiateAuthRequestAuthFlow AuthFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthParametersType AuthParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientMetadataType ClientMetadata { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		/// <summary>
		/// <p>An Amazon Pinpoint analytics endpoint.</p> <p>An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics.</p> <note> <p>Cognito User Pools only supports sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the region in which the user pool resides.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsMetadataType AnalyticsMetadata { get; set; }
		
		/// <summary>
		/// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContextDataType UserContextData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InitiateAuthRequestAuthFlow
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_SRP_AUTH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFRESH_TOKEN_AUTH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFRESH_TOKEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_AUTH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_NO_SRP_AUTH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_PASSWORD_AUTH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_USER_PASSWORD_AUTH = 6,
	}
	
	/// <summary>
	/// Represents the response to list devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDevicesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceType[] Devices { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PaginationToken { get; set; }
	}
	
	/// <summary>
	/// Represents the request to list the devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDevicesRequest
	{
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 60)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PaginationToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroupType[] Groups { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListGroupsRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 60)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListIdentityProvidersResponse
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public ProviderDescription[] Providers { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListIdentityProvidersRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 60)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListResourceServersResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceServerType[] ResourceServers { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListResourceServersRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UserPoolTagsType Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ResourceArn { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server to the request to list the user import jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUserImportJobsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public UserImportJobType[] UserImportJobs { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PaginationToken { get; set; }
	}
	
	/// <summary>
	/// Represents the request to list the user import jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUserImportJobsRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 60
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 60)]
		public int MaxResults { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PaginationToken { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server that lists user pool clients.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUserPoolClientsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UserPoolClientDescription[] UserPoolClients { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the request to list the user pool clients.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUserPoolClientsRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 60)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the response to list user pools.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUserPoolsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UserPoolDescriptionType[] UserPools { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the request to list user pools.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUserPoolsRequest
	{
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 60
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 60)]
		public int MaxResults { get; set; }
	}
	
	/// <summary>
	/// The response from the request to list users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUsersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UserType[] Users { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PaginationToken { get; set; }
	}
	
	/// <summary>
	/// Represents the request to list users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUsersRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeNameType[] AttributesToGet { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 60)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PaginationToken { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUsersInGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UserType[] Users { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUsersInGroupRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 60)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The response from the server when the Amazon Cognito Your User Pools service makes the request to resend a confirmation code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResendConfirmationCodeResponse
	{
		
		/// <summary>
		/// The code delivery details being returned from the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CodeDeliveryDetailsType CodeDeliveryDetails { get; set; }
	}
	
	/// <summary>
	/// Represents the request to resend the confirmation code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResendConfirmationCodeRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+=/]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string SecretHash { get; set; }
		
		/// <summary>
		/// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContextDataType UserContextData { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// <p>An Amazon Pinpoint analytics endpoint.</p> <p>An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics.</p> <note> <p>Cognito User Pools only supports sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the region in which the user pool resides.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsMetadataType AnalyticsMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientMetadataType ClientMetadata { get; set; }
	}
	
	/// <summary>
	/// The response to respond to the authentication challenge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RespondToAuthChallengeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RespondToAuthChallengeResponseChallengeName ChallengeName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string Session { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChallengeParametersType ChallengeParameters { get; set; }
		
		/// <summary>
		/// The authentication result.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationResultType AuthenticationResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RespondToAuthChallengeResponseChallengeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS_MFA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFTWARE_TOKEN_MFA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELECT_MFA_TYPE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MFA_SETUP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD_VERIFIER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_CHALLENGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_SRP_AUTH = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_PASSWORD_VERIFIER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_NO_SRP_AUTH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_PASSWORD_REQUIRED = 9,
	}
	
	/// <summary>
	/// The request to respond to an authentication challenge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RespondToAuthChallengeRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RespondToAuthChallengeRequestChallengeName ChallengeName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string Session { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChallengeResponsesType ChallengeResponses { get; set; }
		
		/// <summary>
		/// <p>An Amazon Pinpoint analytics endpoint.</p> <p>An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics.</p> <note> <p>Cognito User Pools only supports sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the region in which the user pool resides.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsMetadataType AnalyticsMetadata { get; set; }
		
		/// <summary>
		/// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContextDataType UserContextData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientMetadataType ClientMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RespondToAuthChallengeRequestChallengeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS_MFA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFTWARE_TOKEN_MFA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELECT_MFA_TYPE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MFA_SETUP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD_VERIFIER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_CHALLENGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_SRP_AUTH = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_PASSWORD_VERIFIER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_NO_SRP_AUTH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_PASSWORD_REQUIRED = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetRiskConfigurationResponse
	{
		
		/// <summary>
		/// The risk configuration type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RiskConfigurationType RiskConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetRiskConfigurationRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The compromised credentials risk configuration type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CompromisedCredentialsRiskConfigurationType CompromisedCredentialsRiskConfiguration { get; set; }
		
		/// <summary>
		/// Configuration for mitigation actions and notification for different levels of risk detected for a potential account takeover.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountTakeoverRiskConfigurationType AccountTakeoverRiskConfiguration { get; set; }
		
		/// <summary>
		/// The type of the configuration to override the risk decision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RiskExceptionConfigurationType RiskExceptionConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetUICustomizationResponse
	{
		
		/// <summary>
		/// A container for the UI customization information for a user pool's built-in app UI.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UICustomizationType UICustomization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetUICustomizationRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CSS { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageFile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetUserMFAPreferenceRequest
	{
		
		/// <summary>
		/// The type used for enabling SMS MFA at the user level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SMSMfaSettingsType SMSMfaSettings { get; set; }
		
		/// <summary>
		/// The type used for enabling software token MFA at the user level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SoftwareTokenMfaSettingsType SoftwareTokenMfaSettings { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetUserPoolMfaConfigResponse
	{
		
		/// <summary>
		/// The SMS text message multi-factor authentication (MFA) configuration type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SmsMfaConfigType SmsMfaConfiguration { get; set; }
		
		/// <summary>
		/// The type used for enabling software token MFA at the user pool level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SoftwareTokenMfaConfigType SoftwareTokenMfaConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SetUserPoolMfaConfigResponseMfaConfiguration MfaConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SetUserPoolMfaConfigResponseMfaConfiguration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONAL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetUserPoolMfaConfigRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// The SMS text message multi-factor authentication (MFA) configuration type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SmsMfaConfigType SmsMfaConfiguration { get; set; }
		
		/// <summary>
		/// The type used for enabling software token MFA at the user pool level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SoftwareTokenMfaConfigType SoftwareTokenMfaConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SetUserPoolMfaConfigRequestMfaConfiguration MfaConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SetUserPoolMfaConfigRequestMfaConfiguration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONAL = 2,
	}
	
	/// <summary>
	/// Represents the request to set user settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetUserSettingsRequest
	{
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MFAOptionType[] MFAOptions { get; set; }
	}
	
	/// <summary>
	/// The response from the server for a registration request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SignUpResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool UserConfirmed { get; set; }
		
		/// <summary>
		/// The code delivery details being returned from the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CodeDeliveryDetailsType CodeDeliveryDetails { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserSub { get; set; }
	}
	
	/// <summary>
	/// Represents the request to register a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SignUpRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+=/]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string SecretHash { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 6
		/// Pattern: [\S]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=6)]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeType[] UserAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeType[] ValidationData { get; set; }
		
		/// <summary>
		/// <p>An Amazon Pinpoint analytics endpoint.</p> <p>An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics.</p> <note> <p>Cognito User Pools only supports sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the region in which the user pool resides.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsMetadataType AnalyticsMetadata { get; set; }
		
		/// <summary>
		/// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserContextDataType UserContextData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientMetadataType ClientMetadata { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server to the request to start the user import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartUserImportJobResponse
	{
		
		/// <summary>
		/// The user import job type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserImportJobType UserImportJob { get; set; }
	}
	
	/// <summary>
	/// Represents the request to start the user import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartUserImportJobRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: import-[0-9a-zA-Z-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server to the request to stop the user import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopUserImportJobResponse
	{
		
		/// <summary>
		/// The user import job type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserImportJobType UserImportJob { get; set; }
	}
	
	/// <summary>
	/// Represents the request to stop the user import job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopUserImportJobRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: import-[0-9a-zA-Z-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ResourceArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UserPoolTagsType Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ResourceArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagKeysType[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAuthEventFeedbackRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// Pattern: [\w+-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string EventId { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FeedbackToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateAuthEventFeedbackRequestFeedbackValue FeedbackValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateAuthEventFeedbackRequestFeedbackValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Valid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 1,
	}
	
	/// <summary>
	/// Represents the request to update the device status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDeviceStatusRequest
	{
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-f-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string DeviceKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateDeviceStatusRequestDeviceRememberedStatus DeviceRememberedStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateDeviceStatusRequestDeviceRememberedStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		remembered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not_remembered = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateGroupResponse
	{
		
		/// <summary>
		/// The group type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GroupType Group { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateGroupRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Precedence { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateIdentityProviderResponse
	{
		
		/// <summary>
		/// A container for information about an identity provider.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IdentityProviderType IdentityProvider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateIdentityProviderRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProviderDetailsType ProviderDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeMappingType AttributeMapping { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public IdpIdentifierType[] IdpIdentifiers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateResourceServerResponse
	{
		
		/// <summary>
		/// A container for information about a resource server for a user pool.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceServerType ResourceServer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateResourceServerRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\x21\x23-\x5B\x5D-\x7E]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Identifier { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\s+=,.@-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ResourceServerScopeType[] Scopes { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server for the request to update user attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserAttributesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CodeDeliveryDetailsType[] CodeDeliveryDetailsList { get; set; }
	}
	
	/// <summary>
	/// Represents the request to update user attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserAttributesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AttributeType[] UserAttributes { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientMetadataType ClientMetadata { get; set; }
	}
	
	/// <summary>
	/// Represents the request to update the user pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserPoolRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// The policy associated with a user pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserPoolPolicyType Policies { get; set; }
		
		/// <summary>
		/// Specifies the configuration for AWS Lambda triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LambdaConfigType LambdaConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VerifiedAttributeType[] AutoVerifiedAttributes { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 6
		/// Pattern: .*\{####\}.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=6)]
		public string SmsVerificationMessage { get; set; }
		
		/// <summary>
		/// Max length: 20000
		/// Min length: 6
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*\{####\}[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20000, MinimumLength=6)]
		public string EmailVerificationMessage { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}\s]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string EmailVerificationSubject { get; set; }
		
		/// <summary>
		/// The template for verification messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VerificationMessageTemplateType VerificationMessageTemplate { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 6
		/// Pattern: .*\{####\}.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=6)]
		public string SmsAuthenticationMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateUserPoolRequestMfaConfiguration MfaConfiguration { get; set; }
		
		/// <summary>
		/// The configuration for the user pool's device tracking.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceConfigurationType DeviceConfiguration { get; set; }
		
		/// <summary>
		/// The email configuration type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmailConfigurationType EmailConfiguration { get; set; }
		
		/// <summary>
		/// The SMS configuration type that includes the settings the Cognito User Pool needs to call for the Amazon SNS service to send an SMS message from your AWS account. The Cognito User Pool makes the request to the Amazon SNS Service by using an AWS IAM role that you provide for your AWS account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SmsConfigurationType SmsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserPoolTagsType UserPoolTags { get; set; }
		
		/// <summary>
		/// The configuration for creating a new user profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AdminCreateUserConfigType AdminCreateUserConfig { get; set; }
		
		/// <summary>
		/// The user pool add-ons type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserPoolAddOnsType UserPoolAddOns { get; set; }
		
		/// <summary>
		/// The data type for <code>AccountRecoverySetting</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountRecoverySettingType AccountRecoverySetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateUserPoolRequestMfaConfiguration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONAL = 2,
	}
	
	/// <summary>
	/// Represents the response from the server to the request to update the user pool client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserPoolClientResponse
	{
		
		/// <summary>
		/// Contains information about a user pool client.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserPoolClientType UserPoolClient { get; set; }
	}
	
	/// <summary>
	/// Represents the request to update the user pool client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserPoolClientRequest
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w\s+=,.@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientName { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 3650
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 3650)]
		public System.Nullable<System.Int32> RefreshTokenValidity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientPermissionType[] ReadAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientPermissionType[] WriteAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExplicitAuthFlowsType[] ExplicitAuthFlows { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProviderNameType[] SupportedIdentityProviders { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public RedirectUrlType[] CallbackURLs { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public RedirectUrlType[] LogoutURLs { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string DefaultRedirectURI { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public OAuthFlowType[] AllowedOAuthFlows { get; set; }
		
		/// <summary>
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public ScopeType[] AllowedOAuthScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowedOAuthFlowsUserPoolClient { get; set; }
		
		/// <summary>
		/// <p>The Amazon Pinpoint analytics configuration for collecting metrics for a user pool.</p> <note> <p>Cognito User Pools only supports sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the region in which the user pool resides.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsConfigurationType AnalyticsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateUserPoolClientRequestPreventUserExistenceErrors PreventUserExistenceErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateUserPoolClientRequestPreventUserExistenceErrors
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGACY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// The UpdateUserPoolDomain response output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserPoolDomainResponse
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string CloudFrontDomain { get; set; }
	}
	
	/// <summary>
	/// The UpdateUserPoolDomain request input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserPoolDomainRequest
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CustomDomainConfigType CustomDomainConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VerifySoftwareTokenResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VerifySoftwareTokenResponseStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string Session { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VerifySoftwareTokenResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VerifySoftwareTokenRequest
	{
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string Session { get; set; }
		
		/// <summary>
		/// Max length: 6
		/// Min length: 6
		/// Pattern: [0-9]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength=6)]
		public string UserCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FriendlyDeviceName { get; set; }
	}
	
	/// <summary>
	/// Represents the request to verify user attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VerifyUserAttributeRequest
	{
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string AttributeName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Code { get; set; }
	}
	
	/// <summary>
	/// The data type for <code>AccountRecoverySetting</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountRecoverySettingType
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public RecoveryOptionType[] RecoveryMechanisms { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountTakeoverEventActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MFA_IF_CONFIGURED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MFA_REQUIRED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_ACTION = 3,
	}
	
	/// <summary>
	/// Account takeover action type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountTakeoverActionType
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Notify { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountTakeoverActionTypeEventAction EventAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountTakeoverActionTypeEventAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MFA_IF_CONFIGURED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MFA_REQUIRED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_ACTION = 3,
	}
	
	/// <summary>
	/// Account takeover actions type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountTakeoverActionsType
	{
		
		/// <summary>
		/// Account takeover action type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountTakeoverActionType LowAction { get; set; }
		
		/// <summary>
		/// Account takeover action type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountTakeoverActionType MediumAction { get; set; }
		
		/// <summary>
		/// Account takeover action type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountTakeoverActionType HighAction { get; set; }
	}
	
	/// <summary>
	/// The notify configuration type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NotifyConfigurationType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplyTo { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string SourceArn { get; set; }
		
		/// <summary>
		/// The notify email type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NotifyEmailType BlockEmail { get; set; }
		
		/// <summary>
		/// The notify email type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NotifyEmailType NoActionEmail { get; set; }
		
		/// <summary>
		/// The notify email type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NotifyEmailType MfaEmail { get; set; }
	}
	
	/// <summary>
	/// Configuration for mitigation actions and notification for different levels of risk detected for a potential account takeover.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountTakeoverRiskConfigurationType
	{
		
		/// <summary>
		/// The notify configuration type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NotifyConfigurationType NotifyConfiguration { get; set; }
		
		/// <summary>
		/// Account takeover actions type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountTakeoverActionsType Actions { get; set; }
	}
	
	/// <summary>
	/// The message template structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MessageTemplateType
	{
		
		/// <summary>
		/// Max length: 140
		/// Min length: 6
		/// Pattern: .*\{####\}.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=6)]
		public string SMSMessage { get; set; }
		
		/// <summary>
		/// Max length: 20000
		/// Min length: 6
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*\{####\}[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20000, MinimumLength=6)]
		public string EmailMessage { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}\s]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string EmailSubject { get; set; }
	}
	
	/// <summary>
	/// The configuration for creating a new user profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdminCreateUserConfigType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowAdminCreateUserOnly { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 365
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 365)]
		public System.Nullable<System.Int32> UnusedAccountValidityDays { get; set; }
		
		/// <summary>
		/// The message template structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MessageTemplateType InviteMessageTemplate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MessageActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESEND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPPRESS = 1,
	}
	
	/// <summary>
	/// The user type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserType
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeType[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UserCreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UserLastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserTypeUserStatus UserStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MFAOptionType[] MFAOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserTypeUserStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNCONFIRMED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIRMED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPROMISED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESET_REQUIRED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_CHANGE_PASSWORD = 6,
	}
	
	/// <summary>
	/// A container for information about an identity provider for a user pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProviderUserIdentifierType
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderAttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderAttributeValue { get; set; }
	}
	
	/// <summary>
	/// The device type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeviceType
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-f-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string DeviceKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeType[] DeviceAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeviceCreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeviceLastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeviceLastAuthenticatedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNCONFIRMED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIRMED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPROMISED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESET_REQUIRED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_CHANGE_PASSWORD = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthFlowType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_SRP_AUTH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFRESH_TOKEN_AUTH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFRESH_TOKEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_AUTH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_NO_SRP_AUTH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_PASSWORD_AUTH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_USER_PASSWORD_AUTH = 6,
	}
	
	/// <summary>
	/// <p>An Amazon Pinpoint analytics endpoint.</p> <p>An endpoint uniquely identifies a mobile device, email address, or phone number that can receive messages from Amazon Pinpoint analytics.</p> <note> <p>Cognito User Pools only supports sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the region in which the user pool resides.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AnalyticsMetadataType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AnalyticsEndpointId { get; set; }
	}
	
	/// <summary>
	/// Contextual user data type used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContextDataType
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServerPath { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HttpHeader[] HttpHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncodedData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChallengeNameType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS_MFA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFTWARE_TOKEN_MFA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELECT_MFA_TYPE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MFA_SETUP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD_VERIFIER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_CHALLENGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_SRP_AUTH = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_PASSWORD_VERIFIER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_NO_SRP_AUTH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_PASSWORD_REQUIRED = 9,
	}
	
	/// <summary>
	/// The authentication result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthenticationResultType
	{
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpiresIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TokenType { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RefreshToken { get; set; }
		
		/// <summary>
		/// Pattern: [A-Za-z0-9-_=.]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IdToken { get; set; }
		
		/// <summary>
		/// The new device metadata type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NewDeviceMetadataType NewDeviceMetadata { get; set; }
	}
	
	/// <summary>
	/// The type used for enabling SMS MFA at the user level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SMSMfaSettingsType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PreferredMfa { get; set; }
	}
	
	/// <summary>
	/// The type used for enabling software token MFA at the user level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SoftwareTokenMfaSettingsType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PreferredMfa { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FeedbackValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Valid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeviceRememberedStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		remembered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not_remembered = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdvancedSecurityModeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENFORCED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AliasAttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		phone_number = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		email = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		preferred_username = 2,
	}
	
	/// <summary>
	/// <p>The Amazon Pinpoint analytics configuration for collecting metrics for a user pool.</p> <note> <p>Cognito User Pools only supports sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the region in which the user pool resides.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AnalyticsConfigurationType
	{
		
		/// <summary>
		/// Pattern: ^[0-9a-fA-F]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExternalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UserDataShared { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AttributeDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Number = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DateTime = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Boolean = 3,
	}
	
	/// <summary>
	/// Specifies whether the attribute is standard or custom.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttributeType
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignIn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignUp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForgotPassword = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failure = 1,
	}
	
	/// <summary>
	/// The event risk type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventRiskType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventRiskTypeRiskDecision RiskDecision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventRiskTypeRiskLevel RiskLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CompromisedCredentialsDetected { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventRiskTypeRiskDecision
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoRisk = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccountTakeover = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Block = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventRiskTypeRiskLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Low = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		High = 2,
	}
	
	/// <summary>
	/// Specifies the user context data captured at the time of an event request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventContextDataType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
	}
	
	/// <summary>
	/// Specifies the event feedback type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventFeedbackType
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EventFeedbackTypeFeedbackValue FeedbackValue { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Provider { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FeedbackDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventFeedbackTypeFeedbackValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Valid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 1,
	}
	
	/// <summary>
	/// The authentication event type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthEventType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthEventTypeEventType EventType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthEventTypeEventResponse EventResponse { get; set; }
		
		/// <summary>
		/// The event risk type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventRiskType EventRisk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChallengeResponseType[] ChallengeResponses { get; set; }
		
		/// <summary>
		/// Specifies the user context data captured at the time of an event request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventContextDataType EventContextData { get; set; }
		
		/// <summary>
		/// Specifies the event feedback type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventFeedbackType EventFeedback { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthEventTypeEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignIn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignUp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForgotPassword = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthEventTypeEventResponse
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failure = 1,
	}
	
	/// <summary>
	/// The new device metadata type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewDeviceMetadataType
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-f-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string DeviceKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceGroupKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChallengeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Password = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mfa = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChallengeResponse
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failure = 1,
	}
	
	/// <summary>
	/// The challenge response type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChallengeResponseType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ChallengeResponseTypeChallengeName ChallengeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChallengeResponseTypeChallengeResponse ChallengeResponse { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChallengeResponseTypeChallengeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Password = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mfa = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChallengeResponseTypeChallengeResponse
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failure = 1,
	}
	
	/// <summary>
	/// The code delivery details being returned from the server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CodeDeliveryDetailsType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CodeDeliveryDetailsTypeDeliveryMedium DeliveryMedium { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string AttributeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CodeDeliveryDetailsTypeDeliveryMedium
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeliveryMediumType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CompromisedCredentialsEventActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_ACTION = 1,
	}
	
	/// <summary>
	/// The compromised credentials actions type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CompromisedCredentialsActionsType
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CompromisedCredentialsActionsTypeEventAction EventAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CompromisedCredentialsActionsTypeEventAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_ACTION = 1,
	}
	
	/// <summary>
	/// The compromised credentials risk configuration type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CompromisedCredentialsRiskConfigurationType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventFilterType[] EventFilter { get; set; }
		
		/// <summary>
		/// The compromised credentials actions type
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CompromisedCredentialsActionsType Actions { get; set; }
	}
	
	/// <summary>
	/// The device verifier against which it will be authenticated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeviceSecretVerifierConfigType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PasswordVerifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Salt { get; set; }
	}
	
	/// <summary>
	/// Contextual data such as the user's device fingerprint, IP address, or location used for evaluating the risk of an unexpected event by Amazon Cognito advanced security.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserContextDataType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EncodedData { get; set; }
	}
	
	/// <summary>
	/// The group type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GroupType
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Precedence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IdentityProviderTypeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAML = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Facebook = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Google = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoginWithAmazon = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignInWithApple = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OIDC = 5,
	}
	
	/// <summary>
	/// A container for information about an identity provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IdentityProviderType
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityProviderTypeProviderType ProviderType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProviderDetailsType ProviderDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeMappingType AttributeMapping { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public IdpIdentifierType[] IdpIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IdentityProviderTypeProviderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAML = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Facebook = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Google = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoginWithAmazon = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignInWithApple = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OIDC = 5,
	}
	
	/// <summary>
	/// A container for information about a resource server for a user pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceServerType
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\x21\x23-\x5B\x5D-\x7E]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Identifier { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\w\s+=,.@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ResourceServerScopeType[] Scopes { get; set; }
	}
	
	/// <summary>
	/// The user import job type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserImportJobType
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w\s+=,.@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string JobName { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: import-[0-9a-zA-Z-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string JobId { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string PreSignedUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserImportJobTypeStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CloudWatchLogsRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ImportedUsers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SkippedUsers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FailedUsers { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string CompletionMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserImportJobTypeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expired = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PreventUserExistenceErrorTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGACY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Contains information about a user pool client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserPoolClientType
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w\s+=,.@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientName { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientSecret { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 3650
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 3650)]
		public System.Nullable<System.Int32> RefreshTokenValidity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientPermissionType[] ReadAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientPermissionType[] WriteAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExplicitAuthFlowsType[] ExplicitAuthFlows { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProviderNameType[] SupportedIdentityProviders { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public RedirectUrlType[] CallbackURLs { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public RedirectUrlType[] LogoutURLs { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string DefaultRedirectURI { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public OAuthFlowType[] AllowedOAuthFlows { get; set; }
		
		/// <summary>
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public ScopeType[] AllowedOAuthScopes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowedOAuthFlowsUserPoolClient { get; set; }
		
		/// <summary>
		/// <p>The Amazon Pinpoint analytics configuration for collecting metrics for a user pool.</p> <note> <p>Cognito User Pools only supports sending events to Amazon Pinpoint projects in the US East (N. Virginia) us-east-1 Region, regardless of the region in which the user pool resides.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsConfigurationType AnalyticsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserPoolClientTypePreventUserExistenceErrors PreventUserExistenceErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserPoolClientTypePreventUserExistenceErrors
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGACY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomDomainConfigType
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CertificateArn { get; set; }
	}
	
	/// <summary>
	/// The policy associated with a user pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserPoolPolicyType
	{
		
		/// <summary>
		/// The password policy type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PasswordPolicyType PasswordPolicy { get; set; }
	}
	
	/// <summary>
	/// Specifies the configuration for AWS Lambda triggers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LambdaConfigType
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string PreSignUp { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CustomMessage { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string PostConfirmation { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string PreAuthentication { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string PostAuthentication { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string DefineAuthChallenge { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CreateAuthChallenge { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string VerifyAuthChallengeResponse { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string PreTokenGeneration { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string UserMigration { get; set; }
	}
	
	/// <summary>
	/// The template for verification messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VerificationMessageTemplateType
	{
		
		/// <summary>
		/// Max length: 140
		/// Min length: 6
		/// Pattern: .*\{####\}.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=6)]
		public string SmsMessage { get; set; }
		
		/// <summary>
		/// Max length: 20000
		/// Min length: 6
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*\{####\}[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20000, MinimumLength=6)]
		public string EmailMessage { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}\s]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string EmailSubject { get; set; }
		
		/// <summary>
		/// Max length: 20000
		/// Min length: 6
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*\{##[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*##\}[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20000, MinimumLength=6)]
		public string EmailMessageByLink { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}\s]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string EmailSubjectByLink { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VerificationMessageTemplateTypeDefaultEmailOption DefaultEmailOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VerificationMessageTemplateTypeDefaultEmailOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIRM_WITH_LINK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIRM_WITH_CODE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserPoolMfaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONAL = 2,
	}
	
	/// <summary>
	/// The configuration for the user pool's device tracking.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeviceConfigurationType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ChallengeRequiredOnNewDevice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeviceOnlyRememberedOnUserPrompt { get; set; }
	}
	
	/// <summary>
	/// The email configuration type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EmailConfigurationType
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string SourceArn { get; set; }
		
		/// <summary>
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+@[\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReplyToEmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EmailConfigurationTypeEmailSendingAccount EmailSendingAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string From { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9_-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ConfigurationSet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EmailConfigurationTypeEmailSendingAccount
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COGNITO_DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPER = 1,
	}
	
	/// <summary>
	/// The SMS configuration type that includes the settings the Cognito User Pool needs to call for the Amazon SNS service to send an SMS message from your AWS account. The Cognito User Pool makes the request to the Amazon SNS Service by using an AWS IAM role that you provide for your AWS account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SmsConfigurationType
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string SnsCallerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExternalId { get; set; }
	}
	
	/// <summary>
	/// The user pool add-ons type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserPoolAddOnsType
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UserPoolAddOnsTypeAdvancedSecurityMode AdvancedSecurityMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserPoolAddOnsTypeAdvancedSecurityMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENFORCED = 2,
	}
	
	/// <summary>
	/// The username configuration type. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UsernameConfigurationType
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool CaseSensitive { get; set; }
	}
	
	/// <summary>
	/// A container for information about the user pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserPoolType
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w\s+=,.@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The policy associated with a user pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserPoolPolicyType Policies { get; set; }
		
		/// <summary>
		/// Specifies the configuration for AWS Lambda triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LambdaConfigType LambdaConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserPoolTypeStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public SchemaAttributeType[] SchemaAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VerifiedAttributeType[] AutoVerifiedAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AliasAttributeType[] AliasAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsernameAttributeType[] UsernameAttributes { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 6
		/// Pattern: .*\{####\}.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=6)]
		public string SmsVerificationMessage { get; set; }
		
		/// <summary>
		/// Max length: 20000
		/// Min length: 6
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*\{####\}[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20000, MinimumLength=6)]
		public string EmailVerificationMessage { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}\s]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string EmailVerificationSubject { get; set; }
		
		/// <summary>
		/// The template for verification messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VerificationMessageTemplateType VerificationMessageTemplate { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 6
		/// Pattern: .*\{####\}.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=6)]
		public string SmsAuthenticationMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserPoolTypeMfaConfiguration MfaConfiguration { get; set; }
		
		/// <summary>
		/// The configuration for the user pool's device tracking.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceConfigurationType DeviceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EstimatedNumberOfUsers { get; set; }
		
		/// <summary>
		/// The email configuration type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmailConfigurationType EmailConfiguration { get; set; }
		
		/// <summary>
		/// The SMS configuration type that includes the settings the Cognito User Pool needs to call for the Amazon SNS service to send an SMS message from your AWS account. The Cognito User Pool makes the request to the Amazon SNS Service by using an AWS IAM role that you provide for your AWS account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SmsConfigurationType SmsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserPoolTagsType UserPoolTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SmsConfigurationFailure { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EmailConfigurationFailure { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string CustomDomain { get; set; }
		
		/// <summary>
		/// The configuration for creating a new user profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AdminCreateUserConfigType AdminCreateUserConfig { get; set; }
		
		/// <summary>
		/// The user pool add-ons type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserPoolAddOnsType UserPoolAddOns { get; set; }
		
		/// <summary>
		/// The username configuration type. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UsernameConfigurationType UsernameConfiguration { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string Arn { get; set; }
		
		/// <summary>
		/// The data type for <code>AccountRecoverySetting</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountRecoverySettingType AccountRecoverySetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserPoolTypeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserPoolTypeMfaConfiguration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPTIONAL = 2,
	}
	
	/// <summary>
	/// Contains information about the schema attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SchemaAttributeType
	{
		
		/// <summary>
		/// Max length: 20
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SchemaAttributeTypeAttributeDataType AttributeDataType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeveloperOnlyAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Mutable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		/// <summary>
		/// The minimum and maximum value of an attribute that is of the number data type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NumberAttributeConstraintsType NumberAttributeConstraints { get; set; }
		
		/// <summary>
		/// The constraints associated with a string attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StringAttributeConstraintsType StringAttributeConstraints { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SchemaAttributeTypeAttributeDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Number = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DateTime = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Boolean = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DefaultEmailOptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIRM_WITH_LINK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIRM_WITH_CODE = 1,
	}
	
	/// <summary>
	/// The risk configuration type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RiskConfigurationType
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The compromised credentials risk configuration type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CompromisedCredentialsRiskConfigurationType CompromisedCredentialsRiskConfiguration { get; set; }
		
		/// <summary>
		/// Configuration for mitigation actions and notification for different levels of risk detected for a potential account takeover.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountTakeoverRiskConfigurationType AccountTakeoverRiskConfiguration { get; set; }
		
		/// <summary>
		/// The type of the configuration to override the risk decision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RiskExceptionConfigurationType RiskExceptionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
	}
	
	/// <summary>
	/// A container for information about a domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainDescriptionType
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AWSAccountId { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string Domain { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 3
		/// Pattern: ^[0-9A-Za-z\.\-_]*(?<!\.)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=3)]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CloudFrontDistribution { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=1)]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainDescriptionTypeStatus Status { get; set; }
		
		/// <summary>
		/// The configuration for a custom domain that hosts the sign-up and sign-in webpages for your application.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomDomainConfigType CustomDomainConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainDescriptionTypeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EmailSendingAccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COGNITO_DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGN_IN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD_CHANGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGN_UP = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RiskDecisionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoRisk = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccountTakeover = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Block = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RiskLevelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Low = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Medium = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		High = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExplicitAuthFlowsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_NO_SRP_AUTH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_AUTH_FLOW_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_PASSWORD_AUTH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_ADMIN_USER_PASSWORD_AUTH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_CUSTOM_AUTH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_USER_PASSWORD_AUTH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_USER_SRP_AUTH = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_REFRESH_TOKEN_AUTH = 7,
	}
	
	/// <summary>
	/// A container for the UI customization information for a user pool's built-in app UI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UICustomizationType
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CSS { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CSSVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	/// <summary>
	/// The SMS text message multi-factor authentication (MFA) configuration type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SmsMfaConfigType
	{
		
		/// <summary>
		/// Max length: 140
		/// Min length: 6
		/// Pattern: .*\{####\}.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=6)]
		public string SmsAuthenticationMessage { get; set; }
		
		/// <summary>
		/// The SMS configuration type that includes the settings the Cognito User Pool needs to call for the Amazon SNS service to send an SMS message from your AWS account. The Cognito User Pool makes the request to the Amazon SNS Service by using an AWS IAM role that you provide for your AWS account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SmsConfigurationType SmsConfiguration { get; set; }
	}
	
	/// <summary>
	/// The type used for enabling software token MFA at the user pool level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SoftwareTokenMfaConfigType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// The HTTP header.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HttpHeader
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HeaderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HeaderValue { get; set; }
	}
	
	/// <summary>
	/// <p> <i>This data type is no longer supported.</i> You can use it only for SMS MFA configurations. You can't use it for TOTP software token MFA configurations.</p> <p>To set either type of MFA configuration, use the <a>AdminSetUserMFAPreference</a> or <a>SetUserMFAPreference</a> actions.</p> <p>To look up information about either type of MFA configuration, use the <a>AdminGetUserResponse$UserMFASettingList</a> or <a>GetUserResponse$UserMFASettingList</a> responses.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MFAOptionType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MFAOptionTypeDeliveryMedium DeliveryMedium { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string AttributeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MFAOptionTypeDeliveryMedium
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 1,
	}
	
	/// <summary>
	/// The notify email type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NotifyEmailType
	{
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}\s]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string Subject { get; set; }
		
		/// <summary>
		/// Max length: 20000
		/// Min length: 6
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}\s*]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20000, MinimumLength=6)]
		public string HtmlBody { get; set; }
		
		/// <summary>
		/// Max length: 20000
		/// Min length: 6
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}\s*]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20000, MinimumLength=6)]
		public string TextBody { get; set; }
	}
	
	/// <summary>
	/// The minimum and maximum value of an attribute that is of the number data type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NumberAttributeConstraintsType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MinValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OAuthFlowType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		code = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@implicit = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		client_credentials = 2,
	}
	
	/// <summary>
	/// The password policy type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PasswordPolicyType
	{
		
		/// <summary>
		/// Minimum: 6
		/// Maximum: 99
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(6, 99)]
		public System.Nullable<System.Int32> MinimumLength { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequireUppercase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequireLowercase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequireNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequireSymbols { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 365
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 365)]
		public System.Nullable<System.Int32> TemporaryPasswordValidityDays { get; set; }
	}
	
	/// <summary>
	/// A container for identity provider details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProviderDescription
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// Pattern: [\p{L}\p{M}\p{S}\p{N}\p{P}]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProviderDescriptionProviderType ProviderType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProviderDescriptionProviderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAML = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Facebook = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Google = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoginWithAmazon = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignInWithApple = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OIDC = 5,
	}
	
	/// <summary>
	/// A map containing a priority as a key, and recovery method name as a value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RecoveryOptionType
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2)]
		public int Priority { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecoveryOptionTypeName Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RecoveryOptionTypeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		verified_email = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		verified_phone_number = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		admin_only = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RecoveryOptionNameType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		verified_email = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		verified_phone_number = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		admin_only = 2,
	}
	
	/// <summary>
	/// A resource server scope.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceServerScopeType
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\x21\x23-\x2E\x30-\x5B\x5D-\x7E]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ScopeName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ScopeDescription { get; set; }
	}
	
	/// <summary>
	/// The type of the configuration to override the risk decision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RiskExceptionConfigurationType
	{
		
		/// <summary>
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public StringType[] BlockedIPRangeList { get; set; }
		
		/// <summary>
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public StringType[] SkippedIPRangeList { get; set; }
	}
	
	/// <summary>
	/// The constraints associated with a string attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StringAttributeConstraintsType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MinLength { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxLength { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserImportJobStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expired = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 7,
	}
	
	/// <summary>
	/// The description of the user pool client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserPoolClientDescription
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w+]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string UserPoolId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w\s+=,.@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ClientName { get; set; }
	}
	
	/// <summary>
	/// A user pool description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserPoolDescriptionType
	{
		
		/// <summary>
		/// Max length: 55
		/// Min length: 1
		/// Pattern: [\w-]+_[0-9a-zA-Z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(55, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\w\s+=,.@-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies the configuration for AWS Lambda triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LambdaConfigType LambdaConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserPoolDescriptionTypeStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserPoolDescriptionTypeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UsernameAttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		phone_number = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		email = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VerifiedAttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		phone_number = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		email = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VerifySoftwareTokenResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 1,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Adds additional user attributes to the user pool schema.
		/// AddCustomAttributes /#X-Amz-Target=AWSCognitoIdentityProviderService.AddCustomAttributes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddCustomAttributesResponse> AddCustomAttributesAsync(AddCustomAttributesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AddCustomAttributes";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AddCustomAttributesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Adds the specified user to the specified group.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminAddUserToGroup /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminAddUserToGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task AdminAddUserToGroupAsync(AdminAddUserToGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminAddUserToGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Confirms user registration as an admin without using a confirmation code. Works on any user.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminConfirmSignUp /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminConfirmSignUp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminConfirmSignUpResponse> AdminConfirmSignUpAsync(AdminConfirmSignUpRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminConfirmSignUp";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminConfirmSignUpResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new user in the specified user pool.</p> <p>If <code>MessageAction</code> is not set, the default is to send a welcome message via email or phone (SMS).</p> <note> <p>This message is based on a template that you configured in your call to or . This template includes your custom sign-up instructions and placeholders for user name and temporary password.</p> </note> <p>Alternatively, you can call AdminCreateUser with “SUPPRESS” for the <code>MessageAction</code> parameter, and Amazon Cognito will not send any email. </p> <p>In either case, the user will be in the <code>FORCE_CHANGE_PASSWORD</code> state until they sign in and change their password.</p> <p>AdminCreateUser requires developer credentials.</p>
		/// AdminCreateUser /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminCreateUser
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminCreateUserResponse> AdminCreateUserAsync(AdminCreateUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminCreateUser";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminCreateUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a user as an administrator. Works on any user.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminDeleteUser /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDeleteUser
		/// </summary>
		/// <returns>Success</returns>
		public async Task AdminDeleteUserAsync(AdminDeleteUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDeleteUser";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the user attributes in a user pool as an administrator. Works on any user.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminDeleteUserAttributes /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDeleteUserAttributes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminDeleteUserAttributesResponse> AdminDeleteUserAttributesAsync(AdminDeleteUserAttributesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDeleteUserAttributes";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminDeleteUserAttributesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Disables the user from signing in with the specified external (SAML or social) identity provider. If the user to disable is a Cognito User Pools native username + password user, they are not permitted to use their password to sign-in. If the user to disable is a linked external IdP user, any link between that user and an existing user is removed. The next time the external user (no longer attached to the previously linked <code>DestinationUser</code>) signs in, they must create a new user account. See .</p> <p>This action is enabled only for admin access and requires developer credentials.</p> <p>The <code>ProviderName</code> must match the value specified when creating an IdP for the pool. </p> <p>To disable a native username + password user, the <code>ProviderName</code> value must be <code>Cognito</code> and the <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code>, with the <code>ProviderAttributeValue</code> being the name that is used in the user pool for the user.</p> <p>The <code>ProviderAttributeName</code> must always be <code>Cognito_Subject</code> for social identity providers. The <code>ProviderAttributeValue</code> must always be the exact subject that was used when the user was originally linked as a source user.</p> <p>For de-linking a SAML identity, there are two scenarios. If the linked identity has not yet been used to sign-in, the <code>ProviderAttributeName</code> and <code>ProviderAttributeValue</code> must be the same values that were used for the <code>SourceUser</code> when the identities were originally linked in the call. (If the linking was done with <code>ProviderAttributeName</code> set to <code>Cognito_Subject</code>, the same applies here). However, if the user has already signed in, the <code>ProviderAttributeName</code> must be <code>Cognito_Subject</code> and <code>ProviderAttributeValue</code> must be the subject of the SAML assertion.</p>
		/// AdminDisableProviderForUser /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDisableProviderForUser
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminDisableProviderForUserResponse> AdminDisableProviderForUserAsync(AdminDisableProviderForUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDisableProviderForUser";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminDisableProviderForUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Disables the specified user.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminDisableUser /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDisableUser
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminDisableUserResponse> AdminDisableUserAsync(AdminDisableUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDisableUser";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminDisableUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Enables the specified user as an administrator. Works on any user.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminEnableUser /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminEnableUser
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminEnableUserResponse> AdminEnableUserAsync(AdminEnableUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminEnableUser";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminEnableUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Forgets the device, as an administrator.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminForgetDevice /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminForgetDevice
		/// </summary>
		/// <returns>Success</returns>
		public async Task AdminForgetDeviceAsync(AdminForgetDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminForgetDevice";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the device, as an administrator.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminGetDevice /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminGetDevice
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminGetDeviceResponse> AdminGetDeviceAsync(AdminGetDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminGetDevice";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminGetDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the specified user by user name in a user pool as an administrator. Works on any user.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminGetUser /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminGetUser
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminGetUserResponse> AdminGetUserAsync(AdminGetUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminGetUser";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminGetUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Initiates the authentication flow, as an administrator.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminInitiateAuth /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminInitiateAuth
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminInitiateAuthResponse> AdminInitiateAuthAsync(AdminInitiateAuthRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminInitiateAuth";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminInitiateAuthResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Links an existing user account in a user pool (<code>DestinationUser</code>) to an identity from an external identity provider (<code>SourceUser</code>) based on a specified attribute name and value from the external identity provider. This allows you to create a link from the existing user account to an external federated user identity that has not yet been used to sign in, so that the federated user identity can be used to sign in as the existing user account. </p> <p> For example, if there is an existing user with a username and password, this API links that user to a federated user identity, so that when the federated user identity is used, the user signs in as the existing user account. </p> <important> <p>Because this API allows a user with an external federated identity to sign in as an existing user in the user pool, it is critical that it only be used with external identity providers and provider attributes that have been trusted by the application owner.</p> </important> <p>See also .</p> <p>This action is enabled only for admin access and requires developer credentials.</p>
		/// AdminLinkProviderForUser /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminLinkProviderForUser
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminLinkProviderForUserResponse> AdminLinkProviderForUserAsync(AdminLinkProviderForUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminLinkProviderForUser";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminLinkProviderForUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists devices, as an administrator.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminListDevices /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListDevices
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminListDevicesResponse> AdminListDevicesAsync(AdminListDevicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListDevices";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminListDevicesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the groups that the user belongs to.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminListGroupsForUser /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListGroupsForUser
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<AdminListGroupsForUserResponse> AdminListGroupsForUserAsync(string Limit, string NextToken, AdminListGroupsForUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListGroupsForUser?Limit=" + (Limit==null? "" : Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminListGroupsForUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists a history of user activity and any risks detected as part of Amazon Cognito advanced security.
		/// AdminListUserAuthEvents /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListUserAuthEvents
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<AdminListUserAuthEventsResponse> AdminListUserAuthEventsAsync(string MaxResults, string NextToken, AdminListUserAuthEventsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListUserAuthEvents?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminListUserAuthEventsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified user from the specified group.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminRemoveUserFromGroup /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminRemoveUserFromGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task AdminRemoveUserFromGroupAsync(AdminRemoveUserFromGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminRemoveUserFromGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Resets the specified user's password in a user pool as an administrator. Works on any user.</p> <p>When a developer calls this API, the current password is invalidated, so it must be changed. If a user tries to sign in after the API is called, the app will get a PasswordResetRequiredException exception back and should direct the user down the flow to reset the password, which is the same as the forgot password flow. In addition, if the user pool has phone verification selected and a verified phone number exists for the user, or if email verification is selected and a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminResetUserPassword /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminResetUserPassword
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminResetUserPasswordResponse> AdminResetUserPasswordAsync(AdminResetUserPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminResetUserPassword";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminResetUserPasswordResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Responds to an authentication challenge, as an administrator.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminRespondToAuthChallenge /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminRespondToAuthChallenge
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminRespondToAuthChallengeResponse> AdminRespondToAuthChallengeAsync(AdminRespondToAuthChallengeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminRespondToAuthChallenge";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminRespondToAuthChallengeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the user's multi-factor authentication (MFA) preference, including which MFA options are enabled and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are enabled. If multiple options are enabled and no preference is set, a challenge to choose an MFA option will be returned during sign in.
		/// AdminSetUserMFAPreference /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserMFAPreference
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminSetUserMFAPreferenceResponse> AdminSetUserMFAPreferenceAsync(AdminSetUserMFAPreferenceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserMFAPreference";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminSetUserMFAPreferenceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the specified user's password in a user pool as an administrator. Works on any user. </p> <p>The password can be temporary or permanent. If it is temporary, the user status will be placed into the <code>FORCE_CHANGE_PASSWORD</code> state. When the user next tries to sign in, the InitiateAuth/AdminInitiateAuth response will contain the <code>NEW_PASSWORD_REQUIRED</code> challenge. If the user does not sign in before it expires, the user will not be able to sign in and their password will need to be reset by an administrator. </p> <p>Once the user has set a new password, or the password is permanent, the user status will be set to <code>Confirmed</code>.</p>
		/// AdminSetUserPassword /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserPassword
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminSetUserPasswordResponse> AdminSetUserPasswordAsync(AdminSetUserPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserPassword";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminSetUserPasswordResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <i>This action is no longer supported.</i> You can use it to configure only SMS MFA. You can't use it to configure TOTP software token MFA. To configure either type of MFA, use the <a>AdminSetUserMFAPreference</a> action instead.
		/// AdminSetUserSettings /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserSettings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminSetUserSettingsResponse> AdminSetUserSettingsAsync(AdminSetUserSettingsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserSettings";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminSetUserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides feedback for an authentication event as to whether it was from a valid user. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.
		/// AdminUpdateAuthEventFeedback /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateAuthEventFeedback
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminUpdateAuthEventFeedbackResponse> AdminUpdateAuthEventFeedbackAsync(AdminUpdateAuthEventFeedbackRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateAuthEventFeedback";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminUpdateAuthEventFeedbackResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the device status as an administrator.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminUpdateDeviceStatus /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateDeviceStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminUpdateDeviceStatusResponse> AdminUpdateDeviceStatusAsync(AdminUpdateDeviceStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateDeviceStatus";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminUpdateDeviceStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified user's attributes, including developer attributes, as an administrator. Works on any user.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p> <p>In addition to updating user attributes, this API can also be used to mark phone and email as verified.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminUpdateUserAttributes /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateUserAttributes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminUpdateUserAttributesResponse> AdminUpdateUserAttributesAsync(AdminUpdateUserAttributesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateUserAttributes";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminUpdateUserAttributesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Signs out users from all devices, as an administrator. It also invalidates all refresh tokens issued to a user. The user's current access and Id tokens remain valid until their expiry. Access and Id tokens expire one hour after they are issued.</p> <p>Calling this action requires developer credentials.</p>
		/// AdminUserGlobalSignOut /#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUserGlobalSignOut
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AdminUserGlobalSignOutResponse> AdminUserGlobalSignOutAsync(AdminUserGlobalSignOutRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUserGlobalSignOut";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AdminUserGlobalSignOutResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a unique generated shared secret key code for the user account. The request takes an access token or a session string, but not both.
		/// AssociateSoftwareToken /#X-Amz-Target=AWSCognitoIdentityProviderService.AssociateSoftwareToken
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateSoftwareTokenResponse> AssociateSoftwareTokenAsync(AssociateSoftwareTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AssociateSoftwareToken";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AssociateSoftwareTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Changes the password for a specified user in a user pool.
		/// ChangePassword /#X-Amz-Target=AWSCognitoIdentityProviderService.ChangePassword
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChangePasswordResponse> ChangePasswordAsync(ChangePasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ChangePassword";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ChangePasswordResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Confirms tracking of the device. This API call is the call that begins device tracking.
		/// ConfirmDevice /#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmDevice
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ConfirmDeviceResponse> ConfirmDeviceAsync(ConfirmDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmDevice";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConfirmDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows a user to enter a confirmation code to reset a forgotten password.
		/// ConfirmForgotPassword /#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmForgotPassword
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ConfirmForgotPasswordResponse> ConfirmForgotPasswordAsync(ConfirmForgotPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmForgotPassword";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConfirmForgotPasswordResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Confirms registration of a user and handles the existing alias from a previous user.
		/// ConfirmSignUp /#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmSignUp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ConfirmSignUpResponse> ConfirmSignUpAsync(ConfirmSignUpRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmSignUp";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConfirmSignUpResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new group in the specified user pool.</p> <p>Calling this action requires developer credentials.</p>
		/// CreateGroup /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateGroupResponse> CreateGroupAsync(CreateGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an identity provider for a user pool.
		/// CreateIdentityProvider /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateIdentityProvider
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateIdentityProviderResponse> CreateIdentityProviderAsync(CreateIdentityProviderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateIdentityProvider";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateIdentityProviderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new OAuth2.0 resource server and defines custom scopes in it.
		/// CreateResourceServer /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateResourceServer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateResourceServerResponse> CreateResourceServerAsync(CreateResourceServerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateResourceServer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateResourceServerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates the user import job.
		/// CreateUserImportJob /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserImportJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateUserImportJobResponse> CreateUserImportJobAsync(CreateUserImportJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserImportJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateUserImportJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new Amazon Cognito user pool and sets the password policy for the pool.
		/// CreateUserPool /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateUserPoolResponse> CreateUserPoolAsync(CreateUserPoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPool";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateUserPoolResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates the user pool client.
		/// CreateUserPoolClient /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPoolClient
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateUserPoolClientResponse> CreateUserPoolClientAsync(CreateUserPoolClientRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPoolClient";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateUserPoolClientResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new domain for a user pool.
		/// CreateUserPoolDomain /#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPoolDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateUserPoolDomainResponse> CreateUserPoolDomainAsync(CreateUserPoolDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPoolDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateUserPoolDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a group. Currently only groups with no members can be deleted.</p> <p>Calling this action requires developer credentials.</p>
		/// DeleteGroup /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteGroupAsync(DeleteGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an identity provider for a user pool.
		/// DeleteIdentityProvider /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteIdentityProvider
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteIdentityProviderAsync(DeleteIdentityProviderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteIdentityProvider";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource server.
		/// DeleteResourceServer /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteResourceServer
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteResourceServerAsync(DeleteResourceServerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteResourceServer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows a user to delete himself or herself.
		/// DeleteUser /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUser
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteUserAsync(DeleteUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUser";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the attributes for a user.
		/// DeleteUserAttributes /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserAttributes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteUserAttributesResponse> DeleteUserAttributesAsync(DeleteUserAttributesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserAttributes";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteUserAttributesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Amazon Cognito user pool.
		/// DeleteUserPool /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPool
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteUserPoolAsync(DeleteUserPoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPool";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows the developer to delete the user pool client.
		/// DeleteUserPoolClient /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPoolClient
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteUserPoolClientAsync(DeleteUserPoolClientRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPoolClient";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a domain for a user pool.
		/// DeleteUserPoolDomain /#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPoolDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteUserPoolDomainResponse> DeleteUserPoolDomainAsync(DeleteUserPoolDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPoolDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteUserPoolDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a specific identity provider.
		/// DescribeIdentityProvider /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeIdentityProvider
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeIdentityProviderResponse> DescribeIdentityProviderAsync(DescribeIdentityProviderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeIdentityProvider";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeIdentityProviderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes a resource server.
		/// DescribeResourceServer /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeResourceServer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeResourceServerResponse> DescribeResourceServerAsync(DescribeResourceServerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeResourceServer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeResourceServerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the risk configuration.
		/// DescribeRiskConfiguration /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeRiskConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeRiskConfigurationResponse> DescribeRiskConfigurationAsync(DescribeRiskConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeRiskConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeRiskConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the user import job.
		/// DescribeUserImportJob /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserImportJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeUserImportJobResponse> DescribeUserImportJobAsync(DescribeUserImportJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserImportJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeUserImportJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the configuration information and metadata of the specified user pool.
		/// DescribeUserPool /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeUserPoolResponse> DescribeUserPoolAsync(DescribeUserPoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPool";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeUserPoolResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Client method for returning the configuration information and metadata of the specified user pool app client.
		/// DescribeUserPoolClient /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPoolClient
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeUserPoolClientResponse> DescribeUserPoolClientAsync(DescribeUserPoolClientRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPoolClient";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeUserPoolClientResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a domain.
		/// DescribeUserPoolDomain /#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPoolDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeUserPoolDomainResponse> DescribeUserPoolDomainAsync(DescribeUserPoolDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPoolDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeUserPoolDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Forgets the specified device.
		/// ForgetDevice /#X-Amz-Target=AWSCognitoIdentityProviderService.ForgetDevice
		/// </summary>
		/// <returns>Success</returns>
		public async Task ForgetDeviceAsync(ForgetDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ForgetDevice";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user's password. For the <code>Username</code> parameter, you can use the username or user alias. The method used to send the confirmation code is sent according to the specified AccountRecoverySetting. For more information, see <a href="">Recovering User Accounts</a> in the <i>Amazon Cognito Developer Guide</i>. If neither a verified phone number nor a verified email exists, an <code>InvalidParameterException</code> is thrown. To use the confirmation code for resetting the password, call .
		/// ForgotPassword /#X-Amz-Target=AWSCognitoIdentityProviderService.ForgotPassword
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ForgotPasswordResponse> ForgotPasswordAsync(ForgotPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ForgotPassword";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ForgotPasswordResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the header information for the .csv file to be used as input for the user import job.
		/// GetCSVHeader /#X-Amz-Target=AWSCognitoIdentityProviderService.GetCSVHeader
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCSVHeaderResponse> GetCSVHeaderAsync(GetCSVHeaderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetCSVHeader";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetCSVHeaderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the device.
		/// GetDevice /#X-Amz-Target=AWSCognitoIdentityProviderService.GetDevice
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeviceResponse> GetDeviceAsync(GetDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetDevice";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a group.</p> <p>Calling this action requires developer credentials.</p>
		/// GetGroup /#X-Amz-Target=AWSCognitoIdentityProviderService.GetGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetGroupResponse> GetGroupAsync(GetGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the specified identity provider.
		/// GetIdentityProviderByIdentifier /#X-Amz-Target=AWSCognitoIdentityProviderService.GetIdentityProviderByIdentifier
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetIdentityProviderByIdentifierResponse> GetIdentityProviderByIdentifierAsync(GetIdentityProviderByIdentifierRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetIdentityProviderByIdentifier";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetIdentityProviderByIdentifierResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This method takes a user pool ID, and returns the signing certificate.
		/// GetSigningCertificate /#X-Amz-Target=AWSCognitoIdentityProviderService.GetSigningCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetSigningCertificateResponse> GetSigningCertificateAsync(GetSigningCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetSigningCertificate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetSigningCertificateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the UI Customization information for a particular app client's app UI, if there is something set. If nothing is set for the particular client, but there is an existing pool level customization (app <code>clientId</code> will be <code>ALL</code>), then that is returned. If nothing is present, then an empty shape is returned.
		/// GetUICustomization /#X-Amz-Target=AWSCognitoIdentityProviderService.GetUICustomization
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetUICustomizationResponse> GetUICustomizationAsync(GetUICustomizationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetUICustomization";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetUICustomizationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the user attributes and metadata for a user.
		/// GetUser /#X-Amz-Target=AWSCognitoIdentityProviderService.GetUser
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetUserResponse> GetUserAsync(GetUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetUser";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the user attribute verification code for the specified attribute name.
		/// GetUserAttributeVerificationCode /#X-Amz-Target=AWSCognitoIdentityProviderService.GetUserAttributeVerificationCode
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetUserAttributeVerificationCodeResponse> GetUserAttributeVerificationCodeAsync(GetUserAttributeVerificationCodeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetUserAttributeVerificationCode";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetUserAttributeVerificationCodeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the user pool multi-factor authentication (MFA) configuration.
		/// GetUserPoolMfaConfig /#X-Amz-Target=AWSCognitoIdentityProviderService.GetUserPoolMfaConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetUserPoolMfaConfigResponse> GetUserPoolMfaConfigAsync(GetUserPoolMfaConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetUserPoolMfaConfig";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetUserPoolMfaConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Signs out users from all devices. It also invalidates all refresh tokens issued to a user. The user's current access and Id tokens remain valid until their expiry. Access and Id tokens expire one hour after they are issued.
		/// GlobalSignOut /#X-Amz-Target=AWSCognitoIdentityProviderService.GlobalSignOut
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GlobalSignOutResponse> GlobalSignOutAsync(GlobalSignOutRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GlobalSignOut";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GlobalSignOutResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Initiates the authentication flow.
		/// InitiateAuth /#X-Amz-Target=AWSCognitoIdentityProviderService.InitiateAuth
		/// </summary>
		/// <returns>Success</returns>
		public async Task<InitiateAuthResponse> InitiateAuthAsync(InitiateAuthRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.InitiateAuth";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InitiateAuthResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the devices.
		/// ListDevices /#X-Amz-Target=AWSCognitoIdentityProviderService.ListDevices
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListDevicesResponse> ListDevicesAsync(ListDevicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListDevices";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDevicesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the groups associated with a user pool.</p> <p>Calling this action requires developer credentials.</p>
		/// ListGroups /#X-Amz-Target=AWSCognitoIdentityProviderService.ListGroups
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListGroupsResponse> ListGroupsAsync(string Limit, string NextToken, ListGroupsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListGroups?Limit=" + (Limit==null? "" : Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists information about all identity providers for a user pool.
		/// ListIdentityProviders /#X-Amz-Target=AWSCognitoIdentityProviderService.ListIdentityProviders
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListIdentityProvidersResponse> ListIdentityProvidersAsync(string MaxResults, string NextToken, ListIdentityProvidersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListIdentityProviders?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListIdentityProvidersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the resource servers for a user pool.
		/// ListResourceServers /#X-Amz-Target=AWSCognitoIdentityProviderService.ListResourceServers
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListResourceServersResponse> ListResourceServersAsync(string MaxResults, string NextToken, ListResourceServersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListResourceServers?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListResourceServersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the tags that are assigned to an Amazon Cognito user pool.</p> <p>A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.</p> <p>You can use this action up to 10 times per second, per account.</p>
		/// ListTagsForResource /#X-Amz-Target=AWSCognitoIdentityProviderService.ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListTagsForResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the user import jobs.
		/// ListUserImportJobs /#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserImportJobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListUserImportJobsResponse> ListUserImportJobsAsync(ListUserImportJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserImportJobs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListUserImportJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the clients that have been created for the specified user pool.
		/// ListUserPoolClients /#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserPoolClients
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListUserPoolClientsResponse> ListUserPoolClientsAsync(string MaxResults, string NextToken, ListUserPoolClientsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserPoolClients?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListUserPoolClientsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the user pools associated with an AWS account.
		/// ListUserPools /#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserPools
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListUserPoolsResponse> ListUserPoolsAsync(string MaxResults, string NextToken, ListUserPoolsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserPools?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListUserPoolsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the users in the Amazon Cognito user pool.
		/// ListUsers /#X-Amz-Target=AWSCognitoIdentityProviderService.ListUsers
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="PaginationToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListUsersResponse> ListUsersAsync(string Limit, string PaginationToken, ListUsersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListUsers?Limit=" + (Limit==null? "" : Uri.EscapeDataString(Limit))+"&PaginationToken=" + (PaginationToken==null? "" : Uri.EscapeDataString(PaginationToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListUsersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the users in the specified group.</p> <p>Calling this action requires developer credentials.</p>
		/// ListUsersInGroup /#X-Amz-Target=AWSCognitoIdentityProviderService.ListUsersInGroup
		/// </summary>
		/// <param name="Limit">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListUsersInGroupResponse> ListUsersInGroupAsync(string Limit, string NextToken, ListUsersInGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListUsersInGroup?Limit=" + (Limit==null? "" : Uri.EscapeDataString(Limit))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListUsersInGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resends the confirmation (for confirmation of registration) to a specific user in the user pool.
		/// ResendConfirmationCode /#X-Amz-Target=AWSCognitoIdentityProviderService.ResendConfirmationCode
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ResendConfirmationCodeResponse> ResendConfirmationCodeAsync(ResendConfirmationCodeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ResendConfirmationCode";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ResendConfirmationCodeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Responds to the authentication challenge.
		/// RespondToAuthChallenge /#X-Amz-Target=AWSCognitoIdentityProviderService.RespondToAuthChallenge
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RespondToAuthChallengeResponse> RespondToAuthChallengeAsync(RespondToAuthChallengeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.RespondToAuthChallenge";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RespondToAuthChallengeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Configures actions on detected risks. To delete the risk configuration for <code>UserPoolId</code> or <code>ClientId</code>, pass null values for all four configuration types.</p> <p>To enable Amazon Cognito advanced security features, update the user pool to include the <code>UserPoolAddOns</code> key<code>AdvancedSecurityMode</code>.</p> <p>See .</p>
		/// SetRiskConfiguration /#X-Amz-Target=AWSCognitoIdentityProviderService.SetRiskConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetRiskConfigurationResponse> SetRiskConfigurationAsync(SetRiskConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.SetRiskConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SetRiskConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the UI customization information for a user pool's built-in app UI.</p> <p>You can specify app UI customization settings for a single client (with a specific <code>clientId</code>) or for all clients (by setting the <code>clientId</code> to <code>ALL</code>). If you specify <code>ALL</code>, the default configuration will be used for every client that has no UI customization set previously. If you specify UI customization settings for a particular client, it will no longer fall back to the <code>ALL</code> configuration. </p> <note> <p>To use this API, your user pool must have a domain associated with it. Otherwise, there is no place to host the app's pages, and the service will throw an error.</p> </note>
		/// SetUICustomization /#X-Amz-Target=AWSCognitoIdentityProviderService.SetUICustomization
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetUICustomizationResponse> SetUICustomizationAsync(SetUICustomizationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.SetUICustomization";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SetUICustomizationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Set the user's multi-factor authentication (MFA) method preference, including which MFA factors are enabled and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are enabled. If multiple options are enabled and no preference is set, a challenge to choose an MFA option will be returned during sign in.
		/// SetUserMFAPreference /#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserMFAPreference
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetUserMFAPreferenceResponse> SetUserMFAPreferenceAsync(SetUserMFAPreferenceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserMFAPreference";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SetUserMFAPreferenceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Set the user pool multi-factor authentication (MFA) configuration.
		/// SetUserPoolMfaConfig /#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserPoolMfaConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetUserPoolMfaConfigResponse> SetUserPoolMfaConfigAsync(SetUserPoolMfaConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserPoolMfaConfig";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SetUserPoolMfaConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <i>This action is no longer supported.</i> You can use it to configure only SMS MFA. You can't use it to configure TOTP software token MFA. To configure either type of MFA, use the <a>SetUserMFAPreference</a> action instead.
		/// SetUserSettings /#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserSettings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetUserSettingsResponse> SetUserSettingsAsync(SetUserSettingsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserSettings";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SetUserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Registers the user in the specified user pool and creates a user name, password, and user attributes.
		/// SignUp /#X-Amz-Target=AWSCognitoIdentityProviderService.SignUp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SignUpResponse> SignUpAsync(SignUpRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.SignUp";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SignUpResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts the user import.
		/// StartUserImportJob /#X-Amz-Target=AWSCognitoIdentityProviderService.StartUserImportJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartUserImportJobResponse> StartUserImportJobAsync(StartUserImportJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.StartUserImportJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartUserImportJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops the user import job.
		/// StopUserImportJob /#X-Amz-Target=AWSCognitoIdentityProviderService.StopUserImportJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopUserImportJobResponse> StopUserImportJobAsync(StopUserImportJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.StopUserImportJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopUserImportJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Assigns a set of tags to an Amazon Cognito user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.</p> <p>Each tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of a user pool, one for testing and another for production, you might assign an <code>Environment</code> tag key to both user pools. The value of this key might be <code>Test</code> for one user pool and <code>Production</code> for the other.</p> <p>Tags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your user pools. In an IAM policy, you can constrain permissions for user pools based on specific tags or tag values.</p> <p>You can use this action up to 5 times per second, per account. A user pool can have as many as 50 tags.</p>
		/// TagResource /#X-Amz-Target=AWSCognitoIdentityProviderService.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.TagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from an Amazon Cognito user pool. You can use this action up to 5 times per second, per account
		/// UntagResource /#X-Amz-Target=AWSCognitoIdentityProviderService.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UntagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides the feedback for an authentication event whether it was from a valid user or not. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.
		/// UpdateAuthEventFeedback /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateAuthEventFeedback
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateAuthEventFeedbackResponse> UpdateAuthEventFeedbackAsync(UpdateAuthEventFeedbackRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateAuthEventFeedback";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateAuthEventFeedbackResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the device status.
		/// UpdateDeviceStatus /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateDeviceStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDeviceStatusResponse> UpdateDeviceStatusAsync(UpdateDeviceStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateDeviceStatus";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDeviceStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified group with the specified attributes.</p> <p>Calling this action requires developer credentials.</p> <important> <p>If you don't provide a value for an attribute, it will be set to the default value.</p> </important>
		/// UpdateGroup /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateGroupResponse> UpdateGroupAsync(UpdateGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates identity provider information for a user pool.
		/// UpdateIdentityProvider /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateIdentityProvider
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateIdentityProviderResponse> UpdateIdentityProviderAsync(UpdateIdentityProviderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateIdentityProvider";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateIdentityProviderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the name and scopes of resource server. All other fields are read-only.</p> <important> <p>If you don't provide a value for an attribute, it will be set to the default value.</p> </important>
		/// UpdateResourceServer /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateResourceServer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateResourceServerResponse> UpdateResourceServerAsync(UpdateResourceServerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateResourceServer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateResourceServerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Allows a user to update a specific attribute (one at a time).
		/// UpdateUserAttributes /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserAttributes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateUserAttributesResponse> UpdateUserAttributesAsync(UpdateUserAttributesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserAttributes";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateUserAttributesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified user pool with the specified attributes. You can get a list of the current user pool settings with .</p> <important> <p>If you don't provide a value for an attribute, it will be set to the default value.</p> </important>
		/// UpdateUserPool /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateUserPoolResponse> UpdateUserPoolAsync(UpdateUserPoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPool";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateUserPoolResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified user pool app client with the specified attributes. You can get a list of the current user pool app client settings with .</p> <important> <p>If you don't provide a value for an attribute, it will be set to the default value.</p> </important>
		/// UpdateUserPoolClient /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPoolClient
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateUserPoolClientResponse> UpdateUserPoolClientAsync(UpdateUserPoolClientRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPoolClient";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateUserPoolClientResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the Secure Sockets Layer (SSL) certificate for the custom domain for your user pool.</p> <p>You can use this operation to provide the Amazon Resource Name (ARN) of a new certificate to Amazon Cognito. You cannot use it to change the domain for a user pool.</p> <p>A custom domain is used to host the Amazon Cognito hosted UI, which provides sign-up and sign-in pages for your application. When you set up a custom domain, you provide a certificate that you manage with AWS Certificate Manager (ACM). When necessary, you can use this operation to change the certificate that you applied to your custom domain.</p> <p>Usually, this is unnecessary following routine certificate renewal with ACM. When you renew your existing certificate in ACM, the ARN for your certificate remains the same, and your custom domain uses the new certificate automatically.</p> <p>However, if you replace your existing certificate with a new one, ACM gives the new certificate a new ARN. To apply the new certificate to your custom domain, you must provide this ARN to Amazon Cognito.</p> <p>When you add your new certificate in ACM, you must choose US East (N. Virginia) as the AWS Region.</p> <p>After you submit your request, Amazon Cognito requires up to 1 hour to distribute your new certificate to your custom domain.</p> <p>For more information about adding a custom domain to your user pool, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html">Using Your Own Domain for the Hosted UI</a>.</p>
		/// UpdateUserPoolDomain /#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPoolDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateUserPoolDomainResponse> UpdateUserPoolDomainAsync(UpdateUserPoolDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPoolDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateUserPoolDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Use this API to register a user's entered TOTP code and mark the user's software token MFA status as "verified" if successful. The request takes an access token or a session string, but not both.
		/// VerifySoftwareToken /#X-Amz-Target=AWSCognitoIdentityProviderService.VerifySoftwareToken
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VerifySoftwareTokenResponse> VerifySoftwareTokenAsync(VerifySoftwareTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.VerifySoftwareToken";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<VerifySoftwareTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verifies the specified user attributes in the user pool.
		/// VerifyUserAttribute /#X-Amz-Target=AWSCognitoIdentityProviderService.VerifyUserAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task<VerifyUserAttributeResponse> VerifyUserAttributeAsync(VerifyUserAttributeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSCognitoIdentityProviderService.VerifyUserAttribute";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<VerifyUserAttributeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
