//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelIngestionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IngestionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDashboardResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionArn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string DashboardId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateDashboardResponseCreationStatus CreationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDashboardResponseCreationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_SUCCESSFUL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 5,
	}
	
	/// <summary>
	/// Permission for the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourcePermission
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Principal { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 16
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public String[] Actions { get; set; }
	}
	
	/// <summary>
	/// Dashboard source template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DashboardSourceTemplate
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DataSetReference[] DataSetReferences { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// The key or keys of the key-value pairs for the resource tag or tags assigned to the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Ad hoc (one-time) filtering option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdHocFilteringOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AdHocFilteringOptionAvailabilityStatus AvailabilityStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdHocFilteringOptionAvailabilityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Export to .csv option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportToCSVOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExportToCSVOptionAvailabilityStatus AvailabilityStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExportToCSVOptionAvailabilityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Sheet controls option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SheetControlsOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SheetControlsOptionVisibilityState VisibilityState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SheetControlsOptionVisibilityState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLLAPSED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDataSetResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IngestionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IngestionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	/// <summary>
	/// A view of a data source that contains information about the shape of the data in the underlying source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PhysicalTable
	{
		
		/// <summary>
		/// A physical table type for relational data sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RelationalTable RelationalTable { get; set; }
		
		/// <summary>
		/// A physical table type built from the results of the custom SQL query.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomSql CustomSql { get; set; }
		
		/// <summary>
		/// A physical table type for as S3 data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Source S3Source { get; set; }
	}
	
	/// <summary>
	/// A <i>logical table</i> is a unit that joins and that data transformations operate on. A logical table has a source, which can be either a physical table or result of a join. When a logical table points to a physical table, the logical table acts as a mutable copy of that physical table through transform operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LogicalTable
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Alias { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public TransformOperation[] DataTransforms { get; set; }
		
		/// <summary>
		/// Information about the source of a logical table. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LogicalTableSource Source { get; set; }
	}
	
	/// <summary>
	/// Groupings of columns that work together in certain Amazon QuickSight features. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ColumnGroup
	{
		
		/// <summary>
		/// Geospatial column group that denotes a hierarchy.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GeoSpatialColumnGroup GeoSpatialColumnGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RowLevelPermissionPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRANT_ACCESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY_ACCESS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDataSourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateDataSourceResponseCreationStatus CreationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDataSourceResponseCreationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_SUCCESSFUL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 5,
	}
	
	/// <summary>
	/// Amazon Elasticsearch Service parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AmazonElasticsearchParameters
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Domain { get; set; }
	}
	
	/// <summary>
	/// Amazon Athena parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AthenaParameters
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string WorkGroup { get; set; }
	}
	
	/// <summary>
	/// Amazon Aurora parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuroraParameters
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Host { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public int Port { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Database { get; set; }
	}
	
	/// <summary>
	/// Amazon Aurora with PostgreSQL compatibility parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuroraPostgreSqlParameters
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Host { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public int Port { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Database { get; set; }
	}
	
	/// <summary>
	/// AWS IoT Analytics parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AwsIotAnalyticsParameters
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string DataSetName { get; set; }
	}
	
	/// <summary>
	/// Jira parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JiraParameters
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string SiteBaseUrl { get; set; }
	}
	
	/// <summary>
	/// MariaDB parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MariaDbParameters
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Host { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public int Port { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Database { get; set; }
	}
	
	/// <summary>
	/// MySQL parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MySqlParameters
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Host { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public int Port { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Database { get; set; }
	}
	
	/// <summary>
	/// PostgreSQL parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PostgreSqlParameters
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Host { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public int Port { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Database { get; set; }
	}
	
	/// <summary>
	/// Presto parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PrestoParameters
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Host { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public int Port { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Catalog { get; set; }
	}
	
	/// <summary>
	/// Amazon RDS parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RdsParameters
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Database { get; set; }
	}
	
	/// <summary>
	/// Amazon Redshift parameters. The <code>ClusterId</code> field can be blank if <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RedshiftParameters
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Host { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Database { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClusterId { get; set; }
	}
	
	/// <summary>
	/// S3 parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3Parameters
	{
		
		/// <summary>
		/// Amazon S3 manifest file location.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ManifestFileLocation ManifestFileLocation { get; set; }
	}
	
	/// <summary>
	/// ServiceNow parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServiceNowParameters
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string SiteBaseUrl { get; set; }
	}
	
	/// <summary>
	/// Snowflake parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SnowflakeParameters
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Host { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Database { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Warehouse { get; set; }
	}
	
	/// <summary>
	/// Spark parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SparkParameters
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Host { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public int Port { get; set; }
	}
	
	/// <summary>
	/// SQL Server parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SqlServerParameters
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Host { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public int Port { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Database { get; set; }
	}
	
	/// <summary>
	/// Teradata parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TeradataParameters
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Host { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 65535)]
		public int Port { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Database { get; set; }
	}
	
	/// <summary>
	/// Twitter parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TwitterParameters
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Query { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int MaxRows { get; set; }
	}
	
	/// <summary>
	/// The combination of user name and password that are used as credentials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CredentialPair
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// The response object for this operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateGroupResponse
	{
		
		/// <summary>
		/// A <i>group</i> in Amazon QuickSight consists of a set of users. You can use groups to make it easier to manage access and security. Currently, an Amazon QuickSight subscription can't contain more than 500 Amazon QuickSight groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Group Group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateGroupMembershipResponse
	{
		
		/// <summary>
		/// A member of an Amazon QuickSight group. Currently, group members must be users. Groups can't be members of another group. .
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GroupMember GroupMember { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateIAMPolicyAssignmentResponse
	{
		
		/// <summary>
		/// Min length: 1
		/// Pattern: (?=^.{2,256}$)(?!.*\s)[0-9a-zA-Z-_.:=+@]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AssignmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssignmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateIAMPolicyAssignmentResponseAssignmentStatus AssignmentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityMap Identities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateIAMPolicyAssignmentResponseAssignmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateIngestionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IngestionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateIngestionResponseIngestionStatus IngestionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateIngestionResponseIngestionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionArn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateTemplateResponseCreationStatus CreationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateTemplateResponseCreationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_SUCCESSFUL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 5,
	}
	
	/// <summary>
	/// The source analysis of the template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TemplateSourceAnalysis
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DataSetReference[] DataSetReferences { get; set; }
	}
	
	/// <summary>
	/// The source template of the template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TemplateSourceTemplate
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTemplateAliasResponse
	{
		
		/// <summary>
		/// The template alias.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TemplateAlias TemplateAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDashboardResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string DashboardId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDataSetResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDataSourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteGroupMembershipResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteIAMPolicyAssignmentResponse
	{
		
		/// <summary>
		/// Min length: 1
		/// Pattern: (?=^.{2,256}$)(?!.*\s)[0-9a-zA-Z-_.:=+@]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AssignmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTemplateAliasResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string TemplateId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+|(\$LATEST)|(\$PUBLISHED)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string AliasName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteUserByPrincipalIdResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDashboardResponse
	{
		
		/// <summary>
		/// Dashboard.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Dashboard Dashboard { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDashboardPermissionsResponse
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string DashboardId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DashboardArn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] Permissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDataSetResponse
	{
		
		/// <summary>
		/// Dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSet DataSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDataSetPermissionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] Permissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDataSourceResponse
	{
		
		/// <summary>
		/// The structure of a data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSource DataSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDataSourcePermissionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSourceId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] Permissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeGroupResponse
	{
		
		/// <summary>
		/// A <i>group</i> in Amazon QuickSight consists of a set of users. You can use groups to make it easier to manage access and security. Currently, an Amazon QuickSight subscription can't contain more than 500 Amazon QuickSight groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Group Group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIAMPolicyAssignmentResponse
	{
		
		/// <summary>
		/// An IAM policy assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IAMPolicyAssignment IAMPolicyAssignment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIngestionResponse
	{
		
		/// <summary>
		/// Information about the SPICE ingestion for a dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Ingestion Ingestion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTemplateResponse
	{
		
		/// <summary>
		/// <p>A template object. A <i>template</i> is an entity in QuickSight that encapsulates the metadata required to create an analysis and that you can use to create a dashboard. A template adds a layer of abstraction by using placeholders to replace the dataset associated with the analysis. You can use templates to create dashboards by replacing dataset placeholders with datasets that follow the same schema that was used to create the source analysis and template.</p> <p>You can share templates across AWS accounts by allowing users in other AWS accounts to create a template or a dashboard from an existing template.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Template Template { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTemplateAliasResponse
	{
		
		/// <summary>
		/// The template alias.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TemplateAlias TemplateAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTemplatePermissionsResponse
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateArn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] Permissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeUserResponse
	{
		
		/// <summary>
		/// A registered user of Amazon QuickSight. Currently, an Amazon QuickSight subscription can't contain more than 20 million users.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDashboardEmbedUrlResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EmbedUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDashboardVersionsResponse
	{
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DashboardVersionSummary[] DashboardVersionSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDashboardsResponse
	{
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DashboardSummary[] DashboardSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDataSetsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DataSetSummary[] DataSetSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDataSourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DataSource[] DataSources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListGroupMembershipsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroupMember[] GroupMemberList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Group[] GroupList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListIAMPolicyAssignmentsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IAMPolicyAssignmentSummary[] IAMPolicyAssignments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListIAMPolicyAssignmentsForUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ActiveIAMPolicyAssignment[] ActiveAssignments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListIngestionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Ingestion[] Ingestions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTemplateAliasesResponse
	{
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public TemplateAlias[] TemplateAliasList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTemplateVersionsResponse
	{
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public TemplateVersionSummary[] TemplateVersionSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTemplatesResponse
	{
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public TemplateSummary[] TemplateSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUserGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Group[] GroupList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUsersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public User[] UserList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterUserResponse
	{
		
		/// <summary>
		/// A registered user of Amazon QuickSight. Currently, an Amazon QuickSight subscription can't contain more than 20 million users.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserInvitationUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SearchDashboardsResponse
	{
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DashboardSummary[] DashboardSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// A filter that you apply when searching for dashboards. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DashboardSearchFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DashboardSearchFilterOperator Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DashboardSearchFilterName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashboardSearchFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringEquals = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashboardSearchFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUICKSIGHT_USER = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDashboardResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionArn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string DashboardId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateDashboardResponseCreationStatus CreationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateDashboardResponseCreationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_SUCCESSFUL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDashboardPermissionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DashboardArn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string DashboardId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] Permissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDashboardPublishedVersionResponse
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string DashboardId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DashboardArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDataSetResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IngestionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IngestionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDataSetPermissionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDataSourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateDataSourceResponseUpdateStatus UpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateDataSourceResponseUpdateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_SUCCESSFUL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDataSourcePermissionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateGroupResponse
	{
		
		/// <summary>
		/// A <i>group</i> in Amazon QuickSight consists of a set of users. You can use groups to make it easier to manage access and security. Currently, an Amazon QuickSight subscription can't contain more than 500 Amazon QuickSight groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Group Group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateIAMPolicyAssignmentResponse
	{
		
		/// <summary>
		/// Min length: 1
		/// Pattern: (?=^.{2,256}$)(?!.*\s)[0-9a-zA-Z-_.:=+@]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AssignmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssignmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityMap Identities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateIAMPolicyAssignmentResponseAssignmentStatus AssignmentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateIAMPolicyAssignmentResponseAssignmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTemplateResponse
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateTemplateResponseCreationStatus CreationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateTemplateResponseCreationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_SUCCESSFUL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTemplateAliasResponse
	{
		
		/// <summary>
		/// The template alias.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TemplateAlias TemplateAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTemplatePermissionsResponse
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateArn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] Permissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserResponse
	{
		
		/// <summary>
		/// A registered user of Amazon QuickSight. Currently, an Amazon QuickSight subscription can't contain more than 20 million users.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	/// <summary>
	/// The active AWS Identity and Access Management (IAM) policy assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActiveIAMPolicyAssignment
	{
		
		/// <summary>
		/// Min length: 1
		/// Pattern: (?=^.{2,256}$)(?!.*\s)[0-9a-zA-Z-_.:=+@]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AssignmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashboardBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssignmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	/// <summary>
	/// A calculated column for a dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CalculatedColumn
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ColumnName { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ColumnId { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096, MinimumLength=1)]
		public string Expression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ColumnDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECIMAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATETIME = 3,
	}
	
	/// <summary>
	/// A transform operation that casts a column to a different type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CastColumnTypeOperation
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ColumnName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CastColumnTypeOperationNewColumnType NewColumnType { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32)]
		public string Format { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CastColumnTypeOperationNewColumnType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECIMAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATETIME = 3,
	}
	
	/// <summary>
	/// Geospatial column group that denotes a hierarchy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GeoSpatialColumnGroup
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GeoSpatialColumnGroupCountryCode CountryCode { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 16
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public ColumnName[] Columns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GeoSpatialColumnGroupCountryCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US = 0,
	}
	
	/// <summary>
	/// A structure describing the name, data type, and geographic role of the columns.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ColumnGroupColumnSchema
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The column group schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ColumnGroupSchema
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Maximum items: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public ColumnGroupColumnSchema[] ColumnGroupColumnSchemaList { get; set; }
	}
	
	/// <summary>
	/// The column schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ColumnSchema
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GeographicRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GeoSpatialDataRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNTRY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNTY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTCODE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONGITUDE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATITUDE = 6,
	}
	
	/// <summary>
	/// A tag for a column in a <code>TagColumnOperation</code> structure. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ColumnTag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ColumnTagColumnGeographicRole ColumnGeographicRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ColumnTagColumnGeographicRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNTRY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNTY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTCODE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONGITUDE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATITUDE = 6,
	}
	
	/// <summary>
	/// A transform operation that creates calculated columns. Columns created in one such operation form a lexical closure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateColumnsOperation
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public CalculatedColumn[] Columns { get; set; }
	}
	
	/// <summary>
	/// Parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Parameters
	{
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public StringParameter[] StringParameters { get; set; }
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public IntegerParameter[] IntegerParameters { get; set; }
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DecimalParameter[] DecimalParameters { get; set; }
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public DateTimeParameter[] DateTimeParameters { get; set; }
	}
	
	/// <summary>
	/// Dashboard source entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DashboardSourceEntity
	{
		
		/// <summary>
		/// Dashboard source template.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashboardSourceTemplate SourceTemplate { get; set; }
	}
	
	/// <summary>
	/// Dashboard publish options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DashboardPublishOptions
	{
		
		/// <summary>
		/// Ad hoc (one-time) filtering option.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AdHocFilteringOption AdHocFilteringOption { get; set; }
		
		/// <summary>
		/// Export to .csv option.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportToCSVOption ExportToCSVOption { get; set; }
		
		/// <summary>
		/// Sheet controls option.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SheetControlsOption SheetControlsOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDashboardRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Parameters Parameters { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] Permissions { get; set; }
		
		/// <summary>
		/// Dashboard source entity.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DashboardSourceEntity SourceEntity { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string VersionDescription { get; set; }
		
		/// <summary>
		/// Dashboard publish options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashboardPublishOptions DashboardPublishOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_SUCCESSFUL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSetImportMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPICE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECT_QUERY = 1,
	}
	
	/// <summary>
	/// The row-level security configuration for the dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RowLevelPermissionDataSet
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RowLevelPermissionDataSetPermissionPolicy PermissionPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RowLevelPermissionDataSetPermissionPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRANT_ACCESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY_ACCESS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDataSetRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PhysicalTableMap PhysicalTableMap { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogicalTableMap LogicalTableMap { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateDataSetRequestImportMode ImportMode { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public ColumnGroup[] ColumnGroups { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] Permissions { get; set; }
		
		/// <summary>
		/// The row-level security configuration for the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RowLevelPermissionDataSet RowLevelPermissionDataSet { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDataSetRequestImportMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPICE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECT_QUERY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADOBE_ANALYTICS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_ELASTICSEARCH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATHENA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AURORA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AURORA_POSTGRESQL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_IOT_ANALYTICS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JIRA = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MARIADB = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRESQL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRESTO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDSHIFT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALESFORCE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICENOW = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNOWFLAKE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPARK = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERADATA = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWITTER = 20,
	}
	
	/// <summary>
	/// The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSourceParameters
	{
		
		/// <summary>
		/// Amazon Elasticsearch Service parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AmazonElasticsearchParameters AmazonElasticsearchParameters { get; set; }
		
		/// <summary>
		/// Amazon Athena parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AthenaParameters AthenaParameters { get; set; }
		
		/// <summary>
		/// Amazon Aurora parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuroraParameters AuroraParameters { get; set; }
		
		/// <summary>
		/// Amazon Aurora with PostgreSQL compatibility parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuroraPostgreSqlParameters AuroraPostgreSqlParameters { get; set; }
		
		/// <summary>
		/// AWS IoT Analytics parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AwsIotAnalyticsParameters AwsIotAnalyticsParameters { get; set; }
		
		/// <summary>
		/// Jira parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JiraParameters JiraParameters { get; set; }
		
		/// <summary>
		/// MariaDB parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MariaDbParameters MariaDbParameters { get; set; }
		
		/// <summary>
		/// MySQL parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MySqlParameters MySqlParameters { get; set; }
		
		/// <summary>
		/// PostgreSQL parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PostgreSqlParameters PostgreSqlParameters { get; set; }
		
		/// <summary>
		/// Presto parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PrestoParameters PrestoParameters { get; set; }
		
		/// <summary>
		/// Amazon RDS parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RdsParameters RdsParameters { get; set; }
		
		/// <summary>
		/// Amazon Redshift parameters. The <code>ClusterId</code> field can be blank if <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RedshiftParameters RedshiftParameters { get; set; }
		
		/// <summary>
		/// S3 parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Parameters S3Parameters { get; set; }
		
		/// <summary>
		/// ServiceNow parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceNowParameters ServiceNowParameters { get; set; }
		
		/// <summary>
		/// Snowflake parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SnowflakeParameters SnowflakeParameters { get; set; }
		
		/// <summary>
		/// Spark parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SparkParameters SparkParameters { get; set; }
		
		/// <summary>
		/// SQL Server parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SqlServerParameters SqlServerParameters { get; set; }
		
		/// <summary>
		/// Teradata parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TeradataParameters TeradataParameters { get; set; }
		
		/// <summary>
		/// Twitter parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TwitterParameters TwitterParameters { get; set; }
	}
	
	/// <summary>
	/// Data source credentials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSourceCredentials
	{
		
		/// <summary>
		/// The combination of user name and password that are used as credentials.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CredentialPair CredentialPair { get; set; }
	}
	
	/// <summary>
	/// VPC connection properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcConnectionProperties
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcConnectionArn { get; set; }
	}
	
	/// <summary>
	/// Secure Socket Layer (SSL) properties that apply when QuickSight connects to your underlying data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SslProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableSsl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDataSourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSourceId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateDataSourceRequestType Type { get; set; }
		
		/// <summary>
		/// The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSourceParameters DataSourceParameters { get; set; }
		
		/// <summary>
		/// Data source credentials.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSourceCredentials Credentials { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] Permissions { get; set; }
		
		/// <summary>
		/// VPC connection properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConnectionProperties VpcConnectionProperties { get; set; }
		
		/// <summary>
		/// Secure Socket Layer (SSL) properties that apply when QuickSight connects to your underlying data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SslProperties SslProperties { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDataSourceRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADOBE_ANALYTICS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_ELASTICSEARCH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATHENA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AURORA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AURORA_POSTGRESQL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_IOT_ANALYTICS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JIRA = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MARIADB = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRESQL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRESTO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDSHIFT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALESFORCE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICENOW = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNOWFLAKE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPARK = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERADATA = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWITTER = 20,
	}
	
	/// <summary>
	/// A member of an Amazon QuickSight group. Currently, group members must be users. Groups can't be members of another group. .
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GroupMember
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string MemberName { get; set; }
	}
	
	/// <summary>
	/// The request object for this operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateGroupRequest
	{
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// A <i>group</i> in Amazon QuickSight consists of a set of users. You can use groups to make it easier to manage access and security. Currently, an Amazon QuickSight subscription can't contain more than 500 Amazon QuickSight groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Group
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateIAMPolicyAssignmentRequest
	{
		
		/// <summary>
		/// Min length: 1
		/// Pattern: (?=^.{2,256}$)(?!.*\s)[0-9a-zA-Z-_.:=+@]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AssignmentName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateIAMPolicyAssignmentRequestAssignmentStatus AssignmentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityMap Identities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateIAMPolicyAssignmentRequestAssignmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IngestionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTemplateAliasRequest
	{
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int TemplateVersionNumber { get; set; }
	}
	
	/// <summary>
	/// The template alias.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TemplateAlias
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+|(\$LATEST)|(\$PUBLISHED)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string AliasName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TemplateVersionNumber { get; set; }
	}
	
	/// <summary>
	/// The source entity of the template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TemplateSourceEntity
	{
		
		/// <summary>
		/// The source analysis of the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TemplateSourceAnalysis SourceAnalysis { get; set; }
		
		/// <summary>
		/// The source template of the template.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TemplateSourceTemplate SourceTemplate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTemplateRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] Permissions { get; set; }
		
		/// <summary>
		/// The source entity of the template.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TemplateSourceEntity SourceEntity { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string VersionDescription { get; set; }
	}
	
	/// <summary>
	/// A physical table type built from the results of the custom SQL query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomSql
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSourceArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 65536
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65536, MinimumLength=1)]
		public string SqlQuery { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public InputColumn[] Columns { get; set; }
	}
	
	/// <summary>
	/// Dashboard version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DashboardVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DashboardError[] Errors { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VersionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DashboardVersionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceEntityArn { get; set; }
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Arn[] DataSetArns { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashboardVersionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_SUCCESSFUL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 5,
	}
	
	/// <summary>
	/// Dashboard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Dashboard
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string DashboardId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Dashboard version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashboardVersion Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastPublishedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashboardErrorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_DENIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_NOT_FOUND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SET_NOT_FOUND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_FAILURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARAMETER_VALUE_INCOMPATIBLE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARAMETER_TYPE_INVALID = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARAMETER_NOT_FOUND = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMN_TYPE_MISMATCH = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMN_GEOGRAPHIC_ROLE_MISMATCH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMN_REPLACEMENT_MISSING = 9,
	}
	
	/// <summary>
	/// Dashboard error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DashboardError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DashboardErrorType Type { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashboardErrorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCESS_DENIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_NOT_FOUND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SET_NOT_FOUND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_FAILURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARAMETER_VALUE_INCOMPATIBLE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARAMETER_TYPE_INVALID = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARAMETER_NOT_FOUND = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMN_TYPE_MISMATCH = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMN_GEOGRAPHIC_ROLE_MISMATCH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMN_REPLACEMENT_MISSING = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashboardFilterAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUICKSIGHT_USER = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringEquals = 0,
	}
	
	/// <summary>
	/// Dashboard summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DashboardSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string DashboardId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> PublishedVersionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastPublishedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashboardUIState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLLAPSED = 1,
	}
	
	/// <summary>
	/// Dashboard version summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DashboardVersionSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VersionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DashboardVersionSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceEntityArn { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashboardVersionSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_SUCCESSFUL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 5,
	}
	
	/// <summary>
	/// Dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhysicalTableMap PhysicalTableMap { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogicalTableMap LogicalTableMap { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputColumn[] OutputColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSetImportMode ImportMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ConsumedSpiceCapacityInBytes { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public ColumnGroup[] ColumnGroups { get; set; }
		
		/// <summary>
		/// The row-level security configuration for the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RowLevelPermissionDataSet RowLevelPermissionDataSet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSetImportMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPICE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECT_QUERY = 1,
	}
	
	/// <summary>
	/// Dataset schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSetSchema
	{
		
		/// <summary>
		/// Maximum items: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public ColumnSchema[] ColumnSchemaList { get; set; }
	}
	
	/// <summary>
	/// Dataset configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSetConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Placeholder { get; set; }
		
		/// <summary>
		/// Dataset schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSetSchema DataSetSchema { get; set; }
		
		/// <summary>
		/// Maximum items: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public ColumnGroupSchema[] ColumnGroupSchemaList { get; set; }
	}
	
	/// <summary>
	/// Dataset reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSetReference
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSetPlaceholder { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSetArn { get; set; }
	}
	
	/// <summary>
	/// Dataset summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSetSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSetSummaryImportMode ImportMode { get; set; }
		
		/// <summary>
		/// The row-level security configuration for the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RowLevelPermissionDataSet RowLevelPermissionDataSet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSetSummaryImportMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPICE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECT_QUERY = 1,
	}
	
	/// <summary>
	/// Error information for the data source creation or update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSourceErrorInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceErrorInfoType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSourceErrorInfoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMEOUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENGINE_VERSION_NOT_SUPPORTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_HOST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_SQL_FAILURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFLICT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 5,
	}
	
	/// <summary>
	/// The structure of a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataSourceId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSourceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
		
		/// <summary>
		/// The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSourceParameters DataSourceParameters { get; set; }
		
		/// <summary>
		/// VPC connection properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConnectionProperties VpcConnectionProperties { get; set; }
		
		/// <summary>
		/// Secure Socket Layer (SSL) properties that apply when QuickSight connects to your underlying data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SslProperties SslProperties { get; set; }
		
		/// <summary>
		/// Error information for the data source creation or update.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSourceErrorInfo ErrorInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADOBE_ANALYTICS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_ELASTICSEARCH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATHENA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AURORA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AURORA_POSTGRESQL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_IOT_ANALYTICS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JIRA = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MARIADB = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRESQL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRESTO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDSHIFT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALESFORCE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICENOW = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNOWFLAKE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPARK = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERADATA = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWITTER = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSourceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_SUCCESSFUL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DataSourceErrorInfoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMEOUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENGINE_VERSION_NOT_SUPPORTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_HOST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERIC_SQL_FAILURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFLICT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 5,
	}
	
	/// <summary>
	/// Date time parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DateTimeParameter
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Timestamp[] Values { get; set; }
	}
	
	/// <summary>
	/// Decimal parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DecimalParameter
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Double[] Values { get; set; }
	}
	
	/// <summary>
	/// An IAM policy assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IAMPolicyAssignment
	{
		
		/// <summary>
		/// Max length: 12
		/// Min length: 12
		/// Pattern: ^[0-9]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(12, MinimumLength=12)]
		public string AwsAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssignmentId { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: (?=^.{2,256}$)(?!.*\s)[0-9a-zA-Z-_.:=+@]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AssignmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityMap Identities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IAMPolicyAssignmentAssignmentStatus AssignmentStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IAMPolicyAssignmentAssignmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	/// <summary>
	/// Information about the SPICE ingestion for a dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Ingestion
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^[a-zA-Z0-9-_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string IngestionId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IngestionIngestionStatus IngestionStatus { get; set; }
		
		/// <summary>
		/// Error information for the SPICE ingestion of a dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorInfo ErrorInfo { get; set; }
		
		/// <summary>
		/// Information about rows for a data set SPICE ingestion.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RowInfo RowInfo { get; set; }
		
		/// <summary>
		/// Information about a queued dataset SPICE ingestion.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueueInfo QueueInfo { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> IngestionTimeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> IngestionSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IngestionRequestSource RequestSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IngestionRequestType RequestType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IngestionIngestionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IngestionRequestSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IngestionRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIAL_INGESTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCREMENTAL_REFRESH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL_REFRESH = 3,
	}
	
	/// <summary>
	/// <p>A template object. A <i>template</i> is an entity in QuickSight that encapsulates the metadata required to create an analysis and that you can use to create a dashboard. A template adds a layer of abstraction by using placeholders to replace the dataset associated with the analysis. You can use templates to create dashboards by replacing dataset placeholders with datasets that follow the same schema that was used to create the source analysis and template.</p> <p>You can share templates across AWS accounts by allowing users in other AWS accounts to create a template or a dashboard from an existing template.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Template
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// A version of a template.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TemplateVersion Version { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string TemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
	}
	
	/// <summary>
	/// A registered user of Amazon QuickSight. Currently, an Amazon QuickSight subscription can't contain more than 20 million users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserRole Role { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserIdentityType IdentityType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHOR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED_AUTHOR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED_READER = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUICKSIGHT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IngestionErrorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE_TO_ASSUME_ROLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INGESTION_SUPERSEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INGESTION_CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SET_DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SET_NOT_SPICE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_UPLOADED_FILE_DELETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_MANIFEST_ERROR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_TOLERANCE_EXCEPTION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPICE_TABLE_NOT_FOUND = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SET_SIZE_LIMIT_EXCEEDED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROW_SIZE_LIMIT_EXCEEDED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_CAPACITY_LIMIT_EXCEEDED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_ERROR = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SOURCE_NOT_FOUND = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM_ROLE_NOT_AVAILABLE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTION_FAILURE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_TABLE_NOT_FOUND = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMISSION_DENIED = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSL_CERTIFICATE_VALIDATION_FAILURE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OAUTH_TOKEN_FAILURE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_API_LIMIT_EXCEEDED_FAILURE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD_AUTHENTICATION_FAILURE = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_SCHEMA_MISMATCH_ERROR = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_DATE_FORMAT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_DATAPREP_SYNTAX = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_RESOURCE_LIMIT_EXCEEDED = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_INVALID_PARAMETER_VALUE = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERY_TIMEOUT = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_NUMERIC_OVERFLOW = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNRESOLVABLE_HOST = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNROUTABLE_HOST = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_EXCEPTION = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_FILE_INACCESSIBLE = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOT_FILE_NOT_FOUND = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOT_DATA_SET_FILE_EMPTY = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_DATA_SOURCE_CONFIG = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SOURCE_AUTH_FAILED = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SOURCE_CONNECTION_FAILED = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE_TO_PROCESS_JSON_FILE = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_SERVICE_ERROR = 39,
	}
	
	/// <summary>
	/// Error information for the SPICE ingestion of a dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ErrorInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ErrorInfoType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ErrorInfoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE_TO_ASSUME_ROLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INGESTION_SUPERSEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INGESTION_CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SET_DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SET_NOT_SPICE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_UPLOADED_FILE_DELETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_MANIFEST_ERROR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_TOLERANCE_EXCEPTION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPICE_TABLE_NOT_FOUND = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SET_SIZE_LIMIT_EXCEEDED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROW_SIZE_LIMIT_EXCEEDED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_CAPACITY_LIMIT_EXCEEDED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_ERROR = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SOURCE_NOT_FOUND = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM_ROLE_NOT_AVAILABLE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTION_FAILURE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_TABLE_NOT_FOUND = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMISSION_DENIED = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSL_CERTIFICATE_VALIDATION_FAILURE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OAUTH_TOKEN_FAILURE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_API_LIMIT_EXCEEDED_FAILURE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD_AUTHENTICATION_FAILURE = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_SCHEMA_MISMATCH_ERROR = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_DATE_FORMAT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_DATAPREP_SYNTAX = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_RESOURCE_LIMIT_EXCEEDED = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_INVALID_PARAMETER_VALUE = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERY_TIMEOUT = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_NUMERIC_OVERFLOW = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNRESOLVABLE_HOST = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNROUTABLE_HOST = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL_EXCEPTION = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3_FILE_INACCESSIBLE = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOT_FILE_NOT_FOUND = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOT_DATA_SET_FILE_EMPTY = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_DATA_SOURCE_CONFIG = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SOURCE_AUTH_FAILED = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SOURCE_CONNECTION_FAILED = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE_TO_PROCESS_JSON_FILE = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_SERVICE_ERROR = 39,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FileFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELF = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XLSX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 5,
	}
	
	/// <summary>
	/// A transform operation that filters rows based on a condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FilterOperation
	{
		
		/// <summary>
		/// Max length: 4096
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096, MinimumLength=1)]
		public string ConditionExpression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GeoSpatialCountryCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUICKSIGHT = 1,
	}
	
	/// <summary>
	/// IAM policy assignment summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IAMPolicyAssignmentSummary
	{
		
		/// <summary>
		/// Min length: 1
		/// Pattern: (?=^.{2,256}$)(?!.*\s)[0-9a-zA-Z-_.:=+@]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AssignmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IAMPolicyAssignmentSummaryAssignmentStatus AssignmentStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IAMPolicyAssignmentSummaryAssignmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	/// <summary>
	/// Information about rows for a data set SPICE ingestion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RowInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RowsIngested { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RowsDropped { get; set; }
	}
	
	/// <summary>
	/// Information about a queued dataset SPICE ingestion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class QueueInfo
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WaitingOnIngestion { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string QueuedIngestion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IngestionRequestSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IngestionRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIAL_INGESTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCREMENTAL_REFRESH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL_REFRESH = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputColumnDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECIMAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATETIME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOLEAN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 6,
	}
	
	/// <summary>
	/// Metadata for a column that is used as the input of a transform operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputColumn
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputColumnType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputColumnType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECIMAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATETIME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOLEAN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 6,
	}
	
	/// <summary>
	/// Integer parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IntegerParameter
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Long[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JoinType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INNER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT = 3,
	}
	
	/// <summary>
	/// Join instruction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JoinInstruction
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [0-9a-zA-Z-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string LeftOperand { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [0-9a-zA-Z-]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string RightOperand { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JoinInstructionType Type { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string OnClause { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JoinInstructionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INNER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListIAMPolicyAssignmentsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListIAMPolicyAssignmentsRequestAssignmentStatus AssignmentStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListIAMPolicyAssignmentsRequestAssignmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	/// <summary>
	/// Information about the source of a logical table. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LogicalTableSource
	{
		
		/// <summary>
		/// Join instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JoinInstruction JoinInstruction { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [0-9a-zA-Z-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string PhysicalTableId { get; set; }
	}
	
	/// <summary>
	/// Amazon S3 manifest file location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ManifestFileLocation
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Key { get; set; }
	}
	
	/// <summary>
	/// Output column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputColumn
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputColumnType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OutputColumnType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECIMAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATETIME = 3,
	}
	
	/// <summary>
	/// A physical table type for relational data sources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RelationalTable
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSourceArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string Schema { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public InputColumn[] InputColumns { get; set; }
	}
	
	/// <summary>
	/// A physical table type for as S3 data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3Source
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSourceArn { get; set; }
		
		/// <summary>
		/// Information about the format for a source file or files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UploadSettings UploadSettings { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 2048
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public InputColumn[] InputColumns { get; set; }
	}
	
	/// <summary>
	/// A transform operation that projects columns. Operations that come after a projection can only refer to projected columns.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectOperation
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 2000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public String[] ProjectedColumns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHOR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED_AUTHOR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED_READER = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterUserRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RegisterUserRequestIdentityType IdentityType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RegisterUserRequestUserRole UserRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 2
		/// Pattern: [\w+=.@-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=2)]
		public string SessionName { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegisterUserRequestIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUICKSIGHT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegisterUserRequestUserRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHOR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED_AUTHOR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED_READER = 4,
	}
	
	/// <summary>
	/// A transform operation that renames a column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RenameColumnOperation
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ColumnName { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string NewColumnName { get; set; }
	}
	
	/// <summary>
	/// Information about the format for a source file or files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UploadSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UploadSettingsFormat Format { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> StartFromRow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ContainsHeader { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UploadSettingsTextQualifier TextQualifier { get; set; }
		
		/// <summary>
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength=1)]
		public string Delimiter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UploadSettingsFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELF = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XLSX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UploadSettingsTextQualifier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOUBLE_QUOTE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_QUOTE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SearchDashboardsRequest
	{
		
		/// <summary>
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public DashboardSearchFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// String parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StringParameter
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] Values { get; set; }
	}
	
	/// <summary>
	/// A transform operation that tags a column with additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagColumnOperation
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ColumnName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 16
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public ColumnTag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A version of a template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TemplateVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public TemplateError[] Errors { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VersionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateVersionStatus Status { get; set; }
		
		/// <summary>
		/// Maximum items: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public DataSetConfiguration[] DataSetConfigurations { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceEntityArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TemplateVersionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_SUCCESSFUL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TemplateErrorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_NOT_FOUND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SET_NOT_FOUND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_FAILURE = 2,
	}
	
	/// <summary>
	/// List of errors that occurred when the template version creation failed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TemplateError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateErrorType Type { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TemplateErrorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_NOT_FOUND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SET_NOT_FOUND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_FAILURE = 2,
	}
	
	/// <summary>
	/// The template summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TemplateSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\w\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string TemplateId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> LatestVersionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTime { get; set; }
	}
	
	/// <summary>
	/// The template version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TemplateVersionSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> VersionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TemplateVersionSummaryStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TemplateVersionSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_SUCCESSFUL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_SUCCESSFUL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TextQualifier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOUBLE_QUOTE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_QUOTE = 1,
	}
	
	/// <summary>
	/// A data transformation on a logical table. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransformOperation
	{
		
		/// <summary>
		/// A transform operation that projects columns. Operations that come after a projection can only refer to projected columns.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectOperation ProjectOperation { get; set; }
		
		/// <summary>
		/// A transform operation that filters rows based on a condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FilterOperation FilterOperation { get; set; }
		
		/// <summary>
		/// A transform operation that creates calculated columns. Columns created in one such operation form a lexical closure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateColumnsOperation CreateColumnsOperation { get; set; }
		
		/// <summary>
		/// A transform operation that renames a column.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RenameColumnOperation RenameColumnOperation { get; set; }
		
		/// <summary>
		/// A transform operation that casts a column to a different type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CastColumnTypeOperation CastColumnTypeOperation { get; set; }
		
		/// <summary>
		/// A transform operation that tags a column with additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TagColumnOperation TagColumnOperation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDashboardPermissionsRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ResourcePermission[] GrantPermissions { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ResourcePermission[] RevokePermissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDashboardRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Dashboard source entity.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DashboardSourceEntity SourceEntity { get; set; }
		
		/// <summary>
		/// Parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Parameters Parameters { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string VersionDescription { get; set; }
		
		/// <summary>
		/// Dashboard publish options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashboardPublishOptions DashboardPublishOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDataSetPermissionsRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] GrantPermissions { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] RevokePermissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDataSetRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PhysicalTableMap PhysicalTableMap { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LogicalTableMap LogicalTableMap { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateDataSetRequestImportMode ImportMode { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public ColumnGroup[] ColumnGroups { get; set; }
		
		/// <summary>
		/// The row-level security configuration for the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RowLevelPermissionDataSet RowLevelPermissionDataSet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateDataSetRequestImportMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPICE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECT_QUERY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDataSourcePermissionsRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] GrantPermissions { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] RevokePermissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDataSourceRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSourceParameters DataSourceParameters { get; set; }
		
		/// <summary>
		/// Data source credentials.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSourceCredentials Credentials { get; set; }
		
		/// <summary>
		/// VPC connection properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConnectionProperties VpcConnectionProperties { get; set; }
		
		/// <summary>
		/// Secure Socket Layer (SSL) properties that apply when QuickSight connects to your underlying data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SslProperties SslProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateGroupRequest
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateIAMPolicyAssignmentRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateIAMPolicyAssignmentRequestAssignmentStatus AssignmentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdentityMap Identities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateIAMPolicyAssignmentRequestAssignmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTemplateAliasRequest
	{
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int TemplateVersionNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTemplatePermissionsRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ResourcePermission[] GrantPermissions { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ResourcePermission[] RevokePermissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTemplateRequest
	{
		
		/// <summary>
		/// The source entity of the template.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TemplateSourceEntity SourceEntity { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string VersionDescription { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateUserRequestRole Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateUserRequestRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHOR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED_AUTHOR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED_READER = 4,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Cancels an ongoing ingestion of data into SPICE.
		/// CancelIngestion /accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <param name="DataSetId">The ID of the dataset used in the ingestion.</param>
		/// <param name="IngestionId">An ID for the ingestion.</param>
		/// <returns>Success</returns>
		public async Task<CancelIngestionResponse> CancelIngestionAsync(string AwsAccountId, string DataSetId, string IngestionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId))+"/ingestions/"+ (IngestionId==null? "" : Uri.EscapeDataString(IngestionId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CancelIngestionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates and starts a new SPICE ingestion on a dataset</p> <p>Any ingestions operating on tagged datasets inherit the same tags automatically for use in access control. For an example, see <a href="https://aws.amazon.com/premiumsupport/knowledge-center/iam-ec2-resource-tags/">How do I create an IAM policy to control access to Amazon EC2 resources using tags?</a> in the AWS Knowledge Center. Tags are visible on the tagged dataset, but not on the ingestion resource.</p>
		/// CreateIngestion /accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}
		/// </summary>
		/// <param name="DataSetId">The ID of the dataset used in the ingestion.</param>
		/// <param name="IngestionId">An ID for the ingestion.</param>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <returns>Success</returns>
		public async Task<CreateIngestionResponse> CreateIngestionAsync(string DataSetId, string IngestionId, string AwsAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId))+"/ingestions/"+ (IngestionId==null? "" : Uri.EscapeDataString(IngestionId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateIngestionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes a SPICE ingestion.
		/// DescribeIngestion /accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <param name="DataSetId">The ID of the dataset used in the ingestion.</param>
		/// <param name="IngestionId">An ID for the ingestion.</param>
		/// <returns>Success</returns>
		public async Task<DescribeIngestionResponse> DescribeIngestionAsync(string AwsAccountId, string DataSetId, string IngestionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId))+"/ingestions/"+ (IngestionId==null? "" : Uri.EscapeDataString(IngestionId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeIngestionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a dashboard from a template. To first create a template, see the CreateTemplate API operation.</p> <p>A dashboard is an entity in QuickSight that identifies QuickSight reports, created from analyses. You can share QuickSight dashboards. With the right permissions, you can create scheduled email reports from them. The <code>CreateDashboard</code>, <code>DescribeDashboard</code>, and <code>ListDashboardsByUser</code> API operations act on the dashboard entity. If you have the correct permissions, you can create a dashboard from a template that exists in a different AWS account.</p>
		/// CreateDashboard /accounts/{AwsAccountId}/dashboards/{DashboardId}
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account where you want to create the dashboard.</param>
		/// <param name="DashboardId">The ID for the dashboard, also added to the IAM policy.</param>
		/// <returns>Success</returns>
		public async Task<CreateDashboardResponse> CreateDashboardAsync(string AwsAccountId, string DashboardId, CreateDashboardBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/dashboards/"+ (DashboardId==null? "" : Uri.EscapeDataString(DashboardId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDashboardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a dashboard.
		/// DeleteDashboard /accounts/{AwsAccountId}/dashboards/{DashboardId}
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the dashboard that you're deleting.</param>
		/// <param name="DashboardId">The ID for the dashboard.</param>
		/// <param name="version_number">The version number of the dashboard. If the version number property is provided, only the specified version of the dashboard is deleted.</param>
		/// <returns>Success</returns>
		public async Task<DeleteDashboardResponse> DeleteDashboardAsync(string AwsAccountId, string DashboardId, int version_number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/dashboards/"+ (DashboardId==null? "" : Uri.EscapeDataString(DashboardId))+"&version_number="+version_number;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDashboardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides a summary for a dashboard.
		/// DescribeDashboard /accounts/{AwsAccountId}/dashboards/{DashboardId}
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the dashboard that you're describing.</param>
		/// <param name="DashboardId">The ID for the dashboard.</param>
		/// <param name="version_number">The version number for the dashboard. If a version number isn't passed, the latest published dashboard version is described. </param>
		/// <param name="alias_name">The alias name.</param>
		/// <returns>Success</returns>
		public async Task<DescribeDashboardResponse> DescribeDashboardAsync(string AwsAccountId, string DashboardId, int version_number, string alias_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/dashboards/"+ (DashboardId==null? "" : Uri.EscapeDataString(DashboardId))+"&version_number="+version_number+"&alias_name=" + (alias_name==null? "" : Uri.EscapeDataString(alias_name));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDashboardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a dashboard in an AWS account.
		/// UpdateDashboard /accounts/{AwsAccountId}/dashboards/{DashboardId}
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the dashboard that you're updating.</param>
		/// <param name="DashboardId">The ID for the dashboard.</param>
		/// <returns>Success</returns>
		public async Task<UpdateDashboardResponse> UpdateDashboardAsync(string AwsAccountId, string DashboardId, UpdateDashboardBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/dashboards/"+ (DashboardId==null? "" : Uri.EscapeDataString(DashboardId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDashboardResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a dataset.
		/// CreateDataSet /accounts/{AwsAccountId}/data-sets
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <returns>Success</returns>
		public async Task<CreateDataSetResponse> CreateDataSetAsync(string AwsAccountId, CreateDataSetBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sets";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDataSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all of the datasets belonging to the current AWS account in an AWS Region.</p> <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/*</code>.</p>
		/// ListDataSets /accounts/{AwsAccountId}/data-sets
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <param name="next_token">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="max_results">The maximum number of results to be returned per request.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDataSetsResponse> ListDataSetsAsync(string AwsAccountId, string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sets&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDataSetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a data source.
		/// CreateDataSource /accounts/{AwsAccountId}/data-sources
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <returns>Success</returns>
		public async Task<CreateDataSourceResponse> CreateDataSourceAsync(string AwsAccountId, CreateDataSourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sources";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDataSourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists data sources in current AWS Region that belong to this AWS account.
		/// ListDataSources /accounts/{AwsAccountId}/data-sources
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <param name="next_token">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="max_results">The maximum number of results to be returned per request.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDataSourcesResponse> ListDataSourcesAsync(string AwsAccountId, string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sources&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDataSourcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon QuickSight group.</p> <p>The permissions resource is <code>arn:aws:quicksight:us-east-1:<i>&lt;relevant-aws-account-id&gt;</i>:group/default/<i>&lt;group-name&gt;</i> </code>.</p> <p>The response is a group object.</p>
		/// CreateGroup /accounts/{AwsAccountId}/namespaces/{Namespace}/groups
		/// </summary>
		/// <param name="AwsAccountId">The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.</param>
		/// <param name="Namespace">The namespace. Currently, you should set this to <code>default</code>.</param>
		/// <returns>Success</returns>
		public async Task<CreateGroupResponse> CreateGroupAsync(string AwsAccountId, string Namespace, CreateGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/groups";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all user groups in Amazon QuickSight.
		/// ListGroups /accounts/{AwsAccountId}/namespaces/{Namespace}/groups
		/// </summary>
		/// <param name="AwsAccountId">The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.</param>
		/// <param name="next_token">A pagination token that can be used in a subsequent request.</param>
		/// <param name="max_results">The maximum number of results to return.</param>
		/// <param name="Namespace">The namespace. Currently, you should set this to <code>default</code>.</param>
		/// <returns>Success</returns>
		public async Task<ListGroupsResponse> ListGroupsAsync(string AwsAccountId, string next_token, int max_results, string Namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/groups&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds an Amazon QuickSight user to an Amazon QuickSight group.
		/// CreateGroupMembership /accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}
		/// </summary>
		/// <param name="MemberName">The name of the user that you want to add to the group membership.</param>
		/// <param name="GroupName">The name of the group that you want to add the user to.</param>
		/// <param name="AwsAccountId">The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.</param>
		/// <param name="Namespace">The namespace. Currently, you should set this to <code>default</code>.</param>
		/// <returns>Success</returns>
		public async Task<CreateGroupMembershipResponse> CreateGroupMembershipAsync(string MemberName, string GroupName, string AwsAccountId, string Namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/groups/"+ (GroupName==null? "" : Uri.EscapeDataString(GroupName))+"/members/"+ (MemberName==null? "" : Uri.EscapeDataString(MemberName));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateGroupMembershipResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a user from a group so that the user is no longer a member of the group.
		/// DeleteGroupMembership /accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}
		/// </summary>
		/// <param name="MemberName">The name of the user that you want to delete from the group membership.</param>
		/// <param name="GroupName">The name of the group that you want to delete the user from.</param>
		/// <param name="AwsAccountId">The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.</param>
		/// <param name="Namespace">The namespace. Currently, you should set this to <code>default</code>.</param>
		/// <returns>Success</returns>
		public async Task<DeleteGroupMembershipResponse> DeleteGroupMembershipAsync(string MemberName, string GroupName, string AwsAccountId, string Namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/groups/"+ (GroupName==null? "" : Uri.EscapeDataString(GroupName))+"/members/"+ (MemberName==null? "" : Uri.EscapeDataString(MemberName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteGroupMembershipResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an assignment with one specified IAM policy, identified by its Amazon Resource Name (ARN). This policy will be assigned to specified groups or users of Amazon QuickSight. The users and groups need to be in the same namespace.
		/// CreateIAMPolicyAssignment /accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account where you want to assign an IAM policy to QuickSight users or groups.</param>
		/// <param name="Namespace">The namespace that contains the assignment.</param>
		/// <returns>Success</returns>
		public async Task<CreateIAMPolicyAssignmentResponse> CreateIAMPolicyAssignmentAsync(string AwsAccountId, string Namespace, CreateIAMPolicyAssignmentBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/iam-policy-assignments/";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateIAMPolicyAssignmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a template from an existing QuickSight analysis or template. You can use the resulting template to create a dashboard.</p> <p>A <i>template</i> is an entity in QuickSight that encapsulates the metadata required to create an analysis and that you can use to create s dashboard. A template adds a layer of abstraction by using placeholders to replace the dataset associated with the analysis. You can use templates to create dashboards by replacing dataset placeholders with datasets that follow the same schema that was used to create the source analysis and template.</p>
		/// CreateTemplate /accounts/{AwsAccountId}/templates/{TemplateId}
		/// </summary>
		/// <param name="AwsAccountId">The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.</param>
		/// <param name="TemplateId">An ID for the template that you want to create. This template is unique per AWS Region in each AWS account.</param>
		/// <returns>Success</returns>
		public async Task<CreateTemplateResponse> CreateTemplateAsync(string AwsAccountId, string TemplateId, CreateTemplateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/templates/"+ (TemplateId==null? "" : Uri.EscapeDataString(TemplateId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a template.
		/// DeleteTemplate /accounts/{AwsAccountId}/templates/{TemplateId}
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the template that you're deleting.</param>
		/// <param name="TemplateId">An ID for the template you want to delete.</param>
		/// <param name="version_number">Specifies the version of the template that you want to delete. If you don't provide a version number, <code>DeleteTemplate</code> deletes all versions of the template. </param>
		/// <returns>Success</returns>
		public async Task<DeleteTemplateResponse> DeleteTemplateAsync(string AwsAccountId, string TemplateId, int version_number, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/templates/"+ (TemplateId==null? "" : Uri.EscapeDataString(TemplateId))+"&version_number="+version_number;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes a template's metadata.
		/// DescribeTemplate /accounts/{AwsAccountId}/templates/{TemplateId}
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the template that you're describing.</param>
		/// <param name="TemplateId">The ID for the template.</param>
		/// <param name="version_number">(Optional) The number for the version to describe. If a <code>VersionNumber</code> parameter value isn't provided, the latest version of the template is described.</param>
		/// <param name="alias_name">The alias of the template that you want to describe. If you name a specific alias, you describe the version that the alias points to. You can specify the latest version of the template by providing the keyword <code>$LATEST</code> in the <code>AliasName</code> parameter. The keyword <code>$PUBLISHED</code> doesn't apply to templates.</param>
		/// <returns>Success</returns>
		public async Task<DescribeTemplateResponse> DescribeTemplateAsync(string AwsAccountId, string TemplateId, int version_number, string alias_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/templates/"+ (TemplateId==null? "" : Uri.EscapeDataString(TemplateId))+"&version_number="+version_number+"&alias_name=" + (alias_name==null? "" : Uri.EscapeDataString(alias_name));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a template from an existing Amazon QuickSight analysis or another template.
		/// UpdateTemplate /accounts/{AwsAccountId}/templates/{TemplateId}
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the template that you're updating.</param>
		/// <param name="TemplateId">The ID for the template.</param>
		/// <returns>Success</returns>
		public async Task<UpdateTemplateResponse> UpdateTemplateAsync(string AwsAccountId, string TemplateId, UpdateTemplateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/templates/"+ (TemplateId==null? "" : Uri.EscapeDataString(TemplateId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a template alias for a template.
		/// CreateTemplateAlias /accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the template that you creating an alias for.</param>
		/// <param name="TemplateId">An ID for the template.</param>
		/// <param name="AliasName">The name that you want to give to the template alias that you're creating. Don't start the alias name with the <code>$</code> character. Alias names that start with <code>$</code> are reserved by QuickSight. </param>
		/// <returns>Success</returns>
		public async Task<CreateTemplateAliasResponse> CreateTemplateAliasAsync(string AwsAccountId, string TemplateId, string AliasName, CreateTemplateAliasBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/templates/"+ (TemplateId==null? "" : Uri.EscapeDataString(TemplateId))+"/aliases/"+ (AliasName==null? "" : Uri.EscapeDataString(AliasName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateTemplateAliasResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the item that the specified template alias points to. If you provide a specific alias, you delete the version of the template that the alias points to.
		/// DeleteTemplateAlias /accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the item to delete.</param>
		/// <param name="TemplateId">The ID for the template that the specified alias is for.</param>
		/// <param name="AliasName">The name for the template alias. If you name a specific alias, you delete the version that the alias points to. You can specify the latest version of the template by providing the keyword <code>$LATEST</code> in the <code>AliasName</code> parameter. </param>
		/// <returns>Success</returns>
		public async Task<DeleteTemplateAliasResponse> DeleteTemplateAliasAsync(string AwsAccountId, string TemplateId, string AliasName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/templates/"+ (TemplateId==null? "" : Uri.EscapeDataString(TemplateId))+"/aliases/"+ (AliasName==null? "" : Uri.EscapeDataString(AliasName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteTemplateAliasResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the template alias for a template.
		/// DescribeTemplateAlias /accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the template alias that you're describing.</param>
		/// <param name="TemplateId">The ID for the template.</param>
		/// <param name="AliasName">The name of the template alias that you want to describe. If you name a specific alias, you describe the version that the alias points to. You can specify the latest version of the template by providing the keyword <code>$LATEST</code> in the <code>AliasName</code> parameter. The keyword <code>$PUBLISHED</code> doesn't apply to templates.</param>
		/// <returns>Success</returns>
		public async Task<DescribeTemplateAliasResponse> DescribeTemplateAliasAsync(string AwsAccountId, string TemplateId, string AliasName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/templates/"+ (TemplateId==null? "" : Uri.EscapeDataString(TemplateId))+"/aliases/"+ (AliasName==null? "" : Uri.EscapeDataString(AliasName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeTemplateAliasResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the template alias of a template.
		/// UpdateTemplateAlias /accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the template alias that you're updating.</param>
		/// <param name="TemplateId">The ID for the template.</param>
		/// <param name="AliasName">The alias of the template that you want to update. If you name a specific alias, you update the version that the alias points to. You can specify the latest version of the template by providing the keyword <code>$LATEST</code> in the <code>AliasName</code> parameter. The keyword <code>$PUBLISHED</code> doesn't apply to templates.</param>
		/// <returns>Success</returns>
		public async Task<UpdateTemplateAliasResponse> UpdateTemplateAliasAsync(string AwsAccountId, string TemplateId, string AliasName, UpdateTemplateAliasBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/templates/"+ (TemplateId==null? "" : Uri.EscapeDataString(TemplateId))+"/aliases/"+ (AliasName==null? "" : Uri.EscapeDataString(AliasName));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateTemplateAliasResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a dataset.
		/// DeleteDataSet /accounts/{AwsAccountId}/data-sets/{DataSetId}
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <param name="DataSetId">The ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account.</param>
		/// <returns>Success</returns>
		public async Task<DeleteDataSetResponse> DeleteDataSetAsync(string AwsAccountId, string DataSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDataSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes a dataset.
		/// DescribeDataSet /accounts/{AwsAccountId}/data-sets/{DataSetId}
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <param name="DataSetId">The ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account.</param>
		/// <returns>Success</returns>
		public async Task<DescribeDataSetResponse> DescribeDataSetAsync(string AwsAccountId, string DataSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDataSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a dataset.
		/// UpdateDataSet /accounts/{AwsAccountId}/data-sets/{DataSetId}
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <param name="DataSetId">The ID for the dataset that you want to update. This ID is unique per AWS Region for each AWS account.</param>
		/// <returns>Success</returns>
		public async Task<UpdateDataSetResponse> UpdateDataSetAsync(string AwsAccountId, string DataSetId, UpdateDataSetBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDataSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the data source permanently. This action breaks all the datasets that reference the deleted data source.
		/// DeleteDataSource /accounts/{AwsAccountId}/data-sources/{DataSourceId}
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <param name="DataSourceId">The ID of the data source. This ID is unique per AWS Region for each AWS account.</param>
		/// <returns>Success</returns>
		public async Task<DeleteDataSourceResponse> DeleteDataSourceAsync(string AwsAccountId, string DataSourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sources/"+ (DataSourceId==null? "" : Uri.EscapeDataString(DataSourceId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDataSourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes a data source.
		/// DescribeDataSource /accounts/{AwsAccountId}/data-sources/{DataSourceId}
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <param name="DataSourceId">The ID of the data source. This ID is unique per AWS Region for each AWS account.</param>
		/// <returns>Success</returns>
		public async Task<DescribeDataSourceResponse> DescribeDataSourceAsync(string AwsAccountId, string DataSourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sources/"+ (DataSourceId==null? "" : Uri.EscapeDataString(DataSourceId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDataSourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a data source.
		/// UpdateDataSource /accounts/{AwsAccountId}/data-sources/{DataSourceId}
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <param name="DataSourceId">The ID of the data source. This ID is unique per AWS Region for each AWS account. </param>
		/// <returns>Success</returns>
		public async Task<UpdateDataSourceResponse> UpdateDataSourceAsync(string AwsAccountId, string DataSourceId, UpdateDataSourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sources/"+ (DataSourceId==null? "" : Uri.EscapeDataString(DataSourceId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDataSourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a user group from Amazon QuickSight.
		/// DeleteGroup /accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}
		/// </summary>
		/// <param name="GroupName">The name of the group that you want to delete.</param>
		/// <param name="AwsAccountId">The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.</param>
		/// <param name="Namespace">The namespace. Currently, you should set this to <code>default</code>.</param>
		/// <returns>Success</returns>
		public async Task<DeleteGroupResponse> DeleteGroupAsync(string GroupName, string AwsAccountId, string Namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/groups/"+ (GroupName==null? "" : Uri.EscapeDataString(GroupName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an Amazon QuickSight group's description and Amazon Resource Name (ARN).
		/// DescribeGroup /accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}
		/// </summary>
		/// <param name="GroupName">The name of the group that you want to describe.</param>
		/// <param name="AwsAccountId">The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.</param>
		/// <param name="Namespace">The namespace. Currently, you should set this to <code>default</code>.</param>
		/// <returns>Success</returns>
		public async Task<DescribeGroupResponse> DescribeGroupAsync(string GroupName, string AwsAccountId, string Namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/groups/"+ (GroupName==null? "" : Uri.EscapeDataString(GroupName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Changes a group description.
		/// UpdateGroup /accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}
		/// </summary>
		/// <param name="GroupName">The name of the group that you want to update.</param>
		/// <param name="AwsAccountId">The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.</param>
		/// <param name="Namespace">The namespace. Currently, you should set this to <code>default</code>.</param>
		/// <returns>Success</returns>
		public async Task<UpdateGroupResponse> UpdateGroupAsync(string GroupName, string AwsAccountId, string Namespace, UpdateGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/groups/"+ (GroupName==null? "" : Uri.EscapeDataString(GroupName));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing IAM policy assignment.
		/// DeleteIAMPolicyAssignment /accounts/{AwsAccountId}/namespace/{Namespace}/iam-policy-assignments/{AssignmentName}
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID where you want to delete the IAM policy assignment.</param>
		/// <param name="AssignmentName">The name of the assignment. </param>
		/// <param name="Namespace">The namespace that contains the assignment.</param>
		/// <returns>Success</returns>
		public async Task<DeleteIAMPolicyAssignmentResponse> DeleteIAMPolicyAssignmentAsync(string AwsAccountId, string AssignmentName, string Namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespace/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/iam-policy-assignments/"+ (AssignmentName==null? "" : Uri.EscapeDataString(AssignmentName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteIAMPolicyAssignmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the Amazon QuickSight user that is associated with the identity of the AWS Identity and Access Management (IAM) user or role that's making the call. The IAM user isn't deleted as a result of this call.
		/// DeleteUser /accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}
		/// </summary>
		/// <param name="UserName">The name of the user that you want to delete.</param>
		/// <param name="AwsAccountId">The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.</param>
		/// <param name="Namespace">The namespace. Currently, you should set this to <code>default</code>.</param>
		/// <returns>Success</returns>
		public async Task<DeleteUserResponse> DeleteUserAsync(string UserName, string AwsAccountId, string Namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/users/"+ (UserName==null? "" : Uri.EscapeDataString(UserName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a user, given the user name.
		/// DescribeUser /accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}
		/// </summary>
		/// <param name="UserName">The name of the user that you want to describe.</param>
		/// <param name="AwsAccountId">The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.</param>
		/// <param name="Namespace">The namespace. Currently, you should set this to <code>default</code>.</param>
		/// <returns>Success</returns>
		public async Task<DescribeUserResponse> DescribeUserAsync(string UserName, string AwsAccountId, string Namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/users/"+ (UserName==null? "" : Uri.EscapeDataString(UserName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an Amazon QuickSight user.
		/// UpdateUser /accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}
		/// </summary>
		/// <param name="UserName">The Amazon QuickSight user name that you want to update.</param>
		/// <param name="AwsAccountId">The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.</param>
		/// <param name="Namespace">The namespace. Currently, you should set this to <code>default</code>.</param>
		/// <returns>Success</returns>
		public async Task<UpdateUserResponse> UpdateUserAsync(string UserName, string AwsAccountId, string Namespace, UpdateUserBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/users/"+ (UserName==null? "" : Uri.EscapeDataString(UserName));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a user identified by its principal ID.
		/// DeleteUserByPrincipalId /accounts/{AwsAccountId}/namespaces/{Namespace}/user-principals/{PrincipalId}
		/// </summary>
		/// <param name="PrincipalId">The principal ID of the user.</param>
		/// <param name="AwsAccountId">The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.</param>
		/// <param name="Namespace">The namespace. Currently, you should set this to <code>default</code>.</param>
		/// <returns>Success</returns>
		public async Task<DeleteUserByPrincipalIdResponse> DeleteUserByPrincipalIdAsync(string PrincipalId, string AwsAccountId, string Namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/user-principals/"+ (PrincipalId==null? "" : Uri.EscapeDataString(PrincipalId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteUserByPrincipalIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes read and write permissions for a dashboard.
		/// DescribeDashboardPermissions /accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the dashboard that you're describing permissions for.</param>
		/// <param name="DashboardId">The ID for the dashboard, also added to the IAM policy.</param>
		/// <returns>Success</returns>
		public async Task<DescribeDashboardPermissionsResponse> DescribeDashboardPermissionsAsync(string AwsAccountId, string DashboardId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/dashboards/"+ (DashboardId==null? "" : Uri.EscapeDataString(DashboardId))+"/permissions";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDashboardPermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates read and write permissions on a dashboard.
		/// UpdateDashboardPermissions /accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the dashboard whose permissions you're updating.</param>
		/// <param name="DashboardId">The ID for the dashboard.</param>
		/// <returns>Success</returns>
		public async Task<UpdateDashboardPermissionsResponse> UpdateDashboardPermissionsAsync(string AwsAccountId, string DashboardId, UpdateDashboardPermissionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/dashboards/"+ (DashboardId==null? "" : Uri.EscapeDataString(DashboardId))+"/permissions";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDashboardPermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the permissions on a dataset.</p> <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/data-set-id</code>.</p>
		/// DescribeDataSetPermissions /accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <param name="DataSetId">The ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account.</param>
		/// <returns>Success</returns>
		public async Task<DescribeDataSetPermissionsResponse> DescribeDataSetPermissionsAsync(string AwsAccountId, string DataSetId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId))+"/permissions";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDataSetPermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the permissions on a dataset.</p> <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/data-set-id</code>.</p>
		/// UpdateDataSetPermissions /accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <param name="DataSetId">The ID for the dataset whose permissions you want to update. This ID is unique per AWS Region for each AWS account.</param>
		/// <returns>Success</returns>
		public async Task<UpdateDataSetPermissionsResponse> UpdateDataSetPermissionsAsync(string AwsAccountId, string DataSetId, UpdateDataSetPermissionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId))+"/permissions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDataSetPermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the resource permissions for a data source.
		/// DescribeDataSourcePermissions /accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <param name="DataSourceId">The ID of the data source. This ID is unique per AWS Region for each AWS account.</param>
		/// <returns>Success</returns>
		public async Task<DescribeDataSourcePermissionsResponse> DescribeDataSourcePermissionsAsync(string AwsAccountId, string DataSourceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sources/"+ (DataSourceId==null? "" : Uri.EscapeDataString(DataSourceId))+"/permissions";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDataSourcePermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the permissions to a data source.
		/// UpdateDataSourcePermissions /accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions
		/// </summary>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <param name="DataSourceId">The ID of the data source. This ID is unique per AWS Region for each AWS account. </param>
		/// <returns>Success</returns>
		public async Task<UpdateDataSourcePermissionsResponse> UpdateDataSourcePermissionsAsync(string AwsAccountId, string DataSourceId, UpdateDataSourcePermissionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sources/"+ (DataSourceId==null? "" : Uri.EscapeDataString(DataSourceId))+"/permissions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDataSourcePermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes an existing IAM policy assignment, as specified by the assignment name.
		/// DescribeIAMPolicyAssignment /accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the assignment that you want to describe.</param>
		/// <param name="AssignmentName">The name of the assignment. </param>
		/// <param name="Namespace">The namespace that contains the assignment.</param>
		/// <returns>Success</returns>
		public async Task<DescribeIAMPolicyAssignmentResponse> DescribeIAMPolicyAssignmentAsync(string AwsAccountId, string AssignmentName, string Namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/iam-policy-assignments/"+ (AssignmentName==null? "" : Uri.EscapeDataString(AssignmentName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeIAMPolicyAssignmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing IAM policy assignment. This operation updates only the optional parameter or parameters that are specified in the request.
		/// UpdateIAMPolicyAssignment /accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the IAM policy assignment.</param>
		/// <param name="AssignmentName">The name of the assignment. This name must be unique within an AWS account.</param>
		/// <param name="Namespace">The namespace of the assignment.</param>
		/// <returns>Success</returns>
		public async Task<UpdateIAMPolicyAssignmentResponse> UpdateIAMPolicyAssignmentAsync(string AwsAccountId, string AssignmentName, string Namespace, UpdateIAMPolicyAssignmentBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/iam-policy-assignments/"+ (AssignmentName==null? "" : Uri.EscapeDataString(AssignmentName));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateIAMPolicyAssignmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes read and write permissions on a template.
		/// DescribeTemplatePermissions /accounts/{AwsAccountId}/templates/{TemplateId}/permissions
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the template that you're describing.</param>
		/// <param name="TemplateId">The ID for the template.</param>
		/// <returns>Success</returns>
		public async Task<DescribeTemplatePermissionsResponse> DescribeTemplatePermissionsAsync(string AwsAccountId, string TemplateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/templates/"+ (TemplateId==null? "" : Uri.EscapeDataString(TemplateId))+"/permissions";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeTemplatePermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the resource permissions for a template.
		/// UpdateTemplatePermissions /accounts/{AwsAccountId}/templates/{TemplateId}/permissions
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the template.</param>
		/// <param name="TemplateId">The ID for the template.</param>
		/// <returns>Success</returns>
		public async Task<UpdateTemplatePermissionsResponse> UpdateTemplatePermissionsAsync(string AwsAccountId, string TemplateId, UpdateTemplatePermissionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/templates/"+ (TemplateId==null? "" : Uri.EscapeDataString(TemplateId))+"/permissions";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateTemplatePermissionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Generates a server-side embeddable URL and authorization code. For this process to work properly, first configure the dashboards and user permissions. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedding-dashboards.html">Embedding Amazon QuickSight Dashboards</a> in the <i>Amazon QuickSight User Guide</i> or <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/qs-dev-embedded-dashboards.html">Embedding Amazon QuickSight Dashboards</a> in the <i>Amazon QuickSight API Reference</i>.</p> <p>Currently, you can use <code>GetDashboardEmbedURL</code> only from the server, not from the user’s browser.</p>
		/// GetDashboardEmbedUrl /accounts/{AwsAccountId}/dashboards/{DashboardId}/embed-url#creds-type
		/// </summary>
		/// <param name="AwsAccountId">The ID for the AWS account that contains the dashboard that you're embedding.</param>
		/// <param name="DashboardId">The ID for the dashboard, also added to the IAM policy.</param>
		/// <param name="creds_type">The authentication method that the user uses to sign in.</param>
		/// <param name="session_lifetime">How many minutes the session is valid. The session lifetime must be 15-600 minutes.</param>
		/// <param name="undo_redo_disabled">Remove the undo/redo button on the embedded dashboard. The default is FALSE, which enables the undo/redo button.</param>
		/// <param name="reset_disabled">Remove the reset button on the embedded dashboard. The default is FALSE, which enables the reset button.</param>
		/// <param name="user_arn"><p>The Amazon QuickSight user's Amazon Resource Name (ARN), for use with <code>QUICKSIGHT</code> identity type. You can use this for any Amazon QuickSight users in your account (readers, authors, or admins) authenticated as one of the following:</p> <ul> <li> <p>Active Directory (AD) users or group members</p> </li> <li> <p>Invited nonfederated users</p> </li> <li> <p>IAM users and IAM role-based sessions authenticated through Federated Single Sign-On using SAML, OpenID Connect, or IAM federation.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task<GetDashboardEmbedUrlResponse> GetDashboardEmbedUrlAsync(string AwsAccountId, string DashboardId, UserIdentityType creds_type, int session_lifetime, bool undo_redo_disabled, bool reset_disabled, string user_arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/dashboards/"+ (DashboardId==null? "" : Uri.EscapeDataString(DashboardId))+"/embed-url#creds-type&creds_type=" + creds_type+"&session_lifetime="+session_lifetime+"&undo_redo_disabled="+undo_redo_disabled+"&reset_disabled="+reset_disabled+"&user_arn=" + (user_arn==null? "" : Uri.EscapeDataString(user_arn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDashboardEmbedUrlResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the versions of the dashboards in the QuickSight subscription.
		/// ListDashboardVersions /accounts/{AwsAccountId}/dashboards/{DashboardId}/versions
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the dashboard that you're listing versions for.</param>
		/// <param name="DashboardId">The ID for the dashboard.</param>
		/// <param name="next_token">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="max_results">The maximum number of results to be returned per request.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDashboardVersionsResponse> ListDashboardVersionsAsync(string AwsAccountId, string DashboardId, string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/dashboards/"+ (DashboardId==null? "" : Uri.EscapeDataString(DashboardId))+"/versions&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDashboardVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists dashboards in an AWS account.
		/// ListDashboards /accounts/{AwsAccountId}/dashboards
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the dashboards that you're listing.</param>
		/// <param name="next_token">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="max_results">The maximum number of results to be returned per request.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDashboardsResponse> ListDashboardsAsync(string AwsAccountId, string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/dashboards&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDashboardsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists member users in a group.
		/// ListGroupMemberships /accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members
		/// </summary>
		/// <param name="GroupName">The name of the group that you want to see a membership list of.</param>
		/// <param name="next_token">A pagination token that can be used in a subsequent request.</param>
		/// <param name="max_results">The maximum number of results to return from this request.</param>
		/// <param name="AwsAccountId">The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.</param>
		/// <param name="Namespace">The namespace. Currently, you should set this to <code>default</code>.</param>
		/// <returns>Success</returns>
		public async Task<ListGroupMembershipsResponse> ListGroupMembershipsAsync(string GroupName, string next_token, int max_results, string AwsAccountId, string Namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/groups/"+ (GroupName==null? "" : Uri.EscapeDataString(GroupName))+"/members&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListGroupMembershipsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists IAM policy assignments in the current Amazon QuickSight account.
		/// ListIAMPolicyAssignments /accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains these IAM policy assignments.</param>
		/// <param name="Namespace">The namespace for the assignments.</param>
		/// <param name="next_token">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="max_results">The maximum number of results to be returned per request.</param>
		/// <returns>Success</returns>
		public async Task<ListIAMPolicyAssignmentsResponse> ListIAMPolicyAssignmentsAsync(string AwsAccountId, string Namespace, string next_token, int max_results, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/iam-policy-assignments&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListIAMPolicyAssignmentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the IAM policy assignments, including the Amazon Resource Names (ARNs) for the IAM policies assigned to the specified user and group or groups that the user belongs to.
		/// ListIAMPolicyAssignmentsForUser /accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/iam-policy-assignments
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the assignments.</param>
		/// <param name="UserName">The name of the user.</param>
		/// <param name="next_token">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="max_results">The maximum number of results to be returned per request.</param>
		/// <param name="Namespace">The namespace of the assignment.</param>
		/// <returns>Success</returns>
		public async Task<ListIAMPolicyAssignmentsForUserResponse> ListIAMPolicyAssignmentsForUserAsync(string AwsAccountId, string UserName, string next_token, int max_results, string Namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/users/"+ (UserName==null? "" : Uri.EscapeDataString(UserName))+"/iam-policy-assignments&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListIAMPolicyAssignmentsForUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the history of SPICE ingestions for a dataset.
		/// ListIngestions /accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions
		/// </summary>
		/// <param name="DataSetId">The ID of the dataset used in the ingestion.</param>
		/// <param name="next_token">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <param name="max_results">The maximum number of results to be returned per request.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListIngestionsResponse> ListIngestionsAsync(string DataSetId, string next_token, string AwsAccountId, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/data-sets/"+ (DataSetId==null? "" : Uri.EscapeDataString(DataSetId))+"/ingestions&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListIngestionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags assigned to a resource.
		/// ListTagsForResource /resources/{ResourceArn}/tags
		/// </summary>
		/// <param name="ResourceArn">The Amazon Resource Name (ARN) of the resource that you want a list of tags for.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string ResourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/resources/"+ (ResourceArn==null? "" : Uri.EscapeDataString(ResourceArn))+"/tags";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Assigns one or more tags (key-value pairs) to the specified QuickSight resource. </p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values. You can use the <code>TagResource</code> operation with a resource that already has tags. If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.</p> <p>You can associate as many as 50 tags with a resource. QuickSight supports tagging on data set, data source, dashboard, and template. </p> <p>Tagging for QuickSight works in a similar way to tagging for other AWS services, except for the following:</p> <ul> <li> <p>You can't use tags to track AWS costs for QuickSight. This restriction is because QuickSight costs are based on users and SPICE capacity, which aren't taggable resources.</p> </li> <li> <p>QuickSight doesn't currently support the Tag Editor for AWS Resource Groups.</p> </li> </ul>
		/// TagResource /resources/{ResourceArn}/tags
		/// </summary>
		/// <param name="ResourceArn">The Amazon Resource Name (ARN) of the resource that you want to tag.</param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string ResourceArn, TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/resources/"+ (ResourceArn==null? "" : Uri.EscapeDataString(ResourceArn))+"/tags";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all the aliases of a template.
		/// ListTemplateAliases /accounts/{AwsAccountId}/templates/{TemplateId}/aliases
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the template aliases that you're listing.</param>
		/// <param name="TemplateId">The ID for the template.</param>
		/// <param name="next_token">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="max_result">The maximum number of results to be returned per request.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTemplateAliasesResponse> ListTemplateAliasesAsync(string AwsAccountId, string TemplateId, string next_token, int max_result, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/templates/"+ (TemplateId==null? "" : Uri.EscapeDataString(TemplateId))+"/aliases&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_result="+max_result+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTemplateAliasesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the versions of the templates in the current Amazon QuickSight account.
		/// ListTemplateVersions /accounts/{AwsAccountId}/templates/{TemplateId}/versions
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the templates that you're listing.</param>
		/// <param name="TemplateId">The ID for the template.</param>
		/// <param name="next_token">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="max_results">The maximum number of results to be returned per request.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTemplateVersionsResponse> ListTemplateVersionsAsync(string AwsAccountId, string TemplateId, string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/templates/"+ (TemplateId==null? "" : Uri.EscapeDataString(TemplateId))+"/versions&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTemplateVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the templates in the current Amazon QuickSight account.
		/// ListTemplates /accounts/{AwsAccountId}/templates
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the templates that you're listing.</param>
		/// <param name="next_token">The token for the next set of results, or null if there are no more results.</param>
		/// <param name="max_result">The maximum number of results to be returned per request.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTemplatesResponse> ListTemplatesAsync(string AwsAccountId, string next_token, int max_result, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/templates&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_result="+max_result+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTemplatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the Amazon QuickSight groups that an Amazon QuickSight user is a member of.
		/// ListUserGroups /accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/groups
		/// </summary>
		/// <param name="UserName">The Amazon QuickSight user name that you want to list group memberships for.</param>
		/// <param name="AwsAccountId">The AWS account ID that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.</param>
		/// <param name="Namespace">The namespace. Currently, you should set this to <code>default</code>.</param>
		/// <param name="next_token">A pagination token that can be used in a subsequent request.</param>
		/// <param name="max_results">The maximum number of results to return from this request.</param>
		/// <returns>Success</returns>
		public async Task<ListUserGroupsResponse> ListUserGroupsAsync(string UserName, string AwsAccountId, string Namespace, string next_token, int max_results, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/users/"+ (UserName==null? "" : Uri.EscapeDataString(UserName))+"/groups&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListUserGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all of the Amazon QuickSight users belonging to this account.
		/// ListUsers /accounts/{AwsAccountId}/namespaces/{Namespace}/users
		/// </summary>
		/// <param name="AwsAccountId">The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.</param>
		/// <param name="next_token">A pagination token that can be used in a subsequent request.</param>
		/// <param name="max_results">The maximum number of results to return from this request.</param>
		/// <param name="Namespace">The namespace. Currently, you should set this to <code>default</code>.</param>
		/// <returns>Success</returns>
		public async Task<ListUsersResponse> ListUsersAsync(string AwsAccountId, string next_token, int max_results, string Namespace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/users&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListUsersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an Amazon QuickSight user, whose identity is associated with the AWS Identity and Access Management (IAM) identity or role specified in the request.
		/// RegisterUser /accounts/{AwsAccountId}/namespaces/{Namespace}/users
		/// </summary>
		/// <param name="AwsAccountId">The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.</param>
		/// <param name="Namespace">The namespace. Currently, you should set this to <code>default</code>.</param>
		/// <returns>Success</returns>
		public async Task<RegisterUserResponse> RegisterUserAsync(string AwsAccountId, string Namespace, RegisterUserBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/namespaces/"+ (Namespace==null? "" : Uri.EscapeDataString(Namespace))+"/users";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RegisterUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Searchs for dashboards that belong to a user.
		/// SearchDashboards /accounts/{AwsAccountId}/search/dashboards
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the user whose dashboards you're searching for. </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SearchDashboardsResponse> SearchDashboardsAsync(string AwsAccountId, string MaxResults, string NextToken, SearchDashboardsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/search/dashboards&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SearchDashboardsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a tag or tags from a resource.
		/// UntagResource /resources/{ResourceArn}/tags#keys
		/// </summary>
		/// <param name="ResourceArn">The Amazon Resource Name (ARN) of the resource that you want to untag.</param>
		/// <param name="keys">The keys of the key-value pairs for the resource tag or tags assigned to the resource.</param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string ResourceArn, TagKey[] keys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/resources/"+ (ResourceArn==null? "" : Uri.EscapeDataString(ResourceArn))+"/tags#keys&"+String.Join("&", keys.Select(z => $"keys={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the published version of a dashboard.
		/// UpdateDashboardPublishedVersion /accounts/{AwsAccountId}/dashboards/{DashboardId}/versions/{VersionNumber}
		/// </summary>
		/// <param name="AwsAccountId">The ID of the AWS account that contains the dashboard that you're updating.</param>
		/// <param name="DashboardId">The ID for the dashboard.</param>
		/// <param name="VersionNumber">The version number of the dashboard.</param>
		/// <returns>Success</returns>
		public async Task<UpdateDashboardPublishedVersionResponse> UpdateDashboardPublishedVersionAsync(string AwsAccountId, string DashboardId, int VersionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"/dashboards/"+ (DashboardId==null? "" : Uri.EscapeDataString(DashboardId))+"/versions/"+VersionNumber;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDashboardPublishedVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDashboardBody
	{
		
		/// <summary>
		/// The display name of the dashboard.
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Parameters { get; set; }
		
		/// <summary>
		/// A structure that contains the permissions of the dashboard. You can use this structure for granting permissions with principal and action information.
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] Permissions { get; set; }
		
		/// <summary>
		/// Dashboard source entity.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceEntity { get; set; }
		
		/// <summary>
		/// Contains a map of the key-value pairs for the resource tag or tags assigned to the dashboard.
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// A description for the first version of the dashboard being created.
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string VersionDescription { get; set; }
		
		/// <summary>
		/// Dashboard publish options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DashboardPublishOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDashboardBody
	{
		
		/// <summary>
		/// The display name of the dashboard.
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Dashboard source entity.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceEntity { get; set; }
		
		/// <summary>
		/// Parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Parameters { get; set; }
		
		/// <summary>
		/// A description for the first version of the dashboard being created.
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string VersionDescription { get; set; }
		
		/// <summary>
		/// Dashboard publish options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DashboardPublishOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDataSetBody
	{
		
		/// <summary>
		/// An ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSetId { get; set; }
		
		/// <summary>
		/// The display name for the dataset.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Declares the physical tables that are available in the underlying data sources.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhysicalTableMap { get; set; }
		
		/// <summary>
		/// Configures the combination and transformation of the data from the physical tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LogicalTableMap { get; set; }
		
		/// <summary>
		/// Indicates whether you want to import the data into SPICE.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateDataSetBodyImportMode ImportMode { get; set; }
		
		/// <summary>
		/// Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.
		/// Minimum items: 1
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public ColumnGroup[] ColumnGroups { get; set; }
		
		/// <summary>
		/// A list of resource permissions on the dataset.
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] Permissions { get; set; }
		
		/// <summary>
		/// The row-level security configuration for the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RowLevelPermissionDataSet { get; set; }
		
		/// <summary>
		/// Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDataSetBodyImportMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPICE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECT_QUERY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDataSourceBody
	{
		
		/// <summary>
		/// An ID for the data source. This ID is unique per AWS Region for each AWS account. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataSourceId { get; set; }
		
		/// <summary>
		/// A display name for the data source.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the data source. Currently, the supported types for this operation are: <code>ATHENA, AURORA, AURORA_POSTGRESQL, MARIADB, MYSQL, POSTGRESQL, PRESTO, REDSHIFT, S3, SNOWFLAKE, SPARK, SQLSERVER, TERADATA</code>. Use <code>ListDataSources</code> to return a list of all data sources.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateDataSourceBodyType Type { get; set; }
		
		/// <summary>
		/// The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DataSourceParameters { get; set; }
		
		/// <summary>
		/// Data source credentials.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Credentials { get; set; }
		
		/// <summary>
		/// A list of resource permissions on the data source.
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] Permissions { get; set; }
		
		/// <summary>
		/// VPC connection properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VpcConnectionProperties { get; set; }
		
		/// <summary>
		/// Secure Socket Layer (SSL) properties that apply when QuickSight connects to your underlying data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SslProperties { get; set; }
		
		/// <summary>
		/// Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDataSourceBodyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADOBE_ANALYTICS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_ELASTICSEARCH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATHENA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AURORA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AURORA_POSTGRESQL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_IOT_ANALYTICS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JIRA = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MARIADB = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSQL = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTGRESQL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRESTO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDSHIFT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALESFORCE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICENOW = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNOWFLAKE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPARK = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQLSERVER = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERADATA = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWITTER = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateGroupBody
	{
		
		/// <summary>
		/// A name for the group that you want to create.
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string GroupName { get; set; }
		
		/// <summary>
		/// A description for the group that you want to create.
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateIAMPolicyAssignmentBody
	{
		
		/// <summary>
		/// The name of the assignment. It must be unique within an AWS account.
		/// Min length: 1
		/// Pattern: (?=^.{2,256}$)(?!.*\s)[0-9a-zA-Z-_.:=+@]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AssignmentName { get; set; }
		
		/// <summary>
		/// <p>The status of the assignment. Possible values are as follows:</p> <ul> <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li> <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li> <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateIAMPolicyAssignmentBodyAssignmentStatus AssignmentStatus { get; set; }
		
		/// <summary>
		/// The ARN for the IAM policy to apply to the QuickSight users and groups specified in this assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		/// <summary>
		/// The QuickSight users, groups, or both that you want to assign the policy to.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Identities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateIAMPolicyAssignmentBodyAssignmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTemplateBody
	{
		
		/// <summary>
		/// A display name for the template.
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of resource permissions to be set on the template. 
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] Permissions { get; set; }
		
		/// <summary>
		/// The source entity of the template.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceEntity { get; set; }
		
		/// <summary>
		/// Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// A description of the current template version being created. This API operation creates the first version of the template. Every time <code>UpdateTemplate</code> is called, a new version is created. Each version of the template maintains a description of the version in the <code>VersionDescription</code> field.
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string VersionDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTemplateBody
	{
		
		/// <summary>
		/// The source entity of the template.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceEntity { get; set; }
		
		/// <summary>
		/// A description of the current template version that is being updated. Every time you call <code>UpdateTemplate</code>, you create a new version of the template. Each version of the template maintains a description of the version in the <code>VersionDescription</code> field.
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string VersionDescription { get; set; }
		
		/// <summary>
		/// The name for the template.
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTemplateAliasBody
	{
		
		/// <summary>
		/// The version number of the template.
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int TemplateVersionNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTemplateAliasBody
	{
		
		/// <summary>
		/// The version number of the template.
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int TemplateVersionNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDataSetBody
	{
		
		/// <summary>
		/// The display name for the dataset.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Declares the physical tables that are available in the underlying data sources.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhysicalTableMap { get; set; }
		
		/// <summary>
		/// Configures the combination and transformation of the data from the physical tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LogicalTableMap { get; set; }
		
		/// <summary>
		/// Indicates whether you want to import the data into SPICE.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateDataSetBodyImportMode ImportMode { get; set; }
		
		/// <summary>
		/// Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.
		/// Minimum items: 1
		/// Maximum items: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public ColumnGroup[] ColumnGroups { get; set; }
		
		/// <summary>
		/// The row-level security configuration for the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RowLevelPermissionDataSet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateDataSetBodyImportMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPICE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECT_QUERY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDataSourceBody
	{
		
		/// <summary>
		/// A display name for the data source.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DataSourceParameters { get; set; }
		
		/// <summary>
		/// Data source credentials.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Credentials { get; set; }
		
		/// <summary>
		/// VPC connection properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VpcConnectionProperties { get; set; }
		
		/// <summary>
		/// Secure Socket Layer (SSL) properties that apply when QuickSight connects to your underlying data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SslProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateGroupBody
	{
		
		/// <summary>
		/// The description for the group that you want to update.
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserBody
	{
		
		/// <summary>
		/// The email address of the user that you want to update.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// <p>The Amazon QuickSight role of the user. The user role can be one of the following:</p> <ul> <li> <p> <code>READER</code>: A user who has read-only access to dashboards.</p> </li> <li> <p> <code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and dashboards.</p> </li> <li> <p> <code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight settings.</p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateUserBodyRole Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateUserBodyRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHOR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED_AUTHOR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED_READER = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDashboardPermissionsBody
	{
		
		/// <summary>
		/// The permissions that you want to grant on this resource.
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ResourcePermission[] GrantPermissions { get; set; }
		
		/// <summary>
		/// The permissions that you want to revoke from this resource.
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ResourcePermission[] RevokePermissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDataSetPermissionsBody
	{
		
		/// <summary>
		/// The resource permissions that you want to grant to the dataset.
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] GrantPermissions { get; set; }
		
		/// <summary>
		/// The resource permissions that you want to revoke from the dataset.
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] RevokePermissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDataSourcePermissionsBody
	{
		
		/// <summary>
		/// A list of resource permissions that you want to grant on the data source.
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] GrantPermissions { get; set; }
		
		/// <summary>
		/// A list of resource permissions that you want to revoke on the data source.
		/// Minimum items: 1
		/// Maximum items: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public ResourcePermission[] RevokePermissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateIAMPolicyAssignmentBody
	{
		
		/// <summary>
		/// <p>The status of the assignment. Possible values are as follows:</p> <ul> <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li> <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li> <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateIAMPolicyAssignmentBodyAssignmentStatus AssignmentStatus { get; set; }
		
		/// <summary>
		/// The ARN for the IAM policy to apply to the QuickSight users and groups specified in this assignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		/// <summary>
		/// The QuickSight users, groups, or both that you want to assign the policy to.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Identities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateIAMPolicyAssignmentBodyAssignmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTemplatePermissionsBody
	{
		
		/// <summary>
		/// A list of resource permissions to be granted on the template. 
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ResourcePermission[] GrantPermissions { get; set; }
		
		/// <summary>
		/// A list of resource permissions to be revoked from the template. 
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ResourcePermission[] RevokePermissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		/// Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.
		/// Minimum items: 1
		/// Maximum items: 200
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterUserBody
	{
		
		/// <summary>
		/// <p>Amazon QuickSight supports several ways of managing the identity of users. This parameter accepts two values:</p> <ul> <li> <p> <code>IAM</code>: A user whose identity maps to an existing IAM user or role. </p> </li> <li> <p> <code>QUICKSIGHT</code>: A user whose identity is owned and managed internally by Amazon QuickSight. </p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RegisterUserBodyIdentityType IdentityType { get; set; }
		
		/// <summary>
		/// The email address of the user that you want to register.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// <p>The Amazon QuickSight role for the user. The user role can be one of the following:</p> <ul> <li> <p> <code>READER</code>: A user who has read-only access to dashboards.</p> </li> <li> <p> <code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and dashboards.</p> </li> <li> <p> <code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight settings.</p> </li> <li> <p> <code>RESTRICTED_READER</code>: This role isn't currently available for use.</p> </li> <li> <p> <code>RESTRICTED_AUTHOR</code>: This role isn't currently available for use.</p> </li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RegisterUserBodyUserRole UserRole { get; set; }
		
		/// <summary>
		/// The ARN of the IAM user or role that you are registering with Amazon QuickSight. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IamArn { get; set; }
		
		/// <summary>
		/// You need to use this parameter only when you register one or more users using an assumed IAM role. You don't need to provide the session name for other scenarios, for example when you are registering an IAM user or an Amazon QuickSight user. You can register multiple users using the same IAM role if each user has a different session name. For more information on assuming IAM roles, see <a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sts/assume-role.html"> <code>assume-role</code> </a> in the <i>AWS CLI Reference.</i> 
		/// Max length: 64
		/// Min length: 2
		/// Pattern: [\w+=.@-]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=2)]
		public string SessionName { get; set; }
		
		/// <summary>
		/// The Amazon QuickSight user name that you want to create for the user you are registering.
		/// Min length: 1
		/// Pattern: [\u0020-\u00FF]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegisterUserBodyIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUICKSIGHT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegisterUserBodyUserRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHOR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED_AUTHOR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED_READER = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SearchDashboardsBody
	{
		
		/// <summary>
		/// The filters to apply to the search. Currently, you can search only by user name. For example, <code>"Filters": [ { "Name": "QUICKSIGHT_USER", "Operator": "StringEquals", "Value": "arn:aws:quicksight:us-east-1:1:user/default/UserName1" } ]</code> 
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public DashboardSearchFilter[] Filters { get; set; }
		
		/// <summary>
		/// The token for the next set of results, or null if there are no more results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to be returned per request.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
