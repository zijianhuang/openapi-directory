//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeliveryStreamOutput
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string DeliveryStreamARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeliveryStreamInput
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string DeliveryStreamName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateDeliveryStreamInputDeliveryStreamType DeliveryStreamType { get; set; }
		
		/// <summary>
		/// The stream and role Amazon Resource Names (ARNs) for a Kinesis data stream used as the source for a delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KinesisStreamSourceConfiguration KinesisStreamSourceConfiguration { get; set; }
		
		/// <summary>
		/// Specifies the type and Amazon Resource Name (ARN) of the CMK to use for Server-Side Encryption (SSE). 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeliveryStreamEncryptionConfigurationInput DeliveryStreamEncryptionConfigurationInput { get; set; }
		
		/// <summary>
		/// Describes the configuration of a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationConfiguration S3DestinationConfiguration { get; set; }
		
		/// <summary>
		/// Describes the configuration of a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExtendedS3DestinationConfiguration ExtendedS3DestinationConfiguration { get; set; }
		
		/// <summary>
		/// Describes the configuration of a destination in Amazon Redshift.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RedshiftDestinationConfiguration RedshiftDestinationConfiguration { get; set; }
		
		/// <summary>
		/// Describes the configuration of a destination in Amazon ES.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ElasticsearchDestinationConfiguration ElasticsearchDestinationConfiguration { get; set; }
		
		/// <summary>
		/// Describes the configuration of a destination in Splunk.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SplunkDestinationConfiguration SplunkDestinationConfiguration { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDeliveryStreamInputDeliveryStreamType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DirectPut = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KinesisStreamAsSource = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDeliveryStreamInput
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string DeliveryStreamName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowForceDelete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDeliveryStreamOutput
	{
		
		/// <summary>
		/// Contains information about a delivery stream.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeliveryStreamDescription DeliveryStreamDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDeliveryStreamInput
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string DeliveryStreamName { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10000)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ExclusiveStartDestinationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDeliveryStreamsOutput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeliveryStreamName[] DeliveryStreamNames { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool HasMoreDeliveryStreams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDeliveryStreamsInput
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10000)]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListDeliveryStreamsInputDeliveryStreamType DeliveryStreamType { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_.-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ExclusiveStartDeliveryStreamName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListDeliveryStreamsInputDeliveryStreamType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DirectPut = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KinesisStreamAsSource = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForDeliveryStreamOutput
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool HasMoreTags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForDeliveryStreamInput
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string DeliveryStreamName { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^(?!aws:)[\p{L}\p{Z}\p{N}_.:\/=+\-@%]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ExclusiveStartTagKey { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRecordOutput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string RecordId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRecordInput
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string DeliveryStreamName { get; set; }
		
		/// <summary>
		/// The unit of data in a delivery stream.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Record Record { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRecordBatchOutput
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int FailedPutCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public PutRecordBatchResponseEntry[] RequestResponses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRecordBatchInput
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string DeliveryStreamName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public Record[] Records { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartDeliveryStreamEncryptionInput
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string DeliveryStreamName { get; set; }
		
		/// <summary>
		/// Specifies the type and Amazon Resource Name (ARN) of the CMK to use for Server-Side Encryption (SSE). 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeliveryStreamEncryptionConfigurationInput DeliveryStreamEncryptionConfigurationInput { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopDeliveryStreamEncryptionInput
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string DeliveryStreamName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagDeliveryStreamInput
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string DeliveryStreamName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagDeliveryStreamInput
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string DeliveryStreamName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagKey[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDestinationInput
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string DeliveryStreamName { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// Pattern: [0-9]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string CurrentDeliveryStreamVersionId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DestinationId { get; set; }
		
		/// <summary>
		/// Describes an update for a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationUpdate S3DestinationUpdate { get; set; }
		
		/// <summary>
		/// Describes an update for a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExtendedS3DestinationUpdate ExtendedS3DestinationUpdate { get; set; }
		
		/// <summary>
		/// Describes an update for a destination in Amazon Redshift.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RedshiftDestinationUpdate RedshiftDestinationUpdate { get; set; }
		
		/// <summary>
		/// Describes an update for a destination in Amazon ES.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ElasticsearchDestinationUpdate ElasticsearchDestinationUpdate { get; set; }
		
		/// <summary>
		/// Describes an update for a destination in Splunk.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SplunkDestinationUpdate SplunkDestinationUpdate { get; set; }
	}
	
	/// <summary>
	/// Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BufferingHints
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 128)]
		public System.Nullable<System.Int32> SizeInMBs { get; set; }
		
		/// <summary>
		/// Minimum: 60
		/// Maximum: 900
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 900)]
		public System.Nullable<System.Int32> IntervalInSeconds { get; set; }
	}
	
	/// <summary>
	/// Describes the Amazon CloudWatch logging options for your delivery stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudWatchLoggingOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 0
		/// Pattern: [\.\-_/#A-Za-z0-9]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=0)]
		public string LogGroupName { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 0
		/// Pattern: [^:*]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=0)]
		public string LogStreamName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CompressionFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNCOMPRESSED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZIP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Snappy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HADOOP_SNAPPY = 4,
	}
	
	/// <summary>
	/// Describes a <code>COPY</code> command for Amazon Redshift.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyCommand
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string DataTableName { get; set; }
		
		/// <summary>
		/// Max length: 204800
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(204800, MinimumLength=0)]
		public string DataTableColumns { get; set; }
		
		/// <summary>
		/// Max length: 204800
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(204800, MinimumLength=0)]
		public string CopyOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeliveryStreamType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DirectPut = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KinesisStreamAsSource = 1,
	}
	
	/// <summary>
	/// The stream and role Amazon Resource Names (ARNs) for a Kinesis data stream used as the source for a delivery stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KinesisStreamSourceConfiguration
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string KinesisStreamARN { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string RoleARN { get; set; }
	}
	
	/// <summary>
	/// Specifies the type and Amazon Resource Name (ARN) of the CMK to use for Server-Side Encryption (SSE). 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeliveryStreamEncryptionConfigurationInput
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string KeyARN { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeliveryStreamEncryptionConfigurationInputKeyType KeyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeliveryStreamEncryptionConfigurationInputKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_OWNED_CMK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_MANAGED_CMK = 1,
	}
	
	/// <summary>
	/// Describes the configuration of a destination in Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3DestinationConfiguration
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string BucketARN { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string ErrorOutputPrefix { get; set; }
		
		/// <summary>
		/// Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BufferingHints BufferingHints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationConfigurationCompressionFormat CompressionFormat { get; set; }
		
		/// <summary>
		/// Describes the encryption for a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncryptionConfiguration EncryptionConfiguration { get; set; }
		
		/// <summary>
		/// Describes the Amazon CloudWatch logging options for your delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLoggingOptions CloudWatchLoggingOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum S3DestinationConfigurationCompressionFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNCOMPRESSED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZIP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Snappy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HADOOP_SNAPPY = 4,
	}
	
	/// <summary>
	/// Describes the configuration of a destination in Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExtendedS3DestinationConfiguration
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string BucketARN { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string ErrorOutputPrefix { get; set; }
		
		/// <summary>
		/// Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BufferingHints BufferingHints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExtendedS3DestinationConfigurationCompressionFormat CompressionFormat { get; set; }
		
		/// <summary>
		/// Describes the encryption for a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncryptionConfiguration EncryptionConfiguration { get; set; }
		
		/// <summary>
		/// Describes the Amazon CloudWatch logging options for your delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLoggingOptions CloudWatchLoggingOptions { get; set; }
		
		/// <summary>
		/// Describes a data processing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProcessingConfiguration ProcessingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExtendedS3DestinationConfigurationS3BackupMode S3BackupMode { get; set; }
		
		/// <summary>
		/// Describes the configuration of a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationConfiguration S3BackupConfiguration { get; set; }
		
		/// <summary>
		/// Specifies that you want Kinesis Data Firehose to convert data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. Kinesis Data Firehose uses the serializer and deserializer that you specify, in addition to the column information from the AWS Glue table, to deserialize your input data from JSON and then serialize it to the Parquet or ORC format. For more information, see <a href="https://docs.aws.amazon.com/firehose/latest/dev/record-format-conversion.html">Kinesis Data Firehose Record Format Conversion</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataFormatConversionConfiguration DataFormatConversionConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExtendedS3DestinationConfigurationCompressionFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNCOMPRESSED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZIP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Snappy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HADOOP_SNAPPY = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExtendedS3DestinationConfigurationS3BackupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	/// <summary>
	/// Describes the configuration of a destination in Amazon Redshift.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RedshiftDestinationConfiguration
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: jdbc:(redshift|postgresql)://((?!-)[A-Za-z0-9-]{1,63}(?<!-)\.)+redshift\.([a-zA-Z0-9\.]+):\d{1,5}/[a-zA-Z0-9_$]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string ClusterJDBCURL { get; set; }
		
		/// <summary>
		/// Describes a <code>COPY</code> command for Amazon Redshift.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CopyCommand CopyCommand { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 6
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=6)]
		public string Password { get; set; }
		
		/// <summary>
		/// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RedshiftRetryOptions RetryOptions { get; set; }
		
		/// <summary>
		/// Describes the configuration of a destination in Amazon S3.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationConfiguration S3Configuration { get; set; }
		
		/// <summary>
		/// Describes a data processing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProcessingConfiguration ProcessingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RedshiftDestinationConfigurationS3BackupMode S3BackupMode { get; set; }
		
		/// <summary>
		/// Describes the configuration of a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationConfiguration S3BackupConfiguration { get; set; }
		
		/// <summary>
		/// Describes the Amazon CloudWatch logging options for your delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLoggingOptions CloudWatchLoggingOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RedshiftDestinationConfigurationS3BackupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	/// <summary>
	/// Describes the configuration of a destination in Amazon ES.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ElasticsearchDestinationConfiguration
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string DomainARN { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: https:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string ClusterEndpoint { get; set; }
		
		/// <summary>
		/// Max length: 80
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(80, MinimumLength=1)]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=0)]
		public string TypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ElasticsearchDestinationConfigurationIndexRotationPeriod IndexRotationPeriod { get; set; }
		
		/// <summary>
		/// Describes the buffering to perform before delivering data to the Amazon ES destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ElasticsearchBufferingHints BufferingHints { get; set; }
		
		/// <summary>
		/// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon ES.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ElasticsearchRetryOptions RetryOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ElasticsearchDestinationConfigurationS3BackupMode S3BackupMode { get; set; }
		
		/// <summary>
		/// Describes the configuration of a destination in Amazon S3.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationConfiguration S3Configuration { get; set; }
		
		/// <summary>
		/// Describes a data processing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProcessingConfiguration ProcessingConfiguration { get; set; }
		
		/// <summary>
		/// Describes the Amazon CloudWatch logging options for your delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLoggingOptions CloudWatchLoggingOptions { get; set; }
		
		/// <summary>
		/// The details of the VPC of the Amazon ES destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfiguration VpcConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ElasticsearchDestinationConfigurationIndexRotationPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoRotation = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneHour = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneDay = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneWeek = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneMonth = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ElasticsearchDestinationConfigurationS3BackupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailedDocumentsOnly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllDocuments = 1,
	}
	
	/// <summary>
	/// Describes the configuration of a destination in Splunk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SplunkDestinationConfiguration
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string HECEndpoint { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SplunkDestinationConfigurationHECEndpointType HECEndpointType { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string HECToken { get; set; }
		
		/// <summary>
		/// Minimum: 180
		/// Maximum: 600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(180, 600)]
		public System.Nullable<System.Int32> HECAcknowledgmentTimeoutInSeconds { get; set; }
		
		/// <summary>
		/// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Splunk, or if it doesn't receive an acknowledgment from Splunk.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SplunkRetryOptions RetryOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SplunkDestinationConfigurationS3BackupMode S3BackupMode { get; set; }
		
		/// <summary>
		/// Describes the configuration of a destination in Amazon S3.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationConfiguration S3Configuration { get; set; }
		
		/// <summary>
		/// Describes a data processing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProcessingConfiguration ProcessingConfiguration { get; set; }
		
		/// <summary>
		/// Describes the Amazon CloudWatch logging options for your delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLoggingOptions CloudWatchLoggingOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SplunkDestinationConfigurationHECEndpointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Raw = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Event = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SplunkDestinationConfigurationS3BackupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailedEventsOnly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllEvents = 1,
	}
	
	/// <summary>
	/// Specifies the schema to which you want Kinesis Data Firehose to configure your data before it writes it to Amazon S3. This parameter is required if <code>Enabled</code> is set to true.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SchemaConfiguration
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string CatalogId { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string DatabaseName { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string TableName { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Region { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string VersionId { get; set; }
	}
	
	/// <summary>
	/// Specifies the deserializer you want to use to convert the format of the input data. This parameter is required if <code>Enabled</code> is set to true.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputFormatConfiguration
	{
		
		/// <summary>
		/// The deserializer you want Kinesis Data Firehose to use for converting the input data from JSON. Kinesis Data Firehose then serializes the data to its final format using the <a>Serializer</a>. Kinesis Data Firehose supports two types of deserializers: the <a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-JSON">Apache Hive JSON SerDe</a> and the <a href="https://github.com/rcongiu/Hive-JSON-Serde">OpenX JSON SerDe</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Deserializer Deserializer { get; set; }
	}
	
	/// <summary>
	/// Specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data before it writes it to Amazon S3. This parameter is required if <code>Enabled</code> is set to true.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputFormatConfiguration
	{
		
		/// <summary>
		/// The serializer that you want Kinesis Data Firehose to use to convert data to the target format before writing it to Amazon S3. Kinesis Data Firehose supports two types of serializers: the <a href="https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/orc/OrcSerde.html">ORC SerDe</a> and the <a href="https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/parquet/serde/ParquetHiveSerDe.html">Parquet SerDe</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Serializer Serializer { get; set; }
	}
	
	/// <summary>
	/// Specifies that you want Kinesis Data Firehose to convert data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. Kinesis Data Firehose uses the serializer and deserializer that you specify, in addition to the column information from the AWS Glue table, to deserialize your input data from JSON and then serialize it to the Parquet or ORC format. For more information, see <a href="https://docs.aws.amazon.com/firehose/latest/dev/record-format-conversion.html">Kinesis Data Firehose Record Format Conversion</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataFormatConversionConfiguration
	{
		
		/// <summary>
		/// Specifies the schema to which you want Kinesis Data Firehose to configure your data before it writes it to Amazon S3. This parameter is required if <code>Enabled</code> is set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SchemaConfiguration SchemaConfiguration { get; set; }
		
		/// <summary>
		/// Specifies the deserializer you want to use to convert the format of the input data. This parameter is required if <code>Enabled</code> is set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputFormatConfiguration InputFormatConfiguration { get; set; }
		
		/// <summary>
		/// Specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data before it writes it to Amazon S3. This parameter is required if <code>Enabled</code> is set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputFormatConfiguration OutputFormatConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeliveryStreamStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING_FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 4,
	}
	
	/// <summary>
	/// Provides details in case one of the following operations fails due to an error related to KMS: <a>CreateDeliveryStream</a>, <a>DeleteDeliveryStream</a>, <a>StartDeliveryStreamEncryption</a>, <a>StopDeliveryStreamEncryption</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FailureDescription
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FailureDescriptionType Type { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^(?!\s*$).+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FailureDescriptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETIRE_KMS_GRANT_FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_KMS_GRANT_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMS_ACCESS_DENIED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED_KMS_KEY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_KMS_KEY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMS_KEY_NOT_FOUND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMS_OPT_IN_REQUIRED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_ENI_FAILED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_ENI_FAILED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBNET_NOT_FOUND = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY_GROUP_NOT_FOUND = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENI_ACCESS_DENIED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBNET_ACCESS_DENIED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY_GROUP_ACCESS_DENIED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_ERROR = 14,
	}
	
	/// <summary>
	/// Contains information about the server-side encryption (SSE) status for the delivery stream, the type customer master key (CMK) in use, if any, and the ARN of the CMK. You can get <code>DeliveryStreamEncryptionConfiguration</code> by invoking the <a>DescribeDeliveryStream</a> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeliveryStreamEncryptionConfiguration
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string KeyARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeliveryStreamEncryptionConfigurationKeyType KeyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeliveryStreamEncryptionConfigurationStatus Status { get; set; }
		
		/// <summary>
		/// Provides details in case one of the following operations fails due to an error related to KMS: <a>CreateDeliveryStream</a>, <a>DeleteDeliveryStream</a>, <a>StartDeliveryStreamEncryption</a>, <a>StopDeliveryStreamEncryption</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FailureDescription FailureDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeliveryStreamEncryptionConfigurationKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_OWNED_CMK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_MANAGED_CMK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeliveryStreamEncryptionConfigurationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLING_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLING_FAILED = 5,
	}
	
	/// <summary>
	/// Details about a Kinesis data stream used as the source for a Kinesis Data Firehose delivery stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SourceDescription
	{
		
		/// <summary>
		/// Details about a Kinesis data stream used as the source for a Kinesis Data Firehose delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KinesisStreamSourceDescription KinesisStreamSourceDescription { get; set; }
	}
	
	/// <summary>
	/// Contains information about a delivery stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeliveryStreamDescription
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string DeliveryStreamName { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string DeliveryStreamARN { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeliveryStreamDescriptionDeliveryStreamStatus DeliveryStreamStatus { get; set; }
		
		/// <summary>
		/// Provides details in case one of the following operations fails due to an error related to KMS: <a>CreateDeliveryStream</a>, <a>DeleteDeliveryStream</a>, <a>StartDeliveryStreamEncryption</a>, <a>StopDeliveryStreamEncryption</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FailureDescription FailureDescription { get; set; }
		
		/// <summary>
		/// Contains information about the server-side encryption (SSE) status for the delivery stream, the type customer master key (CMK) in use, if any, and the ARN of the CMK. You can get <code>DeliveryStreamEncryptionConfiguration</code> by invoking the <a>DescribeDeliveryStream</a> operation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeliveryStreamEncryptionConfiguration DeliveryStreamEncryptionConfiguration { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeliveryStreamDescriptionDeliveryStreamType DeliveryStreamType { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// Pattern: [0-9]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateTimestamp { get; set; }
		
		/// <summary>
		/// Details about a Kinesis data stream used as the source for a Kinesis Data Firehose delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SourceDescription Source { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DestinationDescription[] Destinations { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool HasMoreDestinations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeliveryStreamDescriptionDeliveryStreamStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING_FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeliveryStreamDescriptionDeliveryStreamType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DirectPut = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KinesisStreamAsSource = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum KeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_OWNED_CMK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_MANAGED_CMK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeliveryStreamEncryptionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLING_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLING_FAILED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeliveryStreamFailureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETIRE_KMS_GRANT_FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_KMS_GRANT_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMS_ACCESS_DENIED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED_KMS_KEY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_KMS_KEY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMS_KEY_NOT_FOUND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMS_OPT_IN_REQUIRED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_ENI_FAILED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE_ENI_FAILED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBNET_NOT_FOUND = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY_GROUP_NOT_FOUND = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENI_ACCESS_DENIED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBNET_ACCESS_DENIED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY_GROUP_ACCESS_DENIED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_ERROR = 14,
	}
	
	/// <summary>
	/// The OpenX SerDe. Used by Kinesis Data Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the native Hive / HCatalog JsonSerDe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OpenXJsonSerDe
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConvertDotsInJsonKeysToUnderscores { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CaseInsensitive { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ColumnToJsonKeyMappings ColumnToJsonKeyMappings { get; set; }
	}
	
	/// <summary>
	/// The native Hive / HCatalog JsonSerDe. Used by Kinesis Data Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the OpenX SerDe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HiveJsonSerDe
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NonEmptyString[] TimestampFormats { get; set; }
	}
	
	/// <summary>
	/// The deserializer you want Kinesis Data Firehose to use for converting the input data from JSON. Kinesis Data Firehose then serializes the data to its final format using the <a>Serializer</a>. Kinesis Data Firehose supports two types of deserializers: the <a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-JSON">Apache Hive JSON SerDe</a> and the <a href="https://github.com/rcongiu/Hive-JSON-Serde">OpenX JSON SerDe</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Deserializer
	{
		
		/// <summary>
		/// The OpenX SerDe. Used by Kinesis Data Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the native Hive / HCatalog JsonSerDe.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OpenXJsonSerDe OpenXJsonSerDe { get; set; }
		
		/// <summary>
		/// The native Hive / HCatalog JsonSerDe. Used by Kinesis Data Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the OpenX SerDe.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HiveJsonSerDe HiveJsonSerDe { get; set; }
	}
	
	/// <summary>
	/// Describes a destination in Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3DestinationDescription
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string BucketARN { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string ErrorOutputPrefix { get; set; }
		
		/// <summary>
		/// Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BufferingHints BufferingHints { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationDescriptionCompressionFormat CompressionFormat { get; set; }
		
		/// <summary>
		/// Describes the encryption for a destination in Amazon S3.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EncryptionConfiguration EncryptionConfiguration { get; set; }
		
		/// <summary>
		/// Describes the Amazon CloudWatch logging options for your delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLoggingOptions CloudWatchLoggingOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum S3DestinationDescriptionCompressionFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNCOMPRESSED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZIP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Snappy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HADOOP_SNAPPY = 4,
	}
	
	/// <summary>
	/// Describes a destination in Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExtendedS3DestinationDescription
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string BucketARN { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string ErrorOutputPrefix { get; set; }
		
		/// <summary>
		/// Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BufferingHints BufferingHints { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExtendedS3DestinationDescriptionCompressionFormat CompressionFormat { get; set; }
		
		/// <summary>
		/// Describes the encryption for a destination in Amazon S3.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EncryptionConfiguration EncryptionConfiguration { get; set; }
		
		/// <summary>
		/// Describes the Amazon CloudWatch logging options for your delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLoggingOptions CloudWatchLoggingOptions { get; set; }
		
		/// <summary>
		/// Describes a data processing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProcessingConfiguration ProcessingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExtendedS3DestinationDescriptionS3BackupMode S3BackupMode { get; set; }
		
		/// <summary>
		/// Describes a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationDescription S3BackupDescription { get; set; }
		
		/// <summary>
		/// Specifies that you want Kinesis Data Firehose to convert data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. Kinesis Data Firehose uses the serializer and deserializer that you specify, in addition to the column information from the AWS Glue table, to deserialize your input data from JSON and then serialize it to the Parquet or ORC format. For more information, see <a href="https://docs.aws.amazon.com/firehose/latest/dev/record-format-conversion.html">Kinesis Data Firehose Record Format Conversion</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataFormatConversionConfiguration DataFormatConversionConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExtendedS3DestinationDescriptionCompressionFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNCOMPRESSED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZIP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Snappy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HADOOP_SNAPPY = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExtendedS3DestinationDescriptionS3BackupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	/// <summary>
	/// Describes a destination in Amazon Redshift.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RedshiftDestinationDescription
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: jdbc:(redshift|postgresql)://((?!-)[A-Za-z0-9-]{1,63}(?<!-)\.)+redshift\.([a-zA-Z0-9\.]+):\d{1,5}/[a-zA-Z0-9_$]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string ClusterJDBCURL { get; set; }
		
		/// <summary>
		/// Describes a <code>COPY</code> command for Amazon Redshift.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CopyCommand CopyCommand { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RedshiftRetryOptions RetryOptions { get; set; }
		
		/// <summary>
		/// Describes a destination in Amazon S3.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationDescription S3DestinationDescription { get; set; }
		
		/// <summary>
		/// Describes a data processing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProcessingConfiguration ProcessingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RedshiftDestinationDescriptionS3BackupMode S3BackupMode { get; set; }
		
		/// <summary>
		/// Describes a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationDescription S3BackupDescription { get; set; }
		
		/// <summary>
		/// Describes the Amazon CloudWatch logging options for your delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLoggingOptions CloudWatchLoggingOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RedshiftDestinationDescriptionS3BackupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	/// <summary>
	/// The destination description in Amazon ES.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ElasticsearchDestinationDescription
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string DomainARN { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: https:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string ClusterEndpoint { get; set; }
		
		/// <summary>
		/// Max length: 80
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(80, MinimumLength=1)]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=0)]
		public string TypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ElasticsearchDestinationDescriptionIndexRotationPeriod IndexRotationPeriod { get; set; }
		
		/// <summary>
		/// Describes the buffering to perform before delivering data to the Amazon ES destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ElasticsearchBufferingHints BufferingHints { get; set; }
		
		/// <summary>
		/// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon ES.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ElasticsearchRetryOptions RetryOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ElasticsearchDestinationDescriptionS3BackupMode S3BackupMode { get; set; }
		
		/// <summary>
		/// Describes a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationDescription S3DestinationDescription { get; set; }
		
		/// <summary>
		/// Describes a data processing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProcessingConfiguration ProcessingConfiguration { get; set; }
		
		/// <summary>
		/// Describes the Amazon CloudWatch logging options for your delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLoggingOptions CloudWatchLoggingOptions { get; set; }
		
		/// <summary>
		/// The details of the VPC of the Amazon ES destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfigurationDescription VpcConfigurationDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ElasticsearchDestinationDescriptionIndexRotationPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoRotation = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneHour = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneDay = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneWeek = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneMonth = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ElasticsearchDestinationDescriptionS3BackupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailedDocumentsOnly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllDocuments = 1,
	}
	
	/// <summary>
	/// Describes a destination in Splunk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SplunkDestinationDescription
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string HECEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SplunkDestinationDescriptionHECEndpointType HECEndpointType { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string HECToken { get; set; }
		
		/// <summary>
		/// Minimum: 180
		/// Maximum: 600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(180, 600)]
		public System.Nullable<System.Int32> HECAcknowledgmentTimeoutInSeconds { get; set; }
		
		/// <summary>
		/// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Splunk, or if it doesn't receive an acknowledgment from Splunk.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SplunkRetryOptions RetryOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SplunkDestinationDescriptionS3BackupMode S3BackupMode { get; set; }
		
		/// <summary>
		/// Describes a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationDescription S3DestinationDescription { get; set; }
		
		/// <summary>
		/// Describes a data processing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProcessingConfiguration ProcessingConfiguration { get; set; }
		
		/// <summary>
		/// Describes the Amazon CloudWatch logging options for your delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLoggingOptions CloudWatchLoggingOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SplunkDestinationDescriptionHECEndpointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Raw = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Event = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SplunkDestinationDescriptionS3BackupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailedEventsOnly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllEvents = 1,
	}
	
	/// <summary>
	/// Describes the destination for a delivery stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DestinationDescription
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DestinationId { get; set; }
		
		/// <summary>
		/// Describes a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationDescription S3DestinationDescription { get; set; }
		
		/// <summary>
		/// Describes a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExtendedS3DestinationDescription ExtendedS3DestinationDescription { get; set; }
		
		/// <summary>
		/// Describes a destination in Amazon Redshift.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RedshiftDestinationDescription RedshiftDestinationDescription { get; set; }
		
		/// <summary>
		/// The destination description in Amazon ES.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ElasticsearchDestinationDescription ElasticsearchDestinationDescription { get; set; }
		
		/// <summary>
		/// Describes a destination in Splunk.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SplunkDestinationDescription SplunkDestinationDescription { get; set; }
	}
	
	/// <summary>
	/// Describes the buffering to perform before delivering data to the Amazon ES destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ElasticsearchBufferingHints
	{
		
		/// <summary>
		/// Minimum: 60
		/// Maximum: 900
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 900)]
		public System.Nullable<System.Int32> IntervalInSeconds { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> SizeInMBs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ElasticsearchIndexRotationPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoRotation = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneHour = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneDay = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneWeek = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneMonth = 4,
	}
	
	/// <summary>
	/// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon ES.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ElasticsearchRetryOptions
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 7200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 7200)]
		public System.Nullable<System.Int32> DurationInSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ElasticsearchS3BackupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailedDocumentsOnly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllDocuments = 1,
	}
	
	/// <summary>
	/// Describes a data processing configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProcessingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Processor[] Processors { get; set; }
	}
	
	/// <summary>
	/// The details of the VPC of the Amazon ES destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcConfiguration
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 16
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public NonEmptyStringWithoutWhitespace[] SubnetIds { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public NonEmptyStringWithoutWhitespace[] SecurityGroupIds { get; set; }
	}
	
	/// <summary>
	/// The details of the VPC of the Amazon ES destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcConfigurationDescription
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 16
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public NonEmptyStringWithoutWhitespace[] SubnetIds { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public NonEmptyStringWithoutWhitespace[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^\S+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// Describes an update for a destination in Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3DestinationUpdate
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string BucketARN { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string ErrorOutputPrefix { get; set; }
		
		/// <summary>
		/// Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BufferingHints BufferingHints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationUpdateCompressionFormat CompressionFormat { get; set; }
		
		/// <summary>
		/// Describes the encryption for a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncryptionConfiguration EncryptionConfiguration { get; set; }
		
		/// <summary>
		/// Describes the Amazon CloudWatch logging options for your delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLoggingOptions CloudWatchLoggingOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum S3DestinationUpdateCompressionFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNCOMPRESSED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZIP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Snappy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HADOOP_SNAPPY = 4,
	}
	
	/// <summary>
	/// Describes an update for a destination in Amazon ES.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ElasticsearchDestinationUpdate
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string DomainARN { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: https:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string ClusterEndpoint { get; set; }
		
		/// <summary>
		/// Max length: 80
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(80, MinimumLength=1)]
		public string IndexName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=0)]
		public string TypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ElasticsearchDestinationUpdateIndexRotationPeriod IndexRotationPeriod { get; set; }
		
		/// <summary>
		/// Describes the buffering to perform before delivering data to the Amazon ES destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ElasticsearchBufferingHints BufferingHints { get; set; }
		
		/// <summary>
		/// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon ES.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ElasticsearchRetryOptions RetryOptions { get; set; }
		
		/// <summary>
		/// Describes an update for a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationUpdate S3Update { get; set; }
		
		/// <summary>
		/// Describes a data processing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProcessingConfiguration ProcessingConfiguration { get; set; }
		
		/// <summary>
		/// Describes the Amazon CloudWatch logging options for your delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLoggingOptions CloudWatchLoggingOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ElasticsearchDestinationUpdateIndexRotationPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoRotation = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneHour = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneDay = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneWeek = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneMonth = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NoEncryptionConfig
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoEncryption = 0,
	}
	
	/// <summary>
	/// Describes an encryption key for a destination in Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KMSEncryptionConfig
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string AWSKMSKeyARN { get; set; }
	}
	
	/// <summary>
	/// Describes the encryption for a destination in Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EncryptionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EncryptionConfigurationNoEncryptionConfig NoEncryptionConfig { get; set; }
		
		/// <summary>
		/// Describes an encryption key for a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KMSEncryptionConfig KMSEncryptionConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EncryptionConfigurationNoEncryptionConfig
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoEncryption = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum S3BackupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	/// <summary>
	/// Describes an update for a destination in Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExtendedS3DestinationUpdate
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string BucketARN { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string ErrorOutputPrefix { get; set; }
		
		/// <summary>
		/// Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The <code>SizeInMBs</code> and <code>IntervalInSeconds</code> parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BufferingHints BufferingHints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExtendedS3DestinationUpdateCompressionFormat CompressionFormat { get; set; }
		
		/// <summary>
		/// Describes the encryption for a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncryptionConfiguration EncryptionConfiguration { get; set; }
		
		/// <summary>
		/// Describes the Amazon CloudWatch logging options for your delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLoggingOptions CloudWatchLoggingOptions { get; set; }
		
		/// <summary>
		/// Describes a data processing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProcessingConfiguration ProcessingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExtendedS3DestinationUpdateS3BackupMode S3BackupMode { get; set; }
		
		/// <summary>
		/// Describes an update for a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationUpdate S3BackupUpdate { get; set; }
		
		/// <summary>
		/// Specifies that you want Kinesis Data Firehose to convert data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. Kinesis Data Firehose uses the serializer and deserializer that you specify, in addition to the column information from the AWS Glue table, to deserialize your input data from JSON and then serialize it to the Parquet or ORC format. For more information, see <a href="https://docs.aws.amazon.com/firehose/latest/dev/record-format-conversion.html">Kinesis Data Firehose Record Format Conversion</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataFormatConversionConfiguration DataFormatConversionConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExtendedS3DestinationUpdateCompressionFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNCOMPRESSED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZIP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Snappy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HADOOP_SNAPPY = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExtendedS3DestinationUpdateS3BackupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HECEndpointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Raw = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Event = 1,
	}
	
	/// <summary>
	/// Details about a Kinesis data stream used as the source for a Kinesis Data Firehose delivery stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KinesisStreamSourceDescription
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string KinesisStreamARN { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string RoleARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeliveryStartTimestamp { get; set; }
	}
	
	/// <summary>
	/// Metadata that you can assign to a delivery stream, consisting of a key-value pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: ^(?!aws:)[\p{L}\p{Z}\p{N}_.:\/=+\-@%]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: ^[\p{L}\p{Z}\p{N}_.:\/=+\-@%]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrcCompression
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZLIB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPPY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrcFormatVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V0_11 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V0_12 = 1,
	}
	
	/// <summary>
	/// A serializer to use for converting data to the ORC format before storing it in Amazon S3. For more information, see <a href="https://orc.apache.org/docs/">Apache ORC</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrcSerDe
	{
		
		/// <summary>
		/// Minimum: 8388608
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(8388608, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> StripeSizeBytes { get; set; }
		
		/// <summary>
		/// Minimum: 67108864
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(67108864, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> BlockSizeBytes { get; set; }
		
		/// <summary>
		/// Minimum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> RowIndexStride { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnablePadding { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Double> PaddingTolerance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrcSerDeCompression Compression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NonEmptyStringWithoutWhitespace[] BloomFilterColumns { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Double> BloomFilterFalsePositiveProbability { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Double> DictionaryKeyThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrcSerDeFormatVersion FormatVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrcSerDeCompression
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZLIB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPPY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrcSerDeFormatVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V0_11 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V0_12 = 1,
	}
	
	/// <summary>
	/// The serializer that you want Kinesis Data Firehose to use to convert data to the target format before writing it to Amazon S3. Kinesis Data Firehose supports two types of serializers: the <a href="https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/orc/OrcSerde.html">ORC SerDe</a> and the <a href="https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/parquet/serde/ParquetHiveSerDe.html">Parquet SerDe</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Serializer
	{
		
		/// <summary>
		/// A serializer to use for converting data to the Parquet format before storing it in Amazon S3. For more information, see <a href="https://parquet.apache.org/documentation/latest/">Apache Parquet</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ParquetSerDe ParquetSerDe { get; set; }
		
		/// <summary>
		/// A serializer to use for converting data to the ORC format before storing it in Amazon S3. For more information, see <a href="https://orc.apache.org/docs/">Apache ORC</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OrcSerDe OrcSerDe { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParquetCompression
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNCOMPRESSED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPPY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParquetWriterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V2 = 1,
	}
	
	/// <summary>
	/// A serializer to use for converting data to the Parquet format before storing it in Amazon S3. For more information, see <a href="https://parquet.apache.org/documentation/latest/">Apache Parquet</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ParquetSerDe
	{
		
		/// <summary>
		/// Minimum: 67108864
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(67108864, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> BlockSizeBytes { get; set; }
		
		/// <summary>
		/// Minimum: 65536
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(65536, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> PageSizeBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParquetSerDeCompression Compression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableDictionaryCompression { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxPaddingBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParquetSerDeWriterVersion WriterVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParquetSerDeCompression
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNCOMPRESSED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNAPPY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParquetSerDeWriterVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V2 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProcessorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lambda = 0,
	}
	
	/// <summary>
	/// Describes a data processor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Processor
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProcessorType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProcessorParameter[] Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProcessorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lambda = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProcessorParameterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaArn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NumberOfRetries = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RoleArn = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BufferSizeInMBs = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BufferIntervalInSeconds = 4,
	}
	
	/// <summary>
	/// Describes the processor parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProcessorParameter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProcessorParameterParameterName ParameterName { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: ^(?!\s*$).+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string ParameterValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProcessorParameterParameterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaArn = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NumberOfRetries = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RoleArn = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BufferSizeInMBs = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BufferIntervalInSeconds = 4,
	}
	
	/// <summary>
	/// The unit of data in a delivery stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Record
	{
		
		/// <summary>
		/// Max length: 1024000
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024000, MinimumLength=0)]
		public string Data { get; set; }
	}
	
	/// <summary>
	/// Contains the result for an individual record from a <a>PutRecordBatch</a> request. If the record is successfully added to your delivery stream, it receives a record ID. If the record fails to be added to your delivery stream, the result includes an error code and an error message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRecordBatchResponseEntry
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string RecordId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RedshiftRetryOptions
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 7200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 7200)]
		public System.Nullable<System.Int32> DurationInSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RedshiftS3BackupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	/// <summary>
	/// Describes an update for a destination in Amazon Redshift.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RedshiftDestinationUpdate
	{
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: arn:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: jdbc:(redshift|postgresql)://((?!-)[A-Za-z0-9-]{1,63}(?<!-)\.)+redshift\.([a-zA-Z0-9\.]+):\d{1,5}/[a-zA-Z0-9_$]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string ClusterJDBCURL { get; set; }
		
		/// <summary>
		/// Describes a <code>COPY</code> command for Amazon Redshift.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CopyCommand CopyCommand { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 6
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=6)]
		public string Password { get; set; }
		
		/// <summary>
		/// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RedshiftRetryOptions RetryOptions { get; set; }
		
		/// <summary>
		/// Describes an update for a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationUpdate S3Update { get; set; }
		
		/// <summary>
		/// Describes a data processing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProcessingConfiguration ProcessingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RedshiftDestinationUpdateS3BackupMode S3BackupMode { get; set; }
		
		/// <summary>
		/// Describes an update for a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationUpdate S3BackupUpdate { get; set; }
		
		/// <summary>
		/// Describes the Amazon CloudWatch logging options for your delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLoggingOptions CloudWatchLoggingOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RedshiftDestinationUpdateS3BackupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 1,
	}
	
	/// <summary>
	/// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Splunk, or if it doesn't receive an acknowledgment from Splunk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SplunkRetryOptions
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 7200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 7200)]
		public System.Nullable<System.Int32> DurationInSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SplunkS3BackupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailedEventsOnly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllEvents = 1,
	}
	
	/// <summary>
	/// Describes an update for a destination in Splunk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SplunkDestinationUpdate
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string HECEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SplunkDestinationUpdateHECEndpointType HECEndpointType { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string HECToken { get; set; }
		
		/// <summary>
		/// Minimum: 180
		/// Maximum: 600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(180, 600)]
		public System.Nullable<System.Int32> HECAcknowledgmentTimeoutInSeconds { get; set; }
		
		/// <summary>
		/// Configures retry behavior in case Kinesis Data Firehose is unable to deliver documents to Splunk, or if it doesn't receive an acknowledgment from Splunk.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SplunkRetryOptions RetryOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SplunkDestinationUpdateS3BackupMode S3BackupMode { get; set; }
		
		/// <summary>
		/// Describes an update for a destination in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationUpdate S3Update { get; set; }
		
		/// <summary>
		/// Describes a data processing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProcessingConfiguration ProcessingConfiguration { get; set; }
		
		/// <summary>
		/// Describes the Amazon CloudWatch logging options for your delivery stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLoggingOptions CloudWatchLoggingOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SplunkDestinationUpdateHECEndpointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Raw = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Event = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SplunkDestinationUpdateS3BackupMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailedEventsOnly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllEvents = 1,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Creates a Kinesis Data Firehose delivery stream.</p> <p>By default, you can create up to 50 delivery streams per AWS Region.</p> <p>This is an asynchronous operation that immediately returns. The initial status of the delivery stream is <code>CREATING</code>. After the delivery stream is created, its status is <code>ACTIVE</code> and it now accepts data. If the delivery stream creation fails, the status transitions to <code>CREATING_FAILED</code>. Attempts to send data to a delivery stream that is not in the <code>ACTIVE</code> state cause an exception. To check the state of a delivery stream, use <a>DescribeDeliveryStream</a>.</p> <p>If the status of a delivery stream is <code>CREATING_FAILED</code>, this status doesn't change, and you can't invoke <code>CreateDeliveryStream</code> again on it. However, you can invoke the <a>DeleteDeliveryStream</a> operation to delete it.</p> <p>A Kinesis Data Firehose delivery stream can be configured to receive records directly from providers using <a>PutRecord</a> or <a>PutRecordBatch</a>, or it can be configured to use an existing Kinesis stream as its source. To specify a Kinesis data stream as input, set the <code>DeliveryStreamType</code> parameter to <code>KinesisStreamAsSource</code>, and provide the Kinesis stream Amazon Resource Name (ARN) and role ARN in the <code>KinesisStreamSourceConfiguration</code> parameter.</p> <p>To create a delivery stream with server-side encryption (SSE) enabled, include <a>DeliveryStreamEncryptionConfigurationInput</a> in your request. This is optional. You can also invoke <a>StartDeliveryStreamEncryption</a> to turn on SSE for an existing delivery stream that doesn't have SSE enabled.</p> <p>A delivery stream is configured with a single destination: Amazon S3, Amazon ES, Amazon Redshift, or Splunk. You must specify only one of the following destination configuration parameters: <code>ExtendedS3DestinationConfiguration</code>, <code>S3DestinationConfiguration</code>, <code>ElasticsearchDestinationConfiguration</code>, <code>RedshiftDestinationConfiguration</code>, or <code>SplunkDestinationConfiguration</code>.</p> <p>When you specify <code>S3DestinationConfiguration</code>, you can also provide the following optional values: BufferingHints, <code>EncryptionConfiguration</code>, and <code>CompressionFormat</code>. By default, if no <code>BufferingHints</code> value is provided, Kinesis Data Firehose buffers data up to 5 MB or for 5 minutes, whichever condition is satisfied first. <code>BufferingHints</code> is a hint, so there are some cases where the service cannot adhere to these conditions strictly. For example, record boundaries might be such that the size is a little over or under the configured buffering size. By default, no encryption is performed. We strongly recommend that you enable encryption to ensure secure data storage in Amazon S3.</p> <p>A few notes about Amazon Redshift as a destination:</p> <ul> <li> <p>An Amazon Redshift destination requires an S3 bucket as intermediate location. Kinesis Data Firehose first delivers data to Amazon S3 and then uses <code>COPY</code> syntax to load data into an Amazon Redshift table. This is specified in the <code>RedshiftDestinationConfiguration.S3Configuration</code> parameter.</p> </li> <li> <p>The compression formats <code>SNAPPY</code> or <code>ZIP</code> cannot be specified in <code>RedshiftDestinationConfiguration.S3Configuration</code> because the Amazon Redshift <code>COPY</code> operation that reads from the S3 bucket doesn't support these compression formats.</p> </li> <li> <p>We strongly recommend that you use the user name and password you provide exclusively with Kinesis Data Firehose, and that the permissions for the account are restricted for Amazon Redshift <code>INSERT</code> permissions.</p> </li> </ul> <p>Kinesis Data Firehose assumes the IAM role that is configured as part of the destination. The role should allow the Kinesis Data Firehose principal to assume the role, and the role should have permissions that allow the service to deliver the data. For more information, see <a href="https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-s3">Grant Kinesis Data Firehose Access to an Amazon S3 Destination</a> in the <i>Amazon Kinesis Data Firehose Developer Guide</i>.</p>
		/// CreateDeliveryStream /#X-Amz-Target=Firehose_20150804.CreateDeliveryStream
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDeliveryStreamOutput> CreateDeliveryStreamAsync(CreateDeliveryStreamInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Firehose_20150804.CreateDeliveryStream";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDeliveryStreamOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a delivery stream and its data.</p> <p>To check the state of a delivery stream, use <a>DescribeDeliveryStream</a>. You can delete a delivery stream only if it is in one of the following states: <code>ACTIVE</code>, <code>DELETING</code>, <code>CREATING_FAILED</code>, or <code>DELETING_FAILED</code>. You can't delete a delivery stream that is in the <code>CREATING</code> state. While the deletion request is in process, the delivery stream is in the <code>DELETING</code> state.</p> <p>While the delivery stream is in the <code>DELETING</code> state, the service might continue to accept records, but it doesn't make any guarantees with respect to delivering the data. Therefore, as a best practice, first stop any applications that are sending records before you delete a delivery stream.</p>
		/// DeleteDeliveryStream /#X-Amz-Target=Firehose_20150804.DeleteDeliveryStream
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDeliveryStreamOutput> DeleteDeliveryStreamAsync(DeleteDeliveryStreamInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Firehose_20150804.DeleteDeliveryStream";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDeliveryStreamOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified delivery stream and its status. For example, after your delivery stream is created, call <code>DescribeDeliveryStream</code> to see whether the delivery stream is <code>ACTIVE</code> and therefore ready for data to be sent to it. </p> <p>If the status of a delivery stream is <code>CREATING_FAILED</code>, this status doesn't change, and you can't invoke <a>CreateDeliveryStream</a> again on it. However, you can invoke the <a>DeleteDeliveryStream</a> operation to delete it. If the status is <code>DELETING_FAILED</code>, you can force deletion by invoking <a>DeleteDeliveryStream</a> again but with <a>DeleteDeliveryStreamInput$AllowForceDelete</a> set to true.</p>
		/// DescribeDeliveryStream /#X-Amz-Target=Firehose_20150804.DescribeDeliveryStream
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDeliveryStreamOutput> DescribeDeliveryStreamAsync(DescribeDeliveryStreamInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Firehose_20150804.DescribeDeliveryStream";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDeliveryStreamOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists your delivery streams in alphabetical order of their names.</p> <p>The number of delivery streams might be too large to return using a single call to <code>ListDeliveryStreams</code>. You can limit the number of delivery streams returned, using the <code>Limit</code> parameter. To determine whether there are more delivery streams to list, check the value of <code>HasMoreDeliveryStreams</code> in the output. If there are more delivery streams to list, you can request them by calling this operation again and setting the <code>ExclusiveStartDeliveryStreamName</code> parameter to the name of the last delivery stream returned in the last call.</p>
		/// ListDeliveryStreams /#X-Amz-Target=Firehose_20150804.ListDeliveryStreams
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListDeliveryStreamsOutput> ListDeliveryStreamsAsync(ListDeliveryStreamsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Firehose_20150804.ListDeliveryStreams";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDeliveryStreamsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the tags for the specified delivery stream. This operation has a limit of five transactions per second per account.
		/// ListTagsForDeliveryStream /#X-Amz-Target=Firehose_20150804.ListTagsForDeliveryStream
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForDeliveryStreamOutput> ListTagsForDeliveryStreamAsync(ListTagsForDeliveryStreamInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Firehose_20150804.ListTagsForDeliveryStream";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForDeliveryStreamOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Writes a single data record into an Amazon Kinesis Data Firehose delivery stream. To write multiple data records into a delivery stream, use <a>PutRecordBatch</a>. Applications using these operations are referred to as producers.</p> <p>By default, each delivery stream can take in up to 2,000 transactions per second, 5,000 records per second, or 5 MB per second. If you use <a>PutRecord</a> and <a>PutRecordBatch</a>, the limits are an aggregate across these two operations for each delivery stream. For more information about limits and how to request an increase, see <a href="https://docs.aws.amazon.com/firehose/latest/dev/limits.html">Amazon Kinesis Data Firehose Limits</a>. </p> <p>You must specify the name of the delivery stream and the data record when using <a>PutRecord</a>. The data record consists of a data blob that can be up to 1,000 KB in size, and any kind of data. For example, it can be a segment from a log file, geographic location data, website clickstream data, and so on.</p> <p>Kinesis Data Firehose buffers records before delivering them to the destination. To disambiguate the data blobs at the destination, a common solution is to use delimiters in the data, such as a newline (<code>\n</code>) or some other character unique within the data. This allows the consumer application to parse individual data items when reading the data from the destination.</p> <p>The <code>PutRecord</code> operation returns a <code>RecordId</code>, which is a unique string assigned to each record. Producer applications can use this ID for purposes such as auditability and investigation.</p> <p>If the <code>PutRecord</code> operation throws a <code>ServiceUnavailableException</code>, back off and retry. If the exception persists, it is possible that the throughput limits have been exceeded for the delivery stream. </p> <p>Data records sent to Kinesis Data Firehose are stored for 24 hours from the time they are added to a delivery stream as it tries to send the records to the destination. If the destination is unreachable for more than 24 hours, the data is no longer available.</p> <important> <p>Don't concatenate two or more base64 strings to form the data fields of your records. Instead, concatenate the raw data, then perform base64 encoding.</p> </important>
		/// PutRecord /#X-Amz-Target=Firehose_20150804.PutRecord
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutRecordOutput> PutRecordAsync(PutRecordInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Firehose_20150804.PutRecord";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutRecordOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Writes multiple data records into a delivery stream in a single call, which can achieve higher throughput per producer than when writing single records. To write single data records into a delivery stream, use <a>PutRecord</a>. Applications using these operations are referred to as producers.</p> <p>By default, each delivery stream can take in up to 2,000 transactions per second, 5,000 records per second, or 5 MB per second. If you use <a>PutRecord</a> and <a>PutRecordBatch</a>, the limits are an aggregate across these two operations for each delivery stream. For more information about limits, see <a href="https://docs.aws.amazon.com/firehose/latest/dev/limits.html">Amazon Kinesis Data Firehose Limits</a>.</p> <p>Each <a>PutRecordBatch</a> request supports up to 500 records. Each record in the request can be as large as 1,000 KB (before 64-bit encoding), up to a limit of 4 MB for the entire request. These limits cannot be changed.</p> <p>You must specify the name of the delivery stream and the data record when using <a>PutRecord</a>. The data record consists of a data blob that can be up to 1,000 KB in size, and any kind of data. For example, it could be a segment from a log file, geographic location data, website clickstream data, and so on.</p> <p>Kinesis Data Firehose buffers records before delivering them to the destination. To disambiguate the data blobs at the destination, a common solution is to use delimiters in the data, such as a newline (<code>\n</code>) or some other character unique within the data. This allows the consumer application to parse individual data items when reading the data from the destination.</p> <p>The <a>PutRecordBatch</a> response includes a count of failed records, <code>FailedPutCount</code>, and an array of responses, <code>RequestResponses</code>. Even if the <a>PutRecordBatch</a> call succeeds, the value of <code>FailedPutCount</code> may be greater than 0, indicating that there are records for which the operation didn't succeed. Each entry in the <code>RequestResponses</code> array provides additional information about the processed record. It directly correlates with a record in the request array using the same ordering, from the top to the bottom. The response array always includes the same number of records as the request array. <code>RequestResponses</code> includes both successfully and unsuccessfully processed records. Kinesis Data Firehose tries to process all records in each <a>PutRecordBatch</a> request. A single record failure does not stop the processing of subsequent records. </p> <p>A successfully processed record includes a <code>RecordId</code> value, which is unique for the record. An unsuccessfully processed record includes <code>ErrorCode</code> and <code>ErrorMessage</code> values. <code>ErrorCode</code> reflects the type of error, and is one of the following values: <code>ServiceUnavailableException</code> or <code>InternalFailure</code>. <code>ErrorMessage</code> provides more detailed information about the error.</p> <p>If there is an internal server error or a timeout, the write might have completed or it might have failed. If <code>FailedPutCount</code> is greater than 0, retry the request, resending only those records that might have failed processing. This minimizes the possible duplicate records and also reduces the total bytes sent (and corresponding charges). We recommend that you handle any duplicates at the destination.</p> <p>If <a>PutRecordBatch</a> throws <code>ServiceUnavailableException</code>, back off and retry. If the exception persists, it is possible that the throughput limits have been exceeded for the delivery stream.</p> <p>Data records sent to Kinesis Data Firehose are stored for 24 hours from the time they are added to a delivery stream as it attempts to send the records to the destination. If the destination is unreachable for more than 24 hours, the data is no longer available.</p> <important> <p>Don't concatenate two or more base64 strings to form the data fields of your records. Instead, concatenate the raw data, then perform base64 encoding.</p> </important>
		/// PutRecordBatch /#X-Amz-Target=Firehose_20150804.PutRecordBatch
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutRecordBatchOutput> PutRecordBatchAsync(PutRecordBatchInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Firehose_20150804.PutRecordBatch";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutRecordBatchOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Enables server-side encryption (SSE) for the delivery stream. </p> <p>This operation is asynchronous. It returns immediately. When you invoke it, Kinesis Data Firehose first sets the encryption status of the stream to <code>ENABLING</code>, and then to <code>ENABLED</code>. The encryption status of a delivery stream is the <code>Status</code> property in <a>DeliveryStreamEncryptionConfiguration</a>. If the operation fails, the encryption status changes to <code>ENABLING_FAILED</code>. You can continue to read and write data to your delivery stream while the encryption status is <code>ENABLING</code>, but the data is not encrypted. It can take up to 5 seconds after the encryption status changes to <code>ENABLED</code> before all records written to the delivery stream are encrypted. To find out whether a record or a batch of records was encrypted, check the response elements <a>PutRecordOutput$Encrypted</a> and <a>PutRecordBatchOutput$Encrypted</a>, respectively.</p> <p>To check the encryption status of a delivery stream, use <a>DescribeDeliveryStream</a>.</p> <p>Even if encryption is currently enabled for a delivery stream, you can still invoke this operation on it to change the ARN of the CMK or both its type and ARN. If you invoke this method to change the CMK, and the old CMK is of type <code>CUSTOMER_MANAGED_CMK</code>, Kinesis Data Firehose schedules the grant it had on the old CMK for retirement. If the new CMK is of type <code>CUSTOMER_MANAGED_CMK</code>, Kinesis Data Firehose creates a grant that enables it to use the new CMK to encrypt and decrypt data and to manage the grant.</p> <p>If a delivery stream already has encryption enabled and then you invoke this operation to change the ARN of the CMK or both its type and ARN and you get <code>ENABLING_FAILED</code>, this only means that the attempt to change the CMK failed. In this case, encryption remains enabled with the old CMK.</p> <p>If the encryption status of your delivery stream is <code>ENABLING_FAILED</code>, you can invoke this operation again with a valid CMK. The CMK must be enabled and the key policy mustn't explicitly deny the permission for Kinesis Data Firehose to invoke KMS encrypt and decrypt operations.</p> <p>You can enable SSE for a delivery stream only if it's a delivery stream that uses <code>DirectPut</code> as its source. </p> <p>The <code>StartDeliveryStreamEncryption</code> and <code>StopDeliveryStreamEncryption</code> operations have a combined limit of 25 calls per delivery stream per 24 hours. For example, you reach the limit if you call <code>StartDeliveryStreamEncryption</code> 13 times and <code>StopDeliveryStreamEncryption</code> 12 times for the same delivery stream in a 24-hour period.</p>
		/// StartDeliveryStreamEncryption /#X-Amz-Target=Firehose_20150804.StartDeliveryStreamEncryption
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartDeliveryStreamEncryptionOutput> StartDeliveryStreamEncryptionAsync(StartDeliveryStreamEncryptionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Firehose_20150804.StartDeliveryStreamEncryption";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartDeliveryStreamEncryptionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Disables server-side encryption (SSE) for the delivery stream. </p> <p>This operation is asynchronous. It returns immediately. When you invoke it, Kinesis Data Firehose first sets the encryption status of the stream to <code>DISABLING</code>, and then to <code>DISABLED</code>. You can continue to read and write data to your stream while its status is <code>DISABLING</code>. It can take up to 5 seconds after the encryption status changes to <code>DISABLED</code> before all records written to the delivery stream are no longer subject to encryption. To find out whether a record or a batch of records was encrypted, check the response elements <a>PutRecordOutput$Encrypted</a> and <a>PutRecordBatchOutput$Encrypted</a>, respectively.</p> <p>To check the encryption state of a delivery stream, use <a>DescribeDeliveryStream</a>. </p> <p>If SSE is enabled using a customer managed CMK and then you invoke <code>StopDeliveryStreamEncryption</code>, Kinesis Data Firehose schedules the related KMS grant for retirement and then retires it after it ensures that it is finished delivering records to the destination.</p> <p>The <code>StartDeliveryStreamEncryption</code> and <code>StopDeliveryStreamEncryption</code> operations have a combined limit of 25 calls per delivery stream per 24 hours. For example, you reach the limit if you call <code>StartDeliveryStreamEncryption</code> 13 times and <code>StopDeliveryStreamEncryption</code> 12 times for the same delivery stream in a 24-hour period.</p>
		/// StopDeliveryStreamEncryption /#X-Amz-Target=Firehose_20150804.StopDeliveryStreamEncryption
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopDeliveryStreamEncryptionOutput> StopDeliveryStreamEncryptionAsync(StopDeliveryStreamEncryptionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Firehose_20150804.StopDeliveryStreamEncryption";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopDeliveryStreamEncryptionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Adds or updates tags for the specified delivery stream. A tag is a key-value pair that you can define and assign to AWS resources. If you specify a tag that already exists, the tag value is replaced with the value that you specify in the request. Tags are metadata. For example, you can add friendly names and descriptions or other types of information that can help you distinguish the delivery stream. For more information about tags, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html">Using Cost Allocation Tags</a> in the <i>AWS Billing and Cost Management User Guide</i>. </p> <p>Each delivery stream can have up to 50 tags. </p> <p>This operation has a limit of five transactions per second per account. </p>
		/// TagDeliveryStream /#X-Amz-Target=Firehose_20150804.TagDeliveryStream
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagDeliveryStreamOutput> TagDeliveryStreamAsync(TagDeliveryStreamInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Firehose_20150804.TagDeliveryStream";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagDeliveryStreamOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Removes tags from the specified delivery stream. Removed tags are deleted, and you can't recover them after this operation successfully completes.</p> <p>If you specify a tag that doesn't exist, the operation ignores it.</p> <p>This operation has a limit of five transactions per second per account. </p>
		/// UntagDeliveryStream /#X-Amz-Target=Firehose_20150804.UntagDeliveryStream
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagDeliveryStreamOutput> UntagDeliveryStreamAsync(UntagDeliveryStreamInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Firehose_20150804.UntagDeliveryStream";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagDeliveryStreamOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified destination of the specified delivery stream.</p> <p>Use this operation to change the destination type (for example, to replace the Amazon S3 destination with Amazon Redshift) or change the parameters associated with a destination (for example, to change the bucket name of the Amazon S3 destination). The update might not occur immediately. The target delivery stream remains active while the configurations are updated, so data writes to the delivery stream can continue during this process. The updated configurations are usually effective within a few minutes.</p> <p>Switching between Amazon ES and other services is not supported. For an Amazon ES destination, you can only update to another Amazon ES destination.</p> <p>If the destination type is the same, Kinesis Data Firehose merges the configuration parameters specified with the destination configuration that already exists on the delivery stream. If any of the parameters are not specified in the call, the existing values are retained. For example, in the Amazon S3 destination, if <a>EncryptionConfiguration</a> is not specified, then the existing <code>EncryptionConfiguration</code> is maintained on the destination.</p> <p>If the destination type is not the same, for example, changing the destination from Amazon S3 to Amazon Redshift, Kinesis Data Firehose does not merge any parameters. In this case, all parameters must be specified.</p> <p>Kinesis Data Firehose uses <code>CurrentDeliveryStreamVersionId</code> to avoid race conditions and conflicting merges. This is a required field, and the service updates the configuration only if the existing configuration has a version ID that matches. After the update is applied successfully, the version ID is updated, and can be retrieved using <a>DescribeDeliveryStream</a>. Use the new version ID to set <code>CurrentDeliveryStreamVersionId</code> in the next call.</p>
		/// UpdateDestination /#X-Amz-Target=Firehose_20150804.UpdateDestination
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDestinationOutput> UpdateDestinationAsync(UpdateDestinationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Firehose_20150804.UpdateDestination";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDestinationOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
