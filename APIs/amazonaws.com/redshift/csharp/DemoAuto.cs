//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptReservedNodeExchangeOutputMessage
	{
		
		/// <summary>
		/// Describes a reserved node. You can call the <a>DescribeReservedNodeOfferings</a> API to obtain the available reserved node offerings. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservedNode ExchangedReservedNode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizeClusterSecurityGroupIngressResult
	{
		
		/// <summary>
		/// Describes a security group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterSecurityGroup ClusterSecurityGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizeSnapshotAccessResult
	{
		
		/// <summary>
		/// Describes a snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchDeleteClusterSnapshotsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnapshotErrorMessage[] Errors { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteClusterSnapshotMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotClusterIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchModifyClusterSnapshotsOutputMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnapshotErrorMessage[] Errors { get; set; }
	}
	
	/// <summary>
	/// Describes the result of a cluster resize operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResizeProgressMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TargetNumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetClusterType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ImportTablesCompleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ImportTablesInProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ImportTablesNotStarted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AvgResizeRateInMegaBytesPerSecond { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalResizeDataInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgressInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ElapsedTimeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EstimatedTimeToCompletionInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResizeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetEncryptionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DataTransferProgressPercent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyClusterSnapshotResult
	{
		
		/// <summary>
		/// Describes a snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateClusterResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	/// <summary>
	/// A tag consisting of a name/value pair for a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateClusterParameterGroupResult
	{
		
		/// <summary>
		/// Describes a parameter group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterParameterGroup ClusterParameterGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateClusterSecurityGroupResult
	{
		
		/// <summary>
		/// Describes a security group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterSecurityGroup ClusterSecurityGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateClusterSnapshotResult
	{
		
		/// <summary>
		/// Describes a snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateClusterSubnetGroupResult
	{
		
		/// <summary>
		/// Describes a subnet group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterSubnetGroup ClusterSubnetGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateEventSubscriptionResult
	{
		
		/// <summary>
		/// Describes event subscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventSubscription EventSubscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateHsmClientCertificateResult
	{
		
		/// <summary>
		/// Returns information about an HSM client certificate. The certificate is stored in a secure Hardware Storage Module (HSM), and used by the Amazon Redshift cluster to encrypt data files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HsmClientCertificate HsmClientCertificate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateHsmConfigurationResult
	{
		
		/// <summary>
		/// Returns information about an HSM configuration, which is an object that describes to Amazon Redshift clusters the information they require to connect to an HSM where they can store database encryption keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HsmConfiguration HsmConfiguration { get; set; }
	}
	
	/// <summary>
	/// Describes a scheduled action. You can use a scheduled action to trigger some Amazon Redshift API operations on a schedule. For information about which API operations can be scheduled, see <a>ScheduledActionType</a>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionName { get; set; }
		
		/// <summary>
		/// The action type that specifies an Amazon Redshift API operation that is supported by the Amazon Redshift scheduler. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScheduledActionType TargetAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledActionState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TStamp[] NextInvocations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScheduledActionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResizeClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Classic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PauseClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResumeClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSnapshotCopyGrantResult
	{
		
		/// <summary>
		/// <p>The snapshot copy grant that grants Amazon Redshift permission to encrypt copied snapshots with the specified customer master key (CMK) from AWS KMS in the destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SnapshotCopyGrant SnapshotCopyGrant { get; set; }
	}
	
	/// <summary>
	/// Describes a snapshot schedule. You can set a regular interval for creating snapshots of a cluster. You can also schedule snapshots for specific dates. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SnapshotSchedule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ScheduleDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TStamp[] NextInvocations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AssociatedClusterCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterAssociatedToSchedule[] AssociatedClusters { get; set; }
	}
	
	/// <summary>
	/// Describes a usage limit object for a cluster. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UsageLimit
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UsageLimitId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageLimitFeatureType FeatureType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageLimitLimitType LimitType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageLimitPeriod Period { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageLimitBreachAction BreachAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UsageLimitFeatureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spectrum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		concurrency-scaling = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UsageLimitLimitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		time = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		data-scanned = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UsageLimitPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		weekly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		monthly = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UsageLimitBreachAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		log = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		emit-metric = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disable = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteClusterResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteClusterSnapshotResult
	{
		
		/// <summary>
		/// Describes a snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountAttributeList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountAttribute[] AccountAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterDbRevisionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterDbRevision[] ClusterDbRevisions { get; set; }
	}
	
	/// <summary>
	/// Contains the output from the <a>DescribeClusterParameterGroups</a> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterParameterGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterParameterGroup[] ParameterGroups { get; set; }
	}
	
	/// <summary>
	/// Contains the output from the <a>DescribeClusterParameters</a> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterParameterGroupDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterSecurityGroupMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterSecurityGroup[] ClusterSecurityGroups { get; set; }
	}
	
	/// <summary>
	/// Contains the output from the <a>DescribeClusterSnapshots</a> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SnapshotMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Snapshot[] Snapshots { get; set; }
	}
	
	/// <summary>
	/// Describes a sorting entity
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SnapshotSortingEntity
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SnapshotSortingEntityAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnapshotSortingEntitySortOrder SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SnapshotSortingEntityAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOTAL_SIZE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_TIME = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SnapshotSortingEntitySortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESC = 1,
	}
	
	/// <summary>
	/// Contains the output from the <a>DescribeClusterSubnetGroups</a> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterSubnetGroupMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterSubnetGroup[] ClusterSubnetGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TrackListMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MaintenanceTrack[] MaintenanceTracks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the output from the <a>DescribeClusterVersions</a> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterVersionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterVersion[] ClusterVersions { get; set; }
	}
	
	/// <summary>
	/// Contains the output from the <a>DescribeClusters</a> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClustersMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cluster[] Clusters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDefaultClusterParametersResult
	{
		
		/// <summary>
		/// Describes the default cluster parameters for a parameter group family.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DefaultClusterParameters DefaultClusterParameters { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventCategoriesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventCategoriesMap[] EventCategoriesMapList { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventSubscriptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventSubscription[] EventSubscriptionsList { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Event[] Events { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HsmClientCertificateMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HsmClientCertificate[] HsmClientCertificates { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HsmConfigurationMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HsmConfiguration[] HsmConfigurations { get; set; }
	}
	
	/// <summary>
	/// Describes the status of logging for a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoggingStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> LoggingEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastSuccessfulDeliveryTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastFailureTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastFailureMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NodeConfigurationOptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NodeConfigurationOption[] NodeConfigurationOptionList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// A set of elements to filter the returned node configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NodeConfigurationOptionsFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NodeConfigurationOptionsFilterName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NodeConfigurationOptionsFilterOperator Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NodeConfigurationOptionsFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NodeType = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NumberOfNodes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EstimatedDiskUtilizationPercent = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mode = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NodeConfigurationOptionsFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eq = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lt = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gt = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		le = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ge = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@in = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		between = 6,
	}
	
	/// <summary>
	/// Contains the output from the <a>DescribeOrderableClusterOptions</a> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrderableClusterOptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrderableClusterOption[] OrderableClusterOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservedNodeOfferingsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedNodeOffering[] ReservedNodeOfferings { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservedNodesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedNode[] ReservedNodes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledActionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledAction[] ScheduledActions { get; set; }
	}
	
	/// <summary>
	/// A set of elements to filter the returned scheduled actions. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledActionFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduledActionFilterName Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScheduledActionFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster-identifier = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		iam-role = 1,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SnapshotCopyGrantMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnapshotCopyGrant[] SnapshotCopyGrants { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSnapshotSchedulesOutputMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SnapshotSchedule[] SnapshotSchedules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomerStorageMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalBackupSizeInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalProvisionedStorageInMegaBytes { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TableRestoreStatusMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TableRestoreStatus[] TableRestoreStatusDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaggedResourceListMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TaggedResource[] TaggedResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UsageLimitList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UsageLimit[] UsageLimits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableSnapshotCopyResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableSnapshotCopyResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	/// <summary>
	/// Temporary credentials with authorization to log on to an Amazon Redshift database. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterCredentials
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DbUser { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DbPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Expiration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetReservedNodeExchangeOfferingsOutputMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedNodeOffering[] ReservedNodeOfferings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClusterResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClusterDbRevisionResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClusterIamRolesResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClusterMaintenanceResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterParameterGroupNameMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupStatus { get; set; }
	}
	
	/// <summary>
	/// Describes a parameter in a cluster parameter group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Parameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllowedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterApplyType ApplyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsModifiable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinimumEngineVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParameterApplyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@static = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamic = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClusterSnapshotResult
	{
		
		/// <summary>
		/// Describes a snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClusterSubnetGroupResult
	{
		
		/// <summary>
		/// Describes a subnet group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterSubnetGroup ClusterSubnetGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyEventSubscriptionResult
	{
		
		/// <summary>
		/// Describes event subscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventSubscription EventSubscription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifySnapshotCopyRetentionPeriodResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PauseClusterResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PurchaseReservedNodeOfferingResult
	{
		
		/// <summary>
		/// Describes a reserved node. You can call the <a>DescribeReservedNodeOfferings</a> API to obtain the available reserved node offerings. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservedNode ReservedNode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebootClusterResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResizeClusterResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreFromClusterSnapshotResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreTableFromClusterSnapshotResult
	{
		
		/// <summary>
		/// Describes the status of a <a>RestoreTableFromClusterSnapshot</a> operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TableRestoreStatus TableRestoreStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResumeClusterResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RevokeClusterSecurityGroupIngressResult
	{
		
		/// <summary>
		/// Describes a security group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterSecurityGroup ClusterSecurityGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RevokeSnapshotAccessResult
	{
		
		/// <summary>
		/// Describes a snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RotateEncryptionKeyResult
	{
		
		/// <summary>
		/// Describes a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptReservedNodeExchangeInputMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetReservedNodeOfferingId { get; set; }
	}
	
	/// <summary>
	/// Describes a reserved node. You can call the <a>DescribeReservedNodeOfferings</a> API to obtain the available reserved node offerings. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservedNode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NodeCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecurringCharge[] RecurringCharges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedNodeReservedNodeOfferingType ReservedNodeOfferingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservedNodeReservedNodeOfferingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Regular = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Upgradable = 1,
	}
	
	/// <summary>
	/// A name value pair that describes an aspect of an account. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeValueTarget[] AttributeValues { get; set; }
	}
	
	/// <summary>
	/// Describes an AWS customer account authorized to restore a snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountWithRestoreAccess
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountAlias { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		restore-cluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		recommend-node-config = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		resize-cluster = 2,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterAssociatedToSchedule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterAssociatedToScheduleScheduleAssociationState ScheduleAssociationState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClusterAssociatedToScheduleScheduleAssociationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFYING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	/// <summary>
	/// Describes an attribute value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttributeValueTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeValue { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizeClusterSecurityGroupIngressMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CIDRIP { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupOwnerId { get; set; }
	}
	
	/// <summary>
	/// Describes a security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterSecurityGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EC2SecurityGroup[] EC2SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IPRange[] IPRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizeSnapshotAccessMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotClusterIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountWithRestoreAccess { get; set; }
	}
	
	/// <summary>
	/// Describes a snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Snapshot
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SnapshotCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ClusterCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EncryptedWithHSM { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccountWithRestoreAccess[] AccountsWithRestoreAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalBackupSizeInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ActualIncrementalBackupSizeInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BackupProgressInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CurrentBackupRateInMegaBytesPerSecond { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EstimatedSecondsToCompletion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ElapsedTimeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] RestorableNodeTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnhancedVpcRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRemainingDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SnapshotRetentionStartTime { get; set; }
	}
	
	/// <summary>
	/// Describes an availability zone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailabilityZone
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SupportedPlatform[] SupportedPlatforms { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchDeleteClusterSnapshotsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeleteClusterSnapshotMessage[] Identifiers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchModifyClusterSnapshotsMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] SnapshotIdentifierList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
	
	/// <summary>
	/// Describes the errors returned by a snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SnapshotErrorMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelResizeMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	/// <summary>
	/// Describes a connection endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Endpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
	}
	
	/// <summary>
	/// Describes cluster attributes that are in a pending state. A change to one or more the attributes was requested and is in progress or will be applied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PendingModifiedValues
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AutomatedSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnhancedVpcRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionType { get; set; }
	}
	
	/// <summary>
	/// Describes the status of a cluster restore action. Returns null if the cluster was not created by restoring a snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CurrentRestoreRateInMegaBytesPerSecond { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnapshotSizeInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgressInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ElapsedTimeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EstimatedTimeToCompletionInSeconds { get; set; }
	}
	
	/// <summary>
	/// Describes the status of a cluster while it is in the process of resizing with an incremental resize.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataTransferProgress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CurrentRateInMegaBytesPerSecond { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalDataInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DataTransferredInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EstimatedTimeToCompletionInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ElapsedTimeInSeconds { get; set; }
	}
	
	/// <summary>
	/// Describes the status of changes to HSM settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HsmStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmConfigurationIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Returns the destination region and retention period that are configured for cross-region snapshot copy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterSnapshotCopyStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotCopyGrantName { get; set; }
	}
	
	/// <summary>
	/// Describes the status of the elastic IP (EIP) address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ElasticIpStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScheduleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFYING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	/// <summary>
	/// Describes a resize operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResizeInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResizeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowCancelResize { get; set; }
	}
	
	/// <summary>
	/// Describes a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Cluster
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterAvailabilityStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModifyStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBName { get; set; }
		
		/// <summary>
		/// Describes a connection endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Endpoint Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ClusterCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AutomatedSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterSecurityGroupMembership[] ClusterSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcSecurityGroupMembership[] VpcSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterParameterGroupStatus[] ClusterParameterGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		/// <summary>
		/// Describes cluster attributes that are in a pending state. A change to one or more the attributes was requested and is in progress or will be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PendingModifiedValues PendingModifiedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		/// <summary>
		/// Describes the status of a cluster restore action. Returns null if the cluster was not created by restoring a snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RestoreStatus RestoreStatus { get; set; }
		
		/// <summary>
		/// Describes the status of a cluster while it is in the process of resizing with an incremental resize.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataTransferProgress DataTransferProgress { get; set; }
		
		/// <summary>
		/// Describes the status of changes to HSM settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HsmStatus HsmStatus { get; set; }
		
		/// <summary>
		/// Returns the destination region and retention period that are configured for cross-region snapshot copy.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterSnapshotCopyStatus ClusterSnapshotCopyStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterPublicKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterNode[] ClusterNodes { get; set; }
		
		/// <summary>
		/// Describes the status of the elastic IP (EIP) address.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ElasticIpStatus ElasticIpStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterRevisionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnhancedVpcRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterIamRole[] IamRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] PendingActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticResizeNumberOfNodeOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeferredMaintenanceWindow[] DeferredMaintenanceWindows { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotScheduleIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterSnapshotScheduleState SnapshotScheduleState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedNextSnapshotScheduleTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExpectedNextSnapshotScheduleTimeStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NextMaintenanceWindowStartTime { get; set; }
		
		/// <summary>
		/// Describes a resize operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResizeInfo ResizeInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClusterSnapshotScheduleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFYING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	/// <summary>
	/// Describes a <code>ClusterDbRevision</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterDbRevision
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentDatabaseRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DatabaseRevisionReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RevisionTarget[] RevisionTargets { get; set; }
	}
	
	/// <summary>
	/// An AWS Identity and Access Management (IAM) role that can be used by the associated Amazon Redshift cluster to access other AWS services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterIamRole
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IamRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApplyStatus { get; set; }
	}
	
	/// <summary>
	/// The identifier of a node in a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterNode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIPAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIPAddress { get; set; }
	}
	
	/// <summary>
	/// Describes a parameter group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterParameterGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes the status of a parameter group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterParameterGroupStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterApplyStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterParameterStatus[] ClusterParameterStatusList { get; set; }
	}
	
	/// <summary>
	/// Describes the status of a parameter group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterParameterStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterApplyStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterApplyErrorDescription { get; set; }
	}
	
	/// <summary>
	/// Describes a cluster security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterSecurityGroupMembership
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Describes a subnet group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterSubnetGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetGroupStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Subnet[] Subnets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes a cluster version, including the parameter group family and description of the version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyClusterSnapshotMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceSnapshotClusterIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateClusterMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ClusterSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AutomatedSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmConfigurationIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnhancedVpcRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] IamRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotScheduleIdentifier { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateClusterParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupFamily { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateClusterSecurityGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSecurityGroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateClusterSnapshotMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateClusterSubnetGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSubnetGroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateEventSubscriptionMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] SourceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes event subscriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventSubscription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerAwsId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustSubscriptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SubscriptionCreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] SourceIdsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EventCategoriesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateHsmClientCertificateMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Returns information about an HSM client certificate. The certificate is stored in a secure Hardware Storage Module (HSM), and used by the Amazon Redshift cluster to encrypt data files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HsmClientCertificate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificatePublicKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateHsmConfigurationMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HsmConfigurationIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HsmIpAddress { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HsmPartitionName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HsmPartitionPassword { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HsmServerPublicCertificate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Returns information about an HSM configuration, which is an object that describes to Amazon Redshift clusters the information they require to connect to an HSM where they can store database encryption keys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HsmConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmConfigurationIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmPartitionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The action type that specifies an Amazon Redshift API operation that is supported by the Amazon Redshift scheduler. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledActionType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResizeClusterMessage ResizeCluster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PauseClusterMessage PauseCluster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResumeClusterMessage ResumeCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateScheduledActionMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionName { get; set; }
		
		/// <summary>
		/// The action type that specifies an Amazon Redshift API operation that is supported by the Amazon Redshift scheduler. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduledActionType TargetAction { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schedule { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IamRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enable { get; set; }
	}
	
	/// <summary>
	/// The result of the <code>CreateSnapshotCopyGrant</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSnapshotCopyGrantMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotCopyGrantName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p>The snapshot copy grant that grants Amazon Redshift permission to encrypt copied snapshots with the specified customer master key (CMK) from AWS KMS in the destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SnapshotCopyGrant
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotCopyGrantName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSnapshotScheduleMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ScheduleDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NextInvocations { get; set; }
	}
	
	/// <summary>
	/// Contains the output from the <code>CreateTags</code> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTagsMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UsageLimitFeatureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spectrum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		concurrency-scaling = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UsageLimitLimitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		time = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		data-scanned = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UsageLimitPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		weekly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		monthly = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UsageLimitBreachAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		log = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		emit-metric = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disable = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUsageLimitMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateUsageLimitMessageFeatureType FeatureType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateUsageLimitMessageLimitType LimitType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateUsageLimitMessagePeriod Period { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateUsageLimitMessageBreachAction BreachAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateUsageLimitMessageFeatureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spectrum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		concurrency-scaling = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateUsageLimitMessageLimitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		time = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		data-scanned = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateUsageLimitMessagePeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		weekly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		monthly = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateUsageLimitMessageBreachAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		log = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		emit-metric = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disable = 2,
	}
	
	/// <summary>
	/// Describes the default cluster parameters for a parameter group family.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DefaultClusterParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
	}
	
	/// <summary>
	/// Describes a deferred maintenance window
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeferredMaintenanceWindow
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeferMaintenanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeferMaintenanceStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeferMaintenanceEndTime { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipFinalClusterSnapshot { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FinalClusterSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FinalClusterSnapshotRetentionPeriod { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteClusterParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteClusterSecurityGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSecurityGroupName { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteClusterSubnetGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSubnetGroupName { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteEventSubscriptionMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteHsmClientCertificateMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificateIdentifier { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteHsmConfigurationMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HsmConfigurationIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteScheduledActionMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionName { get; set; }
	}
	
	/// <summary>
	/// The result of the <code>DeleteSnapshotCopyGrant</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteSnapshotCopyGrantMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotCopyGrantName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteSnapshotScheduleMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleIdentifier { get; set; }
	}
	
	/// <summary>
	/// Contains the output from the <code>DeleteTags</code> action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTagsMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteUsageLimitMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UsageLimitId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAccountAttributesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AttributeNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClusterDbRevisionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClusterParameterGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagValues { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClusterParametersMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClusterSecurityGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagValues { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClusterSnapshotsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ClusterExists { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnapshotSortingEntity[] SortingEntities { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClusterSubnetGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClusterTracksMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClusterVersionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClustersMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagValues { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDefaultClusterParametersMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEventCategoriesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEventSubscriptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster-parameter-group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster-security-group = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster-snapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		scheduled-action = 4,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEventsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeEventsMessageSourceType SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeEventsMessageSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster-parameter-group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster-security-group = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster-snapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		scheduled-action = 4,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeHsmClientCertificatesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagValues { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeHsmConfigurationsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmConfigurationIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagValues { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLoggingStatusMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeNodeConfigurationOptionsMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DescribeNodeConfigurationOptionsMessageActionType ActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NodeConfigurationOptionsFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeNodeConfigurationOptionsMessageActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		restore-cluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		recommend-node-config = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		resize-cluster = 2,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeOrderableClusterOptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeReservedNodeOfferingsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeReservedNodesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeResizeMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScheduledActionTypeValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResizeCluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PauseCluster = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResumeCluster = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeScheduledActionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeScheduledActionsMessageTargetActionType TargetActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledActionFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeScheduledActionsMessageTargetActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResizeCluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PauseCluster = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResumeCluster = 2,
	}
	
	/// <summary>
	/// The result of the <code>DescribeSnapshotCopyGrants</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSnapshotCopyGrantsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotCopyGrantName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSnapshotSchedulesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTableRestoreStatusMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TableRestoreRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTagsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeUsageLimitsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UsageLimitId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeUsageLimitsMessageFeatureType FeatureType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] TagValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeUsageLimitsMessageFeatureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spectrum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		concurrency-scaling = 1,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableLoggingMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableSnapshotCopyMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	/// <summary>
	/// Describes an Amazon EC2 security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EC2SecurityGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupOwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A maintenance track that you can switch the current track to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SupportedOperation[] SupportedOperations { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableLoggingMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3KeyPrefix { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableSnapshotCopyMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotCopyGrantName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
	}
	
	/// <summary>
	/// Describes an event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Event
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventSourceType SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster-parameter-group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster-security-group = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster-snapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		scheduled-action = 4,
	}
	
	/// <summary>
	/// Describes event categories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventCategoriesMap
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventInfoMap[] Events { get; set; }
	}
	
	/// <summary>
	/// Describes event information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventInfoMap
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Severity { get; set; }
	}
	
	/// <summary>
	/// The request parameters to get cluster credentials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetClusterCredentialsMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DbUser { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DbName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoCreate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] DbGroups { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetReservedNodeExchangeOfferingsInputMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Describes an IP range used in a security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IPRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CIDRIP { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Defines a maintenance track that determines which Amazon Redshift version to apply during a maintenance window. If the value for <code>MaintenanceTrack</code> is <code>current</code>, the cluster is updated to the most recently certified maintenance release. If the value is <code>trailing</code>, the cluster is updated to the previously certified maintenance release. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaintenanceTrack
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateTarget[] UpdateTargets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		high-performance = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClusterDbRevisionMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RevisionTarget { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClusterIamRolesMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AddIamRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] RemoveIamRoles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClusterMaintenanceMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeferMaintenance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeferMaintenanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeferMaintenanceStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeferMaintenanceEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeferMaintenanceDuration { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ClusterSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AutomatedSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmConfigurationIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NewClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnhancedVpcRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClusterParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClusterSnapshotMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClusterSnapshotScheduleMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisassociateSchedule { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClusterSubnetGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] SubnetIds { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyEventSubscriptionMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] SourceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyScheduledActionMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionName { get; set; }
		
		/// <summary>
		/// The action type that specifies an Amazon Redshift API operation that is supported by the Amazon Redshift scheduler. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScheduledActionType TargetAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledActionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enable { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifySnapshotCopyRetentionPeriodMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Manual { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifySnapshotScheduleMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduleIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] ScheduleDefinitions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyUsageLimitMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UsageLimitId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModifyUsageLimitMessageBreachAction BreachAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ModifyUsageLimitMessageBreachAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		log = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		emit-metric = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disable = 2,
	}
	
	/// <summary>
	/// A list of node configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NodeConfigurationOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EstimatedDiskUtilizationPercent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NodeConfigurationOptionMode Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NodeConfigurationOptionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		high-performance = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NodeConfigurationOptionsFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NodeType = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NumberOfNodes = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EstimatedDiskUtilizationPercent = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mode = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OperatorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eq = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lt = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gt = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		le = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ge = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@in = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		between = 6,
	}
	
	/// <summary>
	/// Describes an orderable cluster option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrderableClusterOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParameterApplyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@static = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamic = 1,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PurchaseReservedNodeOfferingMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NodeCount { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebootClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	/// <summary>
	/// Describes a recurring charge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RecurringCharge
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RecurringChargeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecurringChargeFrequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservedNodeOfferingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Regular = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Upgradable = 1,
	}
	
	/// <summary>
	/// Describes a reserved node offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservedNodeOffering
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodeOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecurringCharge[] RecurringCharges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedNodeOfferingReservedNodeOfferingType ReservedNodeOfferingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservedNodeOfferingReservedNodeOfferingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Regular = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Upgradable = 1,
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResetClusterParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ResetAllParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreFromClusterSnapshotMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmClientCertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HsmConfigurationIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ClusterSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AutomatedSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManualSnapshotRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnhancedVpcRouting { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] IamRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceTrackName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotScheduleIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreTableFromClusterSnapshotMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceSchemaName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceTableName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetSchemaName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NewTableName { get; set; }
	}
	
	/// <summary>
	/// Describes the status of a <a>RestoreTableFromClusterSnapshot</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TableRestoreStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TableRestoreRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TableRestoreStatusStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RequestTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgressInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalDataInMegaBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceSchemaName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceTableName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetSchemaName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NewTableName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TableRestoreStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 4,
	}
	
	/// <summary>
	/// Describes a <code>RevisionTarget</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RevisionTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DatabaseRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DatabaseRevisionReleaseDate { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RevokeClusterSecurityGroupIngressMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CIDRIP { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EC2SecurityGroupOwnerId { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RevokeSnapshotAccessMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotClusterIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountWithRestoreAccess { get; set; }
	}
	
	/// <summary>
	/// <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RotateEncryptionKeyMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScheduledActionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScheduledActionFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster-identifier = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		iam-role = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SnapshotAttributeToSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOTAL_SIZE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_TIME = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SortByOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESC = 1,
	}
	
	/// <summary>
	/// Describes a subnet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Subnet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetIdentifier { get; set; }
		
		/// <summary>
		/// Describes an availability zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone SubnetAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetStatus { get; set; }
	}
	
	/// <summary>
	/// Describes the operations that are allowed on a maintenance track.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SupportedOperation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationName { get; set; }
	}
	
	/// <summary>
	/// A list of supported platforms for orderable clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SupportedPlatform
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TableRestoreStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 4,
	}
	
	/// <summary>
	/// A tag and its associated resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaggedResource
	{
		
		/// <summary>
		/// A tag consisting of a name/value pair for a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag Tag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
	}
	
	/// <summary>
	/// Describes the members of a VPC security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcSecurityGroupMembership
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcSecurityGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Exchanges a DC1 Reserved Node for a DC2 Reserved Node with no changes to the configuration (term, payment type, or number of nodes) and no additional costs.
		/// GET_AcceptReservedNodeExchange /#Action=AcceptReservedNodeExchange
		/// </summary>
		/// <param name="ReservedNodeId">A string representing the node identifier of the DC1 Reserved Node to be exchanged.</param>
		/// <param name="TargetReservedNodeOfferingId">The unique identifier of the DC2 Reserved Node offering to be used for the exchange. You can obtain the value for the parameter by calling <a>GetReservedNodeExchangeOfferings</a> </param>
		/// <returns>Success</returns>
		public async Task GET_AcceptReservedNodeExchangeAsync(string ReservedNodeId, string TargetReservedNodeOfferingId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=AcceptReservedNodeExchange?ReservedNodeId=" + (ReservedNodeId==null? "" : Uri.EscapeDataString(ReservedNodeId))+"&TargetReservedNodeOfferingId=" + (TargetReservedNodeOfferingId==null? "" : Uri.EscapeDataString(TargetReservedNodeOfferingId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds an inbound (ingress) rule to an Amazon Redshift security group. Depending on whether the application accessing your cluster is running on the Internet or an Amazon EC2 instance, you can authorize inbound access to either a Classless Interdomain Routing (CIDR)/Internet Protocol (IP) range or to an Amazon EC2 security group. You can add as many as 20 ingress rules to an Amazon Redshift security group.</p> <p>If you authorize access to an Amazon EC2 security group, specify <i>EC2SecurityGroupName</i> and <i>EC2SecurityGroupOwnerId</i>. The Amazon EC2 security group and Amazon Redshift cluster must be in the same AWS Region. </p> <p>If you authorize access to a CIDR/IP address range, specify <i>CIDRIP</i>. For an overview of CIDR blocks, see the Wikipedia article on <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless Inter-Domain Routing</a>. </p> <p>You must also associate the security group with a cluster so that clients running on these IP addresses or the EC2 instance are authorized to connect to the cluster. For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Working with Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_AuthorizeClusterSecurityGroupIngress /#Action=AuthorizeClusterSecurityGroupIngress
		/// </summary>
		/// <param name="ClusterSecurityGroupName">The name of the security group to which the ingress rule is added.</param>
		/// <param name="CIDRIP">The IP range to be added the Amazon Redshift security group.</param>
		/// <param name="EC2SecurityGroupName">The EC2 security group to be added the Amazon Redshift security group.</param>
		/// <param name="EC2SecurityGroupOwnerId"><p>The AWS account number of the owner of the security group specified by the <i>EC2SecurityGroupName</i> parameter. The AWS Access Key ID is not an acceptable value. </p> <p>Example: <code>111122223333</code> </p></param>
		/// <returns>Success</returns>
		public async Task GET_AuthorizeClusterSecurityGroupIngressAsync(string ClusterSecurityGroupName, string CIDRIP, string EC2SecurityGroupName, string EC2SecurityGroupOwnerId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=AuthorizeClusterSecurityGroupIngress?ClusterSecurityGroupName=" + (ClusterSecurityGroupName==null? "" : Uri.EscapeDataString(ClusterSecurityGroupName))+"&CIDRIP=" + (CIDRIP==null? "" : Uri.EscapeDataString(CIDRIP))+"&EC2SecurityGroupName=" + (EC2SecurityGroupName==null? "" : Uri.EscapeDataString(EC2SecurityGroupName))+"&EC2SecurityGroupOwnerId=" + (EC2SecurityGroupOwnerId==null? "" : Uri.EscapeDataString(EC2SecurityGroupOwnerId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Authorizes the specified AWS customer account to restore the specified snapshot.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_AuthorizeSnapshotAccess /#Action=AuthorizeSnapshotAccess
		/// </summary>
		/// <param name="SnapshotIdentifier">The identifier of the snapshot the account is authorized to restore.</param>
		/// <param name="SnapshotClusterIdentifier">The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</param>
		/// <param name="AccountWithRestoreAccess"><p>The identifier of the AWS customer account authorized to restore the specified snapshot.</p> <p>To share a snapshot with AWS support, specify amazon-redshift-support.</p></param>
		/// <returns>Success</returns>
		public async Task GET_AuthorizeSnapshotAccessAsync(string SnapshotIdentifier, string SnapshotClusterIdentifier, string AccountWithRestoreAccess, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=AuthorizeSnapshotAccess?SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : Uri.EscapeDataString(SnapshotIdentifier))+"&SnapshotClusterIdentifier=" + (SnapshotClusterIdentifier==null? "" : Uri.EscapeDataString(SnapshotClusterIdentifier))+"&AccountWithRestoreAccess=" + (AccountWithRestoreAccess==null? "" : Uri.EscapeDataString(AccountWithRestoreAccess))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a set of cluster snapshots.
		/// GET_BatchDeleteClusterSnapshots /#Action=BatchDeleteClusterSnapshots
		/// </summary>
		/// <param name="Identifiers">A list of identifiers for the snapshots that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_BatchDeleteClusterSnapshotsAsync(DeleteClusterSnapshotMessage[] Identifiers, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=BatchDeleteClusterSnapshots?"+String.Join("&", Identifiers.Select(z => $"Identifiers={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the settings for a set of cluster snapshots.
		/// GET_BatchModifyClusterSnapshots /#Action=BatchModifyClusterSnapshots
		/// </summary>
		/// <param name="SnapshotIdentifierList">A list of snapshot identifiers you want to modify.</param>
		/// <param name="ManualSnapshotRetentionPeriod"><p>The number of days that a manual snapshot is retained. If you specify the value -1, the manual snapshot is retained indefinitely.</p> <p>The number must be either -1 or an integer between 1 and 3,653.</p> <p>If you decrease the manual snapshot retention period from its current value, existing manual snapshots that fall outside of the new retention period will return an error. If you want to suppress the errors and delete the snapshots, use the force option. </p></param>
		/// <param name="Force">A boolean value indicating whether to override an exception if the retention period has passed. </param>
		/// <returns>Success</returns>
		public async Task GET_BatchModifyClusterSnapshotsAsync(String[] SnapshotIdentifierList, int ManualSnapshotRetentionPeriod, bool Force, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=BatchModifyClusterSnapshots?"+String.Join("&", SnapshotIdentifierList.Select(z => $"SnapshotIdentifierList={z}"))+"&ManualSnapshotRetentionPeriod="+ManualSnapshotRetentionPeriod+"&Force="+Force+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a resize operation for a cluster.
		/// GET_CancelResize /#Action=CancelResize
		/// </summary>
		/// <param name="ClusterIdentifier">The unique identifier for the cluster that you want to cancel a resize operation for.</param>
		/// <returns>Success</returns>
		public async Task GET_CancelResizeAsync(string ClusterIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CancelResize?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Copies the specified automated cluster snapshot to a new manual cluster snapshot. The source must be an automated snapshot and it must be in the available state.</p> <p>When you delete a cluster, Amazon Redshift deletes any automated snapshots of the cluster. Also, when the retention period of the snapshot expires, Amazon Redshift automatically deletes it. If you want to keep an automated snapshot for a longer period, you can make a manual copy of the snapshot. Manual snapshots are retained until you delete them.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_CopyClusterSnapshot /#Action=CopyClusterSnapshot
		/// </summary>
		/// <param name="SourceSnapshotIdentifier"><p>The identifier for the source snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for a valid automated snapshot whose state is <code>available</code>.</p> </li> </ul></param>
		/// <param name="SourceSnapshotClusterIdentifier"><p>The identifier of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for a valid cluster.</p> </li> </ul></param>
		/// <param name="TargetSnapshotIdentifier"><p>The identifier given to the new manual snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for the AWS account that is making the request.</p> </li> </ul></param>
		/// <param name="ManualSnapshotRetentionPeriod"><p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p></param>
		/// <returns>Success</returns>
		public async Task GET_CopyClusterSnapshotAsync(string SourceSnapshotIdentifier, string SourceSnapshotClusterIdentifier, string TargetSnapshotIdentifier, int ManualSnapshotRetentionPeriod, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CopyClusterSnapshot?SourceSnapshotIdentifier=" + (SourceSnapshotIdentifier==null? "" : Uri.EscapeDataString(SourceSnapshotIdentifier))+"&SourceSnapshotClusterIdentifier=" + (SourceSnapshotClusterIdentifier==null? "" : Uri.EscapeDataString(SourceSnapshotClusterIdentifier))+"&TargetSnapshotIdentifier=" + (TargetSnapshotIdentifier==null? "" : Uri.EscapeDataString(TargetSnapshotIdentifier))+"&ManualSnapshotRetentionPeriod="+ManualSnapshotRetentionPeriod+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new cluster with the specified parameters.</p> <p>To create a cluster in Virtual Private Cloud (VPC), you must provide a cluster subnet group name. The cluster subnet group identifies the subnets of your VPC that Amazon Redshift uses when creating the cluster. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_CreateCluster /#Action=CreateCluster
		/// </summary>
		/// <param name="DBName"><p>The name of the first database to be created when the cluster is created.</p> <p>To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/dg/t_creating_database.html">Create a Database</a> in the Amazon Redshift Database Developer Guide. </p> <p>Default: <code>dev</code> </p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 alphanumeric characters.</p> </li> <li> <p>Must contain only lowercase letters.</p> </li> <li> <p>Cannot be a word that is reserved by the service. A list of reserved words can be found in <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide. </p> </li> </ul></param>
		/// <param name="ClusterIdentifier"><p>A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. The identifier also appears in the Amazon Redshift console.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul> <p>Example: <code>myexamplecluster</code> </p></param>
		/// <param name="ClusterType"><p>The type of the cluster. When cluster type is specified as</p> <ul> <li> <p> <code>single-node</code>, the <b>NumberOfNodes</b> parameter is not required.</p> </li> <li> <p> <code>multi-node</code>, the <b>NumberOfNodes</b> parameter is required.</p> </li> </ul> <p>Valid Values: <code>multi-node</code> | <code>single-node</code> </p> <p>Default: <code>multi-node</code> </p></param>
		/// <param name="NodeType"><p>The node type to be provisioned for the cluster. For information about node types, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes"> Working with Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p> <p>Valid Values: <code>ds2.xlarge</code> | <code>ds2.8xlarge</code> | <code>dc1.large</code> | <code>dc1.8xlarge</code> | <code>dc2.large</code> | <code>dc2.8xlarge</code> | <code>ra3.4xlarge</code> | <code>ra3.16xlarge</code> </p></param>
		/// <param name="MasterUsername"><p>The user name associated with the master user account for the cluster that is being created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 - 128 alphanumeric characters. The user name can't be <code>PUBLIC</code>.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide. </p> </li> </ul></param>
		/// <param name="MasterUserPassword"><p>The password associated with the master user account for the cluster that is being created.</p> <p>Constraints:</p> <ul> <li> <p>Must be between 8 and 64 characters in length.</p> </li> <li> <p>Must contain at least one uppercase letter.</p> </li> <li> <p>Must contain at least one lowercase letter.</p> </li> <li> <p>Must contain one number.</p> </li> <li> <p>Can be any printable ASCII character (ASCII code 33 to 126) except ' (single quote), " (double quote), \, /, @, or space.</p> </li> </ul></param>
		/// <param name="ClusterSecurityGroups"><p>A list of security groups to be associated with this cluster.</p> <p>Default: The default cluster security group for Amazon Redshift.</p></param>
		/// <param name="VpcSecurityGroupIds"><p>A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.</p> <p>Default: The default VPC security group is associated with the cluster.</p></param>
		/// <param name="ClusterSubnetGroupName"><p>The name of a cluster subnet group to be associated with this cluster.</p> <p>If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).</p></param>
		/// <param name="AvailabilityZone"><p>The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency.</p> <p>Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint.</p> <p>Example: <code>us-east-2d</code> </p> <p>Constraint: The specified Availability Zone must be in the same region as the current endpoint.</p></param>
		/// <param name="PreferredMaintenanceWindow"><p>The weekly time range (in UTC) during which automated cluster maintenance can occur.</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. For more information about the time blocks for each region, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows">Maintenance Windows</a> in Amazon Redshift Cluster Management Guide.</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Minimum 30-minute window.</p></param>
		/// <param name="ClusterParameterGroupName"><p>The name of the parameter group to be associated with this cluster.</p> <p>Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Working with Amazon Redshift Parameter Groups</a> </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul></param>
		/// <param name="AutomatedSnapshotRetentionPeriod"><p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>Default: <code>1</code> </p> <p>Constraints: Must be a value from 0 to 35.</p></param>
		/// <param name="ManualSnapshotRetentionPeriod"><p>The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p></param>
		/// <param name="Port"><p>The port number on which the cluster accepts incoming connections.</p> <p>The cluster is accessible only via the JDBC and ODBC connection strings. Part of the connection string requires the port on which the cluster will listen for incoming connections.</p> <p>Default: <code>5439</code> </p> <p>Valid Values: <code>1150-65535</code> </p></param>
		/// <param name="ClusterVersion"><p>The version of the Amazon Redshift engine software that you want to deploy on the cluster.</p> <p>The version selected runs on all the nodes in the cluster.</p> <p>Constraints: Only version 1.0 is currently available.</p> <p>Example: <code>1.0</code> </p></param>
		/// <param name="AllowVersionUpgrade"><p>If <code>true</code>, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster.</p> <p>When a new major version of the Amazon Redshift engine is released, you can request that the service automatically apply upgrades during the maintenance window to the Amazon Redshift engine that is running on your cluster.</p> <p>Default: <code>true</code> </p></param>
		/// <param name="NumberOfNodes"><p>The number of compute nodes in the cluster. This parameter is required when the <b>ClusterType</b> parameter is specified as <code>multi-node</code>. </p> <p>For information about determining how many nodes you need, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes"> Working with Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p> <p>If you don't specify this parameter, you get a single-node cluster. When requesting a multi-node cluster, you must specify the number of nodes that you want in the cluster.</p> <p>Default: <code>1</code> </p> <p>Constraints: Value must be at least 1 and no more than 100.</p></param>
		/// <param name="PubliclyAccessible">If <code>true</code>, the cluster can be accessed from a public network. </param>
		/// <param name="Encrypted"><p>If <code>true</code>, the data in the cluster is encrypted at rest. </p> <p>Default: false</p></param>
		/// <param name="HsmClientCertificateIdentifier">Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.</param>
		/// <param name="HsmConfigurationIdentifier">Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.</param>
		/// <param name="ElasticIp"><p>The Elastic IP (EIP) address for the cluster.</p> <p>Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms">Supported Platforms to Launch Your Cluster</a> in the Amazon Redshift Cluster Management Guide.</p></param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <param name="KmsKeyId">The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.</param>
		/// <param name="EnhancedVpcRouting"><p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p></param>
		/// <param name="AdditionalInfo">Reserved.</param>
		/// <param name="IamRoles"><p>A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request.</p> <p>A cluster can have up to 10 IAM roles associated with it at any time.</p></param>
		/// <param name="MaintenanceTrackName">An optional parameter for the name of the maintenance track for the cluster. If you don't provide a maintenance track name, the cluster is assigned to the <code>current</code> track.</param>
		/// <param name="SnapshotScheduleIdentifier">A unique identifier for the snapshot schedule.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateClusterAsync(
					string DBName, 
					string ClusterIdentifier, 
					string ClusterType, 
					string NodeType, 
					string MasterUsername, 
					string MasterUserPassword, 
					String[] ClusterSecurityGroups, 
					String[] VpcSecurityGroupIds, 
					string ClusterSubnetGroupName, 
					string AvailabilityZone, 
					string PreferredMaintenanceWindow, 
					string ClusterParameterGroupName, 
					int AutomatedSnapshotRetentionPeriod, 
					int ManualSnapshotRetentionPeriod, 
					int Port, 
					string ClusterVersion, 
					bool AllowVersionUpgrade, 
					int NumberOfNodes, 
					bool PubliclyAccessible, 
					bool Encrypted, 
					string HsmClientCertificateIdentifier, 
					string HsmConfigurationIdentifier, 
					string ElasticIp, 
					Tag[] Tags, 
					string KmsKeyId, 
					bool EnhancedVpcRouting, 
					string AdditionalInfo, 
					String[] IamRoles, 
					string MaintenanceTrackName, 
					string SnapshotScheduleIdentifier, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateCluster?DBName=" + (DBName==null? "" : Uri.EscapeDataString(DBName))+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&ClusterType=" + (ClusterType==null? "" : Uri.EscapeDataString(ClusterType))+"&NodeType=" + (NodeType==null? "" : Uri.EscapeDataString(NodeType))+"&MasterUsername=" + (MasterUsername==null? "" : Uri.EscapeDataString(MasterUsername))+"&MasterUserPassword=" + (MasterUserPassword==null? "" : Uri.EscapeDataString(MasterUserPassword))+"&"+String.Join("&", ClusterSecurityGroups.Select(z => $"ClusterSecurityGroups={z}"))+"&"+String.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={z}"))+"&ClusterSubnetGroupName=" + (ClusterSubnetGroupName==null? "" : Uri.EscapeDataString(ClusterSubnetGroupName))+"&AvailabilityZone=" + (AvailabilityZone==null? "" : Uri.EscapeDataString(AvailabilityZone))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : Uri.EscapeDataString(PreferredMaintenanceWindow))+"&ClusterParameterGroupName=" + (ClusterParameterGroupName==null? "" : Uri.EscapeDataString(ClusterParameterGroupName))+"&AutomatedSnapshotRetentionPeriod="+AutomatedSnapshotRetentionPeriod+"&ManualSnapshotRetentionPeriod="+ManualSnapshotRetentionPeriod+"&Port="+Port+"&ClusterVersion=" + (ClusterVersion==null? "" : Uri.EscapeDataString(ClusterVersion))+"&AllowVersionUpgrade="+AllowVersionUpgrade+"&NumberOfNodes="+NumberOfNodes+"&PubliclyAccessible="+PubliclyAccessible+"&Encrypted="+Encrypted+"&HsmClientCertificateIdentifier=" + (HsmClientCertificateIdentifier==null? "" : Uri.EscapeDataString(HsmClientCertificateIdentifier))+"&HsmConfigurationIdentifier=" + (HsmConfigurationIdentifier==null? "" : Uri.EscapeDataString(HsmConfigurationIdentifier))+"&ElasticIp=" + (ElasticIp==null? "" : Uri.EscapeDataString(ElasticIp))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&EnhancedVpcRouting="+EnhancedVpcRouting+"&AdditionalInfo=" + (AdditionalInfo==null? "" : Uri.EscapeDataString(AdditionalInfo))+"&"+String.Join("&", IamRoles.Select(z => $"IamRoles={z}"))+"&MaintenanceTrackName=" + (MaintenanceTrackName==null? "" : Uri.EscapeDataString(MaintenanceTrackName))+"&SnapshotScheduleIdentifier=" + (SnapshotScheduleIdentifier==null? "" : Uri.EscapeDataString(SnapshotScheduleIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon Redshift parameter group.</p> <p>Creating parameter groups is independent of creating clusters. You can associate a cluster with a parameter group when you create the cluster. You can also associate an existing cluster with a parameter group after the cluster is created by using <a>ModifyCluster</a>. </p> <p>Parameters in the parameter group define specific behavior that applies to the databases you create on the cluster. For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_CreateClusterParameterGroup /#Action=CreateClusterParameterGroup
		/// </summary>
		/// <param name="ParameterGroupName"><p>The name of the cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique withing your AWS account.</p> </li> </ul> <note> <p>This value is stored as a lower-case string.</p> </note></param>
		/// <param name="ParameterGroupFamily"><p>The Amazon Redshift engine version to which the cluster parameter group applies. The cluster engine version determines the set of parameters.</p> <p>To get a list of valid parameter group family names, you can call <a>DescribeClusterParameterGroups</a>. By default, Amazon Redshift returns a list of all the parameter groups that are owned by your AWS account, including the default parameter groups for each Amazon Redshift engine version. The parameter group family names associated with the default parameter groups provide you the valid values. For example, a valid family name is "redshift-1.0". </p></param>
		/// <param name="Description">A description of the parameter group.</param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateClusterParameterGroupAsync(string ParameterGroupName, string ParameterGroupFamily, string Description, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateClusterParameterGroup?ParameterGroupName=" + (ParameterGroupName==null? "" : Uri.EscapeDataString(ParameterGroupName))+"&ParameterGroupFamily=" + (ParameterGroupFamily==null? "" : Uri.EscapeDataString(ParameterGroupFamily))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new Amazon Redshift security group. You use security groups to control access to non-VPC clusters.</p> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_CreateClusterSecurityGroup /#Action=CreateClusterSecurityGroup
		/// </summary>
		/// <param name="ClusterSecurityGroupName"><p>The name for the security group. Amazon Redshift stores the value as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain no more than 255 alphanumeric characters or hyphens.</p> </li> <li> <p>Must not be "Default".</p> </li> <li> <p>Must be unique for all security groups that are created by your AWS account.</p> </li> </ul> <p>Example: <code>examplesecuritygroup</code> </p></param>
		/// <param name="Description">A description for the security group.</param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateClusterSecurityGroupAsync(string ClusterSecurityGroupName, string Description, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateClusterSecurityGroup?ClusterSecurityGroupName=" + (ClusterSecurityGroupName==null? "" : Uri.EscapeDataString(ClusterSecurityGroupName))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a manual snapshot of the specified cluster. The cluster must be in the <code>available</code> state. </p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_CreateClusterSnapshot /#Action=CreateClusterSnapshot
		/// </summary>
		/// <param name="SnapshotIdentifier"><p>A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the AWS account.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p></param>
		/// <param name="ClusterIdentifier">The cluster identifier for which you want a snapshot.</param>
		/// <param name="ManualSnapshotRetentionPeriod"><p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p></param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateClusterSnapshotAsync(string SnapshotIdentifier, string ClusterIdentifier, int ManualSnapshotRetentionPeriod, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateClusterSnapshot?SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : Uri.EscapeDataString(SnapshotIdentifier))+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&ManualSnapshotRetentionPeriod="+ManualSnapshotRetentionPeriod+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon Virtual Private Cloud (Amazon VPC) when creating Amazon Redshift subnet group.</p> <p> For information about subnet groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-cluster-subnet-groups.html">Amazon Redshift Cluster Subnet Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_CreateClusterSubnetGroup /#Action=CreateClusterSubnetGroup
		/// </summary>
		/// <param name="ClusterSubnetGroupName"><p>The name for the subnet group. Amazon Redshift stores the value as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain no more than 255 alphanumeric characters or hyphens.</p> </li> <li> <p>Must not be "Default".</p> </li> <li> <p>Must be unique for all subnet groups that are created by your AWS account.</p> </li> </ul> <p>Example: <code>examplesubnetgroup</code> </p></param>
		/// <param name="Description">A description for the subnet group.</param>
		/// <param name="SubnetIds">An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.</param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateClusterSubnetGroupAsync(string ClusterSubnetGroupName, string Description, String[] SubnetIds, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateClusterSubnetGroup?ClusterSubnetGroupName=" + (ClusterSubnetGroupName==null? "" : Uri.EscapeDataString(ClusterSubnetGroupName))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&"+String.Join("&", SubnetIds.Select(z => $"SubnetIds={z}"))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon Redshift event notification subscription. This action requires an ARN (Amazon Resource Name) of an Amazon SNS topic created by either the Amazon Redshift console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the source type, and lists of Amazon Redshift source IDs, event categories, and event severities. Notifications will be sent for all events you want that match those criteria. For example, you can specify source type = cluster, source ID = my-cluster-1 and mycluster2, event categories = Availability, Backup, and severity = ERROR. The subscription will only send notifications for those ERROR events in the Availability and Backup categories for the specified clusters.</p> <p>If you specify both the source type and source IDs, such as source type = cluster and source identifier = my-cluster-1, notifications will be sent for all the cluster events for my-cluster-1. If you specify a source type but do not specify a source identifier, you will receive notice of the events for the objects of that type in your AWS account. If you do not specify either the SourceType nor the SourceIdentifier, you will be notified of events generated from all Amazon Redshift sources belonging to your AWS account. You must specify a source type if you specify a source ID.</p>
		/// GET_CreateEventSubscription /#Action=CreateEventSubscription
		/// </summary>
		/// <param name="SubscriptionName"><p>The name of the event subscription to be created.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul></param>
		/// <param name="SnsTopicArn">The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</param>
		/// <param name="SourceType"><p>The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.</p> <p>Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.</p></param>
		/// <param name="SourceIds"><p>A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.</p> <p>Example: my-cluster-1, my-cluster-2</p> <p>Example: my-snapshot-20131010</p></param>
		/// <param name="EventCategories"><p>Specifies the Amazon Redshift event categories to be published by the event notification subscription.</p> <p>Values: configuration, management, monitoring, security</p></param>
		/// <param name="Severity"><p>Specifies the Amazon Redshift event severity to be published by the event notification subscription.</p> <p>Values: ERROR, INFO</p></param>
		/// <param name="Enabled">A boolean value; set to <code>true</code> to activate the subscription, and set to <code>false</code> to create the subscription but not activate it. </param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateEventSubscriptionAsync(string SubscriptionName, string SnsTopicArn, string SourceType, String[] SourceIds, String[] EventCategories, string Severity, bool Enabled, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateEventSubscription?SubscriptionName=" + (SubscriptionName==null? "" : Uri.EscapeDataString(SubscriptionName))+"&SnsTopicArn=" + (SnsTopicArn==null? "" : Uri.EscapeDataString(SnsTopicArn))+"&SourceType=" + (SourceType==null? "" : Uri.EscapeDataString(SourceType))+"&"+String.Join("&", SourceIds.Select(z => $"SourceIds={z}"))+"&"+String.Join("&", EventCategories.Select(z => $"EventCategories={z}"))+"&Severity=" + (Severity==null? "" : Uri.EscapeDataString(Severity))+"&Enabled="+Enabled+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an HSM client certificate that an Amazon Redshift cluster will use to connect to the client's HSM in order to store and retrieve the keys used to encrypt the cluster databases.</p> <p>The command returns a public key, which you must store in the HSM. In addition to creating the HSM certificate, you must create an Amazon Redshift HSM configuration that provides a cluster the information needed to store and use encryption keys in the HSM. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
		/// GET_CreateHsmClientCertificate /#Action=CreateHsmClientCertificate
		/// </summary>
		/// <param name="HsmClientCertificateIdentifier">The identifier to be assigned to the new HSM client certificate that the cluster will use to connect to the HSM to use the database encryption keys.</param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateHsmClientCertificateAsync(string HsmClientCertificateIdentifier, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateHsmClientCertificate?HsmClientCertificateIdentifier=" + (HsmClientCertificateIdentifier==null? "" : Uri.EscapeDataString(HsmClientCertificateIdentifier))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an HSM configuration that contains the information required by an Amazon Redshift cluster to store and use database encryption keys in a Hardware Security Module (HSM). After creating the HSM configuration, you can specify it as a parameter when creating a cluster. The cluster will then store its encryption keys in the HSM.</p> <p>In addition to creating an HSM configuration, you must also create an HSM client certificate. For more information, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
		/// GET_CreateHsmConfiguration /#Action=CreateHsmConfiguration
		/// </summary>
		/// <param name="HsmConfigurationIdentifier">The identifier to be assigned to the new Amazon Redshift HSM configuration.</param>
		/// <param name="Description">A text description of the HSM configuration to be created.</param>
		/// <param name="HsmIpAddress">The IP address that the Amazon Redshift cluster must use to access the HSM.</param>
		/// <param name="HsmPartitionName">The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.</param>
		/// <param name="HsmPartitionPassword">The password required to access the HSM partition.</param>
		/// <param name="HsmServerPublicCertificate">The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.</param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateHsmConfigurationAsync(string HsmConfigurationIdentifier, string Description, string HsmIpAddress, string HsmPartitionName, string HsmPartitionPassword, string HsmServerPublicCertificate, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateHsmConfiguration?HsmConfigurationIdentifier=" + (HsmConfigurationIdentifier==null? "" : Uri.EscapeDataString(HsmConfigurationIdentifier))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&HsmIpAddress=" + (HsmIpAddress==null? "" : Uri.EscapeDataString(HsmIpAddress))+"&HsmPartitionName=" + (HsmPartitionName==null? "" : Uri.EscapeDataString(HsmPartitionName))+"&HsmPartitionPassword=" + (HsmPartitionPassword==null? "" : Uri.EscapeDataString(HsmPartitionPassword))+"&HsmServerPublicCertificate=" + (HsmServerPublicCertificate==null? "" : Uri.EscapeDataString(HsmServerPublicCertificate))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a scheduled action. A scheduled action contains a schedule and an Amazon Redshift API action. For example, you can create a schedule of when to run the <code>ResizeCluster</code> API operation.
		/// GET_CreateScheduledAction /#Action=CreateScheduledAction
		/// </summary>
		/// <param name="ScheduledActionName">The name of the scheduled action. The name must be unique within an account. For more information about this parameter, see <a>ScheduledAction</a>. </param>
		/// <param name="TargetAction">A JSON format string of the Amazon Redshift API operation with input parameters. For more information about this parameter, see <a>ScheduledAction</a>. </param>
		/// <param name="Schedule">The schedule in <code>at( )</code> or <code>cron( )</code> format. For more information about this parameter, see <a>ScheduledAction</a>.</param>
		/// <param name="IamRole">The IAM role to assume to run the target action. For more information about this parameter, see <a>ScheduledAction</a>. </param>
		/// <param name="ScheduledActionDescription">The description of the scheduled action. </param>
		/// <param name="StartTime">The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger. For more information about this parameter, see <a>ScheduledAction</a>.</param>
		/// <param name="EndTime">The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger. For more information about this parameter, see <a>ScheduledAction</a>. </param>
		/// <param name="Enable">If true, the schedule is enabled. If false, the scheduled action does not trigger. For more information about <code>state</code> of the scheduled action, see <a>ScheduledAction</a>. </param>
		/// <returns>Success</returns>
		public async Task GET_CreateScheduledActionAsync(string ScheduledActionName, string TargetAction, string Schedule, string IamRole, string ScheduledActionDescription, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, bool Enable, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateScheduledAction?ScheduledActionName=" + (ScheduledActionName==null? "" : Uri.EscapeDataString(ScheduledActionName))+"&TargetAction=" + (TargetAction==null? "" : Uri.EscapeDataString(TargetAction))+"&Schedule=" + (Schedule==null? "" : Uri.EscapeDataString(Schedule))+"&IamRole=" + (IamRole==null? "" : Uri.EscapeDataString(IamRole))+"&ScheduledActionDescription=" + (ScheduledActionDescription==null? "" : Uri.EscapeDataString(ScheduledActionDescription))+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Enable="+Enable+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a snapshot copy grant that permits Amazon Redshift to use a customer master key (CMK) from AWS Key Management Service (AWS KMS) to encrypt copied snapshots in a destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
		/// GET_CreateSnapshotCopyGrant /#Action=CreateSnapshotCopyGrant
		/// </summary>
		/// <param name="SnapshotCopyGrantName"><p>The name of the snapshot copy grant. This name must be unique in the region for the AWS account.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul></param>
		/// <param name="KmsKeyId">The unique identifier of the customer master key (CMK) to which to grant Amazon Redshift permission. If no key is specified, the default key is used.</param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateSnapshotCopyGrantAsync(string SnapshotCopyGrantName, string KmsKeyId, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateSnapshotCopyGrant?SnapshotCopyGrantName=" + (SnapshotCopyGrantName==null? "" : Uri.EscapeDataString(SnapshotCopyGrantName))+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a snapshot schedule that can be associated to a cluster and which overrides the default system backup schedule.
		/// GET_CreateSnapshotSchedule /#Action=CreateSnapshotSchedule
		/// </summary>
		/// <param name="ScheduleDefinitions">The definition of the snapshot schedule. The definition is made up of schedule expressions, for example "cron(30 12 *)" or "rate(12 hours)". </param>
		/// <param name="ScheduleIdentifier">A unique identifier for a snapshot schedule. Only alphanumeric characters are allowed for the identifier.</param>
		/// <param name="ScheduleDescription">The description of the snapshot schedule.</param>
		/// <param name="Tags">An optional set of tags you can use to search for the schedule.</param>
		/// <param name="DryRun"><p/></param>
		/// <param name="NextInvocations"><p/></param>
		/// <returns>Success</returns>
		public async Task GET_CreateSnapshotScheduleAsync(String[] ScheduleDefinitions, string ScheduleIdentifier, string ScheduleDescription, Tag[] Tags, bool DryRun, int NextInvocations, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateSnapshotSchedule?"+String.Join("&", ScheduleDefinitions.Select(z => $"ScheduleDefinitions={z}"))+"&ScheduleIdentifier=" + (ScheduleIdentifier==null? "" : Uri.EscapeDataString(ScheduleIdentifier))+"&ScheduleDescription=" + (ScheduleDescription==null? "" : Uri.EscapeDataString(ScheduleDescription))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&DryRun="+DryRun+"&NextInvocations="+NextInvocations+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds tags to a cluster.</p> <p>A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, you will receive an error and the attempt will fail.</p> <p>If you specify a key that already exists for the resource, the value for that key will be updated with the new value.</p>
		/// GET_CreateTags /#Action=CreateTags
		/// </summary>
		/// <param name="ResourceName">The Amazon Resource Name (ARN) to which you want to add the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. </param>
		/// <param name="Tags">One or more name/value pairs to add as tags to the specified resource. Each tag name is passed in with the parameter <code>Key</code> and the corresponding value is passed in with the parameter <code>Value</code>. The <code>Key</code> and <code>Value</code> parameters are separated by a comma (,). Separate multiple tags with a space. For example, <code>--tags "Key"="owner","Value"="admin" "Key"="environment","Value"="test" "Key"="version","Value"="1.0"</code>. </param>
		/// <returns>Success</returns>
		public async Task GET_CreateTagsAsync(string ResourceName, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateTags?ResourceName=" + (ResourceName==null? "" : Uri.EscapeDataString(ResourceName))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a usage limit for a specified Amazon Redshift feature on a cluster. The usage limit is identified by the returned usage limit identifier.
		/// GET_CreateUsageLimit /#Action=CreateUsageLimit
		/// </summary>
		/// <param name="ClusterIdentifier">The identifier of the cluster that you want to limit usage.</param>
		/// <param name="FeatureType">The Amazon Redshift feature that you want to limit.</param>
		/// <param name="LimitType">The type of limit. Depending on the feature type, this can be based on a time duration or data size. If <code>FeatureType</code> is <code>spectrum</code>, then <code>LimitType</code> must be <code>data-scanned</code>. If <code>FeatureType</code> is <code>concurrency-scaling</code>, then <code>LimitType</code> must be <code>time</code>. </param>
		/// <param name="Amount">The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB). The value must be a positive number. </param>
		/// <param name="Period">The time period that the amount applies to. A <code>weekly</code> period begins on Sunday. The default is <code>monthly</code>. </param>
		/// <param name="BreachAction">The action that Amazon Redshift takes when the limit is reached. The default is log. For more information about this parameter, see <a>UsageLimit</a>.</param>
		/// <param name="Tags">A list of tag instances.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateUsageLimitAsync(string ClusterIdentifier, UsageLimitFeatureType FeatureType, UsageLimitLimitType LimitType, int Amount, UsageLimitPeriod Period, UsageLimitBreachAction BreachAction, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateUsageLimit?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&FeatureType=" + FeatureType+"&LimitType=" + LimitType+"&Amount="+Amount+"&Period=" + Period+"&BreachAction=" + BreachAction+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a previously provisioned cluster without its final snapshot being created. A successful response from the web service indicates that the request was received correctly. Use <a>DescribeClusters</a> to monitor the status of the deletion. The delete operation cannot be canceled or reverted once submitted. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you want to shut down the cluster and retain it for future use, set <i>SkipFinalClusterSnapshot</i> to <code>false</code> and specify a name for <i>FinalClusterSnapshotIdentifier</i>. You can later restore this snapshot to resume using the cluster. If a final cluster snapshot is requested, the status of the cluster will be "final-snapshot" while the snapshot is being taken, then it's "deleting" once Amazon Redshift begins deleting the cluster. </p> <p> For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_DeleteCluster /#Action=DeleteCluster
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The identifier of the cluster to be deleted.</p> <p>Constraints:</p> <ul> <li> <p>Must contain lowercase characters.</p> </li> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul></param>
		/// <param name="SkipFinalClusterSnapshot"><p>Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If <code>true</code>, a final cluster snapshot is not created. If <code>false</code>, a final cluster snapshot is created before the cluster is deleted. </p> <note> <p>The <i>FinalClusterSnapshotIdentifier</i> parameter must be specified if <i>SkipFinalClusterSnapshot</i> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p></param>
		/// <param name="FinalClusterSnapshotIdentifier"><p>The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, <i>SkipFinalClusterSnapshot</i> must be <code>false</code>. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul></param>
		/// <param name="FinalClusterSnapshotRetentionPeriod"><p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteClusterAsync(string ClusterIdentifier, bool SkipFinalClusterSnapshot, string FinalClusterSnapshotIdentifier, int FinalClusterSnapshotRetentionPeriod, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteCluster?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&SkipFinalClusterSnapshot="+SkipFinalClusterSnapshot+"&FinalClusterSnapshotIdentifier=" + (FinalClusterSnapshotIdentifier==null? "" : Uri.EscapeDataString(FinalClusterSnapshotIdentifier))+"&FinalClusterSnapshotRetentionPeriod="+FinalClusterSnapshotRetentionPeriod+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a specified Amazon Redshift parameter group.</p> <note> <p>You cannot delete a parameter group if it is associated with a cluster.</p> </note>
		/// GET_DeleteClusterParameterGroup /#Action=DeleteClusterParameterGroup
		/// </summary>
		/// <param name="ParameterGroupName"><p>The name of the parameter group to be deleted.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing cluster parameter group.</p> </li> <li> <p>Cannot delete a default cluster parameter group.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteClusterParameterGroupAsync(string ParameterGroupName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteClusterParameterGroup?ParameterGroupName=" + (ParameterGroupName==null? "" : Uri.EscapeDataString(ParameterGroupName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an Amazon Redshift security group.</p> <note> <p>You cannot delete a security group that is associated with any clusters. You cannot delete the default security group.</p> </note> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_DeleteClusterSecurityGroup /#Action=DeleteClusterSecurityGroup
		/// </summary>
		/// <param name="ClusterSecurityGroupName">The name of the cluster security group to be deleted.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteClusterSecurityGroupAsync(string ClusterSecurityGroupName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteClusterSecurityGroup?ClusterSecurityGroupName=" + (ClusterSecurityGroupName==null? "" : Uri.EscapeDataString(ClusterSecurityGroupName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified manual snapshot. The snapshot must be in the <code>available</code> state, with no other users authorized to access the snapshot. </p> <p>Unlike automated snapshots, manual snapshots are retained even after you delete your cluster. Amazon Redshift does not delete your manual snapshots. You must delete manual snapshot explicitly to avoid getting charged. If other accounts are authorized to access the snapshot, you must revoke all of the authorizations before you can delete the snapshot.</p>
		/// GET_DeleteClusterSnapshot /#Action=DeleteClusterSnapshot
		/// </summary>
		/// <param name="SnapshotIdentifier"><p>The unique identifier of the manual snapshot to be deleted.</p> <p>Constraints: Must be the name of an existing snapshot that is in the <code>available</code>, <code>failed</code>, or <code>cancelled</code> state.</p></param>
		/// <param name="SnapshotClusterIdentifier"><p>The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p> <p>Constraints: Must be the name of valid cluster.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteClusterSnapshotAsync(string SnapshotIdentifier, string SnapshotClusterIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteClusterSnapshot?SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : Uri.EscapeDataString(SnapshotIdentifier))+"&SnapshotClusterIdentifier=" + (SnapshotClusterIdentifier==null? "" : Uri.EscapeDataString(SnapshotClusterIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified cluster subnet group.
		/// GET_DeleteClusterSubnetGroup /#Action=DeleteClusterSubnetGroup
		/// </summary>
		/// <param name="ClusterSubnetGroupName">The name of the cluster subnet group name to be deleted.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteClusterSubnetGroupAsync(string ClusterSubnetGroupName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteClusterSubnetGroup?ClusterSubnetGroupName=" + (ClusterSubnetGroupName==null? "" : Uri.EscapeDataString(ClusterSubnetGroupName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an Amazon Redshift event notification subscription.
		/// GET_DeleteEventSubscription /#Action=DeleteEventSubscription
		/// </summary>
		/// <param name="SubscriptionName">The name of the Amazon Redshift event notification subscription to be deleted.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteEventSubscriptionAsync(string SubscriptionName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteEventSubscription?SubscriptionName=" + (SubscriptionName==null? "" : Uri.EscapeDataString(SubscriptionName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified HSM client certificate.
		/// GET_DeleteHsmClientCertificate /#Action=DeleteHsmClientCertificate
		/// </summary>
		/// <param name="HsmClientCertificateIdentifier">The identifier of the HSM client certificate to be deleted.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteHsmClientCertificateAsync(string HsmClientCertificateIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteHsmClientCertificate?HsmClientCertificateIdentifier=" + (HsmClientCertificateIdentifier==null? "" : Uri.EscapeDataString(HsmClientCertificateIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Amazon Redshift HSM configuration.
		/// GET_DeleteHsmConfiguration /#Action=DeleteHsmConfiguration
		/// </summary>
		/// <param name="HsmConfigurationIdentifier">The identifier of the Amazon Redshift HSM configuration to be deleted.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteHsmConfigurationAsync(string HsmConfigurationIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteHsmConfiguration?HsmConfigurationIdentifier=" + (HsmConfigurationIdentifier==null? "" : Uri.EscapeDataString(HsmConfigurationIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a scheduled action.
		/// GET_DeleteScheduledAction /#Action=DeleteScheduledAction
		/// </summary>
		/// <param name="ScheduledActionName">The name of the scheduled action to delete. </param>
		/// <returns>Success</returns>
		public async Task GET_DeleteScheduledActionAsync(string ScheduledActionName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteScheduledAction?ScheduledActionName=" + (ScheduledActionName==null? "" : Uri.EscapeDataString(ScheduledActionName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified snapshot copy grant.
		/// GET_DeleteSnapshotCopyGrant /#Action=DeleteSnapshotCopyGrant
		/// </summary>
		/// <param name="SnapshotCopyGrantName">The name of the snapshot copy grant to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteSnapshotCopyGrantAsync(string SnapshotCopyGrantName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteSnapshotCopyGrant?SnapshotCopyGrantName=" + (SnapshotCopyGrantName==null? "" : Uri.EscapeDataString(SnapshotCopyGrantName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a snapshot schedule.
		/// GET_DeleteSnapshotSchedule /#Action=DeleteSnapshotSchedule
		/// </summary>
		/// <param name="ScheduleIdentifier">A unique identifier of the snapshot schedule to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteSnapshotScheduleAsync(string ScheduleIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteSnapshotSchedule?ScheduleIdentifier=" + (ScheduleIdentifier==null? "" : Uri.EscapeDataString(ScheduleIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes tags from a resource. You must provide the ARN of the resource from which you want to delete the tag or tags.
		/// GET_DeleteTags /#Action=DeleteTags
		/// </summary>
		/// <param name="ResourceName">The Amazon Resource Name (ARN) from which you want to remove the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. </param>
		/// <param name="TagKeys">The tag key that you want to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTagsAsync(string ResourceName, String[] TagKeys, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteTags?ResourceName=" + (ResourceName==null? "" : Uri.EscapeDataString(ResourceName))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a usage limit from a cluster.
		/// GET_DeleteUsageLimit /#Action=DeleteUsageLimit
		/// </summary>
		/// <param name="UsageLimitId">The identifier of the usage limit to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteUsageLimitAsync(string UsageLimitId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteUsageLimit?UsageLimitId=" + (UsageLimitId==null? "" : Uri.EscapeDataString(UsageLimitId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of attributes attached to an account
		/// GET_DescribeAccountAttributes /#Action=DescribeAccountAttributes
		/// </summary>
		/// <param name="AttributeNames">A list of attribute names.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAccountAttributesAsync(String[] AttributeNames, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeAccountAttributes?"+String.Join("&", AttributeNames.Select(z => $"AttributeNames={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an array of <code>ClusterDbRevision</code> objects.
		/// GET_DescribeClusterDbRevisions /#Action=DescribeClusterDbRevisions
		/// </summary>
		/// <param name="ClusterIdentifier">A unique identifier for a cluster whose <code>ClusterDbRevisions</code> you are requesting. This parameter is case sensitive. All clusters defined for an account are returned by default.</param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in the <code>marker</code> field of the response. You can retrieve the next set of response records by providing the returned <code>marker</code> value in the <code>marker</code> parameter and retrying the request. </p> <p>Default: 100</p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker"><p>An optional parameter that specifies the starting point for returning a set of response records. When the results of a <code>DescribeClusterDbRevisions</code> request exceed the value specified in <code>MaxRecords</code>, Amazon Redshift returns a value in the <code>marker</code> field of the response. You can retrieve the next set of response records by providing the returned <code>marker</code> value in the <code>marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <code>ClusterIdentifier</code> parameter, or the <code>marker</code> parameter, but not both.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClusterDbRevisionsAsync(string ClusterIdentifier, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeClusterDbRevisions?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of Amazon Redshift parameter groups, including parameter groups you created and the default parameter group. For each parameter group, the response includes the parameter group name, description, and parameter group family name. You can optionally specify a name to retrieve the description of a specific parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all parameter groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all parameter groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, parameter groups are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeClusterParameterGroups /#Action=DescribeClusterParameterGroups
		/// </summary>
		/// <param name="ParameterGroupName">The name of a specific parameter group for which to return details. By default, details about all parameter groups and the default parameter group are returned.</param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterParameterGroups</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching cluster parameter groups that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching cluster parameter groups that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClusterParameterGroupsAsync(string ParameterGroupName, int MaxRecords, string Marker, String[] TagKeys, String[] TagValues, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeClusterParameterGroups?ParameterGroupName=" + (ParameterGroupName==null? "" : Uri.EscapeDataString(ParameterGroupName))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"))+"&"+String.Join("&", TagValues.Select(z => $"TagValues={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a detailed list of parameters contained within the specified Amazon Redshift parameter group. For each parameter the response includes information such as parameter name, description, data type, value, whether the parameter value is modifiable, and so on.</p> <p>You can specify <i>source</i> filter to retrieve parameters of only specific type. For example, to retrieve parameters that were modified by a user action such as from <a>ModifyClusterParameterGroup</a>, you can specify <i>source</i> equal to <i>user</i>.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_DescribeClusterParameters /#Action=DescribeClusterParameters
		/// </summary>
		/// <param name="ParameterGroupName">The name of a cluster parameter group for which to return details.</param>
		/// <param name="Source"><p>The parameter types to return. Specify <code>user</code> to show parameters that are different form the default. Similarly, specify <code>engine-default</code> to show parameters that are the same as the default parameter group. </p> <p>Default: All parameter types returned.</p> <p>Valid Values: <code>user</code> | <code>engine-default</code> </p></param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterParameters</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClusterParametersAsync(string ParameterGroupName, string Source, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeClusterParameters?ParameterGroupName=" + (ParameterGroupName==null? "" : Uri.EscapeDataString(ParameterGroupName))+"&Source=" + (Source==null? "" : Uri.EscapeDataString(Source))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about Amazon Redshift security groups. If the name of a security group is specified, the response will contain only information about only that security group.</p> <p> For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all security groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all security groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, security groups are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeClusterSecurityGroups /#Action=DescribeClusterSecurityGroups
		/// </summary>
		/// <param name="ClusterSecurityGroupName"><p>The name of a cluster security group for which you are requesting details. You can specify either the <b>Marker</b> parameter or a <b>ClusterSecurityGroupName</b> parameter, but not both. </p> <p> Example: <code>securitygroup1</code> </p></param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker"><p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSecurityGroups</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>ClusterSecurityGroupName</b> parameter or the <b>Marker</b> parameter, but not both. </p></param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching cluster security groups that are associated with the specified key or keys. For example, suppose that you have security groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching cluster security groups that are associated with the specified tag value or values. For example, suppose that you have security groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClusterSecurityGroupsAsync(string ClusterSecurityGroupName, int MaxRecords, string Marker, String[] TagKeys, String[] TagValues, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeClusterSecurityGroups?ClusterSecurityGroupName=" + (ClusterSecurityGroupName==null? "" : Uri.EscapeDataString(ClusterSecurityGroupName))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"))+"&"+String.Join("&", TagValues.Select(z => $"TagValues={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns one or more snapshot objects, which contain metadata about your cluster snapshots. By default, this operation returns information about all snapshots of all clusters that are owned by you AWS customer account. No information is returned for snapshots owned by inactive AWS customer accounts.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all snapshots that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all snapshots that have any combination of those values are returned. Only snapshots that you own are returned in the response; shared snapshots are not returned with the tag key and tag value request parameters.</p> <p>If both tag keys and values are omitted from the request, snapshots are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeClusterSnapshots /#Action=DescribeClusterSnapshots
		/// </summary>
		/// <param name="ClusterIdentifier">The identifier of the cluster which generated the requested snapshots.</param>
		/// <param name="SnapshotIdentifier">The snapshot identifier of the snapshot about which to return information.</param>
		/// <param name="SnapshotType"><p>The type of snapshots for which you are requesting information. By default, snapshots of all types are returned.</p> <p>Valid Values: <code>automated</code> | <code>manual</code> </p></param>
		/// <param name="StartTime"><p>A value that requests only snapshots created at or after the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2012-07-16T18:00:00Z</code> </p></param>
		/// <param name="EndTime"><p>A time value that requests only snapshots created at or before the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2012-07-16T18:00:00Z</code> </p></param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSnapshots</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <param name="OwnerAccount">The AWS customer account used to create or copy the snapshot. Use this field to filter the results to snapshots owned by a particular account. To describe snapshots you own, either specify your AWS customer account, or do not specify the parameter.</param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching cluster snapshots that are associated with the specified key or keys. For example, suppose that you have snapshots that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching cluster snapshots that are associated with the specified tag value or values. For example, suppose that you have snapshots that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag values associated with them.</param>
		/// <param name="ClusterExists"><p>A value that indicates whether to return snapshots only for an existing cluster. You can perform table-level restore only by using a snapshot of an existing cluster, that is, a cluster that has not been deleted. Values for this parameter work as follows: </p> <ul> <li> <p>If <code>ClusterExists</code> is set to <code>true</code>, <code>ClusterIdentifier</code> is required.</p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> isn't specified, all snapshots associated with deleted clusters (orphaned snapshots) are returned. </p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> is specified for a deleted cluster, snapshots associated with that cluster are returned.</p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> is specified for an existing cluster, no snapshots are returned. </p> </li> </ul></param>
		/// <param name="SortingEntities"><p/></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClusterSnapshotsAsync(string ClusterIdentifier, string SnapshotIdentifier, string SnapshotType, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, int MaxRecords, string Marker, string OwnerAccount, String[] TagKeys, String[] TagValues, bool ClusterExists, SnapshotSortingEntity[] SortingEntities, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeClusterSnapshots?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : Uri.EscapeDataString(SnapshotIdentifier))+"&SnapshotType=" + (SnapshotType==null? "" : Uri.EscapeDataString(SnapshotType))+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&OwnerAccount=" + (OwnerAccount==null? "" : Uri.EscapeDataString(OwnerAccount))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"))+"&"+String.Join("&", TagValues.Select(z => $"TagValues={z}"))+"&ClusterExists="+ClusterExists+"&"+String.Join("&", SortingEntities.Select(z => $"SortingEntities={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns one or more cluster subnet group objects, which contain metadata about your cluster subnet groups. By default, this operation returns information about all cluster subnet groups that are defined in you AWS account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all subnet groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subnet groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subnet groups are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeClusterSubnetGroups /#Action=DescribeClusterSubnetGroups
		/// </summary>
		/// <param name="ClusterSubnetGroupName">The name of the cluster subnet group for which information is requested.</param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSubnetGroups</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching cluster subnet groups that are associated with the specified key or keys. For example, suppose that you have subnet groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching cluster subnet groups that are associated with the specified tag value or values. For example, suppose that you have subnet groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClusterSubnetGroupsAsync(string ClusterSubnetGroupName, int MaxRecords, string Marker, String[] TagKeys, String[] TagValues, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeClusterSubnetGroups?ClusterSubnetGroupName=" + (ClusterSubnetGroupName==null? "" : Uri.EscapeDataString(ClusterSubnetGroupName))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"))+"&"+String.Join("&", TagValues.Select(z => $"TagValues={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all the available maintenance tracks.
		/// GET_DescribeClusterTracks /#Action=DescribeClusterTracks
		/// </summary>
		/// <param name="MaintenanceTrackName">The name of the maintenance track. </param>
		/// <param name="MaxRecords">An integer value for the maximum number of maintenance tracks to return.</param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <code>DescribeClusterTracks</code> request exceed the value specified in <code>MaxRecords</code>, Amazon Redshift returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClusterTracksAsync(string MaintenanceTrackName, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeClusterTracks?MaintenanceTrackName=" + (MaintenanceTrackName==null? "" : Uri.EscapeDataString(MaintenanceTrackName))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns descriptions of the available Amazon Redshift cluster versions. You can call this operation even before creating any clusters to learn more about the Amazon Redshift versions. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
		/// GET_DescribeClusterVersions /#Action=DescribeClusterVersions
		/// </summary>
		/// <param name="ClusterVersion"><p>The specific cluster version to return.</p> <p>Example: <code>1.0</code> </p></param>
		/// <param name="ClusterParameterGroupFamily"><p>The name of a specific cluster parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul></param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterVersions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClusterVersionsAsync(string ClusterVersion, string ClusterParameterGroupFamily, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeClusterVersions?ClusterVersion=" + (ClusterVersion==null? "" : Uri.EscapeDataString(ClusterVersion))+"&ClusterParameterGroupFamily=" + (ClusterParameterGroupFamily==null? "" : Uri.EscapeDataString(ClusterParameterGroupFamily))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns properties of provisioned clusters including general cluster properties, cluster database properties, maintenance and backup properties, and security and access properties. This operation supports pagination. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all clusters that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all clusters that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, clusters are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeClusters /#Action=DescribeClusters
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The unique identifier of a cluster whose properties you are requesting. This parameter is case sensitive.</p> <p>The default is that all clusters defined for an account are returned.</p></param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker"><p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusters</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>ClusterIdentifier</b> parameter or the <b>Marker</b> parameter, but not both. </p></param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching clusters that are associated with the specified key or keys. For example, suppose that you have clusters that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching clusters that are associated with the specified tag value or values. For example, suppose that you have clusters that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClustersAsync(string ClusterIdentifier, int MaxRecords, string Marker, String[] TagKeys, String[] TagValues, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeClusters?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"))+"&"+String.Join("&", TagValues.Select(z => $"TagValues={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of parameter settings for the specified parameter group family.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_DescribeDefaultClusterParameters /#Action=DescribeDefaultClusterParameters
		/// </summary>
		/// <param name="ParameterGroupFamily">The name of the cluster parameter group family.</param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeDefaultClusterParameters</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDefaultClusterParametersAsync(string ParameterGroupFamily, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDefaultClusterParameters?ParameterGroupFamily=" + (ParameterGroupFamily==null? "" : Uri.EscapeDataString(ParameterGroupFamily))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays a list of event categories for all event source types, or for a specified source type. For a list of the event categories and source types, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html">Amazon Redshift Event Notifications</a>.
		/// GET_DescribeEventCategories /#Action=DescribeEventCategories
		/// </summary>
		/// <param name="SourceType"><p>The source type, such as cluster or parameter group, to which the described event categories apply.</p> <p>Valid values: cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, and scheduled-action.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEventCategoriesAsync(string SourceType, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEventCategories?SourceType=" + (SourceType==null? "" : Uri.EscapeDataString(SourceType))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists descriptions of all the Amazon Redshift event notification subscriptions for a customer account. If you specify a subscription name, lists the description for that subscription.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all event notification subscriptions that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subscriptions that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subscriptions are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeEventSubscriptions /#Action=DescribeEventSubscriptions
		/// </summary>
		/// <param name="SubscriptionName">The name of the Amazon Redshift event notification subscription to be described.</param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeEventSubscriptions request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching event notification subscriptions that are associated with the specified key or keys. For example, suppose that you have subscriptions that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching event notification subscriptions that are associated with the specified tag value or values. For example, suppose that you have subscriptions that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEventSubscriptionsAsync(string SubscriptionName, int MaxRecords, string Marker, String[] TagKeys, String[] TagValues, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEventSubscriptions?SubscriptionName=" + (SubscriptionName==null? "" : Uri.EscapeDataString(SubscriptionName))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"))+"&"+String.Join("&", TagValues.Select(z => $"TagValues={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns events related to clusters, security groups, snapshots, and parameter groups for the past 14 days. Events specific to a particular cluster, security group, snapshot or parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
		/// GET_DescribeEvents /#Action=DescribeEvents
		/// </summary>
		/// <param name="SourceIdentifier"><p>The identifier of the event source for which events will be returned. If this parameter is not specified, then all sources are included in the response.</p> <p>Constraints:</p> <p>If <i>SourceIdentifier</i> is supplied, <i>SourceType</i> must also be provided.</p> <ul> <li> <p>Specify a cluster identifier when <i>SourceType</i> is <code>cluster</code>.</p> </li> <li> <p>Specify a cluster security group name when <i>SourceType</i> is <code>cluster-security-group</code>.</p> </li> <li> <p>Specify a cluster parameter group name when <i>SourceType</i> is <code>cluster-parameter-group</code>.</p> </li> <li> <p>Specify a cluster snapshot identifier when <i>SourceType</i> is <code>cluster-snapshot</code>.</p> </li> </ul></param>
		/// <param name="SourceType"><p>The event source to retrieve events for. If no value is specified, all events are returned.</p> <p>Constraints:</p> <p>If <i>SourceType</i> is supplied, <i>SourceIdentifier</i> must also be provided.</p> <ul> <li> <p>Specify <code>cluster</code> when <i>SourceIdentifier</i> is a cluster identifier.</p> </li> <li> <p>Specify <code>cluster-security-group</code> when <i>SourceIdentifier</i> is a cluster security group name.</p> </li> <li> <p>Specify <code>cluster-parameter-group</code> when <i>SourceIdentifier</i> is a cluster parameter group name.</p> </li> <li> <p>Specify <code>cluster-snapshot</code> when <i>SourceIdentifier</i> is a cluster snapshot identifier.</p> </li> </ul></param>
		/// <param name="StartTime"><p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2009-07-08T18:00Z</code> </p></param>
		/// <param name="EndTime"><p>The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2009-07-08T18:00Z</code> </p></param>
		/// <param name="Duration"><p>The number of minutes prior to the time of the request for which to retrieve events. For example, if the request is sent at 18:00 and you specify a duration of 60, then only events which have occurred after 17:00 will be returned.</p> <p>Default: <code>60</code> </p></param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeEvents</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEventsAsync(string SourceIdentifier, SourceType SourceType, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, int Duration, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEvents?SourceIdentifier=" + (SourceIdentifier==null? "" : Uri.EscapeDataString(SourceIdentifier))+"&SourceType=" + SourceType+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Duration="+Duration+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the specified HSM client certificate. If no certificate ID is specified, returns information about all the HSM certificates owned by your AWS customer account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM client certificates that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM client certificates that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM client certificates are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeHsmClientCertificates /#Action=DescribeHsmClientCertificates
		/// </summary>
		/// <param name="HsmClientCertificateIdentifier">The identifier of a specific HSM client certificate for which you want information. If no identifier is specified, information is returned for all HSM client certificates owned by your AWS customer account.</param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeHsmClientCertificates</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching HSM client certificates that are associated with the specified key or keys. For example, suppose that you have HSM client certificates that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching HSM client certificates that are associated with the specified tag value or values. For example, suppose that you have HSM client certificates that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeHsmClientCertificatesAsync(string HsmClientCertificateIdentifier, int MaxRecords, string Marker, String[] TagKeys, String[] TagValues, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeHsmClientCertificates?HsmClientCertificateIdentifier=" + (HsmClientCertificateIdentifier==null? "" : Uri.EscapeDataString(HsmClientCertificateIdentifier))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"))+"&"+String.Join("&", TagValues.Select(z => $"TagValues={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the specified Amazon Redshift HSM configuration. If no configuration ID is specified, returns information about all the HSM configurations owned by your AWS customer account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM connections that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM connections that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM connections are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeHsmConfigurations /#Action=DescribeHsmConfigurations
		/// </summary>
		/// <param name="HsmConfigurationIdentifier">The identifier of a specific Amazon Redshift HSM configuration to be described. If no identifier is specified, information is returned for all HSM configurations owned by your AWS customer account.</param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeHsmConfigurations</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching HSM configurations that are associated with the specified key or keys. For example, suppose that you have HSM configurations that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching HSM configurations that are associated with the specified tag value or values. For example, suppose that you have HSM configurations that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeHsmConfigurationsAsync(string HsmConfigurationIdentifier, int MaxRecords, string Marker, String[] TagKeys, String[] TagValues, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeHsmConfigurations?HsmConfigurationIdentifier=" + (HsmConfigurationIdentifier==null? "" : Uri.EscapeDataString(HsmConfigurationIdentifier))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"))+"&"+String.Join("&", TagValues.Select(z => $"TagValues={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes whether information, such as queries and connection attempts, is being logged for the specified Amazon Redshift cluster.
		/// GET_DescribeLoggingStatus /#Action=DescribeLoggingStatus
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The identifier of the cluster from which to get the logging status.</p> <p>Example: <code>examplecluster</code> </p></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLoggingStatusAsync(string ClusterIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeLoggingStatus?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns properties of possible node configurations such as node type, number of nodes, and disk usage for the specified action type.
		/// GET_DescribeNodeConfigurationOptions /#Action=DescribeNodeConfigurationOptions
		/// </summary>
		/// <param name="ActionType">The action type to evaluate for possible node configurations. Specify "restore-cluster" to get configuration combinations based on an existing snapshot. Specify "recommend-node-config" to get configuration recommendations based on an existing cluster or snapshot. Specify "resize-cluster" to get configuration combinations for elastic resize based on an existing cluster. </param>
		/// <param name="ClusterIdentifier">The identifier of the cluster to evaluate for possible node configurations.</param>
		/// <param name="SnapshotIdentifier">The identifier of the snapshot to evaluate for possible node configurations.</param>
		/// <param name="OwnerAccount">The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.</param>
		/// <param name="Filter">A set of name, operator, and value items to filter the results.</param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeNodeConfigurationOptions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>500</code> </p> <p>Constraints: minimum 100, maximum 500.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeNodeConfigurationOptionsAsync(ActionType ActionType, string ClusterIdentifier, string SnapshotIdentifier, string OwnerAccount, NodeConfigurationOptionsFilter[] Filter, string Marker, int MaxRecords, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeNodeConfigurationOptions?ActionType=" + ActionType+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : Uri.EscapeDataString(SnapshotIdentifier))+"&OwnerAccount=" + (OwnerAccount==null? "" : Uri.EscapeDataString(OwnerAccount))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&MaxRecords="+MaxRecords+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of orderable cluster options. Before you create a new cluster you can use this operation to find what options are available, such as the EC2 Availability Zones (AZ) in the specific AWS Region that you can specify, and the node types you can request. The node types differ by available storage, memory, CPU and price. With the cost involved you might want to obtain a list of cluster options in the specific region and specify values when creating a cluster. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
		/// GET_DescribeOrderableClusterOptions /#Action=DescribeOrderableClusterOptions
		/// </summary>
		/// <param name="ClusterVersion"><p>The version filter value. Specify this parameter to show only the available offerings matching the specified version.</p> <p>Default: All versions.</p> <p>Constraints: Must be one of the version returned from <a>DescribeClusterVersions</a>.</p></param>
		/// <param name="NodeType">The node type filter value. Specify this parameter to show only the available offerings matching the specified node type.</param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeOrderableClusterOptions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeOrderableClusterOptionsAsync(string ClusterVersion, string NodeType, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeOrderableClusterOptions?ClusterVersion=" + (ClusterVersion==null? "" : Uri.EscapeDataString(ClusterVersion))+"&NodeType=" + (NodeType==null? "" : Uri.EscapeDataString(NodeType))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of the available reserved node offerings by Amazon Redshift with their descriptions including the node type, the fixed and recurring costs of reserving the node and duration the node will be reserved for you. These descriptions help you determine which reserve node offering you want to purchase. You then use the unique offering ID in you call to <a>PurchaseReservedNodeOffering</a> to reserve one or more nodes for your Amazon Redshift cluster. </p> <p> For more information about reserved node offerings, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_DescribeReservedNodeOfferings /#Action=DescribeReservedNodeOfferings
		/// </summary>
		/// <param name="ReservedNodeOfferingId">The unique identifier for the offering.</param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeReservedNodeOfferings</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeReservedNodeOfferingsAsync(string ReservedNodeOfferingId, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeReservedNodeOfferings?ReservedNodeOfferingId=" + (ReservedNodeOfferingId==null? "" : Uri.EscapeDataString(ReservedNodeOfferingId))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the descriptions of the reserved nodes.
		/// GET_DescribeReservedNodes /#Action=DescribeReservedNodes
		/// </summary>
		/// <param name="ReservedNodeId">Identifier for the node reservation.</param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeReservedNodes</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeReservedNodesAsync(string ReservedNodeId, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeReservedNodes?ReservedNodeId=" + (ReservedNodeId==null? "" : Uri.EscapeDataString(ReservedNodeId))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the last resize operation for the specified cluster. If no resize operation has ever been initiated for the specified cluster, a <code>HTTP 404</code> error is returned. If a resize operation was initiated and completed, the status of the resize remains as <code>SUCCEEDED</code> until the next resize. </p> <p>A resize operation can be requested using <a>ModifyCluster</a> and specifying a different number or type of nodes for the cluster. </p>
		/// GET_DescribeResize /#Action=DescribeResize
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The unique identifier of a cluster whose resize progress you are requesting. This parameter is case-sensitive.</p> <p>By default, resize operations for all clusters defined for an AWS account are returned.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeResizeAsync(string ClusterIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeResize?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes properties of scheduled actions.
		/// GET_DescribeScheduledActions /#Action=DescribeScheduledActions
		/// </summary>
		/// <param name="ScheduledActionName">The name of the scheduled action to retrieve. </param>
		/// <param name="TargetActionType">The type of the scheduled actions to retrieve. </param>
		/// <param name="StartTime">The start time in UTC of the scheduled actions to retrieve. Only active scheduled actions that have invocations after this time are retrieved.</param>
		/// <param name="EndTime">The end time in UTC of the scheduled action to retrieve. Only active scheduled actions that have invocations before this time are retrieved.</param>
		/// <param name="Active">If true, retrieve only active scheduled actions. If false, retrieve only disabled scheduled actions. </param>
		/// <param name="Filters">List of scheduled action filters. </param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeScheduledActions</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeScheduledActionsAsync(string ScheduledActionName, ScheduledActionTypeValues TargetActionType, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, bool Active, ScheduledActionFilter[] Filters, string Marker, int MaxRecords, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeScheduledActions?ScheduledActionName=" + (ScheduledActionName==null? "" : Uri.EscapeDataString(ScheduledActionName))+"&TargetActionType=" + TargetActionType+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Active="+Active+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&MaxRecords="+MaxRecords+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of snapshot copy grants owned by the AWS account in the destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
		/// GET_DescribeSnapshotCopyGrants /#Action=DescribeSnapshotCopyGrants
		/// </summary>
		/// <param name="SnapshotCopyGrantName">The name of the snapshot copy grant.</param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker"><p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <code>DescribeSnapshotCopyGrant</code> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>SnapshotCopyGrantName</b> parameter or the <b>Marker</b> parameter, but not both. </p></param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSnapshotCopyGrantsAsync(string SnapshotCopyGrantName, int MaxRecords, string Marker, String[] TagKeys, String[] TagValues, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeSnapshotCopyGrants?SnapshotCopyGrantName=" + (SnapshotCopyGrantName==null? "" : Uri.EscapeDataString(SnapshotCopyGrantName))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"))+"&"+String.Join("&", TagValues.Select(z => $"TagValues={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of snapshot schedules.
		/// GET_DescribeSnapshotSchedules /#Action=DescribeSnapshotSchedules
		/// </summary>
		/// <param name="ClusterIdentifier">The unique identifier for the cluster whose snapshot schedules you want to view.</param>
		/// <param name="ScheduleIdentifier">A unique identifier for a snapshot schedule.</param>
		/// <param name="TagKeys">The key value for a snapshot schedule tag.</param>
		/// <param name="TagValues">The value corresponding to the key of the snapshot schedule tag.</param>
		/// <param name="Marker">A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request.</param>
		/// <param name="MaxRecords">The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSnapshotSchedulesAsync(string ClusterIdentifier, string ScheduleIdentifier, String[] TagKeys, String[] TagValues, string Marker, int MaxRecords, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeSnapshotSchedules?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&ScheduleIdentifier=" + (ScheduleIdentifier==null? "" : Uri.EscapeDataString(ScheduleIdentifier))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"))+"&"+String.Join("&", TagValues.Select(z => $"TagValues={z}"))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&MaxRecords="+MaxRecords+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns account level backups storage size and provisional storage.
		/// GET_DescribeStorage /#Action=DescribeStorage
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeStorageAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeStorage?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns account level backups storage size and provisional storage.
		/// POST_DescribeStorage /#Action=DescribeStorage
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeStorageAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeStorage?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the status of one or more table restore requests made using the <a>RestoreTableFromClusterSnapshot</a> API action. If you don't specify a value for the <code>TableRestoreRequestId</code> parameter, then <code>DescribeTableRestoreStatus</code> returns the status of all table restore requests ordered by the date and time of the request in ascending order. Otherwise <code>DescribeTableRestoreStatus</code> returns the status of the table specified by <code>TableRestoreRequestId</code>.
		/// GET_DescribeTableRestoreStatus /#Action=DescribeTableRestoreStatus
		/// </summary>
		/// <param name="ClusterIdentifier">The Amazon Redshift cluster that the table is being restored to.</param>
		/// <param name="TableRestoreRequestId">The identifier of the table restore request to return status for. If you don't specify a <code>TableRestoreRequestId</code> value, then <code>DescribeTableRestoreStatus</code> returns the status of all in-progress table restore requests.</param>
		/// <param name="MaxRecords">The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</param>
		/// <param name="Marker">An optional pagination token provided by a previous <code>DescribeTableRestoreStatus</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTableRestoreStatusAsync(string ClusterIdentifier, string TableRestoreRequestId, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeTableRestoreStatus?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&TableRestoreRequestId=" + (TableRestoreRequestId==null? "" : Uri.EscapeDataString(TableRestoreRequestId))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of tags. You can return tags from a specific resource by specifying an ARN, or you can return all tags for a given type of resource, such as clusters, snapshots, and so on.</p> <p>The following are limitations for <code>DescribeTags</code>: </p> <ul> <li> <p>You cannot specify an ARN and a resource-type value together in the same request.</p> </li> <li> <p>You cannot use the <code>MaxRecords</code> and <code>Marker</code> parameters together with the ARN parameter.</p> </li> <li> <p>The <code>MaxRecords</code> parameter can be a range from 10 to 50 results to return in a request.</p> </li> </ul> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all resources that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all resources that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, resources are returned regardless of whether they have tag keys or values associated with them.</p>
		/// GET_DescribeTags /#Action=DescribeTags
		/// </summary>
		/// <param name="ResourceName">The Amazon Resource Name (ARN) for which you want to describe the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. </param>
		/// <param name="ResourceType"><p>The type of resource with which you want to view tags. Valid resource types are: </p> <ul> <li> <p>Cluster</p> </li> <li> <p>CIDR/IP</p> </li> <li> <p>EC2 security group</p> </li> <li> <p>Snapshot</p> </li> <li> <p>Cluster security group</p> </li> <li> <p>Subnet group</p> </li> <li> <p>HSM connection</p> </li> <li> <p>HSM certificate</p> </li> <li> <p>Parameter group</p> </li> <li> <p>Snapshot copy grant</p> </li> </ul> <p>For more information about Amazon Redshift resource types and constructing ARNs, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-overview.html#redshift-iam-access-control-specify-actions">Specifying Policy Elements: Actions, Effects, Resources, and Principals</a> in the Amazon Redshift Cluster Management Guide. </p></param>
		/// <param name="MaxRecords">The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value. </param>
		/// <param name="Marker">A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request. </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTagsAsync(string ResourceName, string ResourceType, int MaxRecords, string Marker, String[] TagKeys, String[] TagValues, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeTags?ResourceName=" + (ResourceName==null? "" : Uri.EscapeDataString(ResourceName))+"&ResourceType=" + (ResourceType==null? "" : Uri.EscapeDataString(ResourceType))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"))+"&"+String.Join("&", TagValues.Select(z => $"TagValues={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Shows usage limits on a cluster. Results are filtered based on the combination of input usage limit identifier, cluster identifier, and feature type parameters:</p> <ul> <li> <p>If usage limit identifier, cluster identifier, and feature type are not provided, then all usage limit objects for the current account in the current region are returned.</p> </li> <li> <p>If usage limit identifier is provided, then the corresponding usage limit object is returned.</p> </li> <li> <p>If cluster identifier is provided, then all usage limit objects for the specified cluster are returned.</p> </li> <li> <p>If cluster identifier and feature type are provided, then all usage limit objects for the combination of cluster and feature are returned.</p> </li> </ul>
		/// GET_DescribeUsageLimits /#Action=DescribeUsageLimits
		/// </summary>
		/// <param name="UsageLimitId">The identifier of the usage limit to describe.</param>
		/// <param name="ClusterIdentifier">The identifier of the cluster for which you want to describe usage limits.</param>
		/// <param name="FeatureType">The feature type for which you want to describe usage limits.</param>
		/// <param name="MaxRecords"><p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeUsageLimits</a> request exceed the value specified in <code>MaxRecords</code>, AWS returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </param>
		/// <param name="TagKeys">A tag key or keys for which you want to return all matching usage limit objects that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the usage limit objects have either or both of these tag keys associated with them.</param>
		/// <param name="TagValues">A tag value or values for which you want to return all matching usage limit objects that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the usage limit objects that have either or both of these tag values associated with them.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeUsageLimitsAsync(string UsageLimitId, string ClusterIdentifier, UsageLimitFeatureType FeatureType, int MaxRecords, string Marker, String[] TagKeys, String[] TagValues, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeUsageLimits?UsageLimitId=" + (UsageLimitId==null? "" : Uri.EscapeDataString(UsageLimitId))+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&FeatureType=" + FeatureType+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"))+"&"+String.Join("&", TagValues.Select(z => $"TagValues={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
		/// GET_DisableLogging /#Action=DisableLogging
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The identifier of the cluster on which logging is to be stopped.</p> <p>Example: <code>examplecluster</code> </p></param>
		/// <returns>Success</returns>
		public async Task GET_DisableLoggingAsync(string ClusterIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DisableLogging?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disables the automatic copying of snapshots from one region to another region for a specified cluster.</p> <p>If your cluster and its snapshots are encrypted using a customer master key (CMK) from AWS KMS, use <a>DeleteSnapshotCopyGrant</a> to delete the grant that grants Amazon Redshift permission to the CMK in the destination region. </p>
		/// GET_DisableSnapshotCopy /#Action=DisableSnapshotCopy
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The unique identifier of the source cluster that you want to disable copying of snapshots to a destination region.</p> <p>Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DisableSnapshotCopyAsync(string ClusterIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DisableSnapshotCopy?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
		/// GET_EnableLogging /#Action=EnableLogging
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The identifier of the cluster on which logging is to be started.</p> <p>Example: <code>examplecluster</code> </p></param>
		/// <param name="BucketName"><p>The name of an existing S3 bucket where the log files are to be stored.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the same region as the cluster</p> </li> <li> <p>The cluster must have read bucket and put object permissions</p> </li> </ul></param>
		/// <param name="S3KeyPrefix"><p>The prefix applied to the log file names.</p> <p>Constraints:</p> <ul> <li> <p>Cannot exceed 512 characters</p> </li> <li> <p>Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are: </p> <ul> <li> <p>x00 to x20</p> </li> <li> <p>x22</p> </li> <li> <p>x27</p> </li> <li> <p>x5c</p> </li> <li> <p>x7f or larger</p> </li> </ul> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_EnableLoggingAsync(string ClusterIdentifier, string BucketName, string S3KeyPrefix, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=EnableLogging?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&BucketName=" + (BucketName==null? "" : Uri.EscapeDataString(BucketName))+"&S3KeyPrefix=" + (S3KeyPrefix==null? "" : Uri.EscapeDataString(S3KeyPrefix))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables the automatic copy of snapshots from one region to another region for a specified cluster.
		/// GET_EnableSnapshotCopy /#Action=EnableSnapshotCopy
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The unique identifier of the source cluster to copy snapshots from.</p> <p>Constraints: Must be the valid name of an existing cluster that does not already have cross-region snapshot copy enabled.</p></param>
		/// <param name="DestinationRegion"><p>The destination AWS Region that you want to copy snapshots to.</p> <p>Constraints: Must be the name of a valid AWS Region. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region">Regions and Endpoints</a> in the Amazon Web Services General Reference. </p></param>
		/// <param name="RetentionPeriod"><p>The number of days to retain automated snapshots in the destination region after they are copied from the source region.</p> <p>Default: 7.</p> <p>Constraints: Must be at least 1 and no more than 35.</p></param>
		/// <param name="SnapshotCopyGrantName">The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.</param>
		/// <param name="ManualSnapshotRetentionPeriod"><p>The number of days to retain newly copied snapshots in the destination AWS Region after they are copied from the source AWS Region. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p></param>
		/// <returns>Success</returns>
		public async Task GET_EnableSnapshotCopyAsync(string ClusterIdentifier, string DestinationRegion, int RetentionPeriod, string SnapshotCopyGrantName, int ManualSnapshotRetentionPeriod, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=EnableSnapshotCopy?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&DestinationRegion=" + (DestinationRegion==null? "" : Uri.EscapeDataString(DestinationRegion))+"&RetentionPeriod="+RetentionPeriod+"&SnapshotCopyGrantName=" + (SnapshotCopyGrantName==null? "" : Uri.EscapeDataString(SnapshotCopyGrantName))+"&ManualSnapshotRetentionPeriod="+ManualSnapshotRetentionPeriod+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a database user name and temporary password with temporary authorization to log on to an Amazon Redshift database. The action returns the database user name prefixed with <code>IAM:</code> if <code>AutoCreate</code> is <code>False</code> or <code>IAMA:</code> if <code>AutoCreate</code> is <code>True</code>. You can optionally specify one or more database user groups that the user will join at log on. By default, the temporary credentials expire in 900 seconds. You can optionally specify a duration between 900 seconds (15 minutes) and 3600 seconds (60 minutes). For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html">Using IAM Authentication to Generate Database User Credentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>The AWS Identity and Access Management (IAM)user or role that executes GetClusterCredentials must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html#redshift-policy-resources.getclustercredentials-resources">Resource Policies for GetClusterCredentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If the <code>DbGroups</code> parameter is specified, the IAM policy must allow the <code>redshift:JoinGroup</code> action with access to the listed <code>dbgroups</code>. </p> <p>In addition, if the <code>AutoCreate</code> parameter is set to <code>True</code>, then the policy must include the <code>redshift:CreateClusterUser</code> privilege.</p> <p>If the <code>DbName</code> parameter is specified, the IAM policy must allow access to the resource <code>dbname</code> for the specified database name. </p>
		/// GET_GetClusterCredentials /#Action=GetClusterCredentials
		/// </summary>
		/// <param name="DbUser"><p>The name of a database user. If a user name matching <code>DbUser</code> exists in the database, the temporary user credentials have the same permissions as the existing user. If <code>DbUser</code> doesn't exist in the database and <code>Autocreate</code> is <code>True</code>, a new user is created using the value for <code>DbUser</code> with PUBLIC permissions. If a database user matching the value for <code>DbUser</code> doesn't exist and <code>Autocreate</code> is <code>False</code>, then the command succeeds but the connection attempt will fail because the user doesn't exist in the database.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html">CREATE USER</a> in the Amazon Redshift Database Developer Guide. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens. The user name can't be <code>PUBLIC</code>.</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul></param>
		/// <param name="DbName"><p>The name of a database that <code>DbUser</code> is authorized to log on to. If <code>DbName</code> is not specified, <code>DbUser</code> can log on to any existing database.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul></param>
		/// <param name="ClusterIdentifier">The unique identifier of the cluster that contains the database for which your are requesting credentials. This parameter is case sensitive.</param>
		/// <param name="DurationSeconds"><p>The number of seconds until the returned temporary password expires.</p> <p>Constraint: minimum 900, maximum 3600.</p> <p>Default: 900</p></param>
		/// <param name="AutoCreate">Create a database user with the name specified for the user named in <code>DbUser</code> if one does not exist.</param>
		/// <param name="DbGroups"><p>A list of the names of existing database groups that the user named in <code>DbUser</code> will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to PUBLIC.</p> <p>Database group name constraints</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a href="http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_GetClusterCredentialsAsync(string DbUser, string DbName, string ClusterIdentifier, int DurationSeconds, bool AutoCreate, String[] DbGroups, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=GetClusterCredentials?DbUser=" + (DbUser==null? "" : Uri.EscapeDataString(DbUser))+"&DbName=" + (DbName==null? "" : Uri.EscapeDataString(DbName))+"&ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&DurationSeconds="+DurationSeconds+"&AutoCreate="+AutoCreate+"&"+String.Join("&", DbGroups.Select(z => $"DbGroups={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an array of DC2 ReservedNodeOfferings that matches the payment type, term, and usage price of the given DC1 reserved node.
		/// GET_GetReservedNodeExchangeOfferings /#Action=GetReservedNodeExchangeOfferings
		/// </summary>
		/// <param name="ReservedNodeId">A string representing the node identifier for the DC1 Reserved Node to be exchanged.</param>
		/// <param name="MaxRecords">An integer setting the maximum number of ReservedNodeOfferings to retrieve.</param>
		/// <param name="Marker">A value that indicates the starting point for the next set of ReservedNodeOfferings.</param>
		/// <returns>Success</returns>
		public async Task GET_GetReservedNodeExchangeOfferingsAsync(string ReservedNodeId, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=GetReservedNodeExchangeOfferings?ReservedNodeId=" + (ReservedNodeId==null? "" : Uri.EscapeDataString(ReservedNodeId))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the settings for a cluster.</p> <p>You can also change node type and the number of nodes to scale up or down the cluster. When resizing a cluster, you must specify both the number of nodes and the node type even if one of the parameters does not change.</p> <p>You can add another security or parameter group, or change the master user password. Resetting a cluster password or modifying the security groups associated with a cluster do not need a reboot. However, modifying a parameter group requires a reboot for parameters to take effect. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_ModifyCluster /#Action=ModifyCluster
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The unique identifier of the cluster to be modified.</p> <p>Example: <code>examplecluster</code> </p></param>
		/// <param name="ClusterType"><p>The new cluster type.</p> <p>When you submit your cluster resize request, your existing cluster goes into a read-only mode. After Amazon Redshift provisions a new cluster based on your resize requirements, there will be outage for a period while the old cluster is deleted and your connection is switched to the new cluster. You can use <a>DescribeResize</a> to track the progress of the resize request. </p> <p>Valid Values: <code> multi-node | single-node </code> </p></param>
		/// <param name="NodeType"><p>The new node type of the cluster. If you specify a new node type, you must also specify the number of nodes parameter.</p> <p> For more information about resizing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html">Resizing Clusters in Amazon Redshift</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Valid Values: <code>ds2.xlarge</code> | <code>ds2.8xlarge</code> | <code>dc1.large</code> | <code>dc1.8xlarge</code> | <code>dc2.large</code> | <code>dc2.8xlarge</code> | <code>ra3.4xlarge</code> | <code>ra3.16xlarge</code> </p></param>
		/// <param name="NumberOfNodes"><p>The new number of nodes of the cluster. If you specify a new number of nodes, you must also specify the node type parameter.</p> <p> For more information about resizing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html">Resizing Clusters in Amazon Redshift</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Valid Values: Integer greater than <code>0</code>.</p></param>
		/// <param name="ClusterSecurityGroups"><p>A list of cluster security groups to be authorized on this cluster. This change is asynchronously applied as soon as possible.</p> <p>Security groups currently associated with the cluster, and not in the list of groups to apply, will be revoked from the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul></param>
		/// <param name="VpcSecurityGroupIds">A list of virtual private cloud (VPC) security groups to be associated with the cluster. This change is asynchronously applied as soon as possible.</param>
		/// <param name="MasterUserPassword"><p>The new password for the cluster master user. This change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <note> <p>Operations never return the password, so this operation provides a way to regain access to the master user account for a cluster if the password is lost.</p> </note> <p>Default: Uses existing setting.</p> <p>Constraints:</p> <ul> <li> <p>Must be between 8 and 64 characters in length.</p> </li> <li> <p>Must contain at least one uppercase letter.</p> </li> <li> <p>Must contain at least one lowercase letter.</p> </li> <li> <p>Must contain one number.</p> </li> <li> <p>Can be any printable ASCII character (ASCII code 33 to 126) except ' (single quote), " (double quote), \, /, @, or space.</p> </li> </ul></param>
		/// <param name="ClusterParameterGroupName"><p>The name of the cluster parameter group to apply to this cluster. This change is applied only after the cluster is rebooted. To reboot a cluster use <a>RebootCluster</a>. </p> <p>Default: Uses existing setting.</p> <p>Constraints: The cluster parameter group must be in the same parameter group family that matches the cluster version.</p></param>
		/// <param name="AutomatedSnapshotRetentionPeriod"><p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>If you decrease the automated snapshot retention period from its current value, existing automated snapshots that fall outside of the new retention period will be immediately deleted.</p> <p>Default: Uses existing setting.</p> <p>Constraints: Must be a value from 0 to 35.</p></param>
		/// <param name="ManualSnapshotRetentionPeriod"><p>The default for number of days that a newly created manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. This value doesn't retroactively change the retention periods of existing manual snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p></param>
		/// <param name="PreferredMaintenanceWindow"><p>The weekly time range (in UTC) during which system maintenance can occur, if necessary. If system maintenance is necessary during the window, it may result in an outage.</p> <p>This maintenance window change is made immediately. If the new maintenance window indicates the current time, there must be at least 120 minutes between the current time and end of the window in order to ensure that pending changes are applied.</p> <p>Default: Uses existing setting.</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi, for example <code>wed:07:30-wed:08:00</code>.</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes.</p></param>
		/// <param name="ClusterVersion"><p>The new version number of the Amazon Redshift engine to upgrade to.</p> <p>For major version upgrades, if a non-default cluster parameter group is currently in use, a new cluster parameter group in the cluster parameter group family for the new version must be specified. The new cluster parameter group can be the default for that cluster parameter group family. For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Example: <code>1.0</code> </p></param>
		/// <param name="AllowVersionUpgrade"><p>If <code>true</code>, major version upgrades will be applied automatically to the cluster during the maintenance window. </p> <p>Default: <code>false</code> </p></param>
		/// <param name="HsmClientCertificateIdentifier">Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.</param>
		/// <param name="HsmConfigurationIdentifier">Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.</param>
		/// <param name="NewClusterIdentifier"><p>The new identifier for the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul> <p>Example: <code>examplecluster</code> </p></param>
		/// <param name="PubliclyAccessible">If <code>true</code>, the cluster can be accessed from a public network. Only clusters in VPCs can be set to be publicly available.</param>
		/// <param name="ElasticIp"><p>The Elastic IP (EIP) address for the cluster.</p> <p>Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms">Supported Platforms to Launch Your Cluster</a> in the Amazon Redshift Cluster Management Guide.</p></param>
		/// <param name="EnhancedVpcRouting"><p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p></param>
		/// <param name="MaintenanceTrackName">The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the <code>PendingModifiedValues</code> for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.</param>
		/// <param name="Encrypted"><p>Indicates whether the cluster is encrypted. If the value is encrypted (true) and you provide a value for the <code>KmsKeyId</code> parameter, we encrypt the cluster with the provided <code>KmsKeyId</code>. If you don't provide a <code>KmsKeyId</code>, we encrypt with the default key. In the China region we use legacy encryption if you specify that the cluster is encrypted.</p> <p>If the value is not encrypted (false), then the cluster is decrypted. </p></param>
		/// <param name="KmsKeyId">The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClusterAsync(
					string ClusterIdentifier, 
					string ClusterType, 
					string NodeType, 
					int NumberOfNodes, 
					String[] ClusterSecurityGroups, 
					String[] VpcSecurityGroupIds, 
					string MasterUserPassword, 
					string ClusterParameterGroupName, 
					int AutomatedSnapshotRetentionPeriod, 
					int ManualSnapshotRetentionPeriod, 
					string PreferredMaintenanceWindow, 
					string ClusterVersion, 
					bool AllowVersionUpgrade, 
					string HsmClientCertificateIdentifier, 
					string HsmConfigurationIdentifier, 
					string NewClusterIdentifier, 
					bool PubliclyAccessible, 
					string ElasticIp, 
					bool EnhancedVpcRouting, 
					string MaintenanceTrackName, 
					bool Encrypted, 
					string KmsKeyId, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyCluster?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&ClusterType=" + (ClusterType==null? "" : Uri.EscapeDataString(ClusterType))+"&NodeType=" + (NodeType==null? "" : Uri.EscapeDataString(NodeType))+"&NumberOfNodes="+NumberOfNodes+"&"+String.Join("&", ClusterSecurityGroups.Select(z => $"ClusterSecurityGroups={z}"))+"&"+String.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={z}"))+"&MasterUserPassword=" + (MasterUserPassword==null? "" : Uri.EscapeDataString(MasterUserPassword))+"&ClusterParameterGroupName=" + (ClusterParameterGroupName==null? "" : Uri.EscapeDataString(ClusterParameterGroupName))+"&AutomatedSnapshotRetentionPeriod="+AutomatedSnapshotRetentionPeriod+"&ManualSnapshotRetentionPeriod="+ManualSnapshotRetentionPeriod+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : Uri.EscapeDataString(PreferredMaintenanceWindow))+"&ClusterVersion=" + (ClusterVersion==null? "" : Uri.EscapeDataString(ClusterVersion))+"&AllowVersionUpgrade="+AllowVersionUpgrade+"&HsmClientCertificateIdentifier=" + (HsmClientCertificateIdentifier==null? "" : Uri.EscapeDataString(HsmClientCertificateIdentifier))+"&HsmConfigurationIdentifier=" + (HsmConfigurationIdentifier==null? "" : Uri.EscapeDataString(HsmConfigurationIdentifier))+"&NewClusterIdentifier=" + (NewClusterIdentifier==null? "" : Uri.EscapeDataString(NewClusterIdentifier))+"&PubliclyAccessible="+PubliclyAccessible+"&ElasticIp=" + (ElasticIp==null? "" : Uri.EscapeDataString(ElasticIp))+"&EnhancedVpcRouting="+EnhancedVpcRouting+"&MaintenanceTrackName=" + (MaintenanceTrackName==null? "" : Uri.EscapeDataString(MaintenanceTrackName))+"&Encrypted="+Encrypted+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the database revision of a cluster. The database revision is a unique revision of the database running in a cluster.
		/// GET_ModifyClusterDbRevision /#Action=ModifyClusterDbRevision
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The unique identifier of a cluster whose database revision you want to modify. </p> <p>Example: <code>examplecluster</code> </p></param>
		/// <param name="RevisionTarget">The identifier of the database revision. You can retrieve this value from the response to the <a>DescribeClusterDbRevisions</a> request.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClusterDbRevisionAsync(string ClusterIdentifier, string RevisionTarget, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyClusterDbRevision?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&RevisionTarget=" + (RevisionTarget==null? "" : Uri.EscapeDataString(RevisionTarget))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services.</p> <p>A cluster can have up to 10 IAM roles associated at any time.</p>
		/// GET_ModifyClusterIamRoles /#Action=ModifyClusterIamRoles
		/// </summary>
		/// <param name="ClusterIdentifier">The unique identifier of the cluster for which you want to associate or disassociate IAM roles.</param>
		/// <param name="AddIamRoles">Zero or more IAM roles to associate with the cluster. The roles must be in their Amazon Resource Name (ARN) format. You can associate up to 10 IAM roles with a single cluster in a single request.</param>
		/// <param name="RemoveIamRoles">Zero or more IAM roles in ARN format to disassociate from the cluster. You can disassociate up to 10 IAM roles from a single cluster in a single request.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClusterIamRolesAsync(string ClusterIdentifier, String[] AddIamRoles, String[] RemoveIamRoles, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyClusterIamRoles?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&"+String.Join("&", AddIamRoles.Select(z => $"AddIamRoles={z}"))+"&"+String.Join("&", RemoveIamRoles.Select(z => $"RemoveIamRoles={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the maintenance settings of a cluster.
		/// GET_ModifyClusterMaintenance /#Action=ModifyClusterMaintenance
		/// </summary>
		/// <param name="ClusterIdentifier">A unique identifier for the cluster.</param>
		/// <param name="DeferMaintenance">A boolean indicating whether to enable the deferred maintenance window. </param>
		/// <param name="DeferMaintenanceIdentifier">A unique identifier for the deferred maintenance window.</param>
		/// <param name="DeferMaintenanceStartTime">A timestamp indicating the start time for the deferred maintenance window.</param>
		/// <param name="DeferMaintenanceEndTime">A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration.</param>
		/// <param name="DeferMaintenanceDuration">An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClusterMaintenanceAsync(string ClusterIdentifier, bool DeferMaintenance, string DeferMaintenanceIdentifier, System.DateTimeOffset DeferMaintenanceStartTime, System.DateTimeOffset DeferMaintenanceEndTime, int DeferMaintenanceDuration, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyClusterMaintenance?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&DeferMaintenance="+DeferMaintenance+"&DeferMaintenanceIdentifier=" + (DeferMaintenanceIdentifier==null? "" : Uri.EscapeDataString(DeferMaintenanceIdentifier))+"&DeferMaintenanceStartTime=" + DeferMaintenanceStartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&DeferMaintenanceEndTime=" + DeferMaintenanceEndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&DeferMaintenanceDuration="+DeferMaintenanceDuration+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the parameters of a parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_ModifyClusterParameterGroup /#Action=ModifyClusterParameterGroup
		/// </summary>
		/// <param name="ParameterGroupName">The name of the parameter group to be modified.</param>
		/// <param name="Parameters"><p>An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request.</p> <p>For each parameter to be modified, you must supply at least the parameter name and parameter value; other name-value pairs of the parameter are optional.</p> <p>For the workload management (WLM) configuration, you must supply all the name-value pairs in the wlm_json_configuration parameter.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClusterParameterGroupAsync(string ParameterGroupName, Parameter[] Parameters, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyClusterParameterGroup?ParameterGroupName=" + (ParameterGroupName==null? "" : Uri.EscapeDataString(ParameterGroupName))+"&"+String.Join("&", Parameters.Select(z => $"Parameters={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the settings for a snapshot.</p> <p>This exanmple modifies the manual retention period setting for a cluster snapshot.</p>
		/// GET_ModifyClusterSnapshot /#Action=ModifyClusterSnapshot
		/// </summary>
		/// <param name="SnapshotIdentifier">The identifier of the snapshot whose setting you want to modify.</param>
		/// <param name="ManualSnapshotRetentionPeriod"><p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely.</p> <p>If the manual snapshot falls outside of the new retention period, you can specify the force option to immediately delete the snapshot.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p></param>
		/// <param name="Force">A Boolean option to override an exception if the retention period has already passed.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClusterSnapshotAsync(string SnapshotIdentifier, int ManualSnapshotRetentionPeriod, bool Force, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyClusterSnapshot?SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : Uri.EscapeDataString(SnapshotIdentifier))+"&ManualSnapshotRetentionPeriod="+ManualSnapshotRetentionPeriod+"&Force="+Force+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a snapshot schedule for a cluster.
		/// GET_ModifyClusterSnapshotSchedule /#Action=ModifyClusterSnapshotSchedule
		/// </summary>
		/// <param name="ClusterIdentifier">A unique identifier for the cluster whose snapshot schedule you want to modify. </param>
		/// <param name="ScheduleIdentifier">A unique alphanumeric identifier for the schedule that you want to associate with the cluster.</param>
		/// <param name="DisassociateSchedule">A boolean to indicate whether to remove the assoiciation between the cluster and the schedule.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClusterSnapshotScheduleAsync(string ClusterIdentifier, string ScheduleIdentifier, bool DisassociateSchedule, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyClusterSnapshotSchedule?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&ScheduleIdentifier=" + (ScheduleIdentifier==null? "" : Uri.EscapeDataString(ScheduleIdentifier))+"&DisassociateSchedule="+DisassociateSchedule+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a cluster subnet group to include the specified list of VPC subnets. The operation replaces the existing list of subnets with the new list of subnets.
		/// GET_ModifyClusterSubnetGroup /#Action=ModifyClusterSubnetGroup
		/// </summary>
		/// <param name="ClusterSubnetGroupName">The name of the subnet group to be modified.</param>
		/// <param name="Description">A text description of the subnet group to be modified.</param>
		/// <param name="SubnetIds">An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClusterSubnetGroupAsync(string ClusterSubnetGroupName, string Description, String[] SubnetIds, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyClusterSubnetGroup?ClusterSubnetGroupName=" + (ClusterSubnetGroupName==null? "" : Uri.EscapeDataString(ClusterSubnetGroupName))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&"+String.Join("&", SubnetIds.Select(z => $"SubnetIds={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies an existing Amazon Redshift event notification subscription.
		/// GET_ModifyEventSubscription /#Action=ModifyEventSubscription
		/// </summary>
		/// <param name="SubscriptionName">The name of the modified Amazon Redshift event notification subscription.</param>
		/// <param name="SnsTopicArn">The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.</param>
		/// <param name="SourceType"><p>The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs.</p> <p>Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.</p></param>
		/// <param name="SourceIds"><p>A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.</p> <p>Example: my-cluster-1, my-cluster-2</p> <p>Example: my-snapshot-20131010</p></param>
		/// <param name="EventCategories"><p>Specifies the Amazon Redshift event categories to be published by the event notification subscription.</p> <p>Values: configuration, management, monitoring, security</p></param>
		/// <param name="Severity"><p>Specifies the Amazon Redshift event severity to be published by the event notification subscription.</p> <p>Values: ERROR, INFO</p></param>
		/// <param name="Enabled">A Boolean value indicating if the subscription is enabled. <code>true</code> indicates the subscription is enabled </param>
		/// <returns>Success</returns>
		public async Task GET_ModifyEventSubscriptionAsync(string SubscriptionName, string SnsTopicArn, string SourceType, String[] SourceIds, String[] EventCategories, string Severity, bool Enabled, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyEventSubscription?SubscriptionName=" + (SubscriptionName==null? "" : Uri.EscapeDataString(SubscriptionName))+"&SnsTopicArn=" + (SnsTopicArn==null? "" : Uri.EscapeDataString(SnsTopicArn))+"&SourceType=" + (SourceType==null? "" : Uri.EscapeDataString(SourceType))+"&"+String.Join("&", SourceIds.Select(z => $"SourceIds={z}"))+"&"+String.Join("&", EventCategories.Select(z => $"EventCategories={z}"))+"&Severity=" + (Severity==null? "" : Uri.EscapeDataString(Severity))+"&Enabled="+Enabled+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a scheduled action.
		/// GET_ModifyScheduledAction /#Action=ModifyScheduledAction
		/// </summary>
		/// <param name="ScheduledActionName">The name of the scheduled action to modify. </param>
		/// <param name="TargetAction">A modified JSON format of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. </param>
		/// <param name="Schedule">A modified schedule in either <code>at( )</code> or <code>cron( )</code> format. For more information about this parameter, see <a>ScheduledAction</a>.</param>
		/// <param name="IamRole">A different IAM role to assume to run the target action. For more information about this parameter, see <a>ScheduledAction</a>.</param>
		/// <param name="ScheduledActionDescription">A modified description of the scheduled action. </param>
		/// <param name="StartTime">A modified start time of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. </param>
		/// <param name="EndTime">A modified end time of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. </param>
		/// <param name="Enable">A modified enable flag of the scheduled action. If true, the scheduled action is active. If false, the scheduled action is disabled. </param>
		/// <returns>Success</returns>
		public async Task GET_ModifyScheduledActionAsync(string ScheduledActionName, string TargetAction, string Schedule, string IamRole, string ScheduledActionDescription, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, bool Enable, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyScheduledAction?ScheduledActionName=" + (ScheduledActionName==null? "" : Uri.EscapeDataString(ScheduledActionName))+"&TargetAction=" + (TargetAction==null? "" : Uri.EscapeDataString(TargetAction))+"&Schedule=" + (Schedule==null? "" : Uri.EscapeDataString(Schedule))+"&IamRole=" + (IamRole==null? "" : Uri.EscapeDataString(IamRole))+"&ScheduledActionDescription=" + (ScheduledActionDescription==null? "" : Uri.EscapeDataString(ScheduledActionDescription))+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Enable="+Enable+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the number of days to retain snapshots in the destination AWS Region after they are copied from the source AWS Region. By default, this operation only changes the retention period of copied automated snapshots. The retention periods for both new and existing copied automated snapshots are updated with the new retention period. You can set the manual option to change only the retention periods of copied manual snapshots. If you set this option, only newly copied manual snapshots have the new retention period.
		/// GET_ModifySnapshotCopyRetentionPeriod /#Action=ModifySnapshotCopyRetentionPeriod
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The unique identifier of the cluster for which you want to change the retention period for either automated or manual snapshots that are copied to a destination AWS Region.</p> <p>Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.</p></param>
		/// <param name="RetentionPeriod"><p>The number of days to retain automated snapshots in the destination AWS Region after they are copied from the source AWS Region.</p> <p>By default, this only changes the retention period of copied automated snapshots. </p> <p>If you decrease the retention period for automated snapshots that are copied to a destination AWS Region, Amazon Redshift deletes any existing automated snapshots that were copied to the destination AWS Region and that fall outside of the new retention period.</p> <p>Constraints: Must be at least 1 and no more than 35 for automated snapshots. </p> <p>If you specify the <code>manual</code> option, only newly copied manual snapshots will have the new retention period. </p> <p>If you specify the value of -1 newly copied manual snapshots are retained indefinitely.</p> <p>Constraints: The number of days must be either -1 or an integer between 1 and 3,653 for manual snapshots.</p></param>
		/// <param name="Manual">Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated snapshots.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifySnapshotCopyRetentionPeriodAsync(string ClusterIdentifier, int RetentionPeriod, bool Manual, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifySnapshotCopyRetentionPeriod?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&RetentionPeriod="+RetentionPeriod+"&Manual="+Manual+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a snapshot schedule. Any schedule associated with a cluster is modified asynchronously.
		/// GET_ModifySnapshotSchedule /#Action=ModifySnapshotSchedule
		/// </summary>
		/// <param name="ScheduleIdentifier">A unique alphanumeric identifier of the schedule to modify.</param>
		/// <param name="ScheduleDefinitions">An updated list of schedule definitions. A schedule definition is made up of schedule expressions, for example, "cron(30 12 *)" or "rate(12 hours)".</param>
		/// <returns>Success</returns>
		public async Task GET_ModifySnapshotScheduleAsync(string ScheduleIdentifier, String[] ScheduleDefinitions, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifySnapshotSchedule?ScheduleIdentifier=" + (ScheduleIdentifier==null? "" : Uri.EscapeDataString(ScheduleIdentifier))+"&"+String.Join("&", ScheduleDefinitions.Select(z => $"ScheduleDefinitions={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a usage limit in a cluster. You can't modify the feature type or period of a usage limit.
		/// GET_ModifyUsageLimit /#Action=ModifyUsageLimit
		/// </summary>
		/// <param name="UsageLimitId">The identifier of the usage limit to modify.</param>
		/// <param name="Amount">The new limit amount. For more information about this parameter, see <a>UsageLimit</a>. </param>
		/// <param name="BreachAction">The new action that Amazon Redshift takes when the limit is reached. For more information about this parameter, see <a>UsageLimit</a>. </param>
		/// <returns>Success</returns>
		public async Task GET_ModifyUsageLimitAsync(string UsageLimitId, int Amount, UsageLimitBreachAction BreachAction, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyUsageLimit?UsageLimitId=" + (UsageLimitId==null? "" : Uri.EscapeDataString(UsageLimitId))+"&Amount="+Amount+"&BreachAction=" + BreachAction+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Pauses a cluster.
		/// GET_PauseCluster /#Action=PauseCluster
		/// </summary>
		/// <param name="ClusterIdentifier">The identifier of the cluster to be paused.</param>
		/// <returns>Success</returns>
		public async Task GET_PauseClusterAsync(string ClusterIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=PauseCluster?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Allows you to purchase reserved nodes. Amazon Redshift offers a predefined set of reserved node offerings. You can purchase one or more of the offerings. You can call the <a>DescribeReservedNodeOfferings</a> API to obtain the available reserved node offerings. You can call this API by providing a specific reserved node offering and the number of nodes you want to reserve. </p> <p> For more information about reserved node offerings, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_PurchaseReservedNodeOffering /#Action=PurchaseReservedNodeOffering
		/// </summary>
		/// <param name="ReservedNodeOfferingId">The unique identifier of the reserved node offering you want to purchase.</param>
		/// <param name="NodeCount"><p>The number of reserved nodes that you want to purchase.</p> <p>Default: <code>1</code> </p></param>
		/// <returns>Success</returns>
		public async Task GET_PurchaseReservedNodeOfferingAsync(string ReservedNodeOfferingId, int NodeCount, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=PurchaseReservedNodeOffering?ReservedNodeOfferingId=" + (ReservedNodeOfferingId==null? "" : Uri.EscapeDataString(ReservedNodeOfferingId))+"&NodeCount="+NodeCount+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reboots a cluster. This action is taken as soon as possible. It results in a momentary outage to the cluster, during which the cluster status is set to <code>rebooting</code>. A cluster event is created when the reboot is completed. Any pending cluster modifications (see <a>ModifyCluster</a>) are applied at this reboot. For more information about managing clusters, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
		/// GET_RebootCluster /#Action=RebootCluster
		/// </summary>
		/// <param name="ClusterIdentifier">The cluster identifier.</param>
		/// <returns>Success</returns>
		public async Task GET_RebootClusterAsync(string ClusterIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RebootCluster?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets one or more parameters of the specified parameter group to their default values and sets the source values of the parameters to "engine-default". To reset the entire parameter group specify the <i>ResetAllParameters</i> parameter. For parameter changes to take effect you must reboot any associated clusters.
		/// GET_ResetClusterParameterGroup /#Action=ResetClusterParameterGroup
		/// </summary>
		/// <param name="ParameterGroupName">The name of the cluster parameter group to be reset.</param>
		/// <param name="ResetAllParameters"><p>If <code>true</code>, all parameters in the specified parameter group will be reset to their default values. </p> <p>Default: <code>true</code> </p></param>
		/// <param name="Parameters"><p>An array of names of parameters to be reset. If <i>ResetAllParameters</i> option is not used, then at least one parameter name must be supplied. </p> <p>Constraints: A maximum of 20 parameters can be reset in a single request.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ResetClusterParameterGroupAsync(string ParameterGroupName, bool ResetAllParameters, Parameter[] Parameters, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ResetClusterParameterGroup?ParameterGroupName=" + (ParameterGroupName==null? "" : Uri.EscapeDataString(ParameterGroupName))+"&ResetAllParameters="+ResetAllParameters+"&"+String.Join("&", Parameters.Select(z => $"Parameters={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Changes the size of the cluster. You can change the cluster's type, or change the number or type of nodes. The default behavior is to use the elastic resize method. With an elastic resize, your cluster is available for read and write operations more quickly than with the classic resize method. </p> <p>Elastic resize operations have the following restrictions:</p> <ul> <li> <p>You can only resize clusters of the following types:</p> <ul> <li> <p>dc2.large</p> </li> <li> <p>dc2.8xlarge</p> </li> <li> <p>ds2.xlarge</p> </li> <li> <p>ds2.8xlarge</p> </li> <li> <p>ra3.4xlarge</p> </li> <li> <p>ra3.16xlarge</p> </li> </ul> </li> <li> <p>The type of nodes that you add must match the node type for the cluster.</p> </li> </ul>
		/// GET_ResizeCluster /#Action=ResizeCluster
		/// </summary>
		/// <param name="ClusterIdentifier">The unique identifier for the cluster to resize.</param>
		/// <param name="ClusterType">The new cluster type for the specified cluster.</param>
		/// <param name="NodeType">The new node type for the nodes you are adding. If not specified, the cluster's current node type is used.</param>
		/// <param name="NumberOfNodes">The new number of nodes for the cluster.</param>
		/// <param name="Classic">A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to <code>false</code>, the resize type is elastic. </param>
		/// <returns>Success</returns>
		public async Task GET_ResizeClusterAsync(string ClusterIdentifier, string ClusterType, string NodeType, int NumberOfNodes, bool Classic, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ResizeCluster?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&ClusterType=" + (ClusterType==null? "" : Uri.EscapeDataString(ClusterType))+"&NodeType=" + (NodeType==null? "" : Uri.EscapeDataString(NodeType))+"&NumberOfNodes="+NumberOfNodes+"&Classic="+Classic+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new cluster from a snapshot. By default, Amazon Redshift creates the resulting cluster with the same configuration as the original cluster from which the snapshot was created, except that the new cluster is created with the default cluster security and parameter groups. After Amazon Redshift creates the cluster, you can use the <a>ModifyCluster</a> API to associate a different security group and different parameter group with the restored cluster. If you are using a DS node type, you can also choose to change to another DS node type of the same size during restore.</p> <p>If you restore a cluster into a VPC, you must provide a cluster subnet group where you want the cluster restored.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_RestoreFromClusterSnapshot /#Action=RestoreFromClusterSnapshot
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The identifier of the cluster that will be created from restoring the snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an AWS account.</p> </li> </ul></param>
		/// <param name="SnapshotIdentifier"><p>The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive.</p> <p>Example: <code>my-snapshot-id</code> </p></param>
		/// <param name="SnapshotClusterIdentifier">The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</param>
		/// <param name="Port"><p>The port number on which the cluster accepts connections.</p> <p>Default: The same port as the original cluster.</p> <p>Constraints: Must be between <code>1115</code> and <code>65535</code>.</p></param>
		/// <param name="AvailabilityZone"><p>The Amazon EC2 Availability Zone in which to restore the cluster.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Example: <code>us-east-2a</code> </p></param>
		/// <param name="AllowVersionUpgrade"><p>If <code>true</code>, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. </p> <p>Default: <code>true</code> </p></param>
		/// <param name="ClusterSubnetGroupName"><p>The name of the subnet group where you want to cluster restored.</p> <p>A snapshot of cluster in VPC can be restored only in VPC. Therefore, you must provide subnet group name where you want the cluster restored.</p></param>
		/// <param name="PubliclyAccessible">If <code>true</code>, the cluster can be accessed from a public network. </param>
		/// <param name="OwnerAccount">The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.</param>
		/// <param name="HsmClientCertificateIdentifier">Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.</param>
		/// <param name="HsmConfigurationIdentifier">Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.</param>
		/// <param name="ElasticIp">The elastic IP (EIP) address for the cluster.</param>
		/// <param name="ClusterParameterGroupName"><p>The name of the parameter group to be associated with this cluster.</p> <p>Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html">Working with Amazon Redshift Parameter Groups</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul></param>
		/// <param name="ClusterSecurityGroups"><p>A list of security groups to be associated with this cluster.</p> <p>Default: The default cluster security group for Amazon Redshift.</p> <p>Cluster security groups only apply to clusters outside of VPCs.</p></param>
		/// <param name="VpcSecurityGroupIds"><p>A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.</p> <p>Default: The default VPC security group is associated with the cluster.</p> <p>VPC security groups only apply to clusters in VPCs.</p></param>
		/// <param name="PreferredMaintenanceWindow"><p>The weekly time range (in UTC) during which automated cluster maintenance can occur.</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> Default: The value selected for the cluster from which the snapshot was taken. For more information about the time blocks for each region, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows">Maintenance Windows</a> in Amazon Redshift Cluster Management Guide. </p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Minimum 30-minute window.</p></param>
		/// <param name="AutomatedSnapshotRetentionPeriod"><p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>Default: The value selected for the cluster from which the snapshot was taken.</p> <p>Constraints: Must be a value from 0 to 35.</p></param>
		/// <param name="ManualSnapshotRetentionPeriod"><p>The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p></param>
		/// <param name="KmsKeyId">The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster that you restore from a shared snapshot.</param>
		/// <param name="NodeType"><p>The node type that the restored cluster will be provisioned with.</p> <p>Default: The node type of the cluster from which the snapshot was taken. You can modify this if you are using any DS node type. In that case, you can choose to restore into another DS node type of the same size. For example, you can restore ds1.8xlarge into ds2.8xlarge, or ds1.xlarge into ds2.xlarge. If you have a DC instance type, you must restore into that same instance type and size. In other words, you can only restore a dc1.large instance type into another dc1.large instance type or dc2.large instance type. You can't restore dc1.8xlarge to dc2.8xlarge. First restore to a dc1.8xlarge cluster, then resize to a dc2.8large cluster. For more information about node types, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-about-clusters-and-nodes"> About Clusters and Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p></param>
		/// <param name="EnhancedVpcRouting"><p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p></param>
		/// <param name="AdditionalInfo">Reserved.</param>
		/// <param name="IamRoles"><p>A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request.</p> <p>A cluster can have up to 10 IAM roles associated at any time.</p></param>
		/// <param name="MaintenanceTrackName">The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the <code>MaintenanceTrack</code> value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks.</param>
		/// <param name="SnapshotScheduleIdentifier">A unique identifier for the snapshot schedule.</param>
		/// <param name="NumberOfNodes">The number of nodes specified when provisioning the restored cluster.</param>
		/// <returns>Success</returns>
		public async Task GET_RestoreFromClusterSnapshotAsync(
					string ClusterIdentifier, 
					string SnapshotIdentifier, 
					string SnapshotClusterIdentifier, 
					int Port, 
					string AvailabilityZone, 
					bool AllowVersionUpgrade, 
					string ClusterSubnetGroupName, 
					bool PubliclyAccessible, 
					string OwnerAccount, 
					string HsmClientCertificateIdentifier, 
					string HsmConfigurationIdentifier, 
					string ElasticIp, 
					string ClusterParameterGroupName, 
					String[] ClusterSecurityGroups, 
					String[] VpcSecurityGroupIds, 
					string PreferredMaintenanceWindow, 
					int AutomatedSnapshotRetentionPeriod, 
					int ManualSnapshotRetentionPeriod, 
					string KmsKeyId, 
					string NodeType, 
					bool EnhancedVpcRouting, 
					string AdditionalInfo, 
					String[] IamRoles, 
					string MaintenanceTrackName, 
					string SnapshotScheduleIdentifier, 
					int NumberOfNodes, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RestoreFromClusterSnapshot?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : Uri.EscapeDataString(SnapshotIdentifier))+"&SnapshotClusterIdentifier=" + (SnapshotClusterIdentifier==null? "" : Uri.EscapeDataString(SnapshotClusterIdentifier))+"&Port="+Port+"&AvailabilityZone=" + (AvailabilityZone==null? "" : Uri.EscapeDataString(AvailabilityZone))+"&AllowVersionUpgrade="+AllowVersionUpgrade+"&ClusterSubnetGroupName=" + (ClusterSubnetGroupName==null? "" : Uri.EscapeDataString(ClusterSubnetGroupName))+"&PubliclyAccessible="+PubliclyAccessible+"&OwnerAccount=" + (OwnerAccount==null? "" : Uri.EscapeDataString(OwnerAccount))+"&HsmClientCertificateIdentifier=" + (HsmClientCertificateIdentifier==null? "" : Uri.EscapeDataString(HsmClientCertificateIdentifier))+"&HsmConfigurationIdentifier=" + (HsmConfigurationIdentifier==null? "" : Uri.EscapeDataString(HsmConfigurationIdentifier))+"&ElasticIp=" + (ElasticIp==null? "" : Uri.EscapeDataString(ElasticIp))+"&ClusterParameterGroupName=" + (ClusterParameterGroupName==null? "" : Uri.EscapeDataString(ClusterParameterGroupName))+"&"+String.Join("&", ClusterSecurityGroups.Select(z => $"ClusterSecurityGroups={z}"))+"&"+String.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={z}"))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : Uri.EscapeDataString(PreferredMaintenanceWindow))+"&AutomatedSnapshotRetentionPeriod="+AutomatedSnapshotRetentionPeriod+"&ManualSnapshotRetentionPeriod="+ManualSnapshotRetentionPeriod+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&NodeType=" + (NodeType==null? "" : Uri.EscapeDataString(NodeType))+"&EnhancedVpcRouting="+EnhancedVpcRouting+"&AdditionalInfo=" + (AdditionalInfo==null? "" : Uri.EscapeDataString(AdditionalInfo))+"&"+String.Join("&", IamRoles.Select(z => $"IamRoles={z}"))+"&MaintenanceTrackName=" + (MaintenanceTrackName==null? "" : Uri.EscapeDataString(MaintenanceTrackName))+"&SnapshotScheduleIdentifier=" + (SnapshotScheduleIdentifier==null? "" : Uri.EscapeDataString(SnapshotScheduleIdentifier))+"&NumberOfNodes="+NumberOfNodes+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new table from a table in an Amazon Redshift cluster snapshot. You must create the new table within the Amazon Redshift cluster that the snapshot was taken from.</p> <p>You cannot use <code>RestoreTableFromClusterSnapshot</code> to restore a table with the same name as an existing table in an Amazon Redshift cluster. That is, you cannot overwrite an existing table in a cluster with a restored table. If you want to replace your original table with a new, restored table, then rename or drop your original table before you call <code>RestoreTableFromClusterSnapshot</code>. When you have renamed your original table, then you can pass the original name of the table as the <code>NewTableName</code> parameter value in the call to <code>RestoreTableFromClusterSnapshot</code>. This way, you can replace the original table with the table created from the snapshot.</p>
		/// GET_RestoreTableFromClusterSnapshot /#Action=RestoreTableFromClusterSnapshot
		/// </summary>
		/// <param name="ClusterIdentifier">The identifier of the Amazon Redshift cluster to restore the table to.</param>
		/// <param name="SnapshotIdentifier">The identifier of the snapshot to restore the table from. This snapshot must have been created from the Amazon Redshift cluster specified by the <code>ClusterIdentifier</code> parameter.</param>
		/// <param name="SourceDatabaseName">The name of the source database that contains the table to restore from.</param>
		/// <param name="SourceSchemaName">The name of the source schema that contains the table to restore from. If you do not specify a <code>SourceSchemaName</code> value, the default is <code>public</code>.</param>
		/// <param name="SourceTableName">The name of the source table to restore from.</param>
		/// <param name="TargetDatabaseName">The name of the database to restore the table to.</param>
		/// <param name="TargetSchemaName">The name of the schema to restore the table to.</param>
		/// <param name="NewTableName">The name of the table to create as a result of the current request.</param>
		/// <returns>Success</returns>
		public async Task GET_RestoreTableFromClusterSnapshotAsync(string ClusterIdentifier, string SnapshotIdentifier, string SourceDatabaseName, string SourceSchemaName, string SourceTableName, string TargetDatabaseName, string TargetSchemaName, string NewTableName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RestoreTableFromClusterSnapshot?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : Uri.EscapeDataString(SnapshotIdentifier))+"&SourceDatabaseName=" + (SourceDatabaseName==null? "" : Uri.EscapeDataString(SourceDatabaseName))+"&SourceSchemaName=" + (SourceSchemaName==null? "" : Uri.EscapeDataString(SourceSchemaName))+"&SourceTableName=" + (SourceTableName==null? "" : Uri.EscapeDataString(SourceTableName))+"&TargetDatabaseName=" + (TargetDatabaseName==null? "" : Uri.EscapeDataString(TargetDatabaseName))+"&TargetSchemaName=" + (TargetSchemaName==null? "" : Uri.EscapeDataString(TargetSchemaName))+"&NewTableName=" + (NewTableName==null? "" : Uri.EscapeDataString(NewTableName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resumes a paused cluster.
		/// GET_ResumeCluster /#Action=ResumeCluster
		/// </summary>
		/// <param name="ClusterIdentifier">The identifier of the cluster to be resumed.</param>
		/// <returns>Success</returns>
		public async Task GET_ResumeClusterAsync(string ClusterIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ResumeCluster?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revokes an ingress rule in an Amazon Redshift security group for a previously authorized IP range or Amazon EC2 security group. To add an ingress rule, see <a>AuthorizeClusterSecurityGroupIngress</a>. For information about managing security groups, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
		/// GET_RevokeClusterSecurityGroupIngress /#Action=RevokeClusterSecurityGroupIngress
		/// </summary>
		/// <param name="ClusterSecurityGroupName">The name of the security Group from which to revoke the ingress rule.</param>
		/// <param name="CIDRIP">The IP range for which to revoke access. This range must be a valid Classless Inter-Domain Routing (CIDR) block of IP addresses. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code> and <code>EC2SecurityGroupOwnerId</code> cannot be provided. </param>
		/// <param name="EC2SecurityGroupName">The name of the EC2 Security Group whose access is to be revoked. If <code>EC2SecurityGroupName</code> is specified, <code>EC2SecurityGroupOwnerId</code> must also be provided and <code>CIDRIP</code> cannot be provided. </param>
		/// <param name="EC2SecurityGroupOwnerId"><p>The AWS account number of the owner of the security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID is not an acceptable value. If <code>EC2SecurityGroupOwnerId</code> is specified, <code>EC2SecurityGroupName</code> must also be provided. and <code>CIDRIP</code> cannot be provided. </p> <p>Example: <code>111122223333</code> </p></param>
		/// <returns>Success</returns>
		public async Task GET_RevokeClusterSecurityGroupIngressAsync(string ClusterSecurityGroupName, string CIDRIP, string EC2SecurityGroupName, string EC2SecurityGroupOwnerId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RevokeClusterSecurityGroupIngress?ClusterSecurityGroupName=" + (ClusterSecurityGroupName==null? "" : Uri.EscapeDataString(ClusterSecurityGroupName))+"&CIDRIP=" + (CIDRIP==null? "" : Uri.EscapeDataString(CIDRIP))+"&EC2SecurityGroupName=" + (EC2SecurityGroupName==null? "" : Uri.EscapeDataString(EC2SecurityGroupName))+"&EC2SecurityGroupOwnerId=" + (EC2SecurityGroupOwnerId==null? "" : Uri.EscapeDataString(EC2SecurityGroupOwnerId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the ability of the specified AWS customer account to restore the specified snapshot. If the account is currently restoring the snapshot, the restore will run to completion.</p> <p> For more information about working with snapshots, go to <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
		/// GET_RevokeSnapshotAccess /#Action=RevokeSnapshotAccess
		/// </summary>
		/// <param name="SnapshotIdentifier">The identifier of the snapshot that the account can no longer access.</param>
		/// <param name="SnapshotClusterIdentifier">The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</param>
		/// <param name="AccountWithRestoreAccess">The identifier of the AWS customer account that can no longer restore the specified snapshot.</param>
		/// <returns>Success</returns>
		public async Task GET_RevokeSnapshotAccessAsync(string SnapshotIdentifier, string SnapshotClusterIdentifier, string AccountWithRestoreAccess, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RevokeSnapshotAccess?SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : Uri.EscapeDataString(SnapshotIdentifier))+"&SnapshotClusterIdentifier=" + (SnapshotClusterIdentifier==null? "" : Uri.EscapeDataString(SnapshotClusterIdentifier))+"&AccountWithRestoreAccess=" + (AccountWithRestoreAccess==null? "" : Uri.EscapeDataString(AccountWithRestoreAccess))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rotates the encryption keys for a cluster.
		/// GET_RotateEncryptionKey /#Action=RotateEncryptionKey
		/// </summary>
		/// <param name="ClusterIdentifier"><p>The unique identifier of the cluster that you want to rotate the encryption keys for.</p> <p>Constraints: Must be the name of valid cluster that has encryption enabled.</p></param>
		/// <returns>Success</returns>
		public async Task GET_RotateEncryptionKeyAsync(string ClusterIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RotateEncryptionKey?ClusterIdentifier=" + (ClusterIdentifier==null? "" : Uri.EscapeDataString(ClusterIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
