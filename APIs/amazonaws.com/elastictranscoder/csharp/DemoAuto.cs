//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The CreateJobResponse structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobResponse
	{
		
		/// <summary>
		/// A section of the response body that provides information about the job that is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Job Job { get; set; }
	}
	
	/// <summary>
	/// The encryption settings, if any, that are used for decrypting your input files or encrypting your output files. If your input file is encrypted, you must specify the mode that Elastic Transcoder uses to decrypt your file, otherwise you must specify the mode you want Elastic Transcoder to use to encrypt your output files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Encryption
	{
		
		/// <summary>
		/// Pattern: (^s3$)|(^s3-aws-kms$)|(^aes-cbc-pkcs7$)|(^aes-ctr$)|(^aes-gcm$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Mode { get; set; }
		
		/// <summary>
		/// Pattern: ^$|(^(?:[A-Za-z0-9\+/]{4})*(?:[A-Za-z0-9\+/]{2}==|[A-Za-z0-9\+/]{3}=)?$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Pattern: ^$|(^(?:[A-Za-z0-9\+/]{4})*(?:[A-Za-z0-9\+/]{2}==|[A-Za-z0-9\+/]{3}=)?$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KeyMd5 { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string InitializationVector { get; set; }
	}
	
	/// <summary>
	/// Settings that determine when a clip begins and how long it lasts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimeSpan
	{
		
		/// <summary>
		/// Pattern: (^\d{1,5}(\.\d{0,3})?$)|(^([0-1]?[0-9]:|2[0-3]:)?([0-5]?[0-9]:)?[0-5]?[0-9](\.\d{0,3})?$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Pattern: (^\d{1,5}(\.\d{0,3})?$)|(^([0-1]?[0-9]:|2[0-3]:)?([0-5]?[0-9]:)?[0-5]?[0-9](\.\d{0,3})?$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
	}
	
	/// <summary>
	/// The captions to be created, if any.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputCaptions
	{
		
		/// <summary>
		/// Pattern: (^MergeOverride$)|(^MergeRetain$)|(^Override$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MergePolicy { get; set; }
		
		/// <summary>
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public CaptionSource[] CaptionSources { get; set; }
	}
	
	/// <summary>
	/// The detected properties of the input file. Elastic Transcoder identifies these values from the input file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetectedProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Width { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Pattern: ^\d{1,5}(\.\d{0,5})?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FrameRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FileSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationMillis { get; set; }
	}
	
	/// <summary>
	/// Information about the file that you're transcoding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobInput
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^10$)|(^15$)|(^23.97$)|(^24$)|(^25$)|(^29.97$)|(^30$)|(^50$)|(^60$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FrameRate { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^\d{1,5}x\d{1,5}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Resolution { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^1:1$)|(^4:3$)|(^3:2$)|(^16:9$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AspectRatio { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^true$)|(^false$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Interlaced { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^3gp$)|(^asf$)|(^avi$)|(^divx$)|(^flv$)|(^mkv$)|(^mov$)|(^mp4$)|(^mpeg$)|(^mpeg-ps$)|(^mpeg-ts$)|(^mxf$)|(^ogg$)|(^ts$)|(^vob$)|(^wav$)|(^webm$)|(^mp3$)|(^m4a$)|(^aac$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Container { get; set; }
		
		/// <summary>
		/// The encryption settings, if any, that are used for decrypting your input files or encrypting your output files. If your input file is encrypted, you must specify the mode that Elastic Transcoder uses to decrypt your file, otherwise you must specify the mode you want Elastic Transcoder to use to encrypt your output files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Encryption Encryption { get; set; }
		
		/// <summary>
		/// Settings that determine when a clip begins and how long it lasts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimeSpan TimeSpan { get; set; }
		
		/// <summary>
		/// The captions to be created, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputCaptions InputCaptions { get; set; }
		
		/// <summary>
		/// The detected properties of the input file. Elastic Transcoder identifies these values from the input file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DetectedProperties DetectedProperties { get; set; }
	}
	
	/// <summary>
	/// The .jpg or .png file associated with an audio file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobAlbumArt
	{
		
		/// <summary>
		/// Pattern: (^Replace$)|(^Prepend$)|(^Append$)|(^Fallback$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MergePolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Artwork[] Artwork { get; set; }
	}
	
	/// <summary>
	/// The captions to be created, if any.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Captions
	{
		
		/// <summary>
		/// Pattern: (^MergeOverride$)|(^MergeRetain$)|(^Override$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MergePolicy { get; set; }
		
		/// <summary>
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public CaptionSource[] CaptionSources { get; set; }
		
		/// <summary>
		/// Maximum items: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public CaptionFormat[] CaptionFormats { get; set; }
	}
	
	/// <summary>
	/// The <code>CreateJobOutput</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobOutput
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Pattern: (^$)|(^.*\{count\}.*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThumbnailPattern { get; set; }
		
		/// <summary>
		/// The encryption settings, if any, that are used for decrypting your input files or encrypting your output files. If your input file is encrypted, you must specify the mode that Elastic Transcoder uses to decrypt your file, otherwise you must specify the mode you want Elastic Transcoder to use to encrypt your output files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Encryption ThumbnailEncryption { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^0$)|(^90$)|(^180$)|(^270$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Rotate { get; set; }
		
		/// <summary>
		/// Pattern: ^\d{13}-\w{6}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PresetId { get; set; }
		
		/// <summary>
		/// Pattern: ^\d{1,5}(\.\d{0,5})?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SegmentDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobWatermark[] Watermarks { get; set; }
		
		/// <summary>
		/// The .jpg or .png file associated with an audio file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobAlbumArt AlbumArt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Clip[] Composition { get; set; }
		
		/// <summary>
		/// The captions to be created, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Captions Captions { get; set; }
		
		/// <summary>
		/// The encryption settings, if any, that are used for decrypting your input files or encrypting your output files. If your input file is encrypted, you must specify the mode that Elastic Transcoder uses to decrypt your file, otherwise you must specify the mode you want Elastic Transcoder to use to encrypt your output files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Encryption Encryption { get; set; }
	}
	
	/// <summary>
	/// Information about the master playlist.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobPlaylist
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: (^HLSv3$)|(^HLSv4$)|(^Smooth$)|(^MPEG-DASH$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
		
		/// <summary>
		/// Maximum items: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public Key[] OutputKeys { get; set; }
		
		/// <summary>
		/// The HLS content protection settings, if any, that you want Elastic Transcoder to apply to your output files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsContentProtection HlsContentProtection { get; set; }
		
		/// <summary>
		/// <p>The PlayReady DRM settings, if any, that you want Elastic Transcoder to apply to the output files associated with this playlist.</p> <p>PlayReady DRM encrypts your media files using <code>aes-ctr</code> encryption.</p> <p>If you use DRM for an <code>HLSv3</code> playlist, your outputs must have a master playlist.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PlayReadyDrm PlayReadyDrm { get; set; }
	}
	
	/// <summary>
	/// When you create a pipeline, Elastic Transcoder returns the values that you specified in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePipelineResponse
	{
		
		/// <summary>
		/// The pipeline (queue) that is used to manage jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Pipeline Pipeline { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Warning[] Warnings { get; set; }
	}
	
	/// <summary>
	/// The <code>CreatePresetResponse</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePresetResponse
	{
		
		/// <summary>
		/// Presets are templates that contain most of the settings for transcoding media files from one format to another. Elastic Transcoder includes some default presets for common formats, for example, several iPod and iPhone versions. You can also create your own presets for formats that aren't included among the default presets. You specify which preset you want to use when you create a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Preset Preset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Warning { get; set; }
	}
	
	/// <summary>
	/// Options associated with your audio codec.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioCodecOptions
	{
		
		/// <summary>
		/// Pattern: (^auto$)|(^AAC-LC$)|(^HE-AAC$)|(^HE-AACv2$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Profile { get; set; }
		
		/// <summary>
		/// Pattern: (^8$)|(^16$)|(^24$)|(^32$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BitDepth { get; set; }
		
		/// <summary>
		/// Pattern: (^LittleEndian$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BitOrder { get; set; }
		
		/// <summary>
		/// Pattern: (^Unsigned$)|(^Signed$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Signed { get; set; }
	}
	
	/// <summary>
	/// The <code>ListJobsByPipelineResponse</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListJobsByPipelineResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Job[] Jobs { get; set; }
		
		/// <summary>
		/// Pattern: ^\d{13}-\w{6}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	///  The <code>ListJobsByStatusResponse</code> structure. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListJobsByStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Job[] Jobs { get; set; }
		
		/// <summary>
		/// Pattern: ^\d{13}-\w{6}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A list of the pipelines associated with the current AWS account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPipelinesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Pipeline[] Pipelines { get; set; }
		
		/// <summary>
		/// Pattern: ^\d{13}-\w{6}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The <code>ListPresetsResponse</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPresetsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Preset[] Presets { get; set; }
		
		/// <summary>
		/// Pattern: ^\d{13}-\w{6}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The <code>ReadJobResponse</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReadJobResponse
	{
		
		/// <summary>
		/// A section of the response body that provides information about the job that is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Job Job { get; set; }
	}
	
	/// <summary>
	/// The <code>ReadPipelineResponse</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReadPipelineResponse
	{
		
		/// <summary>
		/// The pipeline (queue) that is used to manage jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Pipeline Pipeline { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Warning[] Warnings { get; set; }
	}
	
	/// <summary>
	/// The <code>ReadPresetResponse</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReadPresetResponse
	{
		
		/// <summary>
		/// Presets are templates that contain most of the settings for transcoding media files from one format to another. Elastic Transcoder includes some default presets for common formats, for example, several iPod and iPhone versions. You can also create your own presets for formats that aren't included among the default presets. You specify which preset you want to use when you create a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Preset Preset { get; set; }
	}
	
	/// <summary>
	/// The <code>TestRoleResponse</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestRoleResponse
	{
		
		/// <summary>
		/// Pattern: (^true$)|(^false$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Success { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Messages { get; set; }
	}
	
	/// <summary>
	/// When you update a pipeline, Elastic Transcoder returns the values that you specified in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePipelineResponse
	{
		
		/// <summary>
		/// The pipeline (queue) that is used to manage jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Pipeline Pipeline { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Warning[] Warnings { get; set; }
	}
	
	/// <summary>
	/// The <code>UpdatePipelineNotificationsResponse</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePipelineNotificationsResponse
	{
		
		/// <summary>
		/// The pipeline (queue) that is used to manage jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Pipeline Pipeline { get; set; }
	}
	
	/// <summary>
	/// When you update status for a pipeline, Elastic Transcoder returns the values that you specified in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePipelineStatusResponse
	{
		
		/// <summary>
		/// The pipeline (queue) that is used to manage jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Pipeline Pipeline { get; set; }
	}
	
	/// <summary>
	/// <p>The file to be used as album art. There can be multiple artworks associated with an audio file, to a maximum of 20.</p> <p>To remove artwork or leave the artwork empty, you can either set <code>Artwork</code> to null, or set the <code>Merge Policy</code> to "Replace" and use an empty <code>Artwork</code> array.</p> <p>To pass through existing artwork unchanged, set the <code>Merge Policy</code> to "Prepend", "Append", or "Fallback", and use an empty <code>Artwork</code> array.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Artwork
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: (^.{1,1020}.jpg$)|(^.{1,1019}.jpeg$)|(^.{1,1020}.png$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string InputKey { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^\d{2,4}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MaxWidth { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^\d{2,4}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MaxHeight { get; set; }
		
		/// <summary>
		/// Pattern: (^Fit$)|(^Fill$)|(^Stretch$)|(^Keep$)|(^ShrinkToFit$)|(^ShrinkToFill$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SizingPolicy { get; set; }
		
		/// <summary>
		/// Pattern: (^Pad$)|(^NoPad$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PaddingPolicy { get; set; }
		
		/// <summary>
		/// Pattern: (^jpg$)|(^png$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AlbumArtFormat { get; set; }
		
		/// <summary>
		/// The encryption settings, if any, that are used for decrypting your input files or encrypting your output files. If your input file is encrypted, you must specify the mode that Elastic Transcoder uses to decrypt your file, otherwise you must specify the mode you want Elastic Transcoder to use to encrypt your output files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Encryption Encryption { get; set; }
	}
	
	/// <summary>
	/// Parameters required for transcoding audio.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioParameters
	{
		
		/// <summary>
		/// Pattern: (^AAC$)|(^vorbis$)|(^mp3$)|(^mp2$)|(^pcm$)|(^flac$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Codec { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^22050$)|(^32000$)|(^44100$)|(^48000$)|(^96000$)|(^192000$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SampleRate { get; set; }
		
		/// <summary>
		/// Pattern: ^\d{1,3}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BitRate { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^0$)|(^1$)|(^2$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Channels { get; set; }
		
		/// <summary>
		/// Pattern: (^SingleTrack$)|(^OneChannelPerTrack$)|(^OneChannelPerTrackWithMosTo8Tracks$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AudioPackingMode { get; set; }
		
		/// <summary>
		/// Options associated with your audio codec.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioCodecOptions CodecOptions { get; set; }
	}
	
	/// <summary>
	/// The file format of the output captions. If you leave this value blank, Elastic Transcoder returns an error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CaptionFormat
	{
		
		/// <summary>
		/// Pattern: (^mov-text$)|(^srt$)|(^scc$)|(^webvtt$)|(^dfxp$)|(^cea-708$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
		
		/// <summary>
		/// Pattern: (^$)|(^.*\{language\}.*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Pattern { get; set; }
		
		/// <summary>
		/// The encryption settings, if any, that are used for decrypting your input files or encrypting your output files. If your input file is encrypted, you must specify the mode that Elastic Transcoder uses to decrypt your file, otherwise you must specify the mode you want Elastic Transcoder to use to encrypt your output files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Encryption Encryption { get; set; }
	}
	
	/// <summary>
	/// A source file for the input sidecar captions used during the transcoding process.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CaptionSource
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Language { get; set; }
		
		/// <summary>
		/// Pattern: (^[+-]?\d{1,5}(\.\d{0,3})?$)|(^[+-]?([0-1]?[0-9]:|2[0-3]:)?([0-5]?[0-9]:)?[0-5]?[0-9](\.\d{0,3})?$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TimeOffset { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string Label { get; set; }
		
		/// <summary>
		/// The encryption settings, if any, that are used for decrypting your input files or encrypting your output files. If your input file is encrypted, you must specify the mode that Elastic Transcoder uses to decrypt your file, otherwise you must specify the mode you want Elastic Transcoder to use to encrypt your output files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Encryption Encryption { get; set; }
	}
	
	/// <summary>
	/// Settings for one clip in a composition. All jobs in a playlist must have the same clip settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Clip
	{
		
		/// <summary>
		/// Settings that determine when a clip begins and how long it lasts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimeSpan TimeSpan { get; set; }
	}
	
	/// <summary>
	/// The HLS content protection settings, if any, that you want Elastic Transcoder to apply to your output files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsContentProtection
	{
		
		/// <summary>
		/// Pattern: (^aes-128$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Method { get; set; }
		
		/// <summary>
		/// Pattern: ^$|(^(?:[A-Za-z0-9\+/]{4})*(?:[A-Za-z0-9\+/]{2}==|[A-Za-z0-9\+/]{3}=)?$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Pattern: ^$|(^(?:[A-Za-z0-9\+/]{4})*(?:[A-Za-z0-9\+/]{2}==|[A-Za-z0-9\+/]{3}=)?$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KeyMd5 { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string InitializationVector { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=0)]
		public string LicenseAcquisitionUrl { get; set; }
		
		/// <summary>
		/// Pattern: (^NoStore$)|(^WithVariantPlaylists$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KeyStoragePolicy { get; set; }
	}
	
	/// <summary>
	/// <p>The PlayReady DRM settings, if any, that you want Elastic Transcoder to apply to the output files associated with this playlist.</p> <p>PlayReady DRM encrypts your media files using <code>aes-ctr</code> encryption.</p> <p>If you use DRM for an <code>HLSv3</code> playlist, your outputs must have a master playlist.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PlayReadyDrm
	{
		
		/// <summary>
		/// Pattern: (^microsoft$)|(^discretix-3.0$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
		
		/// <summary>
		/// Pattern: (^(?:[A-Za-z0-9\+/]{4})*(?:[A-Za-z0-9\+/]{2}==|[A-Za-z0-9\+/]{3}=)?$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Pattern: (^(?:[A-Za-z0-9\+/]{4})*(?:[A-Za-z0-9\+/]{2}==|[A-Za-z0-9\+/]{3}=)?$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KeyMd5 { get; set; }
		
		/// <summary>
		/// Pattern: (^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$)|(^[0-9A-Fa-f]{32}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KeyId { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string InitializationVector { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=1)]
		public string LicenseAcquisitionUrl { get; set; }
	}
	
	/// <summary>
	/// The <code>CreateJobRequest</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobRequest
	{
		
		/// <summary>
		/// Pattern: ^\d{13}-\w{6}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PipelineId { get; set; }
		
		/// <summary>
		/// Information about the file that you're transcoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobInput Input { get; set; }
		
		/// <summary>
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public JobInput[] Inputs { get; set; }
		
		/// <summary>
		/// The <code>CreateJobOutput</code> structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateJobOutput Output { get; set; }
		
		/// <summary>
		/// Maximum items: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public CreateJobOutput[] Outputs { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string OutputKeyPrefix { get; set; }
		
		/// <summary>
		/// Maximum items: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public CreateJobPlaylist[] Playlists { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserMetadata UserMetadata { get; set; }
	}
	
	/// <summary>
	/// A section of the response body that provides information about the job that is created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Job
	{
		
		/// <summary>
		/// Pattern: ^\d{13}-\w{6}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Pattern: ^\d{13}-\w{6}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PipelineId { get; set; }
		
		/// <summary>
		/// Information about the file that you're transcoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobInput Input { get; set; }
		
		/// <summary>
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public JobInput[] Inputs { get; set; }
		
		/// <summary>
		/// <important> <p>Outputs recommended instead.</p> </important> <p>If you specified one output for a job, information about that output. If you specified multiple outputs for a job, the <code>Output</code> object lists information about the first output. This duplicates the information that is listed for the first output in the <code>Outputs</code> object.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobOutput Output { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobOutput[] Outputs { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string OutputKeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Playlist[] Playlists { get; set; }
		
		/// <summary>
		/// Pattern: (^Submitted$)|(^Progressing$)|(^Complete$)|(^Canceled$)|(^Error$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserMetadata UserMetadata { get; set; }
		
		/// <summary>
		/// Details about the timing of a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Timing Timing { get; set; }
	}
	
	/// <summary>
	/// <p>The Amazon Simple Notification Service (Amazon SNS) topic or topics to notify in order to report job status.</p> <important> <p>To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.</p> </important>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Notifications
	{
		
		/// <summary>
		/// Pattern: (^$)|(^arn:aws:sns:.*:\w{12}:.+$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Progressing { get; set; }
		
		/// <summary>
		/// Pattern: (^$)|(^arn:aws:sns:.*:\w{12}:.+$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Completed { get; set; }
		
		/// <summary>
		/// Pattern: (^$)|(^arn:aws:sns:.*:\w{12}:.+$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Warning { get; set; }
		
		/// <summary>
		/// Pattern: (^$)|(^arn:aws:sns:.*:\w{12}:.+$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
	}
	
	/// <summary>
	/// The <code>PipelineOutputConfig</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PipelineOutputConfig
	{
		
		/// <summary>
		/// Pattern: ^(\w|\.|-){1,255}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Pattern: (^ReducedRedundancy$)|(^Standard$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StorageClass { get; set; }
		
		/// <summary>
		/// Maximum items: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public Permission[] Permissions { get; set; }
	}
	
	/// <summary>
	/// The <code>CreatePipelineRequest</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePipelineRequest
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ^(\w|\.|-){1,255}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InputBucket { get; set; }
		
		/// <summary>
		/// Pattern: ^(\w|\.|-){1,255}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OutputBucket { get; set; }
		
		/// <summary>
		/// Pattern: ^arn:aws:iam::\w{12}:role/.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string AwsKmsKeyArn { get; set; }
		
		/// <summary>
		/// <p>The Amazon Simple Notification Service (Amazon SNS) topic or topics to notify in order to report job status.</p> <important> <p>To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.</p> </important>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Notifications Notifications { get; set; }
		
		/// <summary>
		/// The <code>PipelineOutputConfig</code> structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PipelineOutputConfig ContentConfig { get; set; }
		
		/// <summary>
		/// The <code>PipelineOutputConfig</code> structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PipelineOutputConfig ThumbnailConfig { get; set; }
	}
	
	/// <summary>
	/// The pipeline (queue) that is used to manage jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Pipeline
	{
		
		/// <summary>
		/// Pattern: ^\d{13}-\w{6}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: (^Active$)|(^Paused$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		/// <summary>
		/// Pattern: ^(\w|\.|-){1,255}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InputBucket { get; set; }
		
		/// <summary>
		/// Pattern: ^(\w|\.|-){1,255}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OutputBucket { get; set; }
		
		/// <summary>
		/// Pattern: ^arn:aws:iam::\w{12}:role/.+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string AwsKmsKeyArn { get; set; }
		
		/// <summary>
		/// <p>The Amazon Simple Notification Service (Amazon SNS) topic or topics to notify in order to report job status.</p> <important> <p>To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.</p> </important>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Notifications Notifications { get; set; }
		
		/// <summary>
		/// The <code>PipelineOutputConfig</code> structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PipelineOutputConfig ContentConfig { get; set; }
		
		/// <summary>
		/// The <code>PipelineOutputConfig</code> structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PipelineOutputConfig ThumbnailConfig { get; set; }
	}
	
	/// <summary>
	/// The <code>VideoParameters</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VideoParameters
	{
		
		/// <summary>
		/// Pattern: (^H\.264$)|(^vp8$)|(^vp9$)|(^mpeg2$)|(^gif$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Codec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CodecOptions CodecOptions { get; set; }
		
		/// <summary>
		/// Pattern: ^\d{1,6}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KeyframesMaxDist { get; set; }
		
		/// <summary>
		/// Pattern: (^true$)|(^false$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FixedGOP { get; set; }
		
		/// <summary>
		/// Pattern: (^\d{2,5}$)|(^auto$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BitRate { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^10$)|(^15$)|(^23.97$)|(^24$)|(^25$)|(^29.97$)|(^30$)|(^50$)|(^60$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FrameRate { get; set; }
		
		/// <summary>
		/// Pattern: (^10$)|(^15$)|(^23.97$)|(^24$)|(^25$)|(^29.97$)|(^30$)|(^50$)|(^60$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MaxFrameRate { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^\d{1,5}x\d{1,5}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Resolution { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^1:1$)|(^4:3$)|(^3:2$)|(^16:9$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AspectRatio { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^\d{2,4}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MaxWidth { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^\d{2,4}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MaxHeight { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^1:1$)|(^4:3$)|(^3:2$)|(^16:9$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisplayAspectRatio { get; set; }
		
		/// <summary>
		/// Pattern: (^Fit$)|(^Fill$)|(^Stretch$)|(^Keep$)|(^ShrinkToFit$)|(^ShrinkToFill$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SizingPolicy { get; set; }
		
		/// <summary>
		/// Pattern: (^Pad$)|(^NoPad$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PaddingPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PresetWatermark[] Watermarks { get; set; }
	}
	
	/// <summary>
	/// Thumbnails for videos.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Thumbnails
	{
		
		/// <summary>
		/// Pattern: (^jpg$)|(^png$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
		
		/// <summary>
		/// Pattern: ^\d{1,5}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Interval { get; set; }
		
		/// <summary>
		/// Pattern: ^\d{1,5}x\d{1,5}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Resolution { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^1:1$)|(^4:3$)|(^3:2$)|(^16:9$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AspectRatio { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^\d{2,4}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MaxWidth { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^\d{2,4}$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MaxHeight { get; set; }
		
		/// <summary>
		/// Pattern: (^Fit$)|(^Fill$)|(^Stretch$)|(^Keep$)|(^ShrinkToFit$)|(^ShrinkToFill$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SizingPolicy { get; set; }
		
		/// <summary>
		/// Pattern: (^Pad$)|(^NoPad$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PaddingPolicy { get; set; }
	}
	
	/// <summary>
	/// The <code>CreatePresetRequest</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePresetRequest
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Pattern: (^mp4$)|(^ts$)|(^webm$)|(^mp3$)|(^flac$)|(^oga$)|(^ogg$)|(^fmp4$)|(^mpg$)|(^flv$)|(^gif$)|(^mxf$)|(^wav$)|(^mp2$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Container { get; set; }
		
		/// <summary>
		/// The <code>VideoParameters</code> structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoParameters Video { get; set; }
		
		/// <summary>
		/// Parameters required for transcoding audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioParameters Audio { get; set; }
		
		/// <summary>
		/// Thumbnails for videos.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Thumbnails Thumbnails { get; set; }
	}
	
	/// <summary>
	/// Presets are templates that contain most of the settings for transcoding media files from one format to another. Elastic Transcoder includes some default presets for common formats, for example, several iPod and iPhone versions. You can also create your own presets for formats that aren't included among the default presets. You specify which preset you want to use when you create a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Preset
	{
		
		/// <summary>
		/// Pattern: ^\d{13}-\w{6}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Pattern: (^mp4$)|(^ts$)|(^webm$)|(^mp3$)|(^flac$)|(^oga$)|(^ogg$)|(^fmp4$)|(^mpg$)|(^flv$)|(^gif$)|(^mxf$)|(^wav$)|(^mp2$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Container { get; set; }
		
		/// <summary>
		/// Parameters required for transcoding audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioParameters Audio { get; set; }
		
		/// <summary>
		/// The <code>VideoParameters</code> structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoParameters Video { get; set; }
		
		/// <summary>
		/// Thumbnails for videos.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Thumbnails Thumbnails { get; set; }
		
		/// <summary>
		/// Pattern: (^System$)|(^Custom$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// <important> <p>Outputs recommended instead.</p> </important> <p>If you specified one output for a job, information about that output. If you specified multiple outputs for a job, the <code>Output</code> object lists information about the first output. This duplicates the information that is listed for the first output in the <code>Outputs</code> object.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Pattern: (^$)|(^.*\{count\}.*$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThumbnailPattern { get; set; }
		
		/// <summary>
		/// The encryption settings, if any, that are used for decrypting your input files or encrypting your output files. If your input file is encrypted, you must specify the mode that Elastic Transcoder uses to decrypt your file, otherwise you must specify the mode you want Elastic Transcoder to use to encrypt your output files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Encryption ThumbnailEncryption { get; set; }
		
		/// <summary>
		/// Pattern: (^auto$)|(^0$)|(^90$)|(^180$)|(^270$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Rotate { get; set; }
		
		/// <summary>
		/// Pattern: ^\d{13}-\w{6}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PresetId { get; set; }
		
		/// <summary>
		/// Pattern: ^\d{1,5}(\.\d{0,5})?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SegmentDuration { get; set; }
		
		/// <summary>
		/// Pattern: (^Submitted$)|(^Progressing$)|(^Complete$)|(^Canceled$)|(^Error$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string StatusDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Width { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Pattern: ^\d{1,5}(\.\d{0,5})?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FrameRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FileSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobWatermark[] Watermarks { get; set; }
		
		/// <summary>
		/// The .jpg or .png file associated with an audio file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobAlbumArt AlbumArt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Clip[] Composition { get; set; }
		
		/// <summary>
		/// The captions to be created, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Captions Captions { get; set; }
		
		/// <summary>
		/// The encryption settings, if any, that are used for decrypting your input files or encrypting your output files. If your input file is encrypted, you must specify the mode that Elastic Transcoder uses to decrypt your file, otherwise you must specify the mode you want Elastic Transcoder to use to encrypt your output files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Encryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AppliedColorSpaceConversion { get; set; }
	}
	
	/// <summary>
	/// Details about the timing of a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Timing
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SubmitTimeMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartTimeMillis { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FinishTimeMillis { get; set; }
	}
	
	/// <summary>
	/// Watermarks can be in .png or .jpg format. If you want to display a watermark that is not rectangular, use the .png format, which supports transparency.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobWatermark
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string PresetWatermarkId { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: (^.{1,1020}.jpg$)|(^.{1,1019}.jpeg$)|(^.{1,1020}.png$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string InputKey { get; set; }
		
		/// <summary>
		/// The encryption settings, if any, that are used for decrypting your input files or encrypting your output files. If your input file is encrypted, you must specify the mode that Elastic Transcoder uses to decrypt your file, otherwise you must specify the mode you want Elastic Transcoder to use to encrypt your output files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Encryption Encryption { get; set; }
	}
	
	/// <summary>
	/// The <code>Permission</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Permission
	{
		
		/// <summary>
		/// Pattern: (^Canonical$)|(^Email$)|(^Group$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GranteeType { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Grantee { get; set; }
		
		/// <summary>
		/// Maximum items: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public AccessControl[] Access { get; set; }
	}
	
	/// <summary>
	///  Use Only for Fragmented MP4 or MPEG-TS Outputs. If you specify a preset for which the value of Container is <code>fmp4</code> (Fragmented MP4) or <code>ts</code> (MPEG-TS), Playlists contains information about the master playlists that you want Elastic Transcoder to create. We recommend that you create only one master playlist per output format. The maximum number of master playlists in a job is 30. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Playlist
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: (^HLSv3$)|(^HLSv4$)|(^Smooth$)|(^MPEG-DASH$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
		
		/// <summary>
		/// Maximum items: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public Key[] OutputKeys { get; set; }
		
		/// <summary>
		/// The HLS content protection settings, if any, that you want Elastic Transcoder to apply to your output files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsContentProtection HlsContentProtection { get; set; }
		
		/// <summary>
		/// <p>The PlayReady DRM settings, if any, that you want Elastic Transcoder to apply to the output files associated with this playlist.</p> <p>PlayReady DRM encrypts your media files using <code>aes-ctr</code> encryption.</p> <p>If you use DRM for an <code>HLSv3</code> playlist, your outputs must have a master playlist.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PlayReadyDrm PlayReadyDrm { get; set; }
		
		/// <summary>
		/// Pattern: (^Submitted$)|(^Progressing$)|(^Complete$)|(^Canceled$)|(^Error$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string StatusDetail { get; set; }
	}
	
	/// <summary>
	/// <p>Settings for the size, location, and opacity of graphics that you want Elastic Transcoder to overlay over videos that are transcoded using this preset. You can specify settings for up to four watermarks. Watermarks appear in the specified size and location, and with the specified opacity for the duration of the transcoded video.</p> <p>Watermarks can be in .png or .jpg format. If you want to display a watermark that is not rectangular, use the .png format, which supports transparency.</p> <p>When you create a job that uses this preset, you specify the .png or .jpg graphics that you want Elastic Transcoder to include in the transcoded videos. You can specify fewer graphics in the job than you specify watermark settings in the preset, which allows you to use the same preset for up to four watermarks that have different dimensions.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PresetWatermark
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Pattern: (^\d{1,3}(\.\d{0,5})?%$)|(^\d{1,4}?px$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MaxWidth { get; set; }
		
		/// <summary>
		/// Pattern: (^\d{1,3}(\.\d{0,5})?%$)|(^\d{1,4}?px$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MaxHeight { get; set; }
		
		/// <summary>
		/// Pattern: (^Fit$)|(^Stretch$)|(^ShrinkToFit$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SizingPolicy { get; set; }
		
		/// <summary>
		/// Pattern: (^Left$)|(^Right$)|(^Center$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HorizontalAlign { get; set; }
		
		/// <summary>
		/// Pattern: (^\d{1,3}(\.\d{0,5})?%$)|(^\d{1,4}?px$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HorizontalOffset { get; set; }
		
		/// <summary>
		/// Pattern: (^Top$)|(^Bottom$)|(^Center$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VerticalAlign { get; set; }
		
		/// <summary>
		/// Pattern: (^\d{1,3}(\.\d{0,5})?%$)|(^\d{1,4}?px$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VerticalOffset { get; set; }
		
		/// <summary>
		/// Pattern: ^\d{1,3}(\.\d{0,20})?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Opacity { get; set; }
		
		/// <summary>
		/// Pattern: (^Content$)|(^Frame$)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	/// <summary>
	///  The <code>TestRoleRequest</code> structure. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestRoleRequest
	{
		
		/// <summary>
		/// Pattern: ^arn:aws:iam::\w{12}:role/.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// Pattern: ^(\w|\.|-){1,255}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InputBucket { get; set; }
		
		/// <summary>
		/// Pattern: ^(\w|\.|-){1,255}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OutputBucket { get; set; }
		
		/// <summary>
		/// Maximum items: 30
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public SnsTopic[] Topics { get; set; }
	}
	
	/// <summary>
	/// The <code>UpdatePipelineNotificationsRequest</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePipelineNotificationsRequest
	{
		
		/// <summary>
		/// <p>The Amazon Simple Notification Service (Amazon SNS) topic or topics to notify in order to report job status.</p> <important> <p>To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.</p> </important>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Notifications Notifications { get; set; }
	}
	
	/// <summary>
	/// The <code>UpdatePipelineRequest</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePipelineRequest
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ^(\w|\.|-){1,255}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InputBucket { get; set; }
		
		/// <summary>
		/// Pattern: ^arn:aws:iam::\w{12}:role/.+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string AwsKmsKeyArn { get; set; }
		
		/// <summary>
		/// <p>The Amazon Simple Notification Service (Amazon SNS) topic or topics to notify in order to report job status.</p> <important> <p>To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.</p> </important>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Notifications Notifications { get; set; }
		
		/// <summary>
		/// The <code>PipelineOutputConfig</code> structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PipelineOutputConfig ContentConfig { get; set; }
		
		/// <summary>
		/// The <code>PipelineOutputConfig</code> structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PipelineOutputConfig ThumbnailConfig { get; set; }
	}
	
	/// <summary>
	/// The <code>UpdatePipelineStatusRequest</code> structure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePipelineStatusRequest
	{
		
		/// <summary>
		/// Pattern: (^Active$)|(^Paused$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// <p>Elastic Transcoder returns a warning if the resources used by your pipeline are not in the same region as the pipeline.</p> <p>Using resources in the same region, such as your Amazon S3 buckets, Amazon SNS notification topics, and AWS KMS key, reduces processing time and prevents cross-regional charges.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Warning
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>The CancelJob operation cancels an unfinished job.</p> <note> <p>You can only cancel a job that has a status of <code>Submitted</code>. To prevent a pipeline from starting to process a job while you're getting the job identifier, use <a>UpdatePipelineStatus</a> to temporarily pause the pipeline.</p> </note>
		/// CancelJob /2012-09-25/jobs/{Id}
		/// </summary>
		/// <param name="Id"><p>The identifier of the job that you want to cancel.</p> <p>To get a list of the jobs (including their <code>jobId</code>) that have a status of <code>Submitted</code>, use the <a>ListJobsByStatus</a> API action.</p></param>
		public async Task CancelJobAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/jobs/"+ (Id==null? "" : Uri.EscapeDataString(Id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The ReadJob operation returns detailed information about a job.
		/// ReadJob /2012-09-25/jobs/{Id}
		/// </summary>
		/// <param name="Id">The identifier of the job for which you want to get detailed information.</param>
		/// <returns>Success</returns>
		public async Task<ReadJobResponse> ReadJobAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/jobs/"+ (Id==null? "" : Uri.EscapeDataString(Id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ReadJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>When you create a job, Elastic Transcoder returns JSON data that includes the values that you specified plus information about the job that is created.</p> <p>If you have specified more than one output for your jobs (for example, one output for the Kindle Fire and another output for the Apple iPhone 4s), you currently must use the Elastic Transcoder API to list the jobs (as opposed to the AWS Console).</p>
		/// CreateJob /2012-09-25/jobs
		/// </summary>
		public async Task CreateJobAsync(CreateJobBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/jobs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The CreatePipeline operation creates a pipeline with settings that you specify.
		/// CreatePipeline /2012-09-25/pipelines
		/// </summary>
		public async Task CreatePipelineAsync(CreatePipelineBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/pipelines";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The ListPipelines operation gets a list of the pipelines associated with the current AWS account.
		/// ListPipelines /2012-09-25/pipelines
		/// </summary>
		/// <param name="Ascending">To list pipelines in chronological order by the date and time that they were created, enter <code>true</code>. To list pipelines in reverse chronological order, enter <code>false</code>.</param>
		/// <param name="PageToken">When Elastic Transcoder returns more than one page of results, use <code>pageToken</code> in subsequent <code>GET</code> requests to get each successive page of results. </param>
		/// <returns>Success</returns>
		public async Task<ListPipelinesResponse> ListPipelinesAsync(string Ascending, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/pipelines?Ascending=" + (Ascending==null? "" : Uri.EscapeDataString(Ascending))+"&PageToken=" + (PageToken==null? "" : Uri.EscapeDataString(PageToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPipelinesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>The CreatePreset operation creates a preset with settings that you specify.</p> <important> <p>Elastic Transcoder checks the CreatePreset settings to ensure that they meet Elastic Transcoder requirements and to determine whether they comply with H.264 standards. If your settings are not valid for Elastic Transcoder, Elastic Transcoder returns an HTTP 400 response (<code>ValidationException</code>) and does not create the preset. If the settings are valid for Elastic Transcoder but aren't strictly compliant with the H.264 standard, Elastic Transcoder creates the preset and returns a warning message in the response. This helps you determine whether your settings comply with the H.264 standard while giving you greater flexibility with respect to the video that Elastic Transcoder produces.</p> </important> <p>Elastic Transcoder uses the H.264 video-compression format. For more information, see the International Telecommunication Union publication <i>Recommendation ITU-T H.264: Advanced video coding for generic audiovisual services</i>.</p>
		/// CreatePreset /2012-09-25/presets
		/// </summary>
		public async Task CreatePresetAsync(CreatePresetBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/presets";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The ListPresets operation gets a list of the default presets included with Elastic Transcoder and the presets that you've added in an AWS region.
		/// ListPresets /2012-09-25/presets
		/// </summary>
		/// <param name="Ascending">To list presets in chronological order by the date and time that they were created, enter <code>true</code>. To list presets in reverse chronological order, enter <code>false</code>.</param>
		/// <param name="PageToken">When Elastic Transcoder returns more than one page of results, use <code>pageToken</code> in subsequent <code>GET</code> requests to get each successive page of results. </param>
		/// <returns>Success</returns>
		public async Task<ListPresetsResponse> ListPresetsAsync(string Ascending, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/presets?Ascending=" + (Ascending==null? "" : Uri.EscapeDataString(Ascending))+"&PageToken=" + (PageToken==null? "" : Uri.EscapeDataString(PageToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPresetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>The DeletePipeline operation removes a pipeline.</p> <p> You can only delete a pipeline that has never been used or that is not currently in use (doesn't contain any active jobs). If the pipeline is currently in use, <code>DeletePipeline</code> returns an error. </p>
		/// DeletePipeline /2012-09-25/pipelines/{Id}
		/// </summary>
		/// <param name="Id">The identifier of the pipeline that you want to delete.</param>
		public async Task DeletePipelineAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/pipelines/"+ (Id==null? "" : Uri.EscapeDataString(Id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The ReadPipeline operation gets detailed information about a pipeline.
		/// ReadPipeline /2012-09-25/pipelines/{Id}
		/// </summary>
		/// <param name="Id">The identifier of the pipeline to read.</param>
		/// <returns>Success</returns>
		public async Task<ReadPipelineResponse> ReadPipelineAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/pipelines/"+ (Id==null? "" : Uri.EscapeDataString(Id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ReadPipelineResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Use the <code>UpdatePipeline</code> operation to update settings for a pipeline.</p> <important> <p>When you change pipeline settings, your changes take effect immediately. Jobs that you have already submitted and that Elastic Transcoder has not started to process are affected in addition to jobs that you submit after you change settings. </p> </important>
		/// UpdatePipeline /2012-09-25/pipelines/{Id}
		/// </summary>
		/// <param name="Id">The ID of the pipeline that you want to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdatePipelineResponse> UpdatePipelineAsync(string Id, UpdatePipelineBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/pipelines/"+ (Id==null? "" : Uri.EscapeDataString(Id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdatePipelineResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>The DeletePreset operation removes a preset that you've added in an AWS region.</p> <note> <p>You can't delete the default presets that are included with Elastic Transcoder.</p> </note>
		/// DeletePreset /2012-09-25/presets/{Id}
		/// </summary>
		/// <param name="Id">The identifier of the preset for which you want to get detailed information.</param>
		public async Task DeletePresetAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/presets/"+ (Id==null? "" : Uri.EscapeDataString(Id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The ReadPreset operation gets detailed information about a preset.
		/// ReadPreset /2012-09-25/presets/{Id}
		/// </summary>
		/// <param name="Id">The identifier of the preset for which you want to get detailed information.</param>
		/// <returns>Success</returns>
		public async Task<ReadPresetResponse> ReadPresetAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/presets/"+ (Id==null? "" : Uri.EscapeDataString(Id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ReadPresetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>The ListJobsByPipeline operation gets a list of the jobs currently in a pipeline.</p> <p>Elastic Transcoder returns all of the jobs currently in the specified pipeline. The response body contains one element for each job that satisfies the search criteria.</p>
		/// ListJobsByPipeline /2012-09-25/jobsByPipeline/{PipelineId}
		/// </summary>
		/// <param name="PipelineId">The ID of the pipeline for which you want to get job information.</param>
		/// <param name="Ascending"> To list jobs in chronological order by the date and time that they were submitted, enter <code>true</code>. To list jobs in reverse chronological order, enter <code>false</code>. </param>
		/// <param name="PageToken"> When Elastic Transcoder returns more than one page of results, use <code>pageToken</code> in subsequent <code>GET</code> requests to get each successive page of results. </param>
		/// <returns>Success</returns>
		public async Task<ListJobsByPipelineResponse> ListJobsByPipelineAsync(string PipelineId, string Ascending, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/jobsByPipeline/"+ (PipelineId==null? "" : Uri.EscapeDataString(PipelineId))+"&Ascending=" + (Ascending==null? "" : Uri.EscapeDataString(Ascending))+"&PageToken=" + (PageToken==null? "" : Uri.EscapeDataString(PageToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListJobsByPipelineResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The ListJobsByStatus operation gets a list of jobs that have a specified status. The response body contains one element for each job that satisfies the search criteria.
		/// ListJobsByStatus /2012-09-25/jobsByStatus/{Status}
		/// </summary>
		/// <param name="Status">To get information about all of the jobs associated with the current AWS account that have a given status, specify the following status: <code>Submitted</code>, <code>Progressing</code>, <code>Complete</code>, <code>Canceled</code>, or <code>Error</code>.</param>
		/// <param name="Ascending"> To list jobs in chronological order by the date and time that they were submitted, enter <code>true</code>. To list jobs in reverse chronological order, enter <code>false</code>. </param>
		/// <param name="PageToken"> When Elastic Transcoder returns more than one page of results, use <code>pageToken</code> in subsequent <code>GET</code> requests to get each successive page of results. </param>
		/// <returns>Success</returns>
		public async Task<ListJobsByStatusResponse> ListJobsByStatusAsync(string Status, string Ascending, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/jobsByStatus/"+ (Status==null? "" : Uri.EscapeDataString(Status))+"&Ascending=" + (Ascending==null? "" : Uri.EscapeDataString(Ascending))+"&PageToken=" + (PageToken==null? "" : Uri.EscapeDataString(PageToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListJobsByStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>The TestRole operation tests the IAM role used to create the pipeline.</p> <p>The <code>TestRole</code> action lets you determine whether the IAM role you are using has sufficient permissions to let Elastic Transcoder perform tasks associated with the transcoding process. The action attempts to assume the specified IAM role, checks read access to the input and output buckets, and tries to send a test notification to Amazon SNS topics that you specify.</p>
		/// TestRole /2012-09-25/roleTests
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TestRoleResponse> TestRoleAsync(TestRoleBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/roleTests";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestRoleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>With the UpdatePipelineNotifications operation, you can update Amazon Simple Notification Service (Amazon SNS) notifications for a pipeline.</p> <p>When you update notifications for a pipeline, Elastic Transcoder returns the values that you specified in the request.</p>
		/// UpdatePipelineNotifications /2012-09-25/pipelines/{Id}/notifications
		/// </summary>
		/// <param name="Id">The identifier of the pipeline for which you want to change notification settings.</param>
		/// <returns>Success</returns>
		public async Task<UpdatePipelineNotificationsResponse> UpdatePipelineNotificationsAsync(string Id, UpdatePipelineNotificationsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/pipelines/"+ (Id==null? "" : Uri.EscapeDataString(Id))+"/notifications";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdatePipelineNotificationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>The UpdatePipelineStatus operation pauses or reactivates a pipeline, so that the pipeline stops or restarts the processing of jobs.</p> <p>Changing the pipeline status is useful if you want to cancel one or more jobs. You can't cancel jobs after Elastic Transcoder has started processing them; if you pause the pipeline to which you submitted the jobs, you have more time to get the job IDs for the jobs that you want to cancel, and to send a <a>CancelJob</a> request. </p>
		/// UpdatePipelineStatus /2012-09-25/pipelines/{Id}/status
		/// </summary>
		/// <param name="Id">The identifier of the pipeline to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdatePipelineStatusResponse> UpdatePipelineStatusAsync(string Id, UpdatePipelineStatusBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2012-09-25/pipelines/"+ (Id==null? "" : Uri.EscapeDataString(Id))+"/status";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdatePipelineStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobBody
	{
		
		/// <summary>
		/// The <code>Id</code> of the pipeline that you want Elastic Transcoder to use for transcoding. The pipeline determines several settings, including the Amazon S3 bucket from which Elastic Transcoder gets the files to transcode and the bucket into which Elastic Transcoder puts the transcoded files.
		/// Pattern: ^\d{13}-\w{6}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PipelineId { get; set; }
		
		/// <summary>
		/// Information about the file that you're transcoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Input { get; set; }
		
		/// <summary>
		/// A section of the request body that provides information about the files that are being transcoded.
		/// Maximum items: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(200)]
		public JobInput[] Inputs { get; set; }
		
		/// <summary>
		/// The <code>CreateJobOutput</code> structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Output { get; set; }
		
		/// <summary>
		///  A section of the request body that provides information about the transcoded (target) files. We recommend that you use the <code>Outputs</code> syntax instead of the <code>Output</code> syntax. 
		/// Maximum items: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public CreateJobOutput[] Outputs { get; set; }
		
		/// <summary>
		/// The value, if any, that you want Elastic Transcoder to prepend to the names of all files that this job creates, including output files, thumbnails, and playlists.
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string OutputKeyPrefix { get; set; }
		
		/// <summary>
		/// <p>If you specify a preset in <code>PresetId</code> for which the value of <code>Container</code> is fmp4 (Fragmented MP4) or ts (MPEG-TS), Playlists contains information about the master playlists that you want Elastic Transcoder to create.</p> <p>The maximum number of master playlists in a job is 30.</p>
		/// Maximum items: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public CreateJobPlaylist[] Playlists { get; set; }
		
		/// <summary>
		/// User-defined metadata that you want to associate with an Elastic Transcoder job. You specify metadata in <code>key/value</code> pairs, and you can add up to 10 <code>key/value</code> pairs per job. Elastic Transcoder does not guarantee that <code>key/value</code> pairs are returned in the same order in which you specify them.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UserMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePipelineBody
	{
		
		/// <summary>
		/// <p>The name of the pipeline. We recommend that the name be unique within the AWS account, but uniqueness is not enforced.</p> <p>Constraints: Maximum 40 characters.</p>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The Amazon S3 bucket in which you saved the media files that you want to transcode.
		/// Pattern: ^(\w|\.|-){1,255}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InputBucket { get; set; }
		
		/// <summary>
		/// <p>The Amazon S3 bucket in which you want Elastic Transcoder to save the transcoded files. (Use this, or use ContentConfig:Bucket plus ThumbnailConfig:Bucket.)</p> <p>Specify this value when all of the following are true:</p> <ul> <li> <p>You want to save transcoded files, thumbnails (if any), and playlists (if any) together in one bucket.</p> </li> <li> <p>You do not want to specify the users or groups who have access to the transcoded files, thumbnails, and playlists.</p> </li> <li> <p>You do not want to specify the permissions that Elastic Transcoder grants to the files. </p> <important> <p>When Elastic Transcoder saves files in <code>OutputBucket</code>, it grants full control over the files only to the AWS account that owns the role that is specified by <code>Role</code>.</p> </important> </li> <li> <p>You want to associate the transcoded files and thumbnails with the Amazon S3 Standard storage class.</p> </li> </ul> <p>If you want to save transcoded files and playlists in one bucket and thumbnails in another bucket, specify which users can access the transcoded files or the permissions the users have, or change the Amazon S3 storage class, omit <code>OutputBucket</code> and specify values for <code>ContentConfig</code> and <code>ThumbnailConfig</code> instead.</p>
		/// Pattern: ^(\w|\.|-){1,255}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OutputBucket { get; set; }
		
		/// <summary>
		/// The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to create the pipeline.
		/// Pattern: ^arn:aws:iam::\w{12}:role/.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// <p>The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.</p> <p>If you use either <code>s3</code> or <code>s3-aws-kms</code> as your <code>Encryption:Mode</code>, you don't need to provide a key with your job because a default key, known as an AWS-KMS key, is created for you automatically. You need to provide an AWS-KMS key only if you want to use a non-default AWS-KMS key, or if you are using an <code>Encryption:Mode</code> of <code>aes-cbc-pkcs7</code>, <code>aes-ctr</code>, or <code>aes-gcm</code>.</p>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string AwsKmsKeyArn { get; set; }
		
		/// <summary>
		/// <p>The Amazon Simple Notification Service (Amazon SNS) topic or topics to notify in order to report job status.</p> <important> <p>To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.</p> </important>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Notifications { get; set; }
		
		/// <summary>
		/// The <code>PipelineOutputConfig</code> structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContentConfig { get; set; }
		
		/// <summary>
		/// The <code>PipelineOutputConfig</code> structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThumbnailConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePresetBody
	{
		
		/// <summary>
		/// The name of the preset. We recommend that the name be unique within the AWS account, but uniqueness is not enforced.
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// A description of the preset.
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// The container type for the output file. Valid values include <code>flac</code>, <code>flv</code>, <code>fmp4</code>, <code>gif</code>, <code>mp3</code>, <code>mp4</code>, <code>mpg</code>, <code>mxf</code>, <code>oga</code>, <code>ogg</code>, <code>ts</code>, and <code>webm</code>.
		/// Pattern: (^mp4$)|(^ts$)|(^webm$)|(^mp3$)|(^flac$)|(^oga$)|(^ogg$)|(^fmp4$)|(^mpg$)|(^flv$)|(^gif$)|(^mxf$)|(^wav$)|(^mp2$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Container { get; set; }
		
		/// <summary>
		/// The <code>VideoParameters</code> structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Video { get; set; }
		
		/// <summary>
		/// Parameters required for transcoding audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Audio { get; set; }
		
		/// <summary>
		/// Thumbnails for videos.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Thumbnails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePipelineBody
	{
		
		/// <summary>
		/// <p>The name of the pipeline. We recommend that the name be unique within the AWS account, but uniqueness is not enforced.</p> <p>Constraints: Maximum 40 characters</p>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks.
		/// Pattern: ^(\w|\.|-){1,255}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InputBucket { get; set; }
		
		/// <summary>
		/// The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline.
		/// Pattern: ^arn:aws:iam::\w{12}:role/.+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// <p>The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.</p> <p>If you use either <code>s3</code> or <code>s3-aws-kms</code> as your <code>Encryption:Mode</code>, you don't need to provide a key with your job because a default key, known as an AWS-KMS key, is created for you automatically. You need to provide an AWS-KMS key only if you want to use a non-default AWS-KMS key, or if you are using an <code>Encryption:Mode</code> of <code>aes-cbc-pkcs7</code>, <code>aes-ctr</code>, or <code>aes-gcm</code>.</p>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string AwsKmsKeyArn { get; set; }
		
		/// <summary>
		/// <p>The Amazon Simple Notification Service (Amazon SNS) topic or topics to notify in order to report job status.</p> <important> <p>To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.</p> </important>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Notifications { get; set; }
		
		/// <summary>
		/// The <code>PipelineOutputConfig</code> structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContentConfig { get; set; }
		
		/// <summary>
		/// The <code>PipelineOutputConfig</code> structure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThumbnailConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestRoleBody
	{
		
		/// <summary>
		/// The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to test.
		/// Pattern: ^arn:aws:iam::\w{12}:role/.+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// The Amazon S3 bucket that contains media files to be transcoded. The action attempts to read from this bucket.
		/// Pattern: ^(\w|\.|-){1,255}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InputBucket { get; set; }
		
		/// <summary>
		/// The Amazon S3 bucket that Elastic Transcoder writes transcoded media files to. The action attempts to read from this bucket.
		/// Pattern: ^(\w|\.|-){1,255}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OutputBucket { get; set; }
		
		/// <summary>
		/// The ARNs of one or more Amazon Simple Notification Service (Amazon SNS) topics that you want the action to send a test notification to.
		/// Maximum items: 30
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public SnsTopic[] Topics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePipelineNotificationsBody
	{
		
		/// <summary>
		/// <p>The Amazon Simple Notification Service (Amazon SNS) topic or topics to notify in order to report job status.</p> <important> <p>To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.</p> </important>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Notifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePipelineStatusBody
	{
		
		/// <summary>
		/// <p>The desired status of the pipeline:</p> <ul> <li> <p> <code>Active</code>: The pipeline is processing jobs.</p> </li> <li> <p> <code>Paused</code>: The pipeline is not currently processing jobs.</p> </li> </ul>
		/// Pattern: (^Active$)|(^Paused$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
