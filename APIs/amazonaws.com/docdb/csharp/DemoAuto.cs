//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Metadata assigned to an Amazon DocumentDB resource consisting of a key-value pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplyPendingMaintenanceActionResult
	{
		
		/// <summary>
		/// Represents the output of <a>ApplyPendingMaintenanceAction</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourcePendingMaintenanceActions ResourcePendingMaintenanceActions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyDBClusterParameterGroupResult
	{
		
		/// <summary>
		/// Detailed information about a cluster parameter group. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBClusterParameterGroup DBClusterParameterGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyDBClusterSnapshotResult
	{
		
		/// <summary>
		/// Detailed information about a cluster snapshot. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBClusterSnapshot DBClusterSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBClusterResult
	{
		
		/// <summary>
		/// Detailed information about a cluster. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBClusterParameterGroupResult
	{
		
		/// <summary>
		/// Detailed information about a cluster parameter group. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBClusterParameterGroup DBClusterParameterGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBClusterSnapshotResult
	{
		
		/// <summary>
		/// Detailed information about a cluster snapshot. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBClusterSnapshot DBClusterSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBInstanceResult
	{
		
		/// <summary>
		/// Detailed information about an instance. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBInstance DBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBSubnetGroupResult
	{
		
		/// <summary>
		/// Detailed information about a subnet group. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBSubnetGroup DBSubnetGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBClusterResult
	{
		
		/// <summary>
		/// Detailed information about a cluster. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBClusterSnapshotResult
	{
		
		/// <summary>
		/// Detailed information about a cluster snapshot. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBClusterSnapshot DBClusterSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBInstanceResult
	{
		
		/// <summary>
		/// Detailed information about an instance. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBInstance DBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CertificateMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Certificate[] Certificates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p>A named set of filter values, used to return a more specific list of results. You can use a filter to match a set of resources by specific criteria, such as IDs.</p> <p>Wildcards are not supported in filters.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Filter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] Values { get; set; }
	}
	
	/// <summary>
	/// Represents the output of <a>DBClusterParameterGroups</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterParameterGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBClusterParameterGroup[] DBClusterParameterGroups { get; set; }
	}
	
	/// <summary>
	/// Represents the output of <a>DBClusterParameterGroup</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterParameterGroupDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBClusterSnapshotAttributesResult
	{
		
		/// <summary>
		/// Detailed information about the attributes that are associated with a cluster snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBClusterSnapshotAttributesResult DBClusterSnapshotAttributesResult { get; set; }
	}
	
	/// <summary>
	/// Represents the output of <a>DescribeDBClusterSnapshots</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterSnapshotMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBClusterSnapshot[] DBClusterSnapshots { get; set; }
	}
	
	/// <summary>
	/// Represents the output of <a>DescribeDBClusters</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBCluster[] DBClusters { get; set; }
	}
	
	/// <summary>
	/// Represents the output of <a>DescribeDBEngineVersions</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBEngineVersionMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBEngineVersion[] DBEngineVersions { get; set; }
	}
	
	/// <summary>
	/// Represents the output of <a>DescribeDBInstances</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBInstanceMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBInstance[] DBInstances { get; set; }
	}
	
	/// <summary>
	/// Represents the output of <a>DescribeDBSubnetGroups</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBSubnetGroupMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBSubnetGroup[] DBSubnetGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEngineDefaultClusterParametersResult
	{
		
		/// <summary>
		/// Contains the result of a successful invocation of the <code>DescribeEngineDefaultClusterParameters</code> operation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EngineDefaults EngineDefaults { get; set; }
	}
	
	/// <summary>
	/// Represents the output of <a>DescribeEventCategories</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventCategoriesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventCategoriesMap[] EventCategoriesMapList { get; set; }
	}
	
	/// <summary>
	/// Represents the output of <a>DescribeEvents</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Event[] Events { get; set; }
	}
	
	/// <summary>
	/// Represents the output of <a>DescribeOrderableDBInstanceOptions</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrderableDBInstanceOptionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrderableDBInstanceOption[] OrderableDBInstanceOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents the output of <a>DescribePendingMaintenanceActions</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PendingMaintenanceActionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourcePendingMaintenanceActions[] PendingMaintenanceActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FailoverDBClusterResult
	{
		
		/// <summary>
		/// Detailed information about a cluster. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	/// <summary>
	/// Represents the output of <a>ListTagsForResource</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagListMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBClusterResult
	{
		
		/// <summary>
		/// Detailed information about a cluster. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	/// <summary>
	/// Contains the name of a cluster parameter group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterParameterGroupNameMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
	}
	
	/// <summary>
	/// Detailed information about an individual parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Parameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApplyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllowedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsModifiable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinimumEngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterApplyMethod ApplyMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ParameterApplyMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		immediate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending-reboot = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBClusterSnapshotAttributeResult
	{
		
		/// <summary>
		/// Detailed information about the attributes that are associated with a cluster snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBClusterSnapshotAttributesResult DBClusterSnapshotAttributesResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBInstanceResult
	{
		
		/// <summary>
		/// Detailed information about an instance. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBInstance DBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBSubnetGroupResult
	{
		
		/// <summary>
		/// Detailed information about a subnet group. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBSubnetGroup DBSubnetGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebootDBInstanceResult
	{
		
		/// <summary>
		/// Detailed information about an instance. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBInstance DBInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreDBClusterFromSnapshotResult
	{
		
		/// <summary>
		/// Detailed information about a cluster. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreDBClusterToPointInTimeResult
	{
		
		/// <summary>
		/// Detailed information about a cluster. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartDBClusterResult
	{
		
		/// <summary>
		/// Detailed information about a cluster. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopDBClusterResult
	{
		
		/// <summary>
		/// Detailed information about a cluster. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBCluster DBCluster { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>AddTagsToResource</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddTagsToResourceMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ApplyMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		immediate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending-reboot = 1,
	}
	
	/// <summary>
	/// Represents the input to <a>ApplyPendingMaintenanceAction</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplyPendingMaintenanceActionMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ApplyAction { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OptInType { get; set; }
	}
	
	/// <summary>
	/// Represents the output of <a>ApplyPendingMaintenanceAction</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourcePendingMaintenanceActions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PendingMaintenanceAction[] PendingMaintenanceActionDetails { get; set; }
	}
	
	/// <summary>
	/// Information about an Availability Zone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailabilityZone
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A certificate authority (CA) certificate for an AWS account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Certificate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Thumbprint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValidFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValidTill { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
	}
	
	/// <summary>
	/// <p>The configuration setting for the log types to be enabled for export to Amazon CloudWatch Logs for a specific instance or cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs are exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the engine that is being used.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudwatchLogsExportConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EnableLogTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] DisableLogTypes { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>CopyDBClusterParameterGroup</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyDBClusterParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceDBClusterParameterGroupIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetDBClusterParameterGroupIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetDBClusterParameterGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Detailed information about a cluster parameter group. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterParameterGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupArn { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>CopyDBClusterSnapshot</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyDBClusterSnapshotMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceDBClusterSnapshotIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetDBClusterSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreSignedUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Detailed information about a cluster snapshot. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterSnapshot
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SnapshotCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ClusterCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PercentProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> StorageEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterSnapshotArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceDBClusterSnapshotArn { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>CreateDBCluster</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBClusterMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> StorageEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EnableCloudwatchLogsExports { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtection { get; set; }
	}
	
	/// <summary>
	/// Represents the input of <a>CreateDBClusterParameterGroup</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBClusterParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Detailed information about a cluster. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBCluster
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PercentProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EarliestRestorableTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReaderEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LatestRestorableTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBClusterMember[] DBClusterMembers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcSecurityGroupMembership[] VpcSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostedZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> StorageEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DbClusterResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBClusterRole[] AssociatedRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ClusterCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EnabledCloudwatchLogsExports { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtection { get; set; }
	}
	
	/// <summary>
	/// Represents the input of <a>CreateDBClusterSnapshot</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBClusterSnapshotMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterSnapshotIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>CreateDBInstance</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBInstanceMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PromotionTier { get; set; }
	}
	
	/// <summary>
	/// Detailed information about an instance. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBInstance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceStatus { get; set; }
		
		/// <summary>
		/// Network information for accessing a cluster or instance. Client programs must specify a valid endpoint to access these Amazon DocumentDB resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Endpoint Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> InstanceCreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcSecurityGroupMembership[] VpcSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// Detailed information about a subnet group. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DBSubnetGroup DBSubnetGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		/// <summary>
		///  One or more modified settings for an instance. These modified settings have been requested, but haven't been applied yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PendingModifiedValues PendingModifiedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LatestRestorableTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBInstanceStatusInfo[] StatusInfos { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> StorageEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DbiResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CACertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PromotionTier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EnabledCloudwatchLogsExports { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>CreateDBSubnetGroup</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDBSubnetGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupDescription { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Detailed information about a subnet group. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBSubnetGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetGroupStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Subnet[] Subnets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupArn { get; set; }
	}
	
	/// <summary>
	/// Contains information about an instance that is part of a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterMember
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsClusterWriter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PromotionTier { get; set; }
	}
	
	/// <summary>
	/// Describes an AWS Identity and Access Management (IAM) role that is associated with a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterRole
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// <p>Contains the name and values of a manual cluster snapshot attribute.</p> <p>Manual cluster snapshot attributes are used to authorize other AWS accounts to restore a manual cluster snapshot.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterSnapshotAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AttributeValues { get; set; }
	}
	
	/// <summary>
	/// Detailed information about the attributes that are associated with a cluster snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBClusterSnapshotAttributesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DBClusterSnapshotAttribute[] DBClusterSnapshotAttributes { get; set; }
	}
	
	/// <summary>
	///  Detailed information about an engine version. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBEngineVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBEngineDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBEngineVersionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpgradeTarget[] ValidUpgradeTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ExportableLogTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SupportsLogExportsToCloudwatchLogs { get; set; }
	}
	
	/// <summary>
	/// Network information for accessing a cluster or instance. Client programs must specify a valid endpoint to access these Amazon DocumentDB resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Endpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostedZoneId { get; set; }
	}
	
	/// <summary>
	///  One or more modified settings for an instance. These modified settings have been requested, but haven't been applied yet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PendingModifiedValues
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AllocatedStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAZ { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StorageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CACertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		/// <summary>
		/// A list of the log types whose configuration is still pending. These log types are in the process of being activated or deactivated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PendingCloudwatchLogsExports PendingCloudwatchLogsExports { get; set; }
	}
	
	/// <summary>
	/// Provides a list of status information for an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DBInstanceStatusInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Normal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>DeleteDBCluster</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipFinalSnapshot { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FinalDBSnapshotIdentifier { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>DeleteDBClusterParameterGroup</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBClusterParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>DeleteDBClusterSnapshot</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBClusterSnapshotMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterSnapshotIdentifier { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>DeleteDBInstance</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBInstanceMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>DeleteDBSubnetGroup</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDBSubnetGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeCertificatesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>DescribeDBClusterParameterGroups</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBClusterParameterGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>DescribeDBClusterParameters</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBClusterParametersMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>DescribeDBClusterSnapshotAttributes</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBClusterSnapshotAttributesMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterSnapshotIdentifier { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>DescribeDBClusterSnapshots</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBClusterSnapshotsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterSnapshotIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeShared { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludePublic { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>DescribeDBClusters</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBClustersMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>DescribeDBEngineVersions</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBEngineVersionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ListSupportedCharacterSets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ListSupportedTimezones { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>DescribeDBInstances</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBInstancesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>DescribeDBSubnetGroups</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDBSubnetGroupsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>DescribeEngineDefaultClusterParameters</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEngineDefaultClusterParametersMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the result of a successful invocation of the <code>DescribeEngineDefaultClusterParameters</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EngineDefaults
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>DescribeEventCategories</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEventCategoriesMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-parameter-group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-security-group = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-snapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-cluster = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-cluster-snapshot = 5,
	}
	
	/// <summary>
	/// Represents the input to <a>DescribeEvents</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEventsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeEventsMessageSourceType SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeEventsMessageSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-parameter-group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-security-group = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-snapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-cluster = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-cluster-snapshot = 5,
	}
	
	/// <summary>
	/// Represents the input to <a>DescribeOrderableDBInstanceOptions</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeOrderableDBInstanceOptionsMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Vpc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>DescribePendingMaintenanceActions</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePendingMaintenanceActionsMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxRecords { get; set; }
	}
	
	/// <summary>
	/// Detailed information about an event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Event
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventSourceType SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EventCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-parameter-group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-security-group = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-snapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-cluster = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		db-cluster-snapshot = 5,
	}
	
	/// <summary>
	/// An event source type, accompanied by one or more event category names.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventCategoriesMap
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EventCategories { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>FailoverDBCluster</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FailoverDBClusterMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetDBInstanceIdentifier { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>ListTagsForResource</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>ModifyDBCluster</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NewDBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplyImmediately { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackupRetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		/// <summary>
		/// <p>The configuration setting for the log types to be enabled for export to Amazon CloudWatch Logs for a specific instance or cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs are exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the engine that is being used.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudwatchLogsExportConfiguration CloudwatchLogsExportConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtection { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>ModifyDBClusterParameterGroup</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBClusterParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>ModifyDBClusterSnapshotAttribute</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBClusterSnapshotAttributeMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterSnapshotIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ValuesToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ValuesToRemove { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>ModifyDBInstance</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBInstanceMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplyImmediately { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NewDBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CACertificateIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PromotionTier { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>ModifyDBSubnetGroup</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDBSubnetGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupDescription { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] SubnetIds { get; set; }
	}
	
	/// <summary>
	/// The options that are available for an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrderableDBInstanceOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Vpc { get; set; }
	}
	
	/// <summary>
	/// A list of the log types whose configuration is still pending. These log types are in the process of being activated or deactivated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PendingCloudwatchLogsExports
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] LogTypesToEnable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] LogTypesToDisable { get; set; }
	}
	
	/// <summary>
	/// Provides information about a pending maintenance action for a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PendingMaintenanceAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AutoAppliedAfterDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ForcedApplyDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptInStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CurrentApplyDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>RebootDBInstance</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebootDBInstanceMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBInstanceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceFailover { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>RemoveTagsFromResource</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveTagsFromResourceMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] TagKeys { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>ResetDBClusterParameterGroup</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResetDBClusterParameterGroupMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ResetAllParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>RestoreDBClusterFromSnapshot</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreDBClusterFromSnapshotMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AvailabilityZones { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EnableCloudwatchLogsExports { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtection { get; set; }
	}
	
	/// <summary>
	/// Represents the input to <a>RestoreDBClusterToPointInTime</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreDBClusterToPointInTimeMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceDBClusterIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RestoreToTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseLatestRestorableTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DBSubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] VpcSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] EnableCloudwatchLogsExports { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeletionProtection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartDBClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopDBClusterMessage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DBClusterIdentifier { get; set; }
	}
	
	/// <summary>
	///  Detailed information about a subnet. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Subnet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetIdentifier { get; set; }
		
		/// <summary>
		/// Information about an Availability Zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone SubnetAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetStatus { get; set; }
	}
	
	/// <summary>
	/// The version of the database engine that an instance can be upgraded to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpgradeTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsMajorVersionUpgrade { get; set; }
	}
	
	/// <summary>
	/// Used as a response element for queries on virtual private cloud (VPC) security group membership.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcSecurityGroupMembership
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcSecurityGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with cost allocation reporting to track costs that are associated with Amazon DocumentDB resources. or in a <code>Condition</code> statement in an AWS Identity and Access Management (IAM) policy for Amazon DocumentDB.
		/// GET_AddTagsToResource /#Action=AddTagsToResource
		/// </summary>
		/// <param name="ResourceName">The Amazon DocumentDB resource that the tags are added to. This value is an Amazon Resource Name (ARN).</param>
		/// <param name="Tags">The tags to be assigned to the Amazon DocumentDB resource. </param>
		/// <returns>Success</returns>
		public async Task GET_AddTagsToResourceAsync(string ResourceName, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=AddTagsToResource?ResourceName=" + (ResourceName==null? "" : Uri.EscapeDataString(ResourceName))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies a pending maintenance action to a resource (for example, to a DB instance).
		/// GET_ApplyPendingMaintenanceAction /#Action=ApplyPendingMaintenanceAction
		/// </summary>
		/// <param name="ResourceIdentifier">The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to.</param>
		/// <param name="ApplyAction"><p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code> </p></param>
		/// <param name="OptInType"><p>A value that specifies the type of opt-in request or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_ApplyPendingMaintenanceActionAsync(string ResourceIdentifier, string ApplyAction, string OptInType, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ApplyPendingMaintenanceAction?ResourceIdentifier=" + (ResourceIdentifier==null? "" : Uri.EscapeDataString(ResourceIdentifier))+"&ApplyAction=" + (ApplyAction==null? "" : Uri.EscapeDataString(ApplyAction))+"&OptInType=" + (OptInType==null? "" : Uri.EscapeDataString(OptInType))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Copies the specified cluster parameter group.
		/// GET_CopyDBClusterParameterGroup /#Action=CopyDBClusterParameterGroup
		/// </summary>
		/// <param name="SourceDBClusterParameterGroupIdentifier"><p>The identifier or Amazon Resource Name (ARN) for the source cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid cluster parameter group.</p> </li> <li> <p>If the source cluster parameter group is in the same AWS Region as the copy, specify a valid parameter group identifier; for example, <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source parameter group is in a different AWS Region than the copy, specify a valid cluster parameter group ARN; for example, <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul></param>
		/// <param name="TargetDBClusterParameterGroupIdentifier"><p>The identifier for the copied cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p></param>
		/// <param name="TargetDBClusterParameterGroupDescription">A description for the copied cluster parameter group.</param>
		/// <param name="Tags">The tags that are to be assigned to the parameter group.</param>
		/// <returns>Success</returns>
		public async Task GET_CopyDBClusterParameterGroupAsync(string SourceDBClusterParameterGroupIdentifier, string TargetDBClusterParameterGroupIdentifier, string TargetDBClusterParameterGroupDescription, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CopyDBClusterParameterGroup?SourceDBClusterParameterGroupIdentifier=" + (SourceDBClusterParameterGroupIdentifier==null? "" : Uri.EscapeDataString(SourceDBClusterParameterGroupIdentifier))+"&TargetDBClusterParameterGroupIdentifier=" + (TargetDBClusterParameterGroupIdentifier==null? "" : Uri.EscapeDataString(TargetDBClusterParameterGroupIdentifier))+"&TargetDBClusterParameterGroupDescription=" + (TargetDBClusterParameterGroupDescription==null? "" : Uri.EscapeDataString(TargetDBClusterParameterGroupDescription))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Copies a snapshot of a cluster.</p> <p>To copy a cluster snapshot from a shared manual cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared cluster snapshot.</p> <p>To cancel the copy operation after it is in progress, delete the target cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in the <i>copying</i> status.</p>
		/// GET_CopyDBClusterSnapshot /#Action=CopyDBClusterSnapshot
		/// </summary>
		/// <param name="SourceDBClusterSnapshotIdentifier"><p>The identifier of the cluster snapshot to copy. This parameter is not case sensitive.</p> <p>You can't copy an encrypted, shared cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid cluster snapshot ARN.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p></param>
		/// <param name="TargetDBClusterSnapshotIdentifier"><p>The identifier of the new cluster snapshot to create from the source cluster snapshot. This parameter is not case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p></param>
		/// <param name="KmsKeyId"><p>The AWS KMS key ID for an encrypted cluster snapshot. The AWS KMS key ID is the Amazon Resource Name (ARN), AWS KMS key identifier, or the AWS KMS key alias for the AWS KMS encryption key. </p> <p>If you copy an encrypted cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new AWS KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the cluster snapshot is encrypted with the same AWS KMS key as the source cluster snapshot. </p> <p>If you copy an encrypted cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted cluster snapshot to another AWS Region, set <code>KmsKeyId</code> to the AWS KMS key ID that you want to use to encrypt the copy of the cluster snapshot in the destination Region. AWS KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one Region in another Region.</p> <p>If you copy an unencrypted cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p></param>
		/// <param name="PreSignedUrl"><p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source cluster snapshot to copy. You must use the <code>PreSignedUrl</code> parameter when copying an encrypted cluster snapshot from another AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The presigned URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The cluster snapshot identifier for the encrypted cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:my-cluster-snapshot-20161115</code>.</p> </li> </ul></param>
		/// <param name="CopyTags">Set to <code>true</code> to copy all tags from the source cluster snapshot to the target cluster snapshot, and otherwise <code>false</code>. The default is <code>false</code>.</param>
		/// <param name="Tags">The tags to be assigned to the cluster snapshot.</param>
		/// <returns>Success</returns>
		public async Task GET_CopyDBClusterSnapshotAsync(string SourceDBClusterSnapshotIdentifier, string TargetDBClusterSnapshotIdentifier, string KmsKeyId, string PreSignedUrl, bool CopyTags, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CopyDBClusterSnapshot?SourceDBClusterSnapshotIdentifier=" + (SourceDBClusterSnapshotIdentifier==null? "" : Uri.EscapeDataString(SourceDBClusterSnapshotIdentifier))+"&TargetDBClusterSnapshotIdentifier=" + (TargetDBClusterSnapshotIdentifier==null? "" : Uri.EscapeDataString(TargetDBClusterSnapshotIdentifier))+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&PreSignedUrl=" + (PreSignedUrl==null? "" : Uri.EscapeDataString(PreSignedUrl))+"&CopyTags="+CopyTags+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Amazon DocumentDB cluster.
		/// GET_CreateDBCluster /#Action=CreateDBCluster
		/// </summary>
		/// <param name="AvailabilityZones">A list of Amazon EC2 Availability Zones that instances in the cluster can be created in.</param>
		/// <param name="BackupRetentionPeriod"><p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35.</p> </li> </ul></param>
		/// <param name="DBClusterIdentifier"><p>The cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster</code> </p></param>
		/// <param name="DBClusterParameterGroupName"> The name of the cluster parameter group to associate with this cluster.</param>
		/// <param name="VpcSecurityGroupIds">A list of EC2 VPC security groups to associate with this cluster.</param>
		/// <param name="DBSubnetGroupName"><p>A subnet group to associate with this cluster.</p> <p>Constraints: Must match the name of an existing <code>DBSubnetGroup</code>. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p></param>
		/// <param name="Engine"><p>The name of the database engine to be used for this cluster.</p> <p>Valid values: <code>docdb</code> </p></param>
		/// <param name="EngineVersion">The version number of the database engine to use.</param>
		/// <param name="Port">The port number on which the instances in the cluster accept connections.</param>
		/// <param name="MasterUsername"><p>The name of the master user for the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be from 1 to 63 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot be a reserved word for the chosen database engine.</p> </li> </ul></param>
		/// <param name="MasterUserPassword"><p>The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote ("), or the "at" symbol (@).</p> <p>Constraints: Must contain from 8 to 100 characters.</p></param>
		/// <param name="PreferredBackupWindow"><p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul></param>
		/// <param name="PreferredMaintenanceWindow"><p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.</p> <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p>Constraints: Minimum 30-minute window.</p></param>
		/// <param name="Tags">The tags to be assigned to the cluster.</param>
		/// <param name="StorageEncrypted">Specifies whether the cluster is encrypted.</param>
		/// <param name="KmsKeyId"><p>The AWS KMS key identifier for an encrypted cluster.</p> <p>The AWS KMS key identifier is the Amazon Resource Name (ARN) for the AWS KMS encryption key. If you are creating a cluster using the same AWS account that owns the AWS KMS encryption key that is used to encrypt the new cluster, you can use the AWS KMS key alias instead of the ARN for the AWS KMS encryption key.</p> <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon DocumentDB uses the encryption key that is used to encrypt the source. Otherwise, Amazon DocumentDB uses your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is <code>true</code> and <code>ReplicationSourceIdentifier</code> is not specified, Amazon DocumentDB uses your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a replica of an encrypted cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the replica in that AWS Region.</p></param>
		/// <param name="EnableCloudwatchLogsExports">A list of log types that need to be enabled for exporting to Amazon CloudWatch Logs.</param>
		/// <param name="DeletionProtection">Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateDBClusterAsync(
					String[] AvailabilityZones, 
					int BackupRetentionPeriod, 
					string DBClusterIdentifier, 
					string DBClusterParameterGroupName, 
					String[] VpcSecurityGroupIds, 
					string DBSubnetGroupName, 
					string Engine, 
					string EngineVersion, 
					int Port, 
					string MasterUsername, 
					string MasterUserPassword, 
					string PreferredBackupWindow, 
					string PreferredMaintenanceWindow, 
					Tag[] Tags, 
					bool StorageEncrypted, 
					string KmsKeyId, 
					String[] EnableCloudwatchLogsExports, 
					bool DeletionProtection, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateDBCluster?"+String.Join("&", AvailabilityZones.Select(z => $"AvailabilityZones={z}"))+"&BackupRetentionPeriod="+BackupRetentionPeriod+"&DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&"+String.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={z}"))+"&DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : Uri.EscapeDataString(DBSubnetGroupName))+"&Engine=" + (Engine==null? "" : Uri.EscapeDataString(Engine))+"&EngineVersion=" + (EngineVersion==null? "" : Uri.EscapeDataString(EngineVersion))+"&Port="+Port+"&MasterUsername=" + (MasterUsername==null? "" : Uri.EscapeDataString(MasterUsername))+"&MasterUserPassword=" + (MasterUserPassword==null? "" : Uri.EscapeDataString(MasterUserPassword))+"&PreferredBackupWindow=" + (PreferredBackupWindow==null? "" : Uri.EscapeDataString(PreferredBackupWindow))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : Uri.EscapeDataString(PreferredMaintenanceWindow))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&StorageEncrypted="+StorageEncrypted+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&"+String.Join("&", EnableCloudwatchLogsExports.Select(z => $"EnableCloudwatchLogsExports={z}"))+"&DeletionProtection="+DeletionProtection+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new cluster parameter group.</p> <p>Parameters in a cluster parameter group apply to all of the instances in a DB cluster.</p> <p>A cluster parameter group is initially created with the default parameters for the database engine used by instances in the cluster. To provide custom values for any of the parameters, you must modify the group after you create it. After you create a DB cluster parameter group, you must associate it with your cluster. For the new DB cluster parameter group and associated settings to take effect, you must then reboot the instances in the cluster without failover.</p> <important> <p>After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the cluster parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter.</p> </important>
		/// GET_CreateDBClusterParameterGroup /#Action=CreateDBClusterParameterGroup
		/// </summary>
		/// <param name="DBClusterParameterGroupName"><p>The name of the cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must not match the name of an existing <code>DBClusterParameterGroup</code>.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note></param>
		/// <param name="DBParameterGroupFamily">The cluster parameter group family name.</param>
		/// <param name="Description">The description for the cluster parameter group.</param>
		/// <param name="Tags">The tags to be assigned to the cluster parameter group.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateDBClusterParameterGroupAsync(string DBClusterParameterGroupName, string DBParameterGroupFamily, string Description, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateDBClusterParameterGroup?DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&DBParameterGroupFamily=" + (DBParameterGroupFamily==null? "" : Uri.EscapeDataString(DBParameterGroupFamily))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a snapshot of a cluster.
		/// GET_CreateDBClusterSnapshot /#Action=CreateDBClusterSnapshot
		/// </summary>
		/// <param name="DBClusterSnapshotIdentifier"><p>The identifier of the cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p></param>
		/// <param name="DBClusterIdentifier"><p>The identifier of the cluster to create a snapshot for. This parameter is not case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBCluster</code>.</p> </li> </ul> <p>Example: <code>my-cluster</code> </p></param>
		/// <param name="Tags">The tags to be assigned to the cluster snapshot.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateDBClusterSnapshotAsync(string DBClusterSnapshotIdentifier, string DBClusterIdentifier, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateDBClusterSnapshot?DBClusterSnapshotIdentifier=" + (DBClusterSnapshotIdentifier==null? "" : Uri.EscapeDataString(DBClusterSnapshotIdentifier))+"&DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new instance.
		/// GET_CreateDBInstance /#Action=CreateDBInstance
		/// </summary>
		/// <param name="DBInstanceIdentifier"><p>The instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p></param>
		/// <param name="DBInstanceClass">The compute and memory capacity of the instance; for example, <code>db.r5.large</code>. </param>
		/// <param name="Engine"><p>The name of the database engine to be used for this instance.</p> <p>Valid value: <code>docdb</code> </p></param>
		/// <param name="AvailabilityZone"><p> The Amazon EC2 Availability Zone that the instance is created in.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the <code>MultiAZ</code> parameter is set to <code>true</code>. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p></param>
		/// <param name="PreferredMaintenanceWindow"><p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p>Constraints: Minimum 30-minute window.</p></param>
		/// <param name="AutoMinorVersionUpgrade"><p>Indicates that minor engine upgrades are applied automatically to the instance during the maintenance window.</p> <p>Default: <code>true</code> </p></param>
		/// <param name="Tags">The tags to be assigned to the instance. You can assign up to 10 tags to an instance.</param>
		/// <param name="DBClusterIdentifier">The identifier of the cluster that the instance will belong to.</param>
		/// <param name="PromotionTier"><p>A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid values: 0-15</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreateDBInstanceAsync(string DBInstanceIdentifier, string DBInstanceClass, string Engine, string AvailabilityZone, string PreferredMaintenanceWindow, bool AutoMinorVersionUpgrade, Tag[] Tags, string DBClusterIdentifier, int PromotionTier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateDBInstance?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : Uri.EscapeDataString(DBInstanceIdentifier))+"&DBInstanceClass=" + (DBInstanceClass==null? "" : Uri.EscapeDataString(DBInstanceClass))+"&Engine=" + (Engine==null? "" : Uri.EscapeDataString(Engine))+"&AvailabilityZone=" + (AvailabilityZone==null? "" : Uri.EscapeDataString(AvailabilityZone))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : Uri.EscapeDataString(PreferredMaintenanceWindow))+"&AutoMinorVersionUpgrade="+AutoMinorVersionUpgrade+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&PromotionTier="+PromotionTier+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the AWS Region.
		/// GET_CreateDBSubnetGroup /#Action=CreateDBSubnetGroup
		/// </summary>
		/// <param name="DBSubnetGroupName"><p>The name for the subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p></param>
		/// <param name="DBSubnetGroupDescription">The description for the subnet group.</param>
		/// <param name="SubnetIds">The Amazon EC2 subnet IDs for the subnet group.</param>
		/// <param name="Tags">The tags to be assigned to the subnet group.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateDBSubnetGroupAsync(string DBSubnetGroupName, string DBSubnetGroupDescription, String[] SubnetIds, Tag[] Tags, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateDBSubnetGroup?DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : Uri.EscapeDataString(DBSubnetGroupName))+"&DBSubnetGroupDescription=" + (DBSubnetGroupDescription==null? "" : Uri.EscapeDataString(DBSubnetGroupDescription))+"&"+String.Join("&", SubnetIds.Select(z => $"SubnetIds={z}"))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.</p> <p/>
		/// GET_DeleteDBCluster /#Action=DeleteDBCluster
		/// </summary>
		/// <param name="DBClusterIdentifier"><p>The cluster identifier for the cluster to be deleted. This parameter isn't case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing <code>DBClusterIdentifier</code>.</p> </li> </ul></param>
		/// <param name="SkipFinalSnapshot"><p> Determines whether a final cluster snapshot is created before the cluster is deleted. If <code>true</code> is specified, no cluster snapshot is created. If <code>false</code> is specified, a cluster snapshot is created before the DB cluster is deleted. </p> <note> <p>If <code>SkipFinalSnapshot</code> is <code>false</code>, you must specify a <code>FinalDBSnapshotIdentifier</code> parameter.</p> </note> <p>Default: <code>false</code> </p></param>
		/// <param name="FinalDBSnapshotIdentifier"><p> The cluster snapshot identifier of the new cluster snapshot created when <code>SkipFinalSnapshot</code> is set to <code>false</code>. </p> <note> <p> Specifying this parameter and also setting the <code>SkipFinalShapshot</code> parameter to <code>true</code> results in an error. </p> </note> <p>Constraints:</p> <ul> <li> <p>Must be from 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteDBClusterAsync(string DBClusterIdentifier, bool SkipFinalSnapshot, string FinalDBSnapshotIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteDBCluster?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&SkipFinalSnapshot="+SkipFinalSnapshot+"&FinalDBSnapshotIdentifier=" + (FinalDBSnapshotIdentifier==null? "" : Uri.EscapeDataString(FinalDBSnapshotIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a specified cluster parameter group. The cluster parameter group to be deleted can't be associated with any clusters.
		/// GET_DeleteDBClusterParameterGroup /#Action=DeleteDBClusterParameterGroup
		/// </summary>
		/// <param name="DBClusterParameterGroupName"><p>The name of the cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing cluster parameter group.</p> </li> <li> <p>You can't delete a default cluster parameter group.</p> </li> <li> <p>Cannot be associated with any clusters.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteDBClusterParameterGroupAsync(string DBClusterParameterGroupName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteDBClusterParameterGroup?DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note>
		/// GET_DeleteDBClusterSnapshot /#Action=DeleteDBClusterSnapshot
		/// </summary>
		/// <param name="DBClusterSnapshotIdentifier"><p>The identifier of the cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing cluster snapshot in the <code>available</code> state.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteDBClusterSnapshotAsync(string DBClusterSnapshotIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteDBClusterSnapshot?DBClusterSnapshotIdentifier=" + (DBClusterSnapshotIdentifier==null? "" : Uri.EscapeDataString(DBClusterSnapshotIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a previously provisioned instance.
		/// GET_DeleteDBInstance /#Action=DeleteDBInstance
		/// </summary>
		/// <param name="DBInstanceIdentifier"><p>The instance identifier for the instance to be deleted. This parameter isn't case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing instance.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteDBInstanceAsync(string DBInstanceIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteDBInstance?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : Uri.EscapeDataString(DBInstanceIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
		/// GET_DeleteDBSubnetGroup /#Action=DeleteDBSubnetGroup
		/// </summary>
		/// <param name="DBSubnetGroupName"><p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Must match the name of an existing <code>DBSubnetGroup</code>. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteDBSubnetGroupAsync(string DBSubnetGroupName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteDBSubnetGroup?DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : Uri.EscapeDataString(DBSubnetGroupName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this AWS account.
		/// GET_DescribeCertificates /#Action=DescribeCertificates
		/// </summary>
		/// <param name="CertificateIdentifier"><p>The user-supplied certificate identifier. If this parameter is specified, information for only the specified certificate is returned. If this parameter is omitted, a list of up to <code>MaxRecords</code> certificates is returned. This parameter is not case sensitive.</p> <p>Constraints</p> <ul> <li> <p>Must match an existing <code>CertificateIdentifier</code>.</p> </li> </ul></param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints:</p> <ul> <li> <p>Minimum: 20</p> </li> <li> <p>Maximum: 100</p> </li> </ul></param>
		/// <param name="Marker">An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeCertificatesAsync(string CertificateIdentifier, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeCertificates?CertificateIdentifier=" + (CertificateIdentifier==null? "" : Uri.EscapeDataString(CertificateIdentifier))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list contains only the description of the specified cluster parameter group.
		/// GET_DescribeDBClusterParameterGroups /#Action=DescribeDBClusterParameterGroups
		/// </summary>
		/// <param name="DBClusterParameterGroupName"><p>The name of a specific cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If provided, must match the name of an existing <code>DBClusterParameterGroup</code>.</p> </li> </ul></param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBClusterParameterGroupsAsync(string DBClusterParameterGroupName, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBClusterParameterGroups?DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the detailed parameter list for a particular cluster parameter group.
		/// GET_DescribeDBClusterParameters /#Action=DescribeDBClusterParameters
		/// </summary>
		/// <param name="DBClusterParameterGroupName"><p>The name of a specific cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If provided, must match the name of an existing <code>DBClusterParameterGroup</code>.</p> </li> </ul></param>
		/// <param name="Source"> A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. </param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBClusterParametersAsync(string DBClusterParameterGroupName, string Source, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBClusterParameters?DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&Source=" + (Source==null? "" : Uri.EscapeDataString(Source))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When you share snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual cluster snapshot is public and can be copied or restored by all AWS accounts.</p>
		/// GET_DescribeDBClusterSnapshotAttributes /#Action=DescribeDBClusterSnapshotAttributes
		/// </summary>
		/// <param name="DBClusterSnapshotIdentifier">The identifier for the cluster snapshot to describe the attributes for.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBClusterSnapshotAttributesAsync(string DBClusterSnapshotIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBClusterSnapshotAttributes?DBClusterSnapshotIdentifier=" + (DBClusterSnapshotIdentifier==null? "" : Uri.EscapeDataString(DBClusterSnapshotIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about cluster snapshots. This API operation supports pagination.
		/// GET_DescribeDBClusterSnapshots /#Action=DescribeDBClusterSnapshots
		/// </summary>
		/// <param name="DBClusterIdentifier"><p>The ID of the cluster to retrieve the list of cluster snapshots for. This parameter can't be used with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter is not case sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If provided, must match the identifier of an existing <code>DBCluster</code>.</p> </li> </ul></param>
		/// <param name="DBClusterSnapshotIdentifier"><p>A specific cluster snapshot identifier to describe. This parameter can't be used with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If provided, must match the identifier of an existing <code>DBClusterSnapshot</code>.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul></param>
		/// <param name="SnapshotType"><p>The type of cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all cluster snapshots that Amazon DocumentDB has automatically created for your AWS account.</p> </li> <li> <p> <code>manual</code> - Return all cluster snapshots that you have manually created for your AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual cluster snapshots that have been shared to your AWS account.</p> </li> <li> <p> <code>public</code> - Return all cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual cluster snapshots are returned. You can include shared cluster snapshots with these results by setting the <code>IncludeShared</code> parameter to <code>true</code>. You can include public cluster snapshots with these results by setting the <code>IncludePublic</code> parameter to <code>true</code>.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p></param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <param name="IncludeShared">Set to <code>true</code> to include shared manual cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise <code>false</code>. The default is <code>false</code>.</param>
		/// <param name="IncludePublic">Set to <code>true</code> to include manual cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise <code>false</code>. The default is <code>false</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBClusterSnapshotsAsync(string DBClusterIdentifier, string DBClusterSnapshotIdentifier, string SnapshotType, Filter[] Filters, int MaxRecords, string Marker, bool IncludeShared, bool IncludePublic, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBClusterSnapshots?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&DBClusterSnapshotIdentifier=" + (DBClusterSnapshotIdentifier==null? "" : Uri.EscapeDataString(DBClusterSnapshotIdentifier))+"&SnapshotType=" + (SnapshotType==null? "" : Uri.EscapeDataString(SnapshotType))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&IncludeShared="+IncludeShared+"&IncludePublic="+IncludePublic+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about provisioned Amazon DocumentDB clusters. This API operation supports pagination. For certain management features such as cluster and instance lifecycle management, Amazon DocumentDB leverages operational technology that is shared with Amazon RDS and Amazon Neptune. Use the <code>filterName=engine,Values=docdb</code> filter parameter to return only Amazon DocumentDB clusters.
		/// GET_DescribeDBClusters /#Action=DescribeDBClusters
		/// </summary>
		/// <param name="DBClusterIdentifier"><p>The user-provided cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn't case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If provided, must match an existing <code>DBClusterIdentifier</code>.</p> </li> </ul></param>
		/// <param name="Filters"><p>A filter that specifies one or more clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list only includes information about the clusters identified by these ARNs.</p> </li> </ul></param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBClustersAsync(string DBClusterIdentifier, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBClusters?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the available engines.
		/// GET_DescribeDBEngineVersions /#Action=DescribeDBEngineVersions
		/// </summary>
		/// <param name="Engine">The database engine to return.</param>
		/// <param name="EngineVersion"><p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p></param>
		/// <param name="DBParameterGroupFamily"><p>The name of a specific parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If provided, must match an existing <code>DBParameterGroupFamily</code>.</p> </li> </ul></param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <param name="DefaultOnly">Indicates that only the default version of the specified engine or engine and major version combination is returned.</param>
		/// <param name="ListSupportedCharacterSets">If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </param>
		/// <param name="ListSupportedTimezones">If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBEngineVersionsAsync(string Engine, string EngineVersion, string DBParameterGroupFamily, Filter[] Filters, int MaxRecords, string Marker, bool DefaultOnly, bool ListSupportedCharacterSets, bool ListSupportedTimezones, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBEngineVersions?Engine=" + (Engine==null? "" : Uri.EscapeDataString(Engine))+"&EngineVersion=" + (EngineVersion==null? "" : Uri.EscapeDataString(EngineVersion))+"&DBParameterGroupFamily=" + (DBParameterGroupFamily==null? "" : Uri.EscapeDataString(DBParameterGroupFamily))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&DefaultOnly="+DefaultOnly+"&ListSupportedCharacterSets="+ListSupportedCharacterSets+"&ListSupportedTimezones="+ListSupportedTimezones+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about provisioned Amazon DocumentDB instances. This API supports pagination.
		/// GET_DescribeDBInstances /#Action=DescribeDBInstances
		/// </summary>
		/// <param name="DBInstanceIdentifier"><p>The user-provided instance identifier. If this parameter is specified, information from only the specific instance is returned. This parameter isn't case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If provided, must match the identifier of an existing <code>DBInstance</code>.</p> </li> </ul></param>
		/// <param name="Filters"><p>A filter that specifies one or more instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only the information about the instances that are associated with the clusters that are identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts instance identifiers and instance ARNs. The results list includes only the information about the instances that are identified by these ARNs.</p> </li> </ul></param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBInstancesAsync(string DBInstanceIdentifier, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBInstances?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : Uri.EscapeDataString(DBInstanceIdentifier))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <code>DBSubnetGroup</code> descriptions. If a <code>DBSubnetGroupName</code> is specified, the list will contain only the descriptions of the specified <code>DBSubnetGroup</code>.
		/// GET_DescribeDBSubnetGroups /#Action=DescribeDBSubnetGroups
		/// </summary>
		/// <param name="DBSubnetGroupName">The name of the subnet group to return details for.</param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDBSubnetGroupsAsync(string DBSubnetGroupName, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDBSubnetGroups?DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : Uri.EscapeDataString(DBSubnetGroupName))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the default engine and system parameter information for the cluster database engine.
		/// GET_DescribeEngineDefaultClusterParameters /#Action=DescribeEngineDefaultClusterParameters
		/// </summary>
		/// <param name="DBParameterGroupFamily">The name of the cluster parameter group family to return the engine parameter information for.</param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEngineDefaultClusterParametersAsync(string DBParameterGroupFamily, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEngineDefaultClusterParameters?DBParameterGroupFamily=" + (DBParameterGroupFamily==null? "" : Uri.EscapeDataString(DBParameterGroupFamily))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays a list of categories for all event source types, or, if specified, for a specified source type.
		/// GET_DescribeEventCategories /#Action=DescribeEventCategories
		/// </summary>
		/// <param name="SourceType"><p>The type of source that is generating the events.</p> <p>Valid values: <code>db-instance</code>, <code>db-parameter-group</code>, <code>db-security-group</code>, <code>db-snapshot</code> </p></param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEventCategoriesAsync(string SourceType, Filter[] Filters, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEventCategories?SourceType=" + (SourceType==null? "" : Uri.EscapeDataString(SourceType))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned.
		/// GET_DescribeEvents /#Action=DescribeEvents
		/// </summary>
		/// <param name="SourceIdentifier"><p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If <code>SourceIdentifier</code> is provided, <code>SourceType</code> must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, a <code>DBInstanceIdentifier</code> must be provided.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be provided.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be provided.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be provided.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul></param>
		/// <param name="SourceType">The event source to retrieve events for. If no value is specified, all events are returned.</param>
		/// <param name="StartTime"><p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. </p> <p>Example: 2009-07-08T18:00Z</p></param>
		/// <param name="EndTime"><p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. </p> <p>Example: 2009-07-08T18:00Z</p></param>
		/// <param name="Duration"><p>The number of minutes to retrieve events for.</p> <p>Default: 60</p></param>
		/// <param name="EventCategories">A list of event categories that trigger notifications for an event notification subscription.</param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEventsAsync(string SourceIdentifier, SourceType SourceType, System.DateTimeOffset StartTime, System.DateTimeOffset EndTime, int Duration, String[] EventCategories, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeEvents?SourceIdentifier=" + (SourceIdentifier==null? "" : Uri.EscapeDataString(SourceIdentifier))+"&SourceType=" + SourceType+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Duration="+Duration+"&"+String.Join("&", EventCategories.Select(z => $"EventCategories={z}"))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of orderable instance options for the specified engine.
		/// GET_DescribeOrderableDBInstanceOptions /#Action=DescribeOrderableDBInstanceOptions
		/// </summary>
		/// <param name="Engine">The name of the engine to retrieve instance options for.</param>
		/// <param name="EngineVersion">The engine version filter value. Specify this parameter to show only the available offerings that match the specified engine version.</param>
		/// <param name="DBInstanceClass">The instance class filter value. Specify this parameter to show only the available offerings that match the specified instance class.</param>
		/// <param name="LicenseModel">The license model filter value. Specify this parameter to show only the available offerings that match the specified license model.</param>
		/// <param name="Vpc">The virtual private cloud (VPC) filter value. Specify this parameter to show only the available VPC or non-VPC offerings.</param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <param name="Marker">An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeOrderableDBInstanceOptionsAsync(string Engine, string EngineVersion, string DBInstanceClass, string LicenseModel, bool Vpc, Filter[] Filters, int MaxRecords, string Marker, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeOrderableDBInstanceOptions?Engine=" + (Engine==null? "" : Uri.EscapeDataString(Engine))+"&EngineVersion=" + (EngineVersion==null? "" : Uri.EscapeDataString(EngineVersion))+"&DBInstanceClass=" + (DBInstanceClass==null? "" : Uri.EscapeDataString(DBInstanceClass))+"&LicenseModel=" + (LicenseModel==null? "" : Uri.EscapeDataString(LicenseModel))+"&Vpc="+Vpc+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&MaxRecords="+MaxRecords+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of resources (for example, instances) that have at least one pending maintenance action.
		/// GET_DescribePendingMaintenanceActions /#Action=DescribePendingMaintenanceActions
		/// </summary>
		/// <param name="ResourceIdentifier">The ARN of a resource to return pending maintenance actions for.</param>
		/// <param name="Filters"><p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only pending maintenance actions for the clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts instance identifiers and instance ARNs. The results list includes only pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul></param>
		/// <param name="Marker">An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</param>
		/// <param name="MaxRecords"><p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DescribePendingMaintenanceActionsAsync(string ResourceIdentifier, Filter[] Filters, string Marker, int MaxRecords, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribePendingMaintenanceActions?ResourceIdentifier=" + (ResourceIdentifier==null? "" : Uri.EscapeDataString(ResourceIdentifier))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&MaxRecords="+MaxRecords+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Forces a failover for a cluster.</p> <p>A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer).</p> <p>If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.</p>
		/// GET_FailoverDBCluster /#Action=FailoverDBCluster
		/// </summary>
		/// <param name="DBClusterIdentifier"><p>A cluster identifier to force a failover for. This parameter is not case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBCluster</code>.</p> </li> </ul></param>
		/// <param name="TargetDBInstanceIdentifier"><p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Amazon DocumentDB replica in the cluster. For example, <code>mydbcluster-replica1</code>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_FailoverDBClusterAsync(string DBClusterIdentifier, string TargetDBInstanceIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=FailoverDBCluster?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&TargetDBInstanceIdentifier=" + (TargetDBInstanceIdentifier==null? "" : Uri.EscapeDataString(TargetDBInstanceIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all tags on an Amazon DocumentDB resource.
		/// GET_ListTagsForResource /#Action=ListTagsForResource
		/// </summary>
		/// <param name="ResourceName">The Amazon DocumentDB resource with tags to be listed. This value is an Amazon Resource Name (ARN).</param>
		/// <param name="Filters">This parameter is not currently supported.</param>
		/// <returns>Success</returns>
		public async Task GET_ListTagsForResourceAsync(string ResourceName, Filter[] Filters, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ListTagsForResource?ResourceName=" + (ResourceName==null? "" : Uri.EscapeDataString(ResourceName))+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
		/// GET_ModifyDBCluster /#Action=ModifyDBCluster
		/// </summary>
		/// <param name="DBClusterIdentifier"><p>The cluster identifier for the cluster that is being modified. This parameter is not case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBCluster</code>.</p> </li> </ul></param>
		/// <param name="NewDBClusterIdentifier"><p>The new cluster identifier for the cluster when renaming a cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p></param>
		/// <param name="ApplyImmediately"><p>A value that specifies whether the changes in this request and any pending changes are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the cluster. If this parameter is set to <code>false</code>, changes to the cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter affects only the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values. If you set this parameter value to <code>false</code>, the changes to the <code>NewDBClusterIdentifier</code> and <code>MasterUserPassword</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>Default: <code>false</code> </p></param>
		/// <param name="BackupRetentionPeriod"><p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35.</p> </li> </ul></param>
		/// <param name="DBClusterParameterGroupName">The name of the cluster parameter group to use for the cluster.</param>
		/// <param name="VpcSecurityGroupIds">A list of virtual private cloud (VPC) security groups that the cluster will belong to.</param>
		/// <param name="Port"><p>The port number on which the cluster accepts connections.</p> <p>Constraints: Must be a value from <code>1150</code> to <code>65535</code>. </p> <p>Default: The same port as the original cluster.</p></param>
		/// <param name="MasterUserPassword"><p>The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote ("), or the "at" symbol (@).</p> <p>Constraints: Must contain from 8 to 100 characters.</p></param>
		/// <param name="PreferredBackupWindow"><p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul></param>
		/// <param name="PreferredMaintenanceWindow"><p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p>Constraints: Minimum 30-minute window.</p></param>
		/// <param name="CloudwatchLogsExportConfiguration">The configuration setting for the log types to be enabled for export to Amazon CloudWatch Logs for a specific instance or cluster. The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs are exported (or not exported) to CloudWatch Logs.</param>
		/// <param name="EngineVersion">The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is set to <code>true</code>.</param>
		/// <param name="DeletionProtection">Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyDBClusterAsync(
					string DBClusterIdentifier, 
					string NewDBClusterIdentifier, 
					bool ApplyImmediately, 
					int BackupRetentionPeriod, 
					string DBClusterParameterGroupName, 
					String[] VpcSecurityGroupIds, 
					int Port, 
					string MasterUserPassword, 
					string PreferredBackupWindow, 
					string PreferredMaintenanceWindow, 
					string CloudwatchLogsExportConfiguration, 
					string EngineVersion, 
					bool DeletionProtection, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyDBCluster?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&NewDBClusterIdentifier=" + (NewDBClusterIdentifier==null? "" : Uri.EscapeDataString(NewDBClusterIdentifier))+"&ApplyImmediately="+ApplyImmediately+"&BackupRetentionPeriod="+BackupRetentionPeriod+"&DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&"+String.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={z}"))+"&Port="+Port+"&MasterUserPassword=" + (MasterUserPassword==null? "" : Uri.EscapeDataString(MasterUserPassword))+"&PreferredBackupWindow=" + (PreferredBackupWindow==null? "" : Uri.EscapeDataString(PreferredBackupWindow))+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : Uri.EscapeDataString(PreferredMaintenanceWindow))+"&CloudwatchLogsExportConfiguration=" + (CloudwatchLogsExportConfiguration==null? "" : Uri.EscapeDataString(CloudwatchLogsExportConfiguration))+"&EngineVersion=" + (EngineVersion==null? "" : Uri.EscapeDataString(EngineVersion))+"&DeletionProtection="+DeletionProtection+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Modifies the parameters of a cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot or maintenance window before the change can take effect.</p> </note> <important> <p>After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter.</p> </important>
		/// GET_ModifyDBClusterParameterGroup /#Action=ModifyDBClusterParameterGroup
		/// </summary>
		/// <param name="DBClusterParameterGroupName">The name of the cluster parameter group to modify.</param>
		/// <param name="Parameters">A list of parameters in the cluster parameter group to modify.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyDBClusterParameterGroupAsync(string DBClusterParameterGroupName, Parameter[] Parameters, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyDBClusterParameterGroup?DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&"+String.Join("&", Parameters.Select(z => $"Parameters={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code>, and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual cluster snapshot. Use the value <code>all</code> to make the manual cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p>
		/// GET_ModifyDBClusterSnapshotAttribute /#Action=ModifyDBClusterSnapshotAttribute
		/// </summary>
		/// <param name="DBClusterSnapshotIdentifier">The identifier for the cluster snapshot to modify the attributes for.</param>
		/// <param name="AttributeName"><p>The name of the cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual cluster snapshot, set this value to <code>restore</code>.</p></param>
		/// <param name="ValuesToAdd"><p>A list of cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual cluster snapshot, set this list to include one or more AWS account IDs. To make the manual cluster snapshot restorable by any AWS account, set it to <code>all</code>. Do not add the <code>all</code> value for any manual cluster snapshots that contain private information that you don't want to be available to all AWS accounts.</p></param>
		/// <param name="ValuesToRemove"><p>A list of cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual cluster snapshot, set this list to include one or more AWS account identifiers. To remove authorization for any AWS account to copy or restore the cluster snapshot, set it to <code>all</code> . If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual cluster snapshot.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ModifyDBClusterSnapshotAttributeAsync(string DBClusterSnapshotIdentifier, string AttributeName, String[] ValuesToAdd, String[] ValuesToRemove, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyDBClusterSnapshotAttribute?DBClusterSnapshotIdentifier=" + (DBClusterSnapshotIdentifier==null? "" : Uri.EscapeDataString(DBClusterSnapshotIdentifier))+"&AttributeName=" + (AttributeName==null? "" : Uri.EscapeDataString(AttributeName))+"&"+String.Join("&", ValuesToAdd.Select(z => $"ValuesToAdd={z}"))+"&"+String.Join("&", ValuesToRemove.Select(z => $"ValuesToRemove={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
		/// GET_ModifyDBInstance /#Action=ModifyDBInstance
		/// </summary>
		/// <param name="DBInstanceIdentifier"><p>The instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBInstance</code>.</p> </li> </ul></param>
		/// <param name="DBInstanceClass"><p>The new compute and memory capacity of the instance; for example, <code>db.r5.large</code>. Not all instance classes are available in all AWS Regions. </p> <p>If you modify the instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is specified as <code>true</code> for this request. </p> <p>Default: Uses existing setting.</p></param>
		/// <param name="ApplyImmediately"><p>Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the instance. </p> <p> If this parameter is set to <code>false</code>, changes to the instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next reboot.</p> <p>Default: <code>false</code> </p></param>
		/// <param name="PreferredMaintenanceWindow"><p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, changing this parameter causes a reboot of the instance. If you are moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure that pending changes are applied.</p> <p>Default: Uses existing setting.</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p>Constraints: Must be at least 30 minutes.</p></param>
		/// <param name="AutoMinorVersionUpgrade">Indicates that minor version upgrades are applied automatically to the instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case, and the change is asynchronously applied as soon as possible. An outage results if this parameter is set to <code>true</code> during the maintenance window, and a newer minor version is available, and Amazon DocumentDB has enabled automatic patching for that engine version. </param>
		/// <param name="NewDBInstanceIdentifier"><p> The new instance identifier for the instance when renaming an instance. When you change the instance identifier, an instance reboot occurs immediately if you set <code>Apply Immediately</code> to <code>true</code>. It occurs during the next maintenance window if you set <code>Apply Immediately</code> to <code>false</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p></param>
		/// <param name="CACertificateIdentifier">Indicates the certificate that needs to be associated with the instance.</param>
		/// <param name="PromotionTier"><p>A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.</p> <p>Default: 1</p> <p>Valid values: 0-15</p></param>
		/// <returns>Success</returns>
		public async Task GET_ModifyDBInstanceAsync(string DBInstanceIdentifier, string DBInstanceClass, bool ApplyImmediately, string PreferredMaintenanceWindow, bool AutoMinorVersionUpgrade, string NewDBInstanceIdentifier, string CACertificateIdentifier, int PromotionTier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyDBInstance?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : Uri.EscapeDataString(DBInstanceIdentifier))+"&DBInstanceClass=" + (DBInstanceClass==null? "" : Uri.EscapeDataString(DBInstanceClass))+"&ApplyImmediately="+ApplyImmediately+"&PreferredMaintenanceWindow=" + (PreferredMaintenanceWindow==null? "" : Uri.EscapeDataString(PreferredMaintenanceWindow))+"&AutoMinorVersionUpgrade="+AutoMinorVersionUpgrade+"&NewDBInstanceIdentifier=" + (NewDBInstanceIdentifier==null? "" : Uri.EscapeDataString(NewDBInstanceIdentifier))+"&CACertificateIdentifier=" + (CACertificateIdentifier==null? "" : Uri.EscapeDataString(CACertificateIdentifier))+"&PromotionTier="+PromotionTier+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the AWS Region.
		/// GET_ModifyDBSubnetGroup /#Action=ModifyDBSubnetGroup
		/// </summary>
		/// <param name="DBSubnetGroupName"><p>The name for the subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing <code>DBSubnetGroup</code>. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p></param>
		/// <param name="DBSubnetGroupDescription">The description for the subnet group.</param>
		/// <param name="SubnetIds">The Amazon EC2 subnet IDs for the subnet group.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyDBSubnetGroupAsync(string DBSubnetGroupName, string DBSubnetGroupDescription, String[] SubnetIds, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ModifyDBSubnetGroup?DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : Uri.EscapeDataString(DBSubnetGroupName))+"&DBSubnetGroupDescription=" + (DBSubnetGroupDescription==null? "" : Uri.EscapeDataString(DBSubnetGroupDescription))+"&"+String.Join("&", SubnetIds.Select(z => $"SubnetIds={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>You might need to reboot your instance, usually for maintenance reasons. For example, if you make certain changes, or if you change the cluster parameter group that is associated with the instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting an instance restarts the database engine service. Rebooting an instance results in a momentary outage, during which the instance status is set to <i>rebooting</i>. </p>
		/// GET_RebootDBInstance /#Action=RebootDBInstance
		/// </summary>
		/// <param name="DBInstanceIdentifier"><p>The instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBInstance</code>.</p> </li> </ul></param>
		/// <param name="ForceFailover"><p> When <code>true</code>, the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't specify <code>true</code> if the instance is not configured for Multi-AZ.</p></param>
		/// <returns>Success</returns>
		public async Task GET_RebootDBInstanceAsync(string DBInstanceIdentifier, bool ForceFailover, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RebootDBInstance?DBInstanceIdentifier=" + (DBInstanceIdentifier==null? "" : Uri.EscapeDataString(DBInstanceIdentifier))+"&ForceFailover="+ForceFailover+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes metadata tags from an Amazon DocumentDB resource.
		/// GET_RemoveTagsFromResource /#Action=RemoveTagsFromResource
		/// </summary>
		/// <param name="ResourceName">The Amazon DocumentDB resource that the tags are removed from. This value is an Amazon Resource Name (ARN).</param>
		/// <param name="TagKeys">The tag key (name) of the tag to be removed.</param>
		/// <returns>Success</returns>
		public async Task GET_RemoveTagsFromResourceAsync(string ResourceName, String[] TagKeys, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RemoveTagsFromResource?ResourceName=" + (ResourceName==null? "" : Uri.EscapeDataString(ResourceName))+"&"+String.Join("&", TagKeys.Select(z => $"TagKeys={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Modifies the parameters of a cluster parameter group to the default value. To reset specific parameters, submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When you reset the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance reboot.</p>
		/// GET_ResetDBClusterParameterGroup /#Action=ResetDBClusterParameterGroup
		/// </summary>
		/// <param name="DBClusterParameterGroupName">The name of the cluster parameter group to reset.</param>
		/// <param name="ResetAllParameters">A value that is set to <code>true</code> to reset all parameters in the cluster parameter group to their default values, and <code>false</code> otherwise. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.</param>
		/// <param name="Parameters">A list of parameter names in the cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is set to <code>true</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ResetDBClusterParameterGroupAsync(string DBClusterParameterGroupName, bool ResetAllParameters, Parameter[] Parameters, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ResetDBClusterParameterGroup?DBClusterParameterGroupName=" + (DBClusterParameterGroupName==null? "" : Uri.EscapeDataString(DBClusterParameterGroupName))+"&ResetAllParameters="+ResetAllParameters+"&"+String.Join("&", Parameters.Select(z => $"Parameters={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new cluster from a snapshot or cluster snapshot.</p> <p>If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.</p>
		/// GET_RestoreDBClusterFromSnapshot /#Action=RestoreDBClusterFromSnapshot
		/// </summary>
		/// <param name="AvailabilityZones">Provides the list of Amazon EC2 Availability Zones that instances in the restored DB cluster can be created in.</param>
		/// <param name="DBClusterIdentifier"><p>The name of the cluster to create from the snapshot or cluster snapshot. This parameter isn't case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p></param>
		/// <param name="SnapshotIdentifier"><p>The identifier for the snapshot or cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a cluster snapshot. However, you can use only the ARN to specify a snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing snapshot.</p> </li> </ul></param>
		/// <param name="Engine"><p>The database engine to use for the new cluster.</p> <p>Default: The same as source.</p> <p>Constraint: Must be compatible with the engine of the source.</p></param>
		/// <param name="EngineVersion">The version of the database engine to use for the new cluster.</param>
		/// <param name="Port"><p>The port number on which the new cluster accepts connections.</p> <p>Constraints: Must be a value from <code>1150</code> to <code>65535</code>.</p> <p>Default: The same port as the original cluster.</p></param>
		/// <param name="DBSubnetGroupName"><p>The name of the subnet group to use for the new cluster.</p> <p>Constraints: If provided, must match the name of an existing <code>DBSubnetGroup</code>.</p> <p>Example: <code>mySubnetgroup</code> </p></param>
		/// <param name="VpcSecurityGroupIds">A list of virtual private cloud (VPC) security groups that the new cluster will belong to.</param>
		/// <param name="Tags">The tags to be assigned to the restored cluster.</param>
		/// <param name="KmsKeyId"><p>The AWS KMS key identifier to use when restoring an encrypted cluster from a DB snapshot or cluster snapshot.</p> <p>The AWS KMS key identifier is the Amazon Resource Name (ARN) for the AWS KMS encryption key. If you are restoring a cluster with the same AWS account that owns the AWS KMS encryption key used to encrypt the new cluster, then you can use the AWS KMS key alias instead of the ARN for the AWS KMS encryption key.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the snapshot or cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored cluster is encrypted using the AWS KMS key that was used to encrypt the snapshot or the cluster snapshot.</p> </li> <li> <p>If the snapshot or the cluster snapshot in <code>SnapshotIdentifier</code> is not encrypted, then the restored DB cluster is not encrypted.</p> </li> </ul></param>
		/// <param name="EnableCloudwatchLogsExports">A list of log types that must be enabled for exporting to Amazon CloudWatch Logs.</param>
		/// <param name="DeletionProtection">Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted.</param>
		/// <returns>Success</returns>
		public async Task GET_RestoreDBClusterFromSnapshotAsync(String[] AvailabilityZones, string DBClusterIdentifier, string SnapshotIdentifier, string Engine, string EngineVersion, int Port, string DBSubnetGroupName, String[] VpcSecurityGroupIds, Tag[] Tags, string KmsKeyId, String[] EnableCloudwatchLogsExports, bool DeletionProtection, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RestoreDBClusterFromSnapshot?"+String.Join("&", AvailabilityZones.Select(z => $"AvailabilityZones={z}"))+"&DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&SnapshotIdentifier=" + (SnapshotIdentifier==null? "" : Uri.EscapeDataString(SnapshotIdentifier))+"&Engine=" + (Engine==null? "" : Uri.EscapeDataString(Engine))+"&EngineVersion=" + (EngineVersion==null? "" : Uri.EscapeDataString(EngineVersion))+"&Port="+Port+"&DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : Uri.EscapeDataString(DBSubnetGroupName))+"&"+String.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={z}"))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&"+String.Join("&", EnableCloudwatchLogsExports.Select(z => $"EnableCloudwatchLogsExports={z}"))+"&DeletionProtection="+DeletionProtection+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores a cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target cluster is created from the source cluster with the same configuration as the original cluster, except that the new cluster is created with the default security group.
		/// GET_RestoreDBClusterToPointInTime /#Action=RestoreDBClusterToPointInTime
		/// </summary>
		/// <param name="DBClusterIdentifier"><p>The name of the new cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul></param>
		/// <param name="SourceDBClusterIdentifier"><p>The identifier of the source cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBCluster</code>.</p> </li> </ul></param>
		/// <param name="RestoreToTime"><p>The date and time to restore the cluster to.</p> <p>Valid values: A time in Universal Coordinated Time (UTC) format.</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the instance.</p> </li> <li> <p>Must be specified if the <code>UseLatestRestorableTime</code> parameter is not provided.</p> </li> <li> <p>Cannot be specified if the <code>UseLatestRestorableTime</code> parameter is <code>true</code>.</p> </li> <li> <p>Cannot be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code>.</p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p></param>
		/// <param name="UseLatestRestorableTime"><p>A value that is set to <code>true</code> to restore the cluster to the latest restorable backup time, and <code>false</code> otherwise. </p> <p>Default: <code>false</code> </p> <p>Constraints: Cannot be specified if the <code>RestoreToTime</code> parameter is provided.</p></param>
		/// <param name="Port"><p>The port number on which the new cluster accepts connections.</p> <p>Constraints: Must be a value from <code>1150</code> to <code>65535</code>. </p> <p>Default: The default port for the engine.</p></param>
		/// <param name="DBSubnetGroupName"><p>The subnet group name to use for the new cluster.</p> <p>Constraints: If provided, must match the name of an existing <code>DBSubnetGroup</code>.</p> <p>Example: <code>mySubnetgroup</code> </p></param>
		/// <param name="VpcSecurityGroupIds">A list of VPC security groups that the new cluster belongs to.</param>
		/// <param name="Tags">The tags to be assigned to the restored cluster.</param>
		/// <param name="KmsKeyId"><p>The AWS KMS key identifier to use when restoring an encrypted cluster from an encrypted cluster.</p> <p>The AWS KMS key identifier is the Amazon Resource Name (ARN) for the AWS KMS encryption key. If you are restoring a cluster with the same AWS account that owns the AWS KMS encryption key used to encrypt the new cluster, then you can use the AWS KMS key alias instead of the ARN for the AWS KMS encryption key.</p> <p>You can restore to a new cluster and encrypt the new cluster with an AWS KMS key that is different from the AWS KMS key used to encrypt the source cluster. The new DB cluster is encrypted with the AWS KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you do not specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the cluster is encrypted, then the restored cluster is encrypted using the AWS KMS key that was used to encrypt the source cluster.</p> </li> <li> <p>If the cluster is not encrypted, then the restored cluster is not encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a cluster that is not encrypted, then the restore request is rejected.</p></param>
		/// <param name="EnableCloudwatchLogsExports">A list of log types that must be enabled for exporting to Amazon CloudWatch Logs.</param>
		/// <param name="DeletionProtection">Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted.</param>
		/// <returns>Success</returns>
		public async Task GET_RestoreDBClusterToPointInTimeAsync(string DBClusterIdentifier, string SourceDBClusterIdentifier, System.DateTimeOffset RestoreToTime, bool UseLatestRestorableTime, int Port, string DBSubnetGroupName, String[] VpcSecurityGroupIds, Tag[] Tags, string KmsKeyId, String[] EnableCloudwatchLogsExports, bool DeletionProtection, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=RestoreDBClusterToPointInTime?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&SourceDBClusterIdentifier=" + (SourceDBClusterIdentifier==null? "" : Uri.EscapeDataString(SourceDBClusterIdentifier))+"&RestoreToTime=" + RestoreToTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&UseLatestRestorableTime="+UseLatestRestorableTime+"&Port="+Port+"&DBSubnetGroupName=" + (DBSubnetGroupName==null? "" : Uri.EscapeDataString(DBSubnetGroupName))+"&"+String.Join("&", VpcSecurityGroupIds.Select(z => $"VpcSecurityGroupIds={z}"))+"&"+String.Join("&", Tags.Select(z => $"Tags={z}"))+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&"+String.Join("&", EnableCloudwatchLogsExports.Select(z => $"EnableCloudwatchLogsExports={z}"))+"&DeletionProtection="+DeletionProtection+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restarts the stopped cluster that is specified by <code>DBClusterIdentifier</code>. For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html">Stopping and Starting an Amazon DocumentDB Cluster</a>.
		/// GET_StartDBCluster /#Action=StartDBCluster
		/// </summary>
		/// <param name="DBClusterIdentifier">The identifier of the cluster to restart. Example: <code>docdb-2019-05-28-15-24-52</code> </param>
		/// <returns>Success</returns>
		public async Task GET_StartDBClusterAsync(string DBClusterIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=StartDBCluster?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops the running cluster that is specified by <code>DBClusterIdentifier</code>. The cluster must be in the <i>available</i> state. For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html">Stopping and Starting an Amazon DocumentDB Cluster</a>.
		/// GET_StopDBCluster /#Action=StopDBCluster
		/// </summary>
		/// <param name="DBClusterIdentifier">The identifier of the cluster to stop. Example: <code>docdb-2019-05-28-15-24-52</code> </param>
		/// <returns>Success</returns>
		public async Task GET_StopDBClusterAsync(string DBClusterIdentifier, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=StopDBCluster?DBClusterIdentifier=" + (DBClusterIdentifier==null? "" : Uri.EscapeDataString(DBClusterIdentifier))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
