//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAppResult
	{
		
		/// <summary>
		///  Amplify App represents different branches of a repository for building, deploying, and hosting. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public App App { get; set; }
	}
	
	/// <summary>
	///  Custom rewrite / redirect rule. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomRule
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Source { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Target { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=3)]
		public string Status { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Condition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Stage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPERIMENTAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PULL_REQUEST = 4,
	}
	
	/// <summary>
	///  Result structure for create backend environment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBackendEnvironmentResult
	{
		
		/// <summary>
		///  Backend environment for an Amplify App. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BackendEnvironment BackendEnvironment { get; set; }
	}
	
	/// <summary>
	///  Result structure for create branch request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBranchResult
	{
		
		/// <summary>
		///  Branch for an Amplify App, which maps to a 3rd party repository branch. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Branch Branch { get; set; }
	}
	
	/// <summary>
	///  Result structure for create a new deployment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeploymentResult
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string JobId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FileUploadUrls FileUploadUrls { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string ZipUploadUrl { get; set; }
	}
	
	/// <summary>
	///  Result structure for the create Domain Association request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDomainAssociationResult
	{
		
		/// <summary>
		///  Structure for Domain Association, which associates a custom domain with an Amplify App. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainAssociation DomainAssociation { get; set; }
	}
	
	/// <summary>
	///  Setting for the Subdomain. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SubDomainSetting
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string BranchName { get; set; }
	}
	
	/// <summary>
	///  Result structure for the create webhook request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateWebhookResult
	{
		
		/// <summary>
		///  Structure for webhook, which associates a webhook with an Amplify App. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Webhook Webhook { get; set; }
	}
	
	/// <summary>
	///  Result structure for an Amplify App delete request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteAppResult
	{
		
		/// <summary>
		///  Amplify App represents different branches of a repository for building, deploying, and hosting. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public App App { get; set; }
	}
	
	/// <summary>
	///  Result structure of a delete backend environment result. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteBackendEnvironmentResult
	{
		
		/// <summary>
		///  Backend environment for an Amplify App. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BackendEnvironment BackendEnvironment { get; set; }
	}
	
	/// <summary>
	///  Result structure for delete branch request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteBranchResult
	{
		
		/// <summary>
		///  Branch for an Amplify App, which maps to a 3rd party repository branch. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Branch Branch { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDomainAssociationResult
	{
		
		/// <summary>
		///  Structure for Domain Association, which associates a custom domain with an Amplify App. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainAssociation DomainAssociation { get; set; }
	}
	
	/// <summary>
	///  Result structure for the delete job request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteJobResult
	{
		
		/// <summary>
		///  Structure for the summary of a Job. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobSummary JobSummary { get; set; }
	}
	
	/// <summary>
	///  Result structure for the delete webhook request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteWebhookResult
	{
		
		/// <summary>
		///  Structure for webhook, which associates a webhook with an Amplify App. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Webhook Webhook { get; set; }
	}
	
	/// <summary>
	///  Result structure for the generate access logs request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GenerateAccessLogsResult
	{
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string LogUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAppResult
	{
		
		/// <summary>
		///  Amplify App represents different branches of a repository for building, deploying, and hosting. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public App App { get; set; }
	}
	
	/// <summary>
	///  Result structure for the get artifact request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetArtifactUrlResult
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string ArtifactId { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string ArtifactUrl { get; set; }
	}
	
	/// <summary>
	///  Result structure for get backend environment result. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBackendEnvironmentResult
	{
		
		/// <summary>
		///  Backend environment for an Amplify App. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BackendEnvironment BackendEnvironment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBranchResult
	{
		
		/// <summary>
		///  Branch for an Amplify App, which maps to a 3rd party repository branch. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Branch Branch { get; set; }
	}
	
	/// <summary>
	///  Result structure for the get Domain Association request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDomainAssociationResult
	{
		
		/// <summary>
		///  Structure for Domain Association, which associates a custom domain with an Amplify App. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainAssociation DomainAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetJobResult
	{
		
		/// <summary>
		///  Structure for an execution job for an Amplify App. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Job Job { get; set; }
	}
	
	/// <summary>
	///  Result structure for the get webhook request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetWebhookResult
	{
		
		/// <summary>
		///  Structure for webhook, which associates a webhook with an Amplify App. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Webhook Webhook { get; set; }
	}
	
	/// <summary>
	///  Result structure for an Amplify App list request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAppsResult
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public App[] Apps { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Result structure for the list artifacts request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListArtifactsResult
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Artifact[] Artifacts { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Result structure for list backend environments result. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListBackendEnvironmentsResult
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BackendEnvironment[] BackendEnvironments { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Result structure for list branches request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListBranchesResult
	{
		
		/// <summary>
		/// Maximum items: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public Branch[] Branches { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Result structure for the list Domain Association request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDomainAssociationsResult
	{
		
		/// <summary>
		/// Maximum items: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public DomainAssociation[] DomainAssociations { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Maximum number of records to list in a single response. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListJobsResult
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobSummary[] JobSummaries { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Response for list tags. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	///  Result structure for the list webhooks request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListWebhooksResult
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Webhook[] Webhooks { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Result structure for start a deployment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartDeploymentResult
	{
		
		/// <summary>
		///  Structure for the summary of a Job. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobSummary JobSummary { get; set; }
	}
	
	/// <summary>
	///  Result structure for run job request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartJobResult
	{
		
		/// <summary>
		///  Structure for the summary of a Job. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobSummary JobSummary { get; set; }
	}
	
	/// <summary>
	///  Result structure for the stop job request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopJobResult
	{
		
		/// <summary>
		///  Structure for the summary of a Job. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobSummary JobSummary { get; set; }
	}
	
	/// <summary>
	///  Result structure for an Amplify App update request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAppResult
	{
		
		/// <summary>
		///  Amplify App represents different branches of a repository for building, deploying, and hosting. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public App App { get; set; }
	}
	
	/// <summary>
	///  Result structure for update branch request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateBranchResult
	{
		
		/// <summary>
		///  Branch for an Amplify App, which maps to a 3rd party repository branch. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Branch Branch { get; set; }
	}
	
	/// <summary>
	///  Result structure for the update Domain Association request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainAssociationResult
	{
		
		/// <summary>
		///  Structure for Domain Association, which associates a custom domain with an Amplify App. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainAssociation DomainAssociation { get; set; }
	}
	
	/// <summary>
	///  Result structure for the update webhook request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateWebhookResult
	{
		
		/// <summary>
		///  Structure for webhook, which associates a webhook with an Amplify App. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Webhook Webhook { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Platform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB = 0,
	}
	
	/// <summary>
	///  Structure with Production Branch information. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductionBranch
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastDeployTime { get; set; }
		
		/// <summary>
		/// Max length: 7
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength=3)]
		public string Status { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000, MinimumLength=1)]
		public string ThumbnailUrl { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string BranchName { get; set; }
	}
	
	/// <summary>
	///  Structure with auto branch creation config. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AutoBranchCreationConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutoBranchCreationConfigStage Stage { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Framework { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableAutoBuild { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentVariables EnvironmentVariables { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string BasicAuthCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		/// <summary>
		///  BuildSpec file for Amplify app build. 
		/// Max length: 25000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25000, MinimumLength=1)]
		public string BuildSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnablePullRequestPreview { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		public string PullRequestEnvironmentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutoBranchCreationConfigStage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPERIMENTAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PULL_REQUEST = 4,
	}
	
	/// <summary>
	///  Amplify App represents different branches of a repository for building, deploying, and hosting. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class App
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string AppId { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string AppArn { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Repository { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AppPlatform Platform { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdateTime { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string IamServiceRoleArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentVariables EnvironmentVariables { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string DefaultDomain { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool EnableBranchAutoBuild { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool EnableBasicAuth { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string BasicAuthCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomRule[] CustomRules { get; set; }
		
		/// <summary>
		///  Structure with Production Branch information. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProductionBranch ProductionBranch { get; set; }
		
		/// <summary>
		///  BuildSpec file for Amplify app build. 
		/// Max length: 25000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25000, MinimumLength=1)]
		public string BuildSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableAutoBranchCreation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoBranchCreationPattern[] AutoBranchCreationPatterns { get; set; }
		
		/// <summary>
		///  Structure with auto branch creation config. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoBranchCreationConfig AutoBranchCreationConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AppPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB = 0,
	}
	
	/// <summary>
	///  Structure for artifact. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Artifact
	{
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string ArtifactFileName { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string ArtifactId { get; set; }
	}
	
	/// <summary>
	///  Backend environment for an Amplify App. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BackendEnvironment
	{
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string BackendEnvironmentArn { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string EnvironmentName { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string StackName { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string DeploymentArtifacts { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdateTime { get; set; }
	}
	
	/// <summary>
	///  Branch for an Amplify App, which maps to a 3rd party repository branch. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Branch
	{
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string BranchArn { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string BranchName { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BranchStage Stage { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DisplayName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool EnableNotification { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdateTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentVariables EnvironmentVariables { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool EnableAutoBuild { get; set; }
		
		/// <summary>
		/// Maximum items: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public CustomDomain[] CustomDomains { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Framework { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string ActiveJobId { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string TotalNumberOfJobs { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool EnableBasicAuth { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000, MinimumLength=1)]
		public string ThumbnailUrl { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string BasicAuthCredentials { get; set; }
		
		/// <summary>
		///  BuildSpec file for Amplify app build. 
		/// Max length: 25000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25000, MinimumLength=1)]
		public string BuildSpec { get; set; }
		
		/// <summary>
		///  The content TTL for the website in seconds. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Ttl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssociatedResource[] AssociatedResources { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool EnablePullRequestPreview { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		public string PullRequestEnvironmentName { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string DestinationBranch { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string SourceBranch { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string BackendEnvironmentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BranchStage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPERIMENTAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PULL_REQUEST = 4,
	}
	
	/// <summary>
	///  Request structure used to create Apps in Amplify. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAppRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Repository { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateAppRequestPlatform Platform { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string IamServiceRoleArn { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public string OauthToken { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentVariables EnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableBranchAutoBuild { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string BasicAuthCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomRule[] CustomRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		/// <summary>
		///  BuildSpec file for Amplify app build. 
		/// Max length: 25000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25000, MinimumLength=1)]
		public string BuildSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableAutoBranchCreation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoBranchCreationPattern[] AutoBranchCreationPatterns { get; set; }
		
		/// <summary>
		///  Structure with auto branch creation config. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoBranchCreationConfig AutoBranchCreationConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateAppRequestPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB = 0,
	}
	
	/// <summary>
	///  Request structure for a backend environment create request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBackendEnvironmentRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string EnvironmentName { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string StackName { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string DeploymentArtifacts { get; set; }
	}
	
	/// <summary>
	///  Request structure for a branch create request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBranchRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string BranchName { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateBranchRequestStage Stage { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Framework { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableAutoBuild { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentVariables EnvironmentVariables { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string BasicAuthCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		/// <summary>
		///  BuildSpec file for Amplify app build. 
		/// Max length: 25000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25000, MinimumLength=1)]
		public string BuildSpec { get; set; }
		
		/// <summary>
		///  The content TTL for the website in seconds. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Ttl { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnablePullRequestPreview { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		public string PullRequestEnvironmentName { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string BackendEnvironmentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateBranchRequestStage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPERIMENTAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PULL_REQUEST = 4,
	}
	
	/// <summary>
	///  Request structure for create a new deployment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeploymentRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FileMap FileMap { get; set; }
	}
	
	/// <summary>
	///  Request structure for create Domain Association request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDomainAssociationRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableAutoSubDomain { get; set; }
		
		/// <summary>
		/// Maximum items: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public SubDomainSetting[] SubDomainSettings { get; set; }
	}
	
	/// <summary>
	///  Structure for Domain Association, which associates a custom domain with an Amplify App. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainAssociation
	{
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string DomainAssociationArn { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool EnableAutoSubDomain { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainAssociationDomainStatus DomainStatus { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string StatusReason { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string CertificateVerificationDNSRecord { get; set; }
		
		/// <summary>
		/// Maximum items: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public SubDomain[] SubDomains { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainAssociationDomainStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VERIFICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_DEPLOYMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUESTING_CERTIFICATE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 7,
	}
	
	/// <summary>
	///  Request structure for create webhook request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateWebhookRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string BranchName { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Description { get; set; }
	}
	
	/// <summary>
	///  Structure for webhook, which associates a webhook with an Amplify App. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Webhook
	{
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string WebhookArn { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string WebhookId { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string WebhookUrl { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string BranchName { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdateTime { get; set; }
	}
	
	/// <summary>
	///  Structure for the summary of a Job. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobSummary
	{
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string JobArn { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string JobId { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string CommitId { get; set; }
		
		/// <summary>
		/// Max length: 10000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10000)]
		public string CommitMessage { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CommitTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobSummaryJobType JobType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobSummaryJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELEASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETRY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_HOOK = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VERIFICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_DEPLOYMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUESTING_CERTIFICATE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 7,
	}
	
	/// <summary>
	///  Request structure for the generate access logs request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GenerateAccessLogsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	///  Structure for an execution job for an Amplify App. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Job
	{
		
		/// <summary>
		///  Structure for the summary of a Job. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobSummary Summary { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Step[] Steps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELEASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETRY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_HOOK = 3,
	}
	
	/// <summary>
	///  Request structure for list backend environments request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListBackendEnvironmentsRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string EnvironmentName { get; set; }
	}
	
	/// <summary>
	///  Request structure for start a deployment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartDeploymentRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string JobId { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string SourceUrl { get; set; }
	}
	
	/// <summary>
	///  Request structure for Start job request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartJobRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string JobId { get; set; }
		
		/// <summary>
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartJobRequestJobType JobType { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string JobReason { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string CommitId { get; set; }
		
		/// <summary>
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10000)]
		public string CommitMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CommitTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartJobRequestJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELEASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETRY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_HOOK = 3,
	}
	
	/// <summary>
	///  Structure for an execution step for an execution job, for an Amplify App. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Step
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string StepName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StepStatus Status { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string LogUrl { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string ArtifactsUrl { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string TestArtifactsUrl { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string TestConfigUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Screenshots Screenshots { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Context { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StepStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 6,
	}
	
	/// <summary>
	///  Subdomain for the Domain Association. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SubDomain
	{
		
		/// <summary>
		///  Setting for the Subdomain. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SubDomainSetting SubDomainSetting { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Verified { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string DnsRecord { get; set; }
	}
	
	/// <summary>
	///  Request structure used to tag resource. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	///  Request structure for update App request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAppRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateAppRequestPlatform Platform { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string IamServiceRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentVariables EnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableBranchAutoBuild { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string BasicAuthCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomRule[] CustomRules { get; set; }
		
		/// <summary>
		///  BuildSpec file for Amplify app build. 
		/// Max length: 25000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25000, MinimumLength=1)]
		public string BuildSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableAutoBranchCreation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoBranchCreationPattern[] AutoBranchCreationPatterns { get; set; }
		
		/// <summary>
		///  Structure with auto branch creation config. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoBranchCreationConfig AutoBranchCreationConfig { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Repository { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public string OauthToken { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string AccessToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateAppRequestPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB = 0,
	}
	
	/// <summary>
	///  Request structure for update branch request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateBranchRequest
	{
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Framework { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateBranchRequestStage Stage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableAutoBuild { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentVariables EnvironmentVariables { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string BasicAuthCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		/// <summary>
		///  BuildSpec file for Amplify app build. 
		/// Max length: 25000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25000, MinimumLength=1)]
		public string BuildSpec { get; set; }
		
		/// <summary>
		///  The content TTL for the website in seconds. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Ttl { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnablePullRequestPreview { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		public string PullRequestEnvironmentName { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string BackendEnvironmentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateBranchRequestStage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPERIMENTAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PULL_REQUEST = 4,
	}
	
	/// <summary>
	///  Request structure for update Domain Association request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainAssociationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableAutoSubDomain { get; set; }
		
		/// <summary>
		/// Maximum items: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public SubDomainSetting[] SubDomainSettings { get; set; }
	}
	
	/// <summary>
	///  Request structure for update webhook request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateWebhookRequest
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string BranchName { get; set; }
		
		/// <summary>
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Description { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a new Amplify App.
		/// CreateApp apps
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAppResult> CreateAppAsync(CreateAppBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateAppResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists existing Amplify Apps.
		/// ListApps apps
		/// </summary>
		/// <param name="nextToken"> Pagination token. If non-null pagination token is returned in a result, then pass its value in another request to fetch more entries. </param>
		/// <param name="maxResults"> Maximum number of records to list in a single response. </param>
		/// <returns>Success</returns>
		public async Task<ListAppsResult> ListAppsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListAppsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new backend environment for an Amplify App.
		/// CreateBackendEnvironment apps/{appId}/backendenvironments
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <returns>Success</returns>
		public async Task<CreateBackendEnvironmentResult> CreateBackendEnvironmentAsync(string appId, CreateBackendEnvironmentBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/backendenvironments";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateBackendEnvironmentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists backend environments for an Amplify App.
		/// ListBackendEnvironments apps/{appId}/backendenvironments
		/// </summary>
		/// <param name="appId"> Unique Id for an amplify App. </param>
		/// <param name="nextToken"> Pagination token. Set to null to start listing backen environments from start. If a non-null pagination token is returned in a result, then pass its value in here to list more backend environments. </param>
		/// <param name="maxResults"> Maximum number of records to list in a single response. </param>
		/// <returns>Success</returns>
		public async Task<ListBackendEnvironmentsResult> ListBackendEnvironmentsAsync(string appId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/backendenvironments&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListBackendEnvironmentsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Branch for an Amplify App.
		/// CreateBranch apps/{appId}/branches
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <returns>Success</returns>
		public async Task<CreateBranchResult> CreateBranchAsync(string appId, CreateBranchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/branches";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateBranchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists branches for an Amplify App.
		/// ListBranches apps/{appId}/branches
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="nextToken"> Pagination token. Set to null to start listing branches from start. If a non-null pagination token is returned in a result, then pass its value in here to list more branches. </param>
		/// <param name="maxResults"> Maximum number of records to list in a single response. </param>
		/// <returns>Success</returns>
		public async Task<ListBranchesResult> ListBranchesAsync(string appId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/branches&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListBranchesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a deployment for manual deploy apps. (Apps are not connected to repository)
		/// CreateDeployment apps/{appId}/branches/{branchName}/deployments
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="branchName"> Name for the branch, for the Job. </param>
		/// <returns>Success</returns>
		public async Task<CreateDeploymentResult> CreateDeploymentAsync(string appId, string branchName, CreateDeploymentBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : Uri.EscapeDataString(branchName))+"/deployments";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDeploymentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a new DomainAssociation on an App
		/// CreateDomainAssociation apps/{appId}/domains
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <returns>Success</returns>
		public async Task<CreateDomainAssociationResult> CreateDomainAssociationAsync(string appId, CreateDomainAssociationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/domains";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDomainAssociationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List domains with an app
		/// ListDomainAssociations apps/{appId}/domains
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="nextToken"> Pagination token. Set to null to start listing Apps from start. If non-null pagination token is returned in a result, then pass its value in here to list more projects. </param>
		/// <param name="maxResults"> Maximum number of records to list in a single response. </param>
		/// <returns>Success</returns>
		public async Task<ListDomainAssociationsResult> ListDomainAssociationsAsync(string appId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/domains&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDomainAssociationsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new webhook on an App.
		/// CreateWebhook apps/{appId}/webhooks
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <returns>Success</returns>
		public async Task<CreateWebhookResult> CreateWebhookAsync(string appId, CreateWebhookBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/webhooks";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateWebhookResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List webhooks with an app.
		/// ListWebhooks apps/{appId}/webhooks
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="nextToken"> Pagination token. Set to null to start listing webhooks from start. If non-null pagination token is returned in a result, then pass its value in here to list more webhooks. </param>
		/// <param name="maxResults"> Maximum number of records to list in a single response. </param>
		/// <returns>Success</returns>
		public async Task<ListWebhooksResult> ListWebhooksAsync(string appId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/webhooks&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListWebhooksResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an existing Amplify App by appId.
		/// DeleteApp apps/{appId}
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <returns>Success</returns>
		public async Task<DeleteAppResult> DeleteAppAsync(string appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteAppResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves an existing Amplify App by appId.
		/// GetApp apps/{appId}
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <returns>Success</returns>
		public async Task<GetAppResult> GetAppAsync(string appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAppResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Amplify App.
		/// UpdateApp apps/{appId}
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <returns>Success</returns>
		public async Task<UpdateAppResult> UpdateAppAsync(string appId, UpdateAppBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateAppResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete backend environment for an Amplify App.
		/// DeleteBackendEnvironment apps/{appId}/backendenvironments/{environmentName}
		/// </summary>
		/// <param name="appId"> Unique Id of an Amplify App. </param>
		/// <param name="environmentName"> Name of a backend environment of an Amplify App. </param>
		/// <returns>Success</returns>
		public async Task<DeleteBackendEnvironmentResult> DeleteBackendEnvironmentAsync(string appId, string environmentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/backendenvironments/"+ (environmentName==null? "" : Uri.EscapeDataString(environmentName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteBackendEnvironmentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a backend environment for an Amplify App.
		/// GetBackendEnvironment apps/{appId}/backendenvironments/{environmentName}
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="environmentName"> Name for the backend environment. </param>
		/// <returns>Success</returns>
		public async Task<GetBackendEnvironmentResult> GetBackendEnvironmentAsync(string appId, string environmentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/backendenvironments/"+ (environmentName==null? "" : Uri.EscapeDataString(environmentName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetBackendEnvironmentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a branch for an Amplify App.
		/// DeleteBranch apps/{appId}/branches/{branchName}
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="branchName"> Name for the branch. </param>
		/// <returns>Success</returns>
		public async Task<DeleteBranchResult> DeleteBranchAsync(string appId, string branchName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : Uri.EscapeDataString(branchName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteBranchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a branch for an Amplify App.
		/// GetBranch apps/{appId}/branches/{branchName}
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="branchName"> Name for the branch. </param>
		/// <returns>Success</returns>
		public async Task<GetBranchResult> GetBranchAsync(string appId, string branchName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : Uri.EscapeDataString(branchName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetBranchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a branch for an Amplify App.
		/// UpdateBranch apps/{appId}/branches/{branchName}
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="branchName"> Name for the branch. </param>
		/// <returns>Success</returns>
		public async Task<UpdateBranchResult> UpdateBranchAsync(string appId, string branchName, UpdateBranchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : Uri.EscapeDataString(branchName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateBranchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a DomainAssociation.
		/// DeleteDomainAssociation apps/{appId}/domains/{domainName}
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="domainName"> Name of the domain. </param>
		/// <returns>Success</returns>
		public async Task<DeleteDomainAssociationResult> DeleteDomainAssociationAsync(string appId, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/domains/"+ (domainName==null? "" : Uri.EscapeDataString(domainName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDomainAssociationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves domain info that corresponds to an appId and domainName.
		/// GetDomainAssociation apps/{appId}/domains/{domainName}
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="domainName"> Name of the domain. </param>
		/// <returns>Success</returns>
		public async Task<GetDomainAssociationResult> GetDomainAssociationAsync(string appId, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/domains/"+ (domainName==null? "" : Uri.EscapeDataString(domainName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDomainAssociationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new DomainAssociation on an App
		/// UpdateDomainAssociation apps/{appId}/domains/{domainName}
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="domainName"> Name of the domain. </param>
		/// <returns>Success</returns>
		public async Task<UpdateDomainAssociationResult> UpdateDomainAssociationAsync(string appId, string domainName, UpdateDomainAssociationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/domains/"+ (domainName==null? "" : Uri.EscapeDataString(domainName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDomainAssociationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a job, for an Amplify branch, part of Amplify App.
		/// DeleteJob apps/{appId}/branches/{branchName}/jobs/{jobId}
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="branchName"> Name for the branch, for the Job. </param>
		/// <param name="jobId"> Unique Id for the Job. </param>
		/// <returns>Success</returns>
		public async Task<DeleteJobResult> DeleteJobAsync(string appId, string branchName, string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : Uri.EscapeDataString(branchName))+"/jobs/"+ (jobId==null? "" : Uri.EscapeDataString(jobId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a job for a branch, part of an Amplify App.
		/// GetJob apps/{appId}/branches/{branchName}/jobs/{jobId}
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="branchName"> Name for the branch, for the Job. </param>
		/// <param name="jobId"> Unique Id for the Job. </param>
		/// <returns>Success</returns>
		public async Task<GetJobResult> GetJobAsync(string appId, string branchName, string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : Uri.EscapeDataString(branchName))+"/jobs/"+ (jobId==null? "" : Uri.EscapeDataString(jobId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a webhook.
		/// DeleteWebhook webhooks/{webhookId}
		/// </summary>
		/// <param name="webhookId"> Unique Id for a webhook. </param>
		/// <returns>Success</returns>
		public async Task<DeleteWebhookResult> DeleteWebhookAsync(string webhookId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (webhookId==null? "" : Uri.EscapeDataString(webhookId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteWebhookResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves webhook info that corresponds to a webhookId.
		/// GetWebhook webhooks/{webhookId}
		/// </summary>
		/// <param name="webhookId"> Unique Id for a webhook. </param>
		/// <returns>Success</returns>
		public async Task<GetWebhookResult> GetWebhookAsync(string webhookId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (webhookId==null? "" : Uri.EscapeDataString(webhookId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetWebhookResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a webhook.
		/// UpdateWebhook webhooks/{webhookId}
		/// </summary>
		/// <param name="webhookId"> Unique Id for a webhook. </param>
		/// <returns>Success</returns>
		public async Task<UpdateWebhookResult> UpdateWebhookAsync(string webhookId, UpdateWebhookBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (webhookId==null? "" : Uri.EscapeDataString(webhookId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateWebhookResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve website access logs for a specific time range via a pre-signed URL.
		/// GenerateAccessLogs apps/{appId}/accesslogs
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <returns>Success</returns>
		public async Task<GenerateAccessLogsResult> GenerateAccessLogsAsync(string appId, GenerateAccessLogsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/accesslogs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GenerateAccessLogsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves artifact info that corresponds to a artifactId.
		/// GetArtifactUrl artifacts/{artifactId}
		/// </summary>
		/// <param name="artifactId"> Unique Id for a artifact. </param>
		/// <returns>Success</returns>
		public async Task<GetArtifactUrlResult> GetArtifactUrlAsync(string artifactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "artifacts/"+ (artifactId==null? "" : Uri.EscapeDataString(artifactId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetArtifactUrlResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List artifacts with an app, a branch, a job and an artifact type.
		/// ListArtifacts apps/{appId}/branches/{branchName}/jobs/{jobId}/artifacts
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="branchName"> Name for a branch, part of an Amplify App. </param>
		/// <param name="jobId"> Unique Id for an Job. </param>
		/// <param name="nextToken"> Pagination token. Set to null to start listing artifacts from start. If non-null pagination token is returned in a result, then pass its value in here to list more artifacts. </param>
		/// <param name="maxResults"> Maximum number of records to list in a single response. </param>
		/// <returns>Success</returns>
		public async Task<ListArtifactsResult> ListArtifactsAsync(string appId, string branchName, string jobId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : Uri.EscapeDataString(branchName))+"/jobs/"+ (jobId==null? "" : Uri.EscapeDataString(jobId))+"/artifacts&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListArtifactsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Jobs for a branch, part of an Amplify App.
		/// ListJobs apps/{appId}/branches/{branchName}/jobs
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="branchName"> Name for a branch. </param>
		/// <param name="nextToken"> Pagination token. Set to null to start listing steps from start. If a non-null pagination token is returned in a result, then pass its value in here to list more steps. </param>
		/// <param name="maxResults"> Maximum number of records to list in a single response. </param>
		/// <returns>Success</returns>
		public async Task<ListJobsResult> ListJobsAsync(string appId, string branchName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : Uri.EscapeDataString(branchName))+"/jobs&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListJobsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a new job for a branch, part of an Amplify App.
		/// StartJob apps/{appId}/branches/{branchName}/jobs
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="branchName"> Name for the branch, for the Job. </param>
		/// <returns>Success</returns>
		public async Task<StartJobResult> StartJobAsync(string appId, string branchName, StartJobBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : Uri.EscapeDataString(branchName))+"/jobs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List tags for resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn"> Resource arn used to list tags. </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tag resource with tag key and value.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn"> Resource arn used to tag resource. </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Start a deployment for manual deploy apps. (Apps are not connected to repository)
		/// StartDeployment apps/{appId}/branches/{branchName}/deployments/start
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="branchName"> Name for the branch, for the Job. </param>
		/// <returns>Success</returns>
		public async Task<StartDeploymentResult> StartDeploymentAsync(string appId, string branchName, StartDeploymentBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : Uri.EscapeDataString(branchName))+"/deployments/start";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartDeploymentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stop a job that is in progress, for an Amplify branch, part of Amplify App.
		/// StopJob apps/{appId}/branches/{branchName}/jobs/{jobId}/stop
		/// </summary>
		/// <param name="appId"> Unique Id for an Amplify App. </param>
		/// <param name="branchName"> Name for the branch, for the Job. </param>
		/// <param name="jobId"> Unique Id for the Job. </param>
		/// <returns>Success</returns>
		public async Task<StopJobResult> StopJobAsync(string appId, string branchName, string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : Uri.EscapeDataString(branchName))+"/jobs/"+ (jobId==null? "" : Uri.EscapeDataString(jobId))+"/stop";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Untag resource with resourceArn.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn"> Resource arn used to untag resource. </param>
		/// <param name="tagKeys"> Tag keys used to untag resource. </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, TagKey[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn))+"#tagKeys&"+String.Join("&", tagKeys.Select(z => $"tagKeys={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAppBody
	{
		
		/// <summary>
		///  Name for the Amplify App 
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		///  Description for an Amplify App 
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		///  Repository for an Amplify App 
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Repository { get; set; }
		
		/// <summary>
		///  Platform / framework for an Amplify App 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateAppBodyPlatform Platform { get; set; }
		
		/// <summary>
		///  AWS IAM service role for an Amplify App 
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string IamServiceRoleArn { get; set; }
		
		/// <summary>
		///  OAuth token for 3rd party source control system for an Amplify App, used to create webhook and read-only deploy key. OAuth token is not stored. 
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public string OauthToken { get; set; }
		
		/// <summary>
		///  Personal Access token for 3rd party source control system for an Amplify App, used to create webhook and read-only deploy key. Token is not stored. 
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string AccessToken { get; set; }
		
		/// <summary>
		///  Environment variables map for an Amplify App. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentVariables { get; set; }
		
		/// <summary>
		///  Enable the auto building of branches for an Amplify App. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableBranchAutoBuild { get; set; }
		
		/// <summary>
		///  Enable Basic Authorization for an Amplify App, this will apply to all branches part of this App. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		/// <summary>
		///  Credentials for Basic Authorization for an Amplify App. 
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string BasicAuthCredentials { get; set; }
		
		/// <summary>
		///  Custom rewrite / redirect rules for an Amplify App. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomRule[] CustomRules { get; set; }
		
		/// <summary>
		///  Tag for an Amplify App 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
		
		/// <summary>
		///  BuildSpec file for Amplify app build. 
		/// Max length: 25000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25000, MinimumLength=1)]
		public string BuildSpec { get; set; }
		
		/// <summary>
		///  Enables automated branch creation for the Amplify App. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableAutoBranchCreation { get; set; }
		
		/// <summary>
		///  Automated branch creation glob patterns for the Amplify App. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoBranchCreationPattern[] AutoBranchCreationPatterns { get; set; }
		
		/// <summary>
		///  Structure with auto branch creation config. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AutoBranchCreationConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateAppBodyPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBackendEnvironmentBody
	{
		
		/// <summary>
		///  Name for the backend environment. 
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string EnvironmentName { get; set; }
		
		/// <summary>
		///  CloudFormation stack name of backend environment. 
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string StackName { get; set; }
		
		/// <summary>
		///  Name of deployment artifacts. 
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string DeploymentArtifacts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBranchBody
	{
		
		/// <summary>
		///  Name for the branch. 
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string BranchName { get; set; }
		
		/// <summary>
		///  Description for the branch. 
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		///  Stage for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateBranchBodyStage Stage { get; set; }
		
		/// <summary>
		///  Framework for the branch. 
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Framework { get; set; }
		
		/// <summary>
		///  Enables notifications for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableNotification { get; set; }
		
		/// <summary>
		///  Enables auto building for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableAutoBuild { get; set; }
		
		/// <summary>
		///  Environment Variables for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentVariables { get; set; }
		
		/// <summary>
		///  Basic Authorization credentials for the branch. 
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string BasicAuthCredentials { get; set; }
		
		/// <summary>
		///  Enables Basic Auth for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		/// <summary>
		///  Tag for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
		
		/// <summary>
		///  BuildSpec file for Amplify app build. 
		/// Max length: 25000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25000, MinimumLength=1)]
		public string BuildSpec { get; set; }
		
		/// <summary>
		///  The content TTL for the website in seconds. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Ttl { get; set; }
		
		/// <summary>
		///  Display name for a branch, will use as the default domain prefix. 
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DisplayName { get; set; }
		
		/// <summary>
		///  Enables Pull Request Preview for this branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnablePullRequestPreview { get; set; }
		
		/// <summary>
		///  The Amplify Environment name for the pull request. 
		/// Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		public string PullRequestEnvironmentName { get; set; }
		
		/// <summary>
		///  ARN for a Backend Environment, part of an Amplify App. 
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string BackendEnvironmentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateBranchBodyStage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPERIMENTAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PULL_REQUEST = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeploymentBody
	{
		
		/// <summary>
		///  Optional file map that contains file name as the key and file content md5 hash as the value. If this argument is provided, the service will generate different upload url per file. Otherwise, the service will only generate a single upload url for the zipped files. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FileMap { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDomainAssociationBody
	{
		
		/// <summary>
		///  Domain name for the Domain Association. 
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
		
		/// <summary>
		///  Enables automated creation of Subdomains for branches. (Currently not supported) 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableAutoSubDomain { get; set; }
		
		/// <summary>
		///  Setting structure for the Subdomain. 
		/// Maximum items: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public SubDomainSetting[] SubDomainSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateWebhookBody
	{
		
		/// <summary>
		///  Name for a branch, part of an Amplify App. 
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string BranchName { get; set; }
		
		/// <summary>
		///  Description for a webhook. 
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAppBody
	{
		
		/// <summary>
		///  Name for an Amplify App. 
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		///  Description for an Amplify App. 
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		///  Platform for an Amplify App. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateAppBodyPlatform Platform { get; set; }
		
		/// <summary>
		///  IAM service role for an Amplify App. 
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string IamServiceRoleArn { get; set; }
		
		/// <summary>
		///  Environment Variables for an Amplify App. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentVariables { get; set; }
		
		/// <summary>
		///  Enables branch auto-building for an Amplify App. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableBranchAutoBuild { get; set; }
		
		/// <summary>
		///  Enables Basic Authorization for an Amplify App. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		/// <summary>
		///  Basic Authorization credentials for an Amplify App. 
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string BasicAuthCredentials { get; set; }
		
		/// <summary>
		///  Custom redirect / rewrite rules for an Amplify App. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomRule[] CustomRules { get; set; }
		
		/// <summary>
		///  BuildSpec file for Amplify app build. 
		/// Max length: 25000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25000, MinimumLength=1)]
		public string BuildSpec { get; set; }
		
		/// <summary>
		///  Enables automated branch creation for the Amplify App. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableAutoBranchCreation { get; set; }
		
		/// <summary>
		///  Automated branch creation glob patterns for the Amplify App. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoBranchCreationPattern[] AutoBranchCreationPatterns { get; set; }
		
		/// <summary>
		///  Structure with auto branch creation config. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AutoBranchCreationConfig { get; set; }
		
		/// <summary>
		///  Repository for an Amplify App 
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Repository { get; set; }
		
		/// <summary>
		///  OAuth token for 3rd party source control system for an Amplify App, used to create webhook and read-only deploy key. OAuth token is not stored. 
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public string OauthToken { get; set; }
		
		/// <summary>
		///  Personal Access token for 3rd party source control system for an Amplify App, used to create webhook and read-only deploy key. Token is not stored. 
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string AccessToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateAppBodyPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateBranchBody
	{
		
		/// <summary>
		///  Description for the branch. 
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Description { get; set; }
		
		/// <summary>
		///  Framework for the branch. 
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Framework { get; set; }
		
		/// <summary>
		///  Stage for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateBranchBodyStage Stage { get; set; }
		
		/// <summary>
		///  Enables notifications for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableNotification { get; set; }
		
		/// <summary>
		///  Enables auto building for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableAutoBuild { get; set; }
		
		/// <summary>
		///  Environment Variables for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentVariables { get; set; }
		
		/// <summary>
		///  Basic Authorization credentials for the branch. 
		/// Max length: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000)]
		public string BasicAuthCredentials { get; set; }
		
		/// <summary>
		///  Enables Basic Auth for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		/// <summary>
		///  BuildSpec file for Amplify app build. 
		/// Max length: 25000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25000, MinimumLength=1)]
		public string BuildSpec { get; set; }
		
		/// <summary>
		///  The content TTL for the website in seconds. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Ttl { get; set; }
		
		/// <summary>
		///  Display name for a branch, will use as the default domain prefix. 
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DisplayName { get; set; }
		
		/// <summary>
		///  Enables Pull Request Preview for this branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnablePullRequestPreview { get; set; }
		
		/// <summary>
		///  The Amplify Environment name for the pull request. 
		/// Max length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		public string PullRequestEnvironmentName { get; set; }
		
		/// <summary>
		///  ARN for a Backend Environment, part of an Amplify App. 
		/// Max length: 1000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength=1)]
		public string BackendEnvironmentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateBranchBodyStage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPERIMENTAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PULL_REQUEST = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainAssociationBody
	{
		
		/// <summary>
		///  Enables automated creation of Subdomains for branches. (Currently not supported) 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableAutoSubDomain { get; set; }
		
		/// <summary>
		///  Setting structure for the Subdomain. 
		/// Maximum items: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public SubDomainSetting[] SubDomainSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateWebhookBody
	{
		
		/// <summary>
		///  Name for a branch, part of an Amplify App. 
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string BranchName { get; set; }
		
		/// <summary>
		///  Description for a webhook. 
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GenerateAccessLogsBody
	{
		
		/// <summary>
		///  The time at which the logs should start, inclusive. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		///  The time at which the logs should end, inclusive. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		///  Name of the domain. 
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartJobBody
	{
		
		/// <summary>
		///  Unique Id for an existing job. Required for "RETRY" JobType. 
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string JobId { get; set; }
		
		/// <summary>
		///  Type for the Job. Available JobTypes are: \n "RELEASE": Start a new job with the latest change from the specified branch. Only available for apps that have connected to a repository. "RETRY": Retry an existing job. JobId is required for this type of job. 
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartJobBodyJobType JobType { get; set; }
		
		/// <summary>
		///  Descriptive reason for starting this job. 
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string JobReason { get; set; }
		
		/// <summary>
		///  Commit Id from 3rd party repository provider for the Job. 
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string CommitId { get; set; }
		
		/// <summary>
		///  Commit message from 3rd party repository provider for the Job. 
		/// Max length: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10000)]
		public string CommitMessage { get; set; }
		
		/// <summary>
		///  Commit date / time for the Job. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CommitTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartJobBodyJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELEASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETRY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_HOOK = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		///  Tags used to tag resource. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartDeploymentBody
	{
		
		/// <summary>
		///  The job id for this deployment, generated by create deployment request. 
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string JobId { get; set; }
		
		/// <summary>
		///  The sourceUrl for this deployment, used when calling start deployment without create deployment. SourceUrl can be any HTTP GET url that is public accessible and downloads a single zip. 
		/// Max length: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1000)]
		public string SourceUrl { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
