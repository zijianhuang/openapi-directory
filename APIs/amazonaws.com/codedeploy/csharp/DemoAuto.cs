//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents the input of, and adds tags to, an on-premises instance operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddTagsToOnPremisesInstancesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceName[] InstanceNames { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchGetApplicationRevisions</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetApplicationRevisionsOutput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RevisionInfo[] Revisions { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>BatchGetApplicationRevisions</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetApplicationRevisionsInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RevisionLocation[] Revisions { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchGetApplications</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetApplicationsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ApplicationInfo[] ApplicationsInfo { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>BatchGetApplications</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetApplicationsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ApplicationName[] ApplicationNames { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchGetDeploymentGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetDeploymentGroupsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentGroupInfo[] DeploymentGroupsInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>BatchGetDeploymentGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetDeploymentGroupsInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeploymentGroupName[] DeploymentGroupNames { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchGetDeploymentInstances</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetDeploymentInstancesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceSummary[] InstancesSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	///  Represents the input of a <code>BatchGetDeploymentInstances</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetDeploymentInstancesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceId[] InstanceIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetDeploymentTargetsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentTarget[] DeploymentTargets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetDeploymentTargetsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetId[] TargetIds { get; set; }
	}
	
	/// <summary>
	///  Represents the output of a <code>BatchGetDeployments</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetDeploymentsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentInfo[] DeploymentsInfo { get; set; }
	}
	
	/// <summary>
	///  Represents the input of a <code>BatchGetDeployments</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetDeploymentsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeploymentId[] DeploymentIds { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>BatchGetOnPremisesInstances</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetOnPremisesInstancesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceInfo[] InstanceInfos { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>BatchGetOnPremisesInstances</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetOnPremisesInstancesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceName[] InstanceNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContinueDeploymentInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContinueDeploymentInputDeploymentWaitType DeploymentWaitType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContinueDeploymentInputDeploymentWaitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_WAIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATION_WAIT = 1,
	}
	
	/// <summary>
	/// Represents the output of a <code>CreateApplication</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateApplicationOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApplicationId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>CreateApplication</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateApplicationInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateApplicationInputComputePlatform ComputePlatform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateApplicationInputComputePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Server = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lambda = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECS = 2,
	}
	
	/// <summary>
	///  Represents the output of a <code>CreateDeployment</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeploymentOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>CreateDeployment</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeploymentInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DeploymentGroupName { get; set; }
		
		/// <summary>
		/// Information about the location of an application revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RevisionLocation Revision { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DeploymentConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IgnoreApplicationStopFailures { get; set; }
		
		/// <summary>
		/// Information about the instances to be used in the replacement environment in a blue/green deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TargetInstances TargetInstances { get; set; }
		
		/// <summary>
		/// Information about a configuration for automatically rolling back to a previous version of an application revision when a deployment is not completed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoRollbackConfiguration AutoRollbackConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UpdateOutdatedInstancesOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateDeploymentInputFileExistsBehavior FileExistsBehavior { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDeploymentInputFileExistsBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERWRITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAIN = 2,
	}
	
	/// <summary>
	/// Represents the output of a <code>CreateDeploymentConfig</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeploymentConfigOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentConfigId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>CreateDeploymentConfig</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeploymentConfigInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DeploymentConfigName { get; set; }
		
		/// <summary>
		/// Information about minimum healthy instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MinimumHealthyHosts MinimumHealthyHosts { get; set; }
		
		/// <summary>
		/// The configuration that specifies how traffic is shifted from one version of a Lambda function to another version during an AWS Lambda deployment, or from one Amazon ECS task set to another during an Amazon ECS deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficRoutingConfig TrafficRoutingConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateDeploymentConfigInputComputePlatform ComputePlatform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDeploymentConfigInputComputePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Server = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lambda = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECS = 2,
	}
	
	/// <summary>
	/// Represents the output of a <code>CreateDeploymentGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeploymentGroupOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentGroupId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>CreateDeploymentGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeploymentGroupInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DeploymentGroupName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DeploymentConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EC2TagFilter[] Ec2TagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagFilter[] OnPremisesInstanceTagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingGroupName[] AutoScalingGroups { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TriggerConfig[] TriggerConfigurations { get; set; }
		
		/// <summary>
		/// Information about alarms associated with the deployment group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AlarmConfiguration AlarmConfiguration { get; set; }
		
		/// <summary>
		/// Information about a configuration for automatically rolling back to a previous version of an application revision when a deployment is not completed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoRollbackConfiguration AutoRollbackConfiguration { get; set; }
		
		/// <summary>
		/// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentStyle DeploymentStyle { get; set; }
		
		/// <summary>
		/// Information about blue/green deployment options for a deployment group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BlueGreenDeploymentConfiguration BlueGreenDeploymentConfiguration { get; set; }
		
		/// <summary>
		/// Information about the Elastic Load Balancing load balancer or target group used in a deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerInfo LoadBalancerInfo { get; set; }
		
		/// <summary>
		/// Information about groups of EC2 instance tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EC2TagSet Ec2TagSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ECSService[] EcsServices { get; set; }
		
		/// <summary>
		/// Information about groups of on-premises instance tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OnPremisesTagSet OnPremisesTagSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DeleteApplication</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteApplicationInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DeleteDeploymentConfig</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDeploymentConfigInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DeploymentConfigName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>DeleteDeploymentGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDeploymentGroupOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingGroup[] HooksNotCleanedUp { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DeleteDeploymentGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDeploymentGroupInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DeploymentGroupName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>DeleteGitHubAccountToken</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteGitHubAccountTokenOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TokenName { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DeleteGitHubAccount</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteGitHubAccountTokenInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TokenName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteResourcesByExternalIdInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExternalId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DeregisterOnPremisesInstance</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterOnPremisesInstanceInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>GetApplication</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetApplicationOutput
	{
		
		/// <summary>
		/// Information about an application.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ApplicationInfo Application { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetApplication</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetApplicationInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>GetApplicationRevision</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetApplicationRevisionOutput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Information about the location of an application revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RevisionLocation Revision { get; set; }
		
		/// <summary>
		/// Information about an application revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GenericRevisionInfo RevisionInfo { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetApplicationRevision</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetApplicationRevisionInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Information about the location of an application revision.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RevisionLocation Revision { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>GetDeployment</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeploymentOutput
	{
		
		/// <summary>
		/// Information about a deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentInfo DeploymentInfo { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetDeployment</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeploymentInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>GetDeploymentConfig</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeploymentConfigOutput
	{
		
		/// <summary>
		/// Information about a deployment configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentConfigInfo DeploymentConfigInfo { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetDeploymentConfig</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeploymentConfigInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DeploymentConfigName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>GetDeploymentGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeploymentGroupOutput
	{
		
		/// <summary>
		/// Information about a deployment group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentGroupInfo DeploymentGroupInfo { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetDeploymentGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeploymentGroupInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DeploymentGroupName { get; set; }
	}
	
	/// <summary>
	///  Represents the output of a <code>GetDeploymentInstance</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeploymentInstanceOutput
	{
		
		/// <summary>
		/// Information about an instance in a deployment.InstanceSummary is deprecated, use DeploymentTarget instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceSummary InstanceSummary { get; set; }
	}
	
	/// <summary>
	///  Represents the input of a <code>GetDeploymentInstance</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeploymentInstanceInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeploymentTargetOutput
	{
		
		/// <summary>
		///  Information about the deployment target. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentTarget DeploymentTarget { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeploymentTargetInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetId { get; set; }
	}
	
	/// <summary>
	///  Represents the output of a <code>GetOnPremisesInstance</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOnPremisesInstanceOutput
	{
		
		/// <summary>
		/// Information about an on-premises instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceInfo InstanceInfo { get; set; }
	}
	
	/// <summary>
	///  Represents the input of a <code>GetOnPremisesInstance</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOnPremisesInstanceInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>ListApplicationRevisions</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListApplicationRevisionsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RevisionLocation[] Revisions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Represents the input of a <code>ListApplicationRevisions</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListApplicationRevisionsInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListApplicationRevisionsInputSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListApplicationRevisionsInputSortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListApplicationRevisionsInputDeployed Deployed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListApplicationRevisionsInputSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		registerTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		firstUsedTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lastUsedTime = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListApplicationRevisionsInputSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListApplicationRevisionsInputDeployed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		include = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		exclude = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ignore = 2,
	}
	
	/// <summary>
	/// Represents the output of a ListApplications operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListApplicationsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ApplicationName[] Applications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ListApplications</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListApplicationsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>ListDeploymentConfigs</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDeploymentConfigsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentConfigName[] DeploymentConfigsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ListDeploymentConfigs</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDeploymentConfigsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>ListDeploymentGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDeploymentGroupsOutput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentGroupName[] DeploymentGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ListDeploymentGroups</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDeploymentGroupsInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>ListDeploymentInstances</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDeploymentInstancesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceId[] InstancesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Represents the input of a <code>ListDeploymentInstances</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDeploymentInstancesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceStatus[] InstanceStatusFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceType[] InstanceTypeFilter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDeploymentTargetsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetId[] TargetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDeploymentTargetsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetFilters TargetFilters { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>ListDeployments</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDeploymentsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentId[] Deployments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ListDeployments</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDeploymentsInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DeploymentGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExternalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentStatus[] IncludeOnlyStatuses { get; set; }
		
		/// <summary>
		/// Information about a time range.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimeRange CreateTimeRange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>ListGitHubAccountTokenNames</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListGitHubAccountTokenNamesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GitHubAccountTokenName[] TokenNameList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ListGitHubAccountTokenNames</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListGitHubAccountTokenNamesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of the list on-premises instances operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListOnPremisesInstancesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceName[] InstanceNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ListOnPremisesInstances</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListOnPremisesInstancesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListOnPremisesInstancesInputRegistrationStatus RegistrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagFilter[] TagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListOnPremisesInstancesInputRegistrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deregistered = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceInput
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=1)]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutLifecycleEventHookExecutionStatusOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleEventHookExecutionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutLifecycleEventHookExecutionStatusInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleEventHookExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PutLifecycleEventHookExecutionStatusInputStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutLifecycleEventHookExecutionStatusInputStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Skipped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 5,
	}
	
	/// <summary>
	/// Represents the input of a RegisterApplicationRevision operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterApplicationRevisionInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Information about the location of an application revision.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RevisionLocation Revision { get; set; }
	}
	
	/// <summary>
	/// Represents the input of the register on-premises instance operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterOnPremisesInstanceInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamSessionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamUserArn { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>RemoveTagsFromOnPremisesInstances</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveTagsFromOnPremisesInstancesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceName[] InstanceNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SkipWaitTimeForInstanceTerminationInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
	}
	
	/// <summary>
	///  Represents the output of a <code>StopDeployment</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopDeploymentOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StopDeploymentOutputStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StopDeploymentOutputStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
	}
	
	/// <summary>
	///  Represents the input of a <code>StopDeployment</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopDeploymentInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoRollbackEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceInput
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=1)]
		public string ResourceArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceInput
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=1)]
		public string ResourceArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Key[] TagKeys { get; set; }
	}
	
	/// <summary>
	/// Represents the input of an <code>UpdateApplication</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateApplicationInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string NewApplicationName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of an <code>UpdateDeploymentGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDeploymentGroupOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingGroup[] HooksNotCleanedUp { get; set; }
	}
	
	/// <summary>
	/// Represents the input of an <code>UpdateDeploymentGroup</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDeploymentGroupInput
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string CurrentDeploymentGroupName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string NewDeploymentGroupName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DeploymentConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EC2TagFilter[] Ec2TagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagFilter[] OnPremisesInstanceTagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingGroupName[] AutoScalingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TriggerConfig[] TriggerConfigurations { get; set; }
		
		/// <summary>
		/// Information about alarms associated with the deployment group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AlarmConfiguration AlarmConfiguration { get; set; }
		
		/// <summary>
		/// Information about a configuration for automatically rolling back to a previous version of an application revision when a deployment is not completed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoRollbackConfiguration AutoRollbackConfiguration { get; set; }
		
		/// <summary>
		/// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentStyle DeploymentStyle { get; set; }
		
		/// <summary>
		/// Information about blue/green deployment options for a deployment group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BlueGreenDeploymentConfiguration BlueGreenDeploymentConfiguration { get; set; }
		
		/// <summary>
		/// Information about the Elastic Load Balancing load balancer or target group used in a deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerInfo LoadBalancerInfo { get; set; }
		
		/// <summary>
		/// Information about groups of EC2 instance tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EC2TagSet Ec2TagSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ECSService[] EcsServices { get; set; }
		
		/// <summary>
		/// Information about groups of on-premises instance tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OnPremisesTagSet OnPremisesTagSet { get; set; }
	}
	
	/// <summary>
	/// Information about an alarm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Alarm
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Information about alarms associated with the deployment group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AlarmConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IgnorePollAlarmFailure { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Alarm[] Alarms { get; set; }
	}
	
	/// <summary>
	///  A revision for an AWS Lambda or Amazon ECS deployment that is a YAML-formatted or JSON-formatted string. For AWS Lambda and Amazon ECS deployments, the revision is the same as the AppSpec file. This method replaces the deprecated <code>RawString</code> data type. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AppSpecContent
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Sha256 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComputePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Server = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lambda = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECS = 2,
	}
	
	/// <summary>
	/// Information about an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplicationInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> LinkedToGitHub { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GitHubAccountName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApplicationInfoComputePlatform ComputePlatform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ApplicationInfoComputePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Server = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lambda = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ApplicationRevisionSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		registerTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		firstUsedTime = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lastUsedTime = 2,
	}
	
	/// <summary>
	/// Information about a configuration for automatically rolling back to a previous version of an application revision when a deployment is not completed successfully.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AutoRollbackConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoRollbackEvent[] Events { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutoRollbackEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYMENT_FAILURE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYMENT_STOP_ON_ALARM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYMENT_STOP_ON_REQUEST = 2,
	}
	
	/// <summary>
	/// Information about an Auto Scaling group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AutoScalingGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Hook { get; set; }
	}
	
	/// <summary>
	/// Information about whether instances in the original environment are terminated when a blue/green deployment is successful. <code>BlueInstanceTerminationOption</code> does not apply to Lambda deployments. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BlueInstanceTerminationOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BlueInstanceTerminationOptionAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TerminationWaitTimeInMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BlueInstanceTerminationOptionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEEP_ALIVE = 1,
	}
	
	/// <summary>
	/// Information about how traffic is rerouted to instances in a replacement environment in a blue/green deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentReadyOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentReadyOptionActionOnTimeout ActionOnTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> WaitTimeInMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentReadyOptionActionOnTimeout
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUE_DEPLOYMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP_DEPLOYMENT = 1,
	}
	
	/// <summary>
	/// Information about the instances that belong to the replacement environment in a blue/green deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GreenFleetProvisioningOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GreenFleetProvisioningOptionAction Action { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GreenFleetProvisioningOptionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCOVER_EXISTING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPY_AUTO_SCALING_GROUP = 1,
	}
	
	/// <summary>
	/// Information about blue/green deployment options for a deployment group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BlueGreenDeploymentConfiguration
	{
		
		/// <summary>
		/// Information about whether instances in the original environment are terminated when a blue/green deployment is successful. <code>BlueInstanceTerminationOption</code> does not apply to Lambda deployments. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BlueInstanceTerminationOption TerminateBlueInstancesOnDeploymentSuccess { get; set; }
		
		/// <summary>
		/// Information about how traffic is rerouted to instances in a replacement environment in a blue/green deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentReadyOption DeploymentReadyOption { get; set; }
		
		/// <summary>
		/// Information about the instances that belong to the replacement environment in a blue/green deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GreenFleetProvisioningOption GreenFleetProvisioningOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEEP_ALIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BundleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tar = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tgz = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zip = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YAML = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TargetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Skipped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 6,
	}
	
	/// <summary>
	///  Information about the target to be updated by an AWS CloudFormation blue/green deployment. This target type is used for all deployments initiated by a CloudFormation stack update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudFormationTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LifecycleEvent[] LifecycleEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CloudFormationTargetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TargetVersionWeight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CloudFormationTargetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Skipped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentWaitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY_WAIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATION_WAIT = 1,
	}
	
	/// <summary>
	/// Information about minimum healthy instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MinimumHealthyHosts
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MinimumHealthyHostsType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MinimumHealthyHostsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOST_COUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEET_PERCENT = 1,
	}
	
	/// <summary>
	/// The configuration that specifies how traffic is shifted from one version of a Lambda function to another version during an AWS Lambda deployment, or from one Amazon ECS task set to another during an Amazon ECS deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TrafficRoutingConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrafficRoutingConfigType Type { get; set; }
		
		/// <summary>
		/// A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimeBasedCanary TimeBasedCanary { get; set; }
		
		/// <summary>
		/// A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimeBasedLinear TimeBasedLinear { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TrafficRoutingConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimeBasedCanary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimeBasedLinear = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllAtOnce = 2,
	}
	
	/// <summary>
	/// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentStyle
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentStyleDeploymentType DeploymentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentStyleDeploymentOption DeploymentOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentStyleDeploymentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PLACE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE_GREEN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentStyleDeploymentOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITH_TRAFFIC_CONTROL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITHOUT_TRAFFIC_CONTROL = 1,
	}
	
	/// <summary>
	/// Information about the Elastic Load Balancing load balancer or target group used in a deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadBalancerInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ELBInfo[] ElbInfoList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupInfo[] TargetGroupInfoList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupPairInfo[] TargetGroupPairInfoList { get; set; }
	}
	
	/// <summary>
	/// Information about groups of EC2 instance tags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EC2TagSet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EC2TagFilterList[] Ec2TagSetList { get; set; }
	}
	
	/// <summary>
	/// Information about groups of on-premises instance tags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OnPremisesTagSet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagFilterList[] OnPremisesTagSetList { get; set; }
	}
	
	/// <summary>
	/// Information about the location of an application revision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RevisionLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RevisionLocationRevisionType RevisionType { get; set; }
		
		/// <summary>
		/// Information about the location of application artifacts stored in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Location S3Location { get; set; }
		
		/// <summary>
		/// Information about the location of application artifacts stored in GitHub.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GitHubLocation GitHubLocation { get; set; }
		
		/// <summary>
		/// A revision for an AWS Lambda deployment that is a YAML-formatted or JSON-formatted string. For AWS Lambda deployments, the revision is the same as the AppSpec file.RawString and String revision type are deprecated, use AppSpecContent type instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RawString String { get; set; }
		
		/// <summary>
		///  A revision for an AWS Lambda or Amazon ECS deployment that is a YAML-formatted or JSON-formatted string. For AWS Lambda and Amazon ECS deployments, the revision is the same as the AppSpec file. This method replaces the deprecated <code>RawString</code> data type. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AppSpecContent AppSpecContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RevisionLocationRevisionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GitHub = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AppSpecContent = 3,
	}
	
	/// <summary>
	/// Information about the instances to be used in the replacement environment in a blue/green deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetInstances
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EC2TagFilter[] TagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingGroupName[] AutoScalingGroups { get; set; }
		
		/// <summary>
		/// Information about groups of EC2 instance tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EC2TagSet Ec2TagSet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FileExistsBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERWRITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAIN = 2,
	}
	
	/// <summary>
	/// Information about a deployment configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentConfigInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentConfigId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DeploymentConfigName { get; set; }
		
		/// <summary>
		/// Information about minimum healthy instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MinimumHealthyHosts MinimumHealthyHosts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentConfigInfoComputePlatform ComputePlatform { get; set; }
		
		/// <summary>
		/// The configuration that specifies how traffic is shifted from one version of a Lambda function to another version during an AWS Lambda deployment, or from one Amazon ECS task set to another during an Amazon ECS deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficRoutingConfig TrafficRoutingConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentConfigInfoComputePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Server = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lambda = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentCreator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoscaling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		codeDeployRollback = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodeDeploy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormation = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationRollback = 5,
	}
	
	/// <summary>
	/// Information about the most recent attempted or successful deployment to a deployment group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LastDeploymentInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LastDeploymentInfoStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LastDeploymentInfoStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Queued = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Baking = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 7,
	}
	
	/// <summary>
	/// Information about a deployment group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentGroupInfo
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentGroupId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DeploymentGroupName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DeploymentConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EC2TagFilter[] Ec2TagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagFilter[] OnPremisesInstanceTagFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingGroup[] AutoScalingGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRoleArn { get; set; }
		
		/// <summary>
		/// Information about the location of an application revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RevisionLocation TargetRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TriggerConfig[] TriggerConfigurations { get; set; }
		
		/// <summary>
		/// Information about alarms associated with the deployment group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AlarmConfiguration AlarmConfiguration { get; set; }
		
		/// <summary>
		/// Information about a configuration for automatically rolling back to a previous version of an application revision when a deployment is not completed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoRollbackConfiguration AutoRollbackConfiguration { get; set; }
		
		/// <summary>
		/// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentStyle DeploymentStyle { get; set; }
		
		/// <summary>
		/// Information about blue/green deployment options for a deployment group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BlueGreenDeploymentConfiguration BlueGreenDeploymentConfiguration { get; set; }
		
		/// <summary>
		/// Information about the Elastic Load Balancing load balancer or target group used in a deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerInfo LoadBalancerInfo { get; set; }
		
		/// <summary>
		/// Information about the most recent attempted or successful deployment to a deployment group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LastDeploymentInfo LastSuccessfulDeployment { get; set; }
		
		/// <summary>
		/// Information about the most recent attempted or successful deployment to a deployment group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LastDeploymentInfo LastAttemptedDeployment { get; set; }
		
		/// <summary>
		/// Information about groups of EC2 instance tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EC2TagSet Ec2TagSet { get; set; }
		
		/// <summary>
		/// Information about groups of on-premises instance tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OnPremisesTagSet OnPremisesTagSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentGroupInfoComputePlatform ComputePlatform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ECSService[] EcsServices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentGroupInfoComputePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Server = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lambda = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Queued = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Baking = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 7,
	}
	
	/// <summary>
	/// Information about a deployment error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ErrorInformation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ErrorInformationCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ErrorInformationCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_ISSUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALARM_ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION_MISSING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOSCALING_VALIDATION_ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO_SCALING_CONFIGURATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO_SCALING_IAM_ROLE_PERMISSIONS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_APPLICATION_UNHEALTHY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYMENT_GROUP_MISSING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECS_UPDATE_ERROR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELASTIC_LOAD_BALANCING_INVALID = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELB_INVALID_INSTANCE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTH_CONSTRAINTS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTH_CONSTRAINTS_INVALID = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOOK_EXECUTION_FAILURE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM_ROLE_MISSING = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM_ROLE_PERMISSIONS = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ECS_SERVICE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_LAMBDA_CONFIGURATION = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_LAMBDA_FUNCTION = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_REVISION = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL_STOP = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_ELB_INFORMATION = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_GITHUB_TOKEN = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_EC2_SUBSCRIPTION = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_INSTANCES = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVER_MAX_INSTANCES = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_LIMIT_EXCEEDED = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVISION_MISSING = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THROTTLED = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMEOUT = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUDFORMATION_STACK_FAILURE = 33,
	}
	
	/// <summary>
	/// Information about the deployment status of the instances in the deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentOverview
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Pending { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Succeeded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Failed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Skipped { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Ready { get; set; }
	}
	
	/// <summary>
	/// Information about a deployment rollback.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RollbackInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RollbackDeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RollbackTriggeringDeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RollbackMessage { get; set; }
	}
	
	/// <summary>
	/// Information about a deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentInfo
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string ApplicationName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DeploymentGroupName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string DeploymentConfigName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		/// <summary>
		/// Information about the location of an application revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RevisionLocation PreviousRevision { get; set; }
		
		/// <summary>
		/// Information about the location of an application revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RevisionLocation Revision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentInfoStatus Status { get; set; }
		
		/// <summary>
		/// Information about a deployment error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorInformation ErrorInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompleteTime { get; set; }
		
		/// <summary>
		/// Information about the deployment status of the instances in the deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentOverview DeploymentOverview { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentInfoCreator Creator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IgnoreApplicationStopFailures { get; set; }
		
		/// <summary>
		/// Information about a configuration for automatically rolling back to a previous version of an application revision when a deployment is not completed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoRollbackConfiguration AutoRollbackConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UpdateOutdatedInstancesOnly { get; set; }
		
		/// <summary>
		/// Information about a deployment rollback.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RollbackInfo RollbackInfo { get; set; }
		
		/// <summary>
		/// Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentStyle DeploymentStyle { get; set; }
		
		/// <summary>
		/// Information about the instances to be used in the replacement environment in a blue/green deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TargetInstances TargetInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> InstanceTerminationWaitTimeStarted { get; set; }
		
		/// <summary>
		/// Information about blue/green deployment options for a deployment group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BlueGreenDeploymentConfiguration BlueGreenDeploymentConfiguration { get; set; }
		
		/// <summary>
		/// Information about the Elastic Load Balancing load balancer or target group used in a deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerInfo LoadBalancerInfo { get; set; }
		
		/// <summary>
		/// AdditionalDeploymentStatusInfo is deprecated, use DeploymentStatusMessageList instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalDeploymentStatusInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentInfoFileExistsBehavior FileExistsBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ErrorMessage[] DeploymentStatusMessages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentInfoComputePlatform ComputePlatform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExternalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentInfoStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Queued = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Baking = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentInfoCreator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoscaling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		codeDeployRollback = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodeDeploy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormation = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationRollback = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentInfoFileExistsBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERWRITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAIN = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentInfoComputePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Server = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lambda = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITH_TRAFFIC_CONTROL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITHOUT_TRAFFIC_CONTROL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentReadyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUE_DEPLOYMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP_DEPLOYMENT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PLACE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE_GREEN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceTarget = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaTarget = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECSTarget = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationTarget = 3,
	}
	
	/// <summary>
	///  A target Amazon EC2 or on-premises instance during a deployment that uses the EC2/On-premises compute platform. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceTargetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LifecycleEvent[] LifecycleEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceTargetInstanceLabel InstanceLabel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceTargetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Skipped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceTargetInstanceLabel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Green = 1,
	}
	
	/// <summary>
	///  Information about the target AWS Lambda function during an AWS Lambda deployment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LambdaTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LambdaTargetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LifecycleEvent[] LifecycleEvents { get; set; }
		
		/// <summary>
		///  Information about a Lambda function specified in a deployment. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LambdaFunctionInfo LambdaFunctionInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LambdaTargetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Skipped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 6,
	}
	
	/// <summary>
	///  Information about the target of an Amazon ECS deployment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ECSTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LifecycleEvent[] LifecycleEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ECSTargetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ECSTaskSet[] TaskSetsInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ECSTargetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Skipped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 6,
	}
	
	/// <summary>
	///  Information about the deployment target. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentTargetDeploymentTargetType DeploymentTargetType { get; set; }
		
		/// <summary>
		///  A target Amazon EC2 or on-premises instance during a deployment that uses the EC2/On-premises compute platform. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceTarget InstanceTarget { get; set; }
		
		/// <summary>
		///  Information about the target AWS Lambda function during an AWS Lambda deployment. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LambdaTarget LambdaTarget { get; set; }
		
		/// <summary>
		///  Information about the target of an Amazon ECS deployment. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ECSTarget EcsTarget { get; set; }
		
		/// <summary>
		///  Information about the target to be updated by an AWS CloudFormation blue/green deployment. This target type is used for all deployments initiated by a CloudFormation stack update.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudFormationTarget CloudFormationTarget { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentTargetDeploymentTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceTarget = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaTarget = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECSTarget = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationTarget = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LifecycleErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScriptMissing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScriptNotExecutable = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScriptTimedOut = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScriptFailed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnknownError = 5,
	}
	
	/// <summary>
	/// Diagnostic information about executable scripts that are part of a deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Diagnostics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DiagnosticsErrorCode ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScriptName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogTail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DiagnosticsErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScriptMissing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScriptNotExecutable = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScriptTimedOut = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScriptFailed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnknownError = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EC2TagFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_ONLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_AND_VALUE = 2,
	}
	
	/// <summary>
	/// Information about an EC2 tag filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EC2TagFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EC2TagFilterType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EC2TagFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_ONLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_AND_VALUE = 2,
	}
	
	/// <summary>
	///  Contains the service and cluster names used to identify an Amazon ECS deployment's target. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ECSService
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterName { get; set; }
	}
	
	/// <summary>
	/// Information about a target group in Elastic Load Balancing to use in a deployment. Instances are registered as targets in a target group, and traffic is routed to the target group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetGroupInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TargetLabel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Green = 1,
	}
	
	/// <summary>
	///  Information about a set of Amazon ECS tasks in an AWS CodeDeploy deployment. An Amazon ECS task set includes details such as the desired number of tasks, how many tasks are running, and whether the task set serves production traffic. An AWS CodeDeploy application that uses the Amazon ECS compute platform deploys a containerized application in an Amazon ECS service as a task set. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ECSTaskSet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Identifer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DesiredCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PendingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RunningCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TrafficWeight { get; set; }
		
		/// <summary>
		/// Information about a target group in Elastic Load Balancing to use in a deployment. Instances are registered as targets in a target group, and traffic is routed to the target group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupInfo TargetGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ECSTaskSetTaskSetLabel TaskSetLabel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ECSTaskSetTaskSetLabel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Green = 1,
	}
	
	/// <summary>
	/// Information about a load balancer in Elastic Load Balancing to use in a deployment. Instances are registered directly with a load balancer, and traffic is routed to the load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ELBInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGENT_ISSUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALARM_ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION_MISSING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOSCALING_VALIDATION_ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO_SCALING_CONFIGURATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO_SCALING_IAM_ROLE_PERMISSIONS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_APPLICATION_UNHEALTHY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYMENT_GROUP_MISSING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECS_UPDATE_ERROR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELASTIC_LOAD_BALANCING_INVALID = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELB_INVALID_INSTANCE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTH_CONSTRAINTS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTH_CONSTRAINTS_INVALID = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOOK_EXECUTION_FAILURE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM_ROLE_MISSING = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAM_ROLE_PERMISSIONS = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ECS_SERVICE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_LAMBDA_CONFIGURATION = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_LAMBDA_FUNCTION = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_REVISION = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL_STOP = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_ELB_INFORMATION = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_GITHUB_TOKEN = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_EC2_SUBSCRIPTION = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_INSTANCES = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVER_MAX_INSTANCES = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_LIMIT_EXCEEDED = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVISION_MISSING = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THROTTLED = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMEOUT = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUDFORMATION_STACK_FAILURE = 33,
	}
	
	/// <summary>
	/// Information about an application revision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GenericRevisionInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentGroupName[] DeploymentGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FirstUsedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUsedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RegisterTime { get; set; }
	}
	
	/// <summary>
	/// Information about an instance in a deployment.InstanceSummary is deprecated, use DeploymentTarget instead.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// InstanceStatus is deprecated, use TargetStatus instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LifecycleEvent[] LifecycleEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceSummaryInstanceType InstanceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Skipped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceSummaryInstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Green = 1,
	}
	
	/// <summary>
	/// Information about an on-premises instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamSessionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamUserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RegisterTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeregisterTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Information about the location of application artifacts stored in GitHub.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GitHubLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Repository { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CommitId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GreenFleetProvisioningAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCOVER_EXISTING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPY_AUTO_SCALING_GROUP = 1,
	}
	
	/// <summary>
	/// InstanceStatus is deprecated, use TargetStatus instead.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Skipped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Green = 1,
	}
	
	/// <summary>
	///  Information about a Lambda function specified in a deployment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LambdaFunctionInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FunctionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FunctionAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TargetVersionWeight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LifecycleEventStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Skipped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 5,
	}
	
	/// <summary>
	/// Information about a deployment lifecycle event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LifecycleEvent
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LifecycleEventName { get; set; }
		
		/// <summary>
		/// Diagnostic information about executable scripts that are part of a deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Diagnostics Diagnostics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LifecycleEventStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LifecycleEventStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Skipped = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ascending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		descending = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListStateFilterAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		include = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		exclude = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ignore = 2,
	}
	
	/// <summary>
	/// Information about a time range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimeRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegistrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deregistered = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MinimumHealthyHostsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOST_COUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEET_PERCENT = 1,
	}
	
	/// <summary>
	/// A revision for an AWS Lambda deployment that is a YAML-formatted or JSON-formatted string. For AWS Lambda deployments, the revision is the same as the AppSpec file.RawString and String revision type are deprecated, use AppSpecContent type instead.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RawString
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Sha256 { get; set; }
	}
	
	/// <summary>
	/// Information about an application revision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RevisionInfo
	{
		
		/// <summary>
		/// Information about the location of an application revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RevisionLocation RevisionLocation { get; set; }
		
		/// <summary>
		/// Information about an application revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GenericRevisionInfo GenericRevisionInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RevisionLocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GitHub = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AppSpecContent = 3,
	}
	
	/// <summary>
	/// Information about the location of application artifacts stored in Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3Location
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3LocationBundleType BundleType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum S3LocationBundleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tar = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tgz = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zip = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YAML = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StopStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
	}
	
	/// <summary>
	/// Information about a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TagFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_ONLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_AND_VALUE = 2,
	}
	
	/// <summary>
	/// Information about an on-premises instance tag filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagFilterType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TagFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_ONLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_AND_VALUE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TargetFilterName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TargetStatus = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServerInstanceLabel = 1,
	}
	
	/// <summary>
	///  Information about a listener. The listener contains the path used to route traffic that is received from the load balancer to a target group. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TrafficRoute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListenerArn[] ListenerArns { get; set; }
	}
	
	/// <summary>
	///  Information about two target groups and how traffic is routed during an Amazon ECS deployment. An optional test traffic route can be specified. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetGroupPairInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupInfo[] TargetGroups { get; set; }
		
		/// <summary>
		///  Information about a listener. The listener contains the path used to route traffic that is received from the load balancer to a target group. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficRoute ProdTrafficRoute { get; set; }
		
		/// <summary>
		///  Information about a listener. The listener contains the path used to route traffic that is received from the load balancer to a target group. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficRoute TestTrafficRoute { get; set; }
	}
	
	/// <summary>
	/// A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimeBasedCanary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CanaryPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CanaryInterval { get; set; }
	}
	
	/// <summary>
	/// A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimeBasedLinear
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LinearPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LinearInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TrafficRoutingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimeBasedCanary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimeBasedLinear = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllAtOnce = 2,
	}
	
	/// <summary>
	/// Information about notification triggers for the deployment group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TriggerConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TriggerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TriggerTargetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TriggerEventType[] TriggerEvents { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TriggerEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentStart = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentSuccess = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentFailure = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentStop = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentRollback = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeploymentReady = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceStart = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSuccess = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceFailure = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceReady = 9,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Adds tags to on-premises instances.
		/// AddTagsToOnPremisesInstances /#X-Amz-Target=CodeDeploy_20141006.AddTagsToOnPremisesInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task AddTagsToOnPremisesInstancesAsync(AddTagsToOnPremisesInstancesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.AddTagsToOnPremisesInstances";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more application revisions. The maximum number of application revisions that can be returned is 25.
		/// BatchGetApplicationRevisions /#X-Amz-Target=CodeDeploy_20141006.BatchGetApplicationRevisions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetApplicationRevisionsOutput> BatchGetApplicationRevisionsAsync(BatchGetApplicationRevisionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.BatchGetApplicationRevisions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchGetApplicationRevisionsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more applications. The maximum number of applications that can be returned is 100.
		/// BatchGetApplications /#X-Amz-Target=CodeDeploy_20141006.BatchGetApplications
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetApplicationsOutput> BatchGetApplicationsAsync(BatchGetApplicationsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.BatchGetApplications";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchGetApplicationsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more deployment groups.
		/// BatchGetDeploymentGroups /#X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetDeploymentGroupsOutput> BatchGetDeploymentGroupsAsync(BatchGetDeploymentGroupsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentGroups";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchGetDeploymentGroupsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <note> <p> This method works, but is deprecated. Use <code>BatchGetDeploymentTargets</code> instead. </p> </note> <p> Returns an array of one or more instances associated with a deployment. This method works with EC2/On-premises and AWS Lambda compute platforms. The newer <code>BatchGetDeploymentTargets</code> works with all compute platforms. The maximum number of instances that can be returned is 25.</p>
		/// BatchGetDeploymentInstances /#X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetDeploymentInstancesOutput> BatchGetDeploymentInstancesAsync(BatchGetDeploymentInstancesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentInstances";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchGetDeploymentInstancesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Returns an array of one or more targets associated with a deployment. This method works with all compute types and should be used instead of the deprecated <code>BatchGetDeploymentInstances</code>. The maximum number of targets that can be returned is 25.</p> <p> The type of targets returned depends on the deployment's compute platform or deployment method: </p> <ul> <li> <p> <b>EC2/On-premises</b>: Information about EC2 instance targets. </p> </li> <li> <p> <b>AWS Lambda</b>: Information about Lambda functions targets. </p> </li> <li> <p> <b>Amazon ECS</b>: Information about Amazon ECS service targets. </p> </li> <li> <p> <b>CloudFormation</b>: Information about targets of blue/green deployments initiated by a CloudFormation stack update.</p> </li> </ul>
		/// BatchGetDeploymentTargets /#X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentTargets
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetDeploymentTargetsOutput> BatchGetDeploymentTargetsAsync(BatchGetDeploymentTargetsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.BatchGetDeploymentTargets";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchGetDeploymentTargetsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more deployments. The maximum number of deployments that can be returned is 25.
		/// BatchGetDeployments /#X-Amz-Target=CodeDeploy_20141006.BatchGetDeployments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetDeploymentsOutput> BatchGetDeploymentsAsync(BatchGetDeploymentsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.BatchGetDeployments";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchGetDeploymentsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more on-premises instances. The maximum number of on-premises instances that can be returned is 25.
		/// BatchGetOnPremisesInstances /#X-Amz-Target=CodeDeploy_20141006.BatchGetOnPremisesInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetOnPremisesInstancesOutput> BatchGetOnPremisesInstancesAsync(BatchGetOnPremisesInstancesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.BatchGetOnPremisesInstances";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchGetOnPremisesInstancesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// For a blue/green deployment, starts the process of rerouting traffic from instances in the original environment to instances in the replacement environment without waiting for a specified wait time to elapse. (Traffic rerouting, which is achieved by registering instances in the replacement environment with the load balancer, can start as soon as all instances have a status of Ready.)
		/// ContinueDeployment /#X-Amz-Target=CodeDeploy_20141006.ContinueDeployment
		/// </summary>
		/// <returns>Success</returns>
		public async Task ContinueDeploymentAsync(ContinueDeploymentInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.ContinueDeployment";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an application.
		/// CreateApplication /#X-Amz-Target=CodeDeploy_20141006.CreateApplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateApplicationOutput> CreateApplicationAsync(CreateApplicationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.CreateApplication";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateApplicationOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deploys an application revision through the specified deployment group.
		/// CreateDeployment /#X-Amz-Target=CodeDeploy_20141006.CreateDeployment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDeploymentOutput> CreateDeploymentAsync(CreateDeploymentInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.CreateDeployment";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDeploymentOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a deployment configuration.
		/// CreateDeploymentConfig /#X-Amz-Target=CodeDeploy_20141006.CreateDeploymentConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDeploymentConfigOutput> CreateDeploymentConfigAsync(CreateDeploymentConfigInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.CreateDeploymentConfig";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDeploymentConfigOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a deployment group to which application revisions are deployed.
		/// CreateDeploymentGroup /#X-Amz-Target=CodeDeploy_20141006.CreateDeploymentGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDeploymentGroupOutput> CreateDeploymentGroupAsync(CreateDeploymentGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.CreateDeploymentGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDeploymentGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an application.
		/// DeleteApplication /#X-Amz-Target=CodeDeploy_20141006.DeleteApplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteApplicationAsync(DeleteApplicationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.DeleteApplication";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a deployment configuration.</p> <note> <p>A deployment configuration cannot be deleted if it is currently in use. Predefined configurations cannot be deleted.</p> </note>
		/// DeleteDeploymentConfig /#X-Amz-Target=CodeDeploy_20141006.DeleteDeploymentConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteDeploymentConfigAsync(DeleteDeploymentConfigInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.DeleteDeploymentConfig";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a deployment group.
		/// DeleteDeploymentGroup /#X-Amz-Target=CodeDeploy_20141006.DeleteDeploymentGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDeploymentGroupOutput> DeleteDeploymentGroupAsync(DeleteDeploymentGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.DeleteDeploymentGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDeploymentGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a GitHub account connection.
		/// DeleteGitHubAccountToken /#X-Amz-Target=CodeDeploy_20141006.DeleteGitHubAccountToken
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteGitHubAccountTokenOutput> DeleteGitHubAccountTokenAsync(DeleteGitHubAccountTokenInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.DeleteGitHubAccountToken";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteGitHubAccountTokenOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes resources linked to an external ID.
		/// DeleteResourcesByExternalId /#X-Amz-Target=CodeDeploy_20141006.DeleteResourcesByExternalId
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteResourcesByExternalIdOutput> DeleteResourcesByExternalIdAsync(DeleteResourcesByExternalIdInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.DeleteResourcesByExternalId";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteResourcesByExternalIdOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deregisters an on-premises instance.
		/// DeregisterOnPremisesInstance /#X-Amz-Target=CodeDeploy_20141006.DeregisterOnPremisesInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeregisterOnPremisesInstanceAsync(DeregisterOnPremisesInstanceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.DeregisterOnPremisesInstance";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about an application.
		/// GetApplication /#X-Amz-Target=CodeDeploy_20141006.GetApplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetApplicationOutput> GetApplicationAsync(GetApplicationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.GetApplication";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetApplicationOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about an application revision.
		/// GetApplicationRevision /#X-Amz-Target=CodeDeploy_20141006.GetApplicationRevision
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetApplicationRevisionOutput> GetApplicationRevisionAsync(GetApplicationRevisionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.GetApplicationRevision";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetApplicationRevisionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about a deployment.</p> <note> <p> The <code>content</code> property of the <code>appSpecContent</code> object in the returned revision is always null. Use <code>GetApplicationRevision</code> and the <code>sha256</code> property of the returned <code>appSpecContent</code> object to get the content of the deployment’s AppSpec file. </p> </note>
		/// GetDeployment /#X-Amz-Target=CodeDeploy_20141006.GetDeployment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeploymentOutput> GetDeploymentAsync(GetDeploymentInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.GetDeployment";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDeploymentOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a deployment configuration.
		/// GetDeploymentConfig /#X-Amz-Target=CodeDeploy_20141006.GetDeploymentConfig
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeploymentConfigOutput> GetDeploymentConfigAsync(GetDeploymentConfigInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.GetDeploymentConfig";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDeploymentConfigOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a deployment group.
		/// GetDeploymentGroup /#X-Amz-Target=CodeDeploy_20141006.GetDeploymentGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeploymentGroupOutput> GetDeploymentGroupAsync(GetDeploymentGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.GetDeploymentGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDeploymentGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about an instance as part of a deployment.
		/// GetDeploymentInstance /#X-Amz-Target=CodeDeploy_20141006.GetDeploymentInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeploymentInstanceOutput> GetDeploymentInstanceAsync(GetDeploymentInstanceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.GetDeploymentInstance";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDeploymentInstanceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a deployment target.
		/// GetDeploymentTarget /#X-Amz-Target=CodeDeploy_20141006.GetDeploymentTarget
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeploymentTargetOutput> GetDeploymentTargetAsync(GetDeploymentTargetInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.GetDeploymentTarget";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDeploymentTargetOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about an on-premises instance.
		/// GetOnPremisesInstance /#X-Amz-Target=CodeDeploy_20141006.GetOnPremisesInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOnPremisesInstanceOutput> GetOnPremisesInstanceAsync(GetOnPremisesInstanceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.GetOnPremisesInstance";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetOnPremisesInstanceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists information about revisions for an application.
		/// ListApplicationRevisions /#X-Amz-Target=CodeDeploy_20141006.ListApplicationRevisions
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListApplicationRevisionsOutput> ListApplicationRevisionsAsync(string nextToken, ListApplicationRevisionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.ListApplicationRevisions?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListApplicationRevisionsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the applications registered with the IAM user or AWS account.
		/// ListApplications /#X-Amz-Target=CodeDeploy_20141006.ListApplications
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListApplicationsOutput> ListApplicationsAsync(string nextToken, ListApplicationsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.ListApplications?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListApplicationsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the deployment configurations with the IAM user or AWS account.
		/// ListDeploymentConfigs /#X-Amz-Target=CodeDeploy_20141006.ListDeploymentConfigs
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDeploymentConfigsOutput> ListDeploymentConfigsAsync(string nextToken, ListDeploymentConfigsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.ListDeploymentConfigs?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDeploymentConfigsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the deployment groups for an application registered with the IAM user or AWS account.
		/// ListDeploymentGroups /#X-Amz-Target=CodeDeploy_20141006.ListDeploymentGroups
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDeploymentGroupsOutput> ListDeploymentGroupsAsync(string nextToken, ListDeploymentGroupsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.ListDeploymentGroups?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDeploymentGroupsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <note> <p> The newer <code>BatchGetDeploymentTargets</code> should be used instead because it works with all compute types. <code>ListDeploymentInstances</code> throws an exception if it is used with a compute platform other than EC2/On-premises or AWS Lambda. </p> </note> <p> Lists the instance for a deployment associated with the IAM user or AWS account. </p>
		/// ListDeploymentInstances /#X-Amz-Target=CodeDeploy_20141006.ListDeploymentInstances
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDeploymentInstancesOutput> ListDeploymentInstancesAsync(string nextToken, ListDeploymentInstancesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.ListDeploymentInstances?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDeploymentInstancesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns an array of target IDs that are associated a deployment.
		/// ListDeploymentTargets /#X-Amz-Target=CodeDeploy_20141006.ListDeploymentTargets
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListDeploymentTargetsOutput> ListDeploymentTargetsAsync(ListDeploymentTargetsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.ListDeploymentTargets";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDeploymentTargetsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the deployments in a deployment group for an application registered with the IAM user or AWS account.
		/// ListDeployments /#X-Amz-Target=CodeDeploy_20141006.ListDeployments
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDeploymentsOutput> ListDeploymentsAsync(string nextToken, ListDeploymentsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.ListDeployments?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDeploymentsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the names of stored connections to GitHub accounts.
		/// ListGitHubAccountTokenNames /#X-Amz-Target=CodeDeploy_20141006.ListGitHubAccountTokenNames
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListGitHubAccountTokenNamesOutput> ListGitHubAccountTokenNamesAsync(ListGitHubAccountTokenNamesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.ListGitHubAccountTokenNames";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListGitHubAccountTokenNamesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a list of names for one or more on-premises instances.</p> <p>Unless otherwise specified, both registered and deregistered on-premises instance names are listed. To list only registered or deregistered on-premises instance names, use the registration status parameter.</p>
		/// ListOnPremisesInstances /#X-Amz-Target=CodeDeploy_20141006.ListOnPremisesInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListOnPremisesInstancesOutput> ListOnPremisesInstancesAsync(ListOnPremisesInstancesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.ListOnPremisesInstances";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListOnPremisesInstancesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of tags for the resource identified by a specified Amazon Resource Name (ARN). Tags are used to organize and categorize your CodeDeploy resources.
		/// ListTagsForResource /#X-Amz-Target=CodeDeploy_20141006.ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceOutput> ListTagsForResourceAsync(ListTagsForResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.ListTagsForResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the result of a Lambda validation function. The function validates lifecycle hooks during a deployment that uses the AWS Lambda or Amazon ECS compute platform. For AWS Lambda deployments, the available lifecycle hooks are <code>BeforeAllowTraffic</code> and <code>AfterAllowTraffic</code>. For Amazon ECS deployments, the available lifecycle hooks are <code>BeforeInstall</code>, <code>AfterInstall</code>, <code>AfterAllowTestTraffic</code>, <code>BeforeAllowTraffic</code>, and <code>AfterAllowTraffic</code>. Lambda validation functions return <code>Succeeded</code> or <code>Failed</code>. For more information, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html#appspec-hooks-lambda">AppSpec 'hooks' Section for an AWS Lambda Deployment </a> and <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-structure-hooks.html#appspec-hooks-ecs">AppSpec 'hooks' Section for an Amazon ECS Deployment</a>.
		/// PutLifecycleEventHookExecutionStatus /#X-Amz-Target=CodeDeploy_20141006.PutLifecycleEventHookExecutionStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutLifecycleEventHookExecutionStatusOutput> PutLifecycleEventHookExecutionStatusAsync(PutLifecycleEventHookExecutionStatusInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.PutLifecycleEventHookExecutionStatus";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutLifecycleEventHookExecutionStatusOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Registers with AWS CodeDeploy a revision for the specified application.
		/// RegisterApplicationRevision /#X-Amz-Target=CodeDeploy_20141006.RegisterApplicationRevision
		/// </summary>
		/// <returns>Success</returns>
		public async Task RegisterApplicationRevisionAsync(RegisterApplicationRevisionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.RegisterApplicationRevision";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Registers an on-premises instance.</p> <note> <p>Only one IAM ARN (an IAM session ARN or IAM user ARN) is supported in the request. You cannot use both.</p> </note>
		/// RegisterOnPremisesInstance /#X-Amz-Target=CodeDeploy_20141006.RegisterOnPremisesInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task RegisterOnPremisesInstanceAsync(RegisterOnPremisesInstanceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.RegisterOnPremisesInstance";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes one or more tags from one or more on-premises instances.
		/// RemoveTagsFromOnPremisesInstances /#X-Amz-Target=CodeDeploy_20141006.RemoveTagsFromOnPremisesInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task RemoveTagsFromOnPremisesInstancesAsync(RemoveTagsFromOnPremisesInstancesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.RemoveTagsFromOnPremisesInstances";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// In a blue/green deployment, overrides any specified wait time and starts terminating instances immediately after the traffic routing is complete.
		/// SkipWaitTimeForInstanceTermination /#X-Amz-Target=CodeDeploy_20141006.SkipWaitTimeForInstanceTermination
		/// </summary>
		/// <returns>Success</returns>
		public async Task SkipWaitTimeForInstanceTerminationAsync(SkipWaitTimeForInstanceTerminationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.SkipWaitTimeForInstanceTermination";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attempts to stop an ongoing deployment.
		/// StopDeployment /#X-Amz-Target=CodeDeploy_20141006.StopDeployment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopDeploymentOutput> StopDeploymentAsync(StopDeploymentInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.StopDeployment";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopDeploymentOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates the list of tags in the input <code>Tags</code> parameter with the resource identified by the <code>ResourceArn</code> input parameter.
		/// TagResource /#X-Amz-Target=CodeDeploy_20141006.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceOutput> TagResourceAsync(TagResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.TagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates a resource from a list of tags. The resource is identified by the <code>ResourceArn</code> input parameter. The tags are identified by the list of keys in the <code>TagKeys</code> input parameter.
		/// UntagResource /#X-Amz-Target=CodeDeploy_20141006.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceOutput> UntagResourceAsync(UntagResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.UntagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Changes the name of an application.
		/// UpdateApplication /#X-Amz-Target=CodeDeploy_20141006.UpdateApplication
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdateApplicationAsync(UpdateApplicationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.UpdateApplication";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Changes information about a deployment group.
		/// UpdateDeploymentGroup /#X-Amz-Target=CodeDeploy_20141006.UpdateDeploymentGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDeploymentGroupOutput> UpdateDeploymentGroupAsync(UpdateDeploymentGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeDeploy_20141006.UpdateDeploymentGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDeploymentGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
