//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMemberOutput
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string MemberId { get; set; }
	}
	
	/// <summary>
	/// Configuration properties relevant to a member for the blockchain framework that the Managed Blockchain network uses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MemberFrameworkConfiguration
	{
		
		/// <summary>
		/// Configuration properties for Hyperledger Fabric for a member in a Managed Blockchain network using the Hyperledger Fabric framework.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MemberFabricConfiguration Fabric { get; set; }
	}
	
	/// <summary>
	/// Configuration properties for logging events associated with a member of a Managed Blockchain network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MemberLogPublishingConfiguration
	{
		
		/// <summary>
		/// Configuration properties for logging events associated with a member of a Managed Blockchain network using the Hyperledger Fabric framework.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MemberFabricLogPublishingConfiguration Fabric { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNetworkOutput
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string NetworkId { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string MemberId { get; set; }
	}
	
	/// <summary>
	/// Hyperledger Fabric configuration properties for the network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkFabricConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NetworkFabricConfigurationEdition Edition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkFabricConfigurationEdition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
	}
	
	/// <summary>
	/// A policy type that defines the voting rules for the network. The rules decide if a proposal is approved. Approval may be based on criteria such as the percentage of <code>YES</code> votes and the duration of the proposal. The policy applies to all proposals and is specified when the network is created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApprovalThresholdPolicy
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> ThresholdPercentage { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 168
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 168)]
		public System.Nullable<System.Int32> ProposalDurationInHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApprovalThresholdPolicyThresholdComparator ThresholdComparator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ApprovalThresholdPolicyThresholdComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN_OR_EQUAL_TO = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNodeOutput
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string NodeId { get; set; }
	}
	
	/// <summary>
	/// Configuration properties for logging events associated with a peer node owned by a member in a Managed Blockchain network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NodeLogPublishingConfiguration
	{
		
		/// <summary>
		/// Configuration properties for logging events associated with a peer node owned by a member in a Managed Blockchain network.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NodeFabricLogPublishingConfiguration Fabric { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProposalOutput
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string ProposalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMemberOutput
	{
		
		/// <summary>
		/// Member configuration properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Member Member { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetNetworkOutput
	{
		
		/// <summary>
		/// Network configuration properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Network Network { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetNodeOutput
	{
		
		/// <summary>
		/// Configuration properties of a peer node.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Node Node { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetProposalOutput
	{
		
		/// <summary>
		/// Properties of a proposal on a Managed Blockchain network.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Proposal Proposal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListInvitationsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Invitation[] Invitations { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListMembersOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MemberSummary[] Members { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListNetworksOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkSummary[] Networks { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListNodesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NodeSummary[] Nodes { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListProposalVotesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoteSummary[] ProposalVotes { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListProposalsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProposalSummary[] Proposals { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Configuration properties for logging events associated with a member of a Managed Blockchain network using the Hyperledger Fabric framework.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MemberFabricLogPublishingConfiguration
	{
		
		/// <summary>
		/// A collection of log configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogConfigurations CaLogs { get; set; }
	}
	
	/// <summary>
	/// Configuration properties for logging events associated with a peer node owned by a member in a Managed Blockchain network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NodeFabricLogPublishingConfiguration
	{
		
		/// <summary>
		/// A collection of log configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogConfigurations ChaincodeLogs { get; set; }
		
		/// <summary>
		/// A collection of log configurations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogConfigurations PeerLogs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ThresholdComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN_OR_EQUAL_TO = 1,
	}
	
	/// <summary>
	/// Configuration properties of the member.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MemberConfiguration
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^(?!-)^[^0-9](?!.*--)[A-Za-z0-9-]+[^- ]$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Description { get; set; }
		
		/// <summary>
		/// Configuration properties relevant to a member for the blockchain framework that the Managed Blockchain network uses.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MemberFrameworkConfiguration FrameworkConfiguration { get; set; }
		
		/// <summary>
		/// Configuration properties for logging events associated with a member of a Managed Blockchain network.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MemberLogPublishingConfiguration LogPublishingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMemberInput
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string InvitationId { get; set; }
		
		/// <summary>
		/// Configuration properties of the member.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MemberConfiguration MemberConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Framework
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPERLEDGER_FABRIC = 0,
	}
	
	/// <summary>
	///  Configuration properties relevant to the network for the blockchain framework that the network uses. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkFrameworkConfiguration
	{
		
		/// <summary>
		/// Hyperledger Fabric configuration properties for the network.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkFabricConfiguration Fabric { get; set; }
	}
	
	/// <summary>
	///  The voting rules for the network to decide if a proposal is accepted 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VotingPolicy
	{
		
		/// <summary>
		/// A policy type that defines the voting rules for the network. The rules decide if a proposal is approved. Approval may be based on criteria such as the percentage of <code>YES</code> votes and the duration of the proposal. The policy applies to all proposals and is specified when the network is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ApprovalThresholdPolicy ApprovalThresholdPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNetworkInput
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateNetworkInputFramework Framework { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string FrameworkVersion { get; set; }
		
		/// <summary>
		///  Configuration properties relevant to the network for the blockchain framework that the network uses. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkFrameworkConfiguration FrameworkConfiguration { get; set; }
		
		/// <summary>
		///  The voting rules for the network to decide if a proposal is accepted 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VotingPolicy VotingPolicy { get; set; }
		
		/// <summary>
		/// Configuration properties of the member.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MemberConfiguration MemberConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateNetworkInputFramework
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPERLEDGER_FABRIC = 0,
	}
	
	/// <summary>
	/// Configuration properties of a peer node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NodeConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// Configuration properties for logging events associated with a peer node owned by a member in a Managed Blockchain network.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NodeLogPublishingConfiguration LogPublishingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNodeInput
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Configuration properties of a peer node.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NodeConfiguration NodeConfiguration { get; set; }
	}
	
	/// <summary>
	///  The actions to carry out if a proposal is <code>APPROVED</code>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProposalActions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InviteAction[] Invitations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemoveAction[] Removals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProposalInput
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string MemberId { get; set; }
		
		/// <summary>
		///  The actions to carry out if a proposal is <code>APPROVED</code>. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProposalActions Actions { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Edition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
	}
	
	/// <summary>
	/// Member configuration properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Member
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string NetworkId { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^(?!-)^[^0-9](?!.*--)[A-Za-z0-9-]+[^- ]$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Description { get; set; }
		
		/// <summary>
		/// Attributes relevant to a member for the blockchain framework that the Managed Blockchain network uses.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MemberFrameworkAttributes FrameworkAttributes { get; set; }
		
		/// <summary>
		/// Configuration properties for logging events associated with a member of a Managed Blockchain network.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MemberLogPublishingConfiguration LogPublishingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemberStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MemberStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 5,
	}
	
	/// <summary>
	/// Network configuration properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Network
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFramework Framework { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string FrameworkVersion { get; set; }
		
		/// <summary>
		/// Attributes relevant to the network for the blockchain framework that the network uses.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkFrameworkAttributes FrameworkAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcEndpointServiceName { get; set; }
		
		/// <summary>
		///  The voting rules for the network to decide if a proposal is accepted 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VotingPolicy VotingPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkFramework
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPERLEDGER_FABRIC = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	/// <summary>
	/// Configuration properties of a peer node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Node
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string NetworkId { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string MemberId { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// Attributes relevant to a peer node on a Managed Blockchain network for the blockchain framework that the network uses.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NodeFrameworkAttributes FrameworkAttributes { get; set; }
		
		/// <summary>
		/// Configuration properties for logging events associated with a peer node owned by a member in a Managed Blockchain network.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NodeLogPublishingConfiguration LogPublishingConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NodeStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NodeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
	}
	
	/// <summary>
	/// Properties of a proposal on a Managed Blockchain network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Proposal
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string ProposalId { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string NetworkId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Description { get; set; }
		
		/// <summary>
		///  The actions to carry out if a proposal is <code>APPROVED</code>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProposalActions Actions { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string ProposedByMemberId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^(?!-)^[^0-9](?!.*--)[A-Za-z0-9-]+[^- ]$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ProposedByMemberName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProposalStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> YesVoteCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NoVoteCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OutstandingVoteCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProposalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InvitationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 4,
	}
	
	/// <summary>
	/// A summary of network configuration properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkSummary
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkSummaryFramework Framework { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string FrameworkVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkSummaryFramework
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPERLEDGER_FABRIC = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	/// <summary>
	/// An invitation to an AWS account to create a member and join the network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Invitation
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string InvitationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InvitationStatus Status { get; set; }
		
		/// <summary>
		/// A summary of network configuration properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkSummary NetworkSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InvitationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 4,
	}
	
	/// <summary>
	/// An action to invite a specific AWS account to create a member and join the network. The <code>InviteAction</code> is carried out when a <code>Proposal</code> is <code>APPROVED</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InviteAction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Principal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MemberStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NodeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
	}
	
	/// <summary>
	/// A configuration for logging events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LogConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// A collection of log configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LogConfigurations
	{
		
		/// <summary>
		/// A configuration for logging events.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogConfiguration Cloudwatch { get; set; }
	}
	
	/// <summary>
	/// Attributes relevant to a member for the blockchain framework that the Managed Blockchain network uses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MemberFrameworkAttributes
	{
		
		/// <summary>
		/// Attributes of Hyperledger Fabric for a member in a Managed Blockchain network using the Hyperledger Fabric framework.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MemberFabricAttributes Fabric { get; set; }
	}
	
	/// <summary>
	/// Attributes of Hyperledger Fabric for a member in a Managed Blockchain network using the Hyperledger Fabric framework.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MemberFabricAttributes
	{
		
		/// <summary>
		/// Max length: 16
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength=1)]
		public string AdminUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CaEndpoint { get; set; }
	}
	
	/// <summary>
	/// Configuration properties for Hyperledger Fabric for a member in a Managed Blockchain network using the Hyperledger Fabric framework.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MemberFabricConfiguration
	{
		
		/// <summary>
		/// Max length: 16
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength=1)]
		public string AdminUsername { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 8
		/// Pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?!.*[@'\\"/])[a-zA-Z0-9\S]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=8)]
		public string AdminPassword { get; set; }
	}
	
	/// <summary>
	/// A summary of configuration properties for a member.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MemberSummary
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^(?!-)^[^0-9](?!.*--)[A-Za-z0-9-]+[^- ]$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemberSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsOwned { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MemberSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 5,
	}
	
	/// <summary>
	/// Attributes relevant to the network for the blockchain framework that the network uses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkFrameworkAttributes
	{
		
		/// <summary>
		/// Attributes of Hyperledger Fabric for a network.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkFabricAttributes Fabric { get; set; }
	}
	
	/// <summary>
	/// Attributes of Hyperledger Fabric for a network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkFabricAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OrderingServiceEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkFabricAttributesEdition Edition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkFabricAttributesEdition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
	}
	
	/// <summary>
	/// Attributes relevant to a peer node on a Managed Blockchain network for the blockchain framework that the network uses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NodeFrameworkAttributes
	{
		
		/// <summary>
		/// Attributes of Hyperledger Fabric for a peer node on a Managed Blockchain network that uses Hyperledger Fabric.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NodeFabricAttributes Fabric { get; set; }
	}
	
	/// <summary>
	/// Attributes of Hyperledger Fabric for a peer node on a Managed Blockchain network that uses Hyperledger Fabric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NodeFabricAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PeerEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PeerEventEndpoint { get; set; }
	}
	
	/// <summary>
	/// A summary of configuration properties for a peer node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NodeSummary
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NodeSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NodeSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProposalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_FAILED = 4,
	}
	
	/// <summary>
	/// Properties of a proposal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProposalSummary
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string ProposalId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string ProposedByMemberId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^(?!-)^[^0-9](?!.*--)[A-Za-z0-9-]+[^- ]$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ProposedByMemberName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProposalSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProposalSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_FAILED = 4,
	}
	
	/// <summary>
	///  Properties of an individual vote that a member cast for a proposal. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VoteSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoteSummaryVote Vote { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^(?!-)^[^0-9](?!.*--)[A-Za-z0-9-]+[^- ]$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string MemberName { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string MemberId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VoteSummaryVote
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO = 1,
	}
	
	/// <summary>
	/// An action to remove a member from a Managed Blockchain network as the result of a removal proposal that is <code>APPROVED</code>. The member and all associated resources are deleted from the network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveAction
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string MemberId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMemberInput
	{
		
		/// <summary>
		/// Configuration properties for logging events associated with a member of a Managed Blockchain network.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MemberLogPublishingConfiguration LogPublishingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateNodeInput
	{
		
		/// <summary>
		/// Configuration properties for logging events associated with a peer node owned by a member in a Managed Blockchain network.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NodeLogPublishingConfiguration LogPublishingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VoteValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VoteOnProposalInput
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string VoterMemberId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VoteOnProposalInputVote Vote { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VoteOnProposalInputVote
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO = 1,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a member within a Managed Blockchain network.
		/// CreateMember /networks/{networkId}/members
		/// </summary>
		/// <param name="networkId">The unique identifier of the network in which the member is created.</param>
		/// <returns>Success</returns>
		public async Task<CreateMemberOutput> CreateMemberAsync(string networkId, CreateMemberBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/networks/"+ (networkId==null? "" : Uri.EscapeDataString(networkId))+"/members";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateMemberOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a listing of the members in a network and properties of their configurations.
		/// ListMembers /networks/{networkId}/members
		/// </summary>
		/// <param name="networkId">The unique identifier of the network for which to list members.</param>
		/// <param name="name">The optional name of the member to list.</param>
		/// <param name="status">An optional status specifier. If provided, only members currently in this status are listed.</param>
		/// <param name="isOwned">An optional Boolean value. If provided, the request is limited either to members that the current AWS account owns (<code>true</code>) or that other AWS accounts own (<code>false</code>). If omitted, all members are listed.</param>
		/// <param name="maxResults">The maximum number of members to return in the request.</param>
		/// <param name="nextToken">The pagination token that indicates the next set of results to retrieve.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMembersOutput> ListMembersAsync(string networkId, string name, MemberStatus status, bool isOwned, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/networks/"+ (networkId==null? "" : Uri.EscapeDataString(networkId))+"/members&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&status=" + status+"&isOwned="+isOwned+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListMembersOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new blockchain network using Amazon Managed Blockchain.
		/// CreateNetwork /networks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateNetworkOutput> CreateNetworkAsync(CreateNetworkBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/networks";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateNetworkOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the networks in which the current AWS account has members.
		/// ListNetworks /networks
		/// </summary>
		/// <param name="name">The name of the network.</param>
		/// <param name="framework">An optional framework specifier. If provided, only networks of this framework type are listed.</param>
		/// <param name="status">An optional status specifier. If provided, only networks currently in this status are listed.</param>
		/// <param name="maxResults">The maximum number of networks to list.</param>
		/// <param name="nextToken">The pagination token that indicates the next set of results to retrieve.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListNetworksOutput> ListNetworksAsync(string name, Framework framework, NetworkStatus status, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/networks?name=" + (name==null? "" : Uri.EscapeDataString(name))+"&framework=" + framework+"&status=" + status+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListNetworksOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a peer node in a member.
		/// CreateNode /networks/{networkId}/members/{memberId}/nodes
		/// </summary>
		/// <param name="networkId">The unique identifier of the network in which this node runs.</param>
		/// <param name="memberId">The unique identifier of the member that owns this node.</param>
		/// <returns>Success</returns>
		public async Task<CreateNodeOutput> CreateNodeAsync(string networkId, string memberId, CreateNodeBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/networks/"+ (networkId==null? "" : Uri.EscapeDataString(networkId))+"/members/"+ (memberId==null? "" : Uri.EscapeDataString(memberId))+"/nodes";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateNodeOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the nodes within a network.
		/// ListNodes /networks/{networkId}/members/{memberId}/nodes
		/// </summary>
		/// <param name="networkId">The unique identifier of the network for which to list nodes.</param>
		/// <param name="memberId">The unique identifier of the member who owns the nodes to list.</param>
		/// <param name="status">An optional status specifier. If provided, only nodes currently in this status are listed.</param>
		/// <param name="maxResults">The maximum number of nodes to list.</param>
		/// <param name="nextToken">The pagination token that indicates the next set of results to retrieve.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListNodesOutput> ListNodesAsync(string networkId, string memberId, NodeStatus status, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/networks/"+ (networkId==null? "" : Uri.EscapeDataString(networkId))+"/members/"+ (memberId==null? "" : Uri.EscapeDataString(memberId))+"/nodes&status=" + status+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListNodesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a proposal for a change to the network that other members of the network can vote on, for example, a proposal to add a new member to the network. Any member can create a proposal.
		/// CreateProposal /networks/{networkId}/proposals
		/// </summary>
		/// <param name="networkId"> The unique identifier of the network for which the proposal is made.</param>
		/// <returns>Success</returns>
		public async Task<CreateProposalOutput> CreateProposalAsync(string networkId, CreateProposalBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/networks/"+ (networkId==null? "" : Uri.EscapeDataString(networkId))+"/proposals";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateProposalOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a listing of proposals for the network.
		/// ListProposals /networks/{networkId}/proposals
		/// </summary>
		/// <param name="networkId"> The unique identifier of the network. </param>
		/// <param name="maxResults"> The maximum number of proposals to return. </param>
		/// <param name="nextToken"> The pagination token that indicates the next set of results to retrieve. </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListProposalsOutput> ListProposalsAsync(string networkId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/networks/"+ (networkId==null? "" : Uri.EscapeDataString(networkId))+"/proposals&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListProposalsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a member. Deleting a member removes the member and all associated resources from the network. <code>DeleteMember</code> can only be called for a specified <code>MemberId</code> if the principal performing the action is associated with the AWS account that owns the member. In all other cases, the <code>DeleteMember</code> action is carried out as the result of an approved proposal to remove a member. If <code>MemberId</code> is the last member in a network specified by the last AWS account, the network is deleted also.
		/// DeleteMember /networks/{networkId}/members/{memberId}
		/// </summary>
		/// <param name="networkId">The unique identifier of the network from which the member is removed.</param>
		/// <param name="memberId">The unique identifier of the member to remove.</param>
		/// <returns>Success</returns>
		public async Task<DeleteMemberOutput> DeleteMemberAsync(string networkId, string memberId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/networks/"+ (networkId==null? "" : Uri.EscapeDataString(networkId))+"/members/"+ (memberId==null? "" : Uri.EscapeDataString(memberId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteMemberOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns detailed information about a member.
		/// GetMember /networks/{networkId}/members/{memberId}
		/// </summary>
		/// <param name="networkId">The unique identifier of the network to which the member belongs.</param>
		/// <param name="memberId">The unique identifier of the member.</param>
		/// <returns>Success</returns>
		public async Task<GetMemberOutput> GetMemberAsync(string networkId, string memberId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/networks/"+ (networkId==null? "" : Uri.EscapeDataString(networkId))+"/members/"+ (memberId==null? "" : Uri.EscapeDataString(memberId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetMemberOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a peer node from a member that your AWS account owns. All data on the node is lost and cannot be recovered.
		/// DeleteNode /networks/{networkId}/members/{memberId}/nodes/{nodeId}
		/// </summary>
		/// <param name="networkId">The unique identifier of the network that the node belongs to.</param>
		/// <param name="memberId">The unique identifier of the member that owns this node.</param>
		/// <param name="nodeId">The unique identifier of the node.</param>
		/// <returns>Success</returns>
		public async Task<DeleteNodeOutput> DeleteNodeAsync(string networkId, string memberId, string nodeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/networks/"+ (networkId==null? "" : Uri.EscapeDataString(networkId))+"/members/"+ (memberId==null? "" : Uri.EscapeDataString(memberId))+"/nodes/"+ (nodeId==null? "" : Uri.EscapeDataString(nodeId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteNodeOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns detailed information about a peer node.
		/// GetNode /networks/{networkId}/members/{memberId}/nodes/{nodeId}
		/// </summary>
		/// <param name="networkId">The unique identifier of the network to which the node belongs.</param>
		/// <param name="memberId">The unique identifier of the member that owns the node.</param>
		/// <param name="nodeId">The unique identifier of the node.</param>
		/// <returns>Success</returns>
		public async Task<GetNodeOutput> GetNodeAsync(string networkId, string memberId, string nodeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/networks/"+ (networkId==null? "" : Uri.EscapeDataString(networkId))+"/members/"+ (memberId==null? "" : Uri.EscapeDataString(memberId))+"/nodes/"+ (nodeId==null? "" : Uri.EscapeDataString(nodeId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetNodeOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns detailed information about a network.
		/// GetNetwork /networks/{networkId}
		/// </summary>
		/// <param name="networkId">The unique identifier of the network to get information about.</param>
		/// <returns>Success</returns>
		public async Task<GetNetworkOutput> GetNetworkAsync(string networkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/networks/"+ (networkId==null? "" : Uri.EscapeDataString(networkId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetNetworkOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns detailed information about a proposal.
		/// GetProposal /networks/{networkId}/proposals/{proposalId}
		/// </summary>
		/// <param name="networkId">The unique identifier of the network for which the proposal is made.</param>
		/// <param name="proposalId">The unique identifier of the proposal.</param>
		/// <returns>Success</returns>
		public async Task<GetProposalOutput> GetProposalAsync(string networkId, string proposalId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/networks/"+ (networkId==null? "" : Uri.EscapeDataString(networkId))+"/proposals/"+ (proposalId==null? "" : Uri.EscapeDataString(proposalId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetProposalOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a listing of all invitations made on the specified network.
		/// ListInvitations /invitations
		/// </summary>
		/// <param name="maxResults">The maximum number of invitations to return.</param>
		/// <param name="nextToken">The pagination token that indicates the next set of results to retrieve.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInvitationsOutput> ListInvitationsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/invitations?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListInvitationsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the listing of votes for a specified proposal, including the value of each vote and the unique identifier of the member that cast the vote.
		/// ListProposalVotes /networks/{networkId}/proposals/{proposalId}/votes
		/// </summary>
		/// <param name="networkId"> The unique identifier of the network. </param>
		/// <param name="proposalId"> The unique identifier of the proposal. </param>
		/// <param name="maxResults"> The maximum number of votes to return. </param>
		/// <param name="nextToken"> The pagination token that indicates the next set of results to retrieve. </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListProposalVotesOutput> ListProposalVotesAsync(string networkId, string proposalId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/networks/"+ (networkId==null? "" : Uri.EscapeDataString(networkId))+"/proposals/"+ (proposalId==null? "" : Uri.EscapeDataString(proposalId))+"/votes&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListProposalVotesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Casts a vote for a specified <code>ProposalId</code> on behalf of a member. The member to vote as, specified by <code>VoterMemberId</code>, must be in the same AWS account as the principal that calls the action.
		/// VoteOnProposal /networks/{networkId}/proposals/{proposalId}/votes
		/// </summary>
		/// <param name="networkId"> The unique identifier of the network. </param>
		/// <param name="proposalId"> The unique identifier of the proposal. </param>
		/// <returns>Success</returns>
		public async Task<VoteOnProposalOutput> VoteOnProposalAsync(string networkId, string proposalId, VoteOnProposalBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/networks/"+ (networkId==null? "" : Uri.EscapeDataString(networkId))+"/proposals/"+ (proposalId==null? "" : Uri.EscapeDataString(proposalId))+"/votes";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<VoteOnProposalOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Rejects an invitation to join a network. This action can be called by a principal in an AWS account that has received an invitation to create a member and join a network.
		/// RejectInvitation /invitations/{invitationId}
		/// </summary>
		/// <param name="invitationId">The unique identifier of the invitation to reject.</param>
		/// <returns>Success</returns>
		public async Task<RejectInvitationOutput> RejectInvitationAsync(string invitationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/invitations/"+ (invitationId==null? "" : Uri.EscapeDataString(invitationId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RejectInvitationOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMemberBody
	{
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an AWS SDK or the AWS CLI.
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The unique identifier of the invitation that is sent to the member to join the network.
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string InvitationId { get; set; }
		
		/// <summary>
		/// Configuration properties of the member.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MemberConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNetworkBody
	{
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an AWS SDK or the AWS CLI.
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The name of the network.
		/// Max length: 64
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// An optional description for the network.
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Description { get; set; }
		
		/// <summary>
		/// The blockchain framework that the network uses.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateNetworkBodyFramework Framework { get; set; }
		
		/// <summary>
		/// The version of the blockchain framework that the network uses.
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string FrameworkVersion { get; set; }
		
		/// <summary>
		///  Configuration properties relevant to the network for the blockchain framework that the network uses. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FrameworkConfiguration { get; set; }
		
		/// <summary>
		///  The voting rules for the network to decide if a proposal is accepted 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VotingPolicy { get; set; }
		
		/// <summary>
		/// Configuration properties of the member.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MemberConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateNetworkBodyFramework
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPERLEDGER_FABRIC = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNodeBody
	{
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an AWS SDK or the AWS CLI.
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Configuration properties of a peer node.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NodeConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProposalBody
	{
		
		/// <summary>
		/// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an AWS SDK or the AWS CLI.
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The unique identifier of the member that is creating the proposal. This identifier is especially useful for identifying the member making the proposal when multiple members exist in a single AWS account.
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string MemberId { get; set; }
		
		/// <summary>
		///  The actions to carry out if a proposal is <code>APPROVED</code>. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Actions { get; set; }
		
		/// <summary>
		/// A description for the proposal that is visible to voting members, for example, "Proposal to add Example Corp. as member."
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VoteOnProposalBody
	{
		
		/// <summary>
		/// The unique identifier of the member casting the vote. 
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string VoterMemberId { get; set; }
		
		/// <summary>
		///  The value of the vote. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VoteOnProposalBodyVote Vote { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VoteOnProposalBodyVote
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
