//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociatePhoneNumbersWithVoiceConnectorResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberError[] PhoneNumberErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociatePhoneNumbersWithVoiceConnectorGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberError[] PhoneNumberErrors { get; set; }
	}
	
	/// <summary>
	/// An Active Directory (AD) group whose members are granted permission to act as delegates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SigninDelegateGroup
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchCreateAttendeeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attendee[] Attendees { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateAttendeeError[] Errors { get; set; }
	}
	
	/// <summary>
	/// The Amazon Chime SDK attendee fields to create, used with the BatchCreateAttendee action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAttendeeRequestItem
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=2)]
		public string ExternalUserId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchCreateRoomMembershipResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MemberError[] Errors { get; set; }
	}
	
	/// <summary>
	/// Membership details, such as member ID and member role.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MembershipItem
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MembershipItemRole Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MembershipItemRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Administrator = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Member = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchDeletePhoneNumberResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberError[] PhoneNumberErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchSuspendUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UserError[] UserErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchUnsuspendUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UserError[] UserErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchUpdatePhoneNumberResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberError[] PhoneNumberErrors { get; set; }
	}
	
	/// <summary>
	/// The phone number ID, product type, or calling name fields to update, used with the <a>BatchUpdatePhoneNumber</a> and <a>UpdatePhoneNumber</a> actions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePhoneNumberRequestItem
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePhoneNumberRequestItemProductType ProductType { get; set; }
		
		/// <summary>
		/// Pattern: ^$|^[a-zA-Z0-9 ]{2,15}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CallingName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdatePhoneNumberRequestItemProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BusinessCalling = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnector = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchUpdateUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UserError[] UserErrors { get; set; }
	}
	
	/// <summary>
	/// The user ID and user fields to update, used with the <a>BatchUpdateUser</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserRequestItem
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateUserRequestItemLicenseType LicenseType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateUserRequestItemUserType UserType { get; set; }
		
		/// <summary>
		/// The Alexa for Business metadata associated with an Amazon Chime user, used to integrate Alexa for Business with a device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AlexaForBusinessMetadata AlexaForBusinessMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateUserRequestItemLicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Plus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pro = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProTrial = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateUserRequestItemUserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrivateUser = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SharedDevice = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAccountResponse
	{
		
		/// <summary>
		/// The Amazon Chime account details. An AWS account can have multiple Amazon Chime accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Account Account { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAttendeeResponse
	{
		
		/// <summary>
		/// <p>An Amazon Chime SDK meeting attendee. Includes a unique <code>AttendeeId</code> and <code>JoinToken</code>. The <code>JoinToken</code> allows a client to authenticate and join as the specified attendee. The <code>JoinToken</code> expires when the meeting ends or when <a>DeleteAttendee</a> is called. After that, the attendee is unable to join the meeting.</p> <p>We recommend securely transferring each <code>JoinToken</code> from your server application to the client so that no other client has access to the token except for the one authorized to represent the attendee.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Attendee Attendee { get; set; }
	}
	
	/// <summary>
	/// Describes a tag applied to a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBotResponse
	{
		
		/// <summary>
		/// A resource that allows Enterprise account administrators to configure an interface to receive events from Amazon Chime.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Bot Bot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMeetingResponse
	{
		
		/// <summary>
		/// A meeting created using the Amazon Chime SDK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meeting Meeting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePhoneNumberOrderResponse
	{
		
		/// <summary>
		/// The details of a phone number order created for Amazon Chime.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberOrder PhoneNumberOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProxySessionResponse
	{
		
		/// <summary>
		/// The proxy session for an Amazon Chime Voice Connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProxySession ProxySession { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Capability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Voice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRoomResponse
	{
		
		/// <summary>
		/// The Amazon Chime chat room details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Room Room { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRoomMembershipResponse
	{
		
		/// <summary>
		/// The room membership details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RoomMembership RoomMembership { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUserResponse
	{
		
		/// <summary>
		/// The user on the Amazon Chime account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVoiceConnectorResponse
	{
		
		/// <summary>
		/// The Amazon Chime Voice Connector configuration, including outbound host name and encryption settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnector VoiceConnector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVoiceConnectorGroupResponse
	{
		
		/// <summary>
		/// The Amazon Chime Voice Connector group configuration, including associated Amazon Chime Voice Connectors. You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorGroup VoiceConnectorGroup { get; set; }
	}
	
	/// <summary>
	/// For Amazon Chime Voice Connector groups, the Amazon Chime Voice Connectors to which to route inbound calls. Includes priority configuration settings. Limit: 3 <code>VoiceConnectorItems</code> per Amazon Chime Voice Connector group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VoiceConnectorItem
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VoiceConnectorId { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 99
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 99)]
		public int Priority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociatePhoneNumbersFromVoiceConnectorResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberError[] PhoneNumberErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociatePhoneNumbersFromVoiceConnectorGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberError[] PhoneNumberErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAccountResponse
	{
		
		/// <summary>
		/// The Amazon Chime account details. An AWS account can have multiple Amazon Chime accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Account Account { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAccountSettingsResponse
	{
		
		/// <summary>
		/// Settings related to the Amazon Chime account. This includes settings that start or stop remote control of shared screens, or start or stop the dial-out option in the Amazon Chime web application. For more information about these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page</a> in the <i>Amazon Chime Administration Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountSettings AccountSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAttendeeResponse
	{
		
		/// <summary>
		/// <p>An Amazon Chime SDK meeting attendee. Includes a unique <code>AttendeeId</code> and <code>JoinToken</code>. The <code>JoinToken</code> allows a client to authenticate and join as the specified attendee. The <code>JoinToken</code> expires when the meeting ends or when <a>DeleteAttendee</a> is called. After that, the attendee is unable to join the meeting.</p> <p>We recommend securely transferring each <code>JoinToken</code> from your server application to the client so that no other client has access to the token except for the one authorized to represent the attendee.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Attendee Attendee { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBotResponse
	{
		
		/// <summary>
		/// A resource that allows Enterprise account administrators to configure an interface to receive events from Amazon Chime.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Bot Bot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetEventsConfigurationResponse
	{
		
		/// <summary>
		/// The configuration that allows a bot to receive outgoing events. Can be either an HTTPS endpoint or a Lambda function ARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventsConfiguration EventsConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetGlobalSettingsResponse
	{
		
		/// <summary>
		/// The Amazon Chime Business Calling settings for the administrator's AWS account. Includes any Amazon S3 buckets designated for storing call detail records.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BusinessCallingSettings BusinessCalling { get; set; }
		
		/// <summary>
		/// The Amazon Chime Voice Connector settings. Includes any Amazon S3 buckets designated for storing call detail records.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorSettings VoiceConnector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMeetingResponse
	{
		
		/// <summary>
		/// A meeting created using the Amazon Chime SDK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meeting Meeting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPhoneNumberResponse
	{
		
		/// <summary>
		/// A phone number used for Amazon Chime Business Calling or an Amazon Chime Voice Connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumber PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPhoneNumberOrderResponse
	{
		
		/// <summary>
		/// The details of a phone number order created for Amazon Chime.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberOrder PhoneNumberOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPhoneNumberSettingsResponse
	{
		
		/// <summary>
		/// Pattern: ^$|^[a-zA-Z0-9 ]{2,15}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CallingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CallingNameUpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetProxySessionResponse
	{
		
		/// <summary>
		/// The proxy session for an Amazon Chime Voice Connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProxySession ProxySession { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRetentionSettingsResponse
	{
		
		/// <summary>
		/// The retention settings for an Amazon Chime Enterprise account that determine how long to retain items such as chat room messages and chat conversation messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RetentionSettings RetentionSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> InitiateDeletionTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRoomResponse
	{
		
		/// <summary>
		/// The Amazon Chime chat room details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Room Room { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetUserResponse
	{
		
		/// <summary>
		/// The user on the Amazon Chime account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetUserSettingsResponse
	{
		
		/// <summary>
		/// Settings associated with an Amazon Chime user, including inbound and outbound calling and text messaging.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserSettings UserSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetVoiceConnectorResponse
	{
		
		/// <summary>
		/// The Amazon Chime Voice Connector configuration, including outbound host name and encryption settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnector VoiceConnector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetVoiceConnectorGroupResponse
	{
		
		/// <summary>
		/// The Amazon Chime Voice Connector group configuration, including associated Amazon Chime Voice Connectors. You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorGroup VoiceConnectorGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetVoiceConnectorLoggingConfigurationResponse
	{
		
		/// <summary>
		/// The logging configuration associated with an Amazon Chime Voice Connector. Specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoggingConfiguration LoggingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetVoiceConnectorOriginationResponse
	{
		
		/// <summary>
		/// Origination settings enable your SIP hosts to receive inbound calls using your Amazon Chime Voice Connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Origination Origination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetVoiceConnectorProxyResponse
	{
		
		/// <summary>
		/// The proxy configuration for an Amazon Chime Voice Connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Proxy Proxy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetVoiceConnectorStreamingConfigurationResponse
	{
		
		/// <summary>
		/// The streaming configuration associated with an Amazon Chime Voice Connector. Specifies whether media streaming is enabled for sending to Amazon Kinesis, and shows the retention period for the Amazon Kinesis data, in hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StreamingConfiguration StreamingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetVoiceConnectorTerminationResponse
	{
		
		/// <summary>
		/// Termination settings enable your SIP hosts to make outbound calls using your Amazon Chime Voice Connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Termination Termination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetVoiceConnectorTerminationHealthResponse
	{
		
		/// <summary>
		/// The termination health details, including the source IP address and timestamp of the last successful SIP <code>OPTIONS</code> message from your SIP infrastructure.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TerminationHealth TerminationHealth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InviteUsersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Invite[] Invites { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAccountsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Account[] Accounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAttendeeTagsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAttendeesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attendee[] Attendees { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListBotsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Bot[] Bots { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListMeetingTagsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListMeetingsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Meeting[] Meetings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPhoneNumberOrdersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberOrder[] PhoneNumberOrders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPhoneNumbersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumber[] PhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListProxySessionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProxySession[] ProxySessions { get; set; }
		
		/// <summary>
		/// Max length: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(65535)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListRoomMembershipsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RoomMembership[] RoomMemberships { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListRoomsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Room[] Rooms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUsersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public User[] Users { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListVoiceConnectorGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorGroup[] VoiceConnectorGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListVoiceConnectorTerminationCredentialsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SensitiveString[] Usernames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListVoiceConnectorsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnector[] VoiceConnectors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutEventsConfigurationResponse
	{
		
		/// <summary>
		/// The configuration that allows a bot to receive outgoing events. Can be either an HTTPS endpoint or a Lambda function ARN.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventsConfiguration EventsConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRetentionSettingsResponse
	{
		
		/// <summary>
		/// The retention settings for an Amazon Chime Enterprise account that determine how long to retain items such as chat room messages and chat conversation messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RetentionSettings RetentionSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> InitiateDeletionTimestamp { get; set; }
	}
	
	/// <summary>
	/// The retention settings that determine how long to retain chat room messages for an Amazon Chime Enterprise account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RoomRetentionSettings
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 5475
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 5475)]
		public System.Nullable<System.Int32> RetentionDays { get; set; }
	}
	
	/// <summary>
	/// The retention settings that determine how long to retain chat conversation messages for an Amazon Chime Enterprise account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConversationRetentionSettings
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 5475
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 5475)]
		public System.Nullable<System.Int32> RetentionDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorLoggingConfigurationResponse
	{
		
		/// <summary>
		/// The logging configuration associated with an Amazon Chime Voice Connector. Specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoggingConfiguration LoggingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorOriginationResponse
	{
		
		/// <summary>
		/// Origination settings enable your SIP hosts to receive inbound calls using your Amazon Chime Voice Connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Origination Origination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorProxyResponse
	{
		
		/// <summary>
		/// The proxy configuration for an Amazon Chime Voice Connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Proxy Proxy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorStreamingConfigurationResponse
	{
		
		/// <summary>
		/// The streaming configuration associated with an Amazon Chime Voice Connector. Specifies whether media streaming is enabled for sending to Amazon Kinesis, and shows the retention period for the Amazon Kinesis data, in hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StreamingConfiguration StreamingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorTerminationResponse
	{
		
		/// <summary>
		/// Termination settings enable your SIP hosts to make outbound calls using your Amazon Chime Voice Connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Termination Termination { get; set; }
	}
	
	/// <summary>
	/// The SIP credentials used to authenticate requests to your Amazon Chime Voice Connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Credential
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegenerateSecurityTokenResponse
	{
		
		/// <summary>
		/// A resource that allows Enterprise account administrators to configure an interface to receive events from Amazon Chime.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Bot Bot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResetPersonalPINResponse
	{
		
		/// <summary>
		/// The user on the Amazon Chime account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestorePhoneNumberResponse
	{
		
		/// <summary>
		/// A phone number used for Amazon Chime Business Calling or an Amazon Chime Voice Connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumber PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SearchAvailablePhoneNumbersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public E164PhoneNumber[] E164PhoneNumbers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAccountResponse
	{
		
		/// <summary>
		/// The Amazon Chime account details. An AWS account can have multiple Amazon Chime accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Account Account { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateBotResponse
	{
		
		/// <summary>
		/// A resource that allows Enterprise account administrators to configure an interface to receive events from Amazon Chime.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Bot Bot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePhoneNumberResponse
	{
		
		/// <summary>
		/// A phone number used for Amazon Chime Business Calling or an Amazon Chime Voice Connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumber PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateProxySessionResponse
	{
		
		/// <summary>
		/// The proxy session for an Amazon Chime Voice Connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProxySession ProxySession { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRoomResponse
	{
		
		/// <summary>
		/// The Amazon Chime chat room details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Room Room { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRoomMembershipResponse
	{
		
		/// <summary>
		/// The room membership details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RoomMembership RoomMembership { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserResponse
	{
		
		/// <summary>
		/// The user on the Amazon Chime account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
	}
	
	/// <summary>
	/// Settings that allow management of telephony permissions for an Amazon Chime user, such as inbound and outbound calling and text messaging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TelephonySettings
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool InboundCalling { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool OutboundCalling { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool SMS { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVoiceConnectorResponse
	{
		
		/// <summary>
		/// The Amazon Chime Voice Connector configuration, including outbound host name and encryption settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnector VoiceConnector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVoiceConnectorGroupResponse
	{
		
		/// <summary>
		/// The Amazon Chime Voice Connector group configuration, including associated Amazon Chime Voice Connectors. You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorGroup VoiceConnectorGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Team = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnterpriseDirectory = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnterpriseLWA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnterpriseOIDC = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum License
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Plus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pro = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProTrial = 3,
	}
	
	/// <summary>
	/// The Amazon Chime account details. An AWS account can have multiple Amazon Chime accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Account
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AwsAccountId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccountAccountType AccountType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccountDefaultLicense DefaultLicense { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public License[] SupportedLicenses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SigninDelegateGroup[] SigninDelegateGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountAccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Team = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnterpriseDirectory = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnterpriseLWA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnterpriseOIDC = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountDefaultLicense
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Plus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pro = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProTrial = 3,
	}
	
	/// <summary>
	/// Settings related to the Amazon Chime account. This includes settings that start or stop remote control of shared screens, or start or stop the dial-out option in the Amazon Chime web application. For more information about these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page</a> in the <i>Amazon Chime Administration Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableRemoteControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableDialOut { get; set; }
	}
	
	/// <summary>
	/// The Alexa for Business metadata associated with an Amazon Chime user, used to integrate Alexa for Business with a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AlexaForBusinessMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsAlexaForBusinessEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlexaForBusinessRoomArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociatePhoneNumberWithUserRequest
	{
		
		/// <summary>
		/// Pattern: ^\+?[1-9]\d{1,14}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string E164PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociatePhoneNumbersWithVoiceConnectorGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public E164PhoneNumber[] E164PhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceAssociate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociatePhoneNumbersWithVoiceConnectorRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public E164PhoneNumber[] E164PhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceAssociate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateSigninDelegateGroupsWithAccountRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SigninDelegateGroup[] SigninDelegateGroups { get; set; }
	}
	
	/// <summary>
	/// <p>An Amazon Chime SDK meeting attendee. Includes a unique <code>AttendeeId</code> and <code>JoinToken</code>. The <code>JoinToken</code> allows a client to authenticate and join as the specified attendee. The <code>JoinToken</code> expires when the meeting ends or when <a>DeleteAttendee</a> is called. After that, the attendee is unable to join the meeting.</p> <p>We recommend securely transferring each <code>JoinToken</code> from your server application to the client so that no other client has access to the token except for the one authorized to represent the attendee.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Attendee
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=2)]
		public string ExternalUserId { get; set; }
		
		/// <summary>
		/// Pattern: [a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AttendeeId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=2)]
		public string JoinToken { get; set; }
	}
	
	/// <summary>
	/// The list of errors returned when errors are encountered during the BatchCreateAttendee and CreateAttendee actions. This includes external user IDs, error codes, and error messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAttendeeError
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=2)]
		public string ExternalUserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchCreateAttendeeRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateAttendeeRequestItem[] Attendees { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchCreateRoomMembershipRequest
	{
		
		/// <summary>
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public MembershipItem[] MembershipItemList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchDeletePhoneNumberRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public String[] PhoneNumberIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchSuspendUserRequest
	{
		
		/// <summary>
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public NonEmptyString[] UserIdList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchUnsuspendUserRequest
	{
		
		/// <summary>
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public NonEmptyString[] UserIdList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchUpdatePhoneNumberRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdatePhoneNumberRequestItem[] UpdatePhoneNumberRequestItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchUpdateUserRequest
	{
		
		/// <summary>
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public UpdateUserRequestItem[] UpdateUserRequestItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BotType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChatBot = 0,
	}
	
	/// <summary>
	/// A resource that allows Enterprise account administrators to configure an interface to receive events from Amazon Chime.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Bot
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BotBotType BotType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BotEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecurityToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BotBotType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChatBot = 0,
	}
	
	/// <summary>
	/// The Amazon Chime Business Calling settings for the administrator's AWS account. Includes any Amazon S3 buckets designated for storing call detail records.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BusinessCallingSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CdrBucket { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CallingNameStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unassigned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateInProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateSucceeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateFailed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAccountRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAttendeeRequest
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=2)]
		public string ExternalUserId { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBotRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
	}
	
	/// <summary>
	/// The configuration for resource targets to receive notifications when Amazon Chime SDK meeting and attendee events occur.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MeetingNotificationConfiguration
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^arn[\/\:\-\_\.a-zA-Z0-9]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string SnsTopicArn { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^arn[\/\:\-\_\.a-zA-Z0-9]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string SqsQueueArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMeetingRequest
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 2
		/// Pattern: [-_a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=2)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=2)]
		public string ExternalMeetingId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=2)]
		public string MeetingHostId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaRegion { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The configuration for resource targets to receive notifications when Amazon Chime SDK meeting and attendee events occur.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MeetingNotificationConfiguration NotificationsConfiguration { get; set; }
	}
	
	/// <summary>
	/// A meeting created using the Amazon Chime SDK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Meeting
	{
		
		/// <summary>
		/// Pattern: [a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MeetingId { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=2)]
		public string ExternalMeetingId { get; set; }
		
		/// <summary>
		/// A set of endpoints used by clients to connect to the media service group for a Amazon Chime SDK meeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MediaPlacement MediaPlacement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BusinessCalling = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnector = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePhoneNumberOrderRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreatePhoneNumberOrderRequestProductType ProductType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public E164PhoneNumber[] E164PhoneNumbers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreatePhoneNumberOrderRequestProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BusinessCalling = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnector = 1,
	}
	
	/// <summary>
	/// The details of a phone number order created for Amazon Chime.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PhoneNumberOrder
	{
		
		/// <summary>
		/// Pattern: [a-fA-F0-9]{8}(?:-[a-fA-F0-9]{4}){3}-[a-fA-F0-9]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberOrderId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberOrderProductType ProductType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberOrderStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderedPhoneNumber[] OrderedPhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberOrderProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BusinessCalling = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnector = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberOrderStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Successful = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Partial = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NumberSelectionBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreferSticky = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AvoidSticky = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GeoMatchLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Country = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AreaCode = 1,
	}
	
	/// <summary>
	/// The country and area code for a proxy phone number in a proxy phone session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GeoMatchParams
	{
		
		/// <summary>
		/// Pattern: ^$|^[A-Z]{2,2}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		/// <summary>
		/// Pattern: ^$|^[0-9]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AreaCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProxySessionRequest
	{
		
		/// <summary>
		/// Minimum items: 2
		/// Maximum items: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public E164PhoneNumber[] ParticipantPhoneNumbers { get; set; }
		
		/// <summary>
		/// Pattern: ^$|^[a-zA-Z0-9 ]{0,30}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ExpiryMinutes { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Capability[] Capabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateProxySessionRequestNumberSelectionBehavior NumberSelectionBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateProxySessionRequestGeoMatchLevel GeoMatchLevel { get; set; }
		
		/// <summary>
		/// The country and area code for a proxy phone number in a proxy phone session.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GeoMatchParams GeoMatchParams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateProxySessionRequestNumberSelectionBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreferSticky = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AvoidSticky = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateProxySessionRequestGeoMatchLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Country = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AreaCode = 1,
	}
	
	/// <summary>
	/// The proxy session for an Amazon Chime Voice Connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProxySession
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string VoiceConnectorId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ProxySessionId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProxySessionStatus Status { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ExpiryMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Capability[] Capabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Participant[] Participants { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProxySessionNumberSelectionBehavior NumberSelectionBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProxySessionGeoMatchLevel GeoMatchLevel { get; set; }
		
		/// <summary>
		/// The country and area code for a proxy phone number in a proxy phone session.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GeoMatchParams GeoMatchParams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProxySessionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Closed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProxySessionNumberSelectionBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreferSticky = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AvoidSticky = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProxySessionGeoMatchLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Country = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AreaCode = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RoomMembershipRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Administrator = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Member = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRoomMembershipRequest
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateRoomMembershipRequestRole Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateRoomMembershipRequestRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Administrator = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Member = 1,
	}
	
	/// <summary>
	/// The room membership details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RoomMembership
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoomId { get; set; }
		
		/// <summary>
		/// The member details, such as email address, name, member ID, and member type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Member Member { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RoomMembershipRole Role { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvitedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RoomMembershipRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Administrator = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Member = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRoomRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 2
		/// Pattern: [-_a-zA-Z0-9]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=2)]
		public string ClientRequestToken { get; set; }
	}
	
	/// <summary>
	/// The Amazon Chime chat room details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Room
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoomId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrivateUser = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SharedDevice = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUserRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
		
		/// <summary>
		/// Pattern: .+@.+\..+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateUserRequestUserType UserType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateUserRequestUserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrivateUser = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SharedDevice = 1,
	}
	
	/// <summary>
	/// The user on the Amazon Chime account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class User
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Pattern: .+@.+\..+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryProvisionedNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserLicenseType LicenseType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserUserType UserType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserUserRegistrationStatus UserRegistrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserUserInvitationStatus UserInvitationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RegisteredOn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> InvitedOn { get; set; }
		
		/// <summary>
		/// The Alexa for Business metadata associated with an Amazon Chime user, used to integrate Alexa for Business with a device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AlexaForBusinessMetadata AlexaForBusinessMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PersonalPIN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserLicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Plus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pro = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProTrial = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserUserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrivateUser = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SharedDevice = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserUserRegistrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unregistered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registered = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserUserInvitationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVoiceConnectorGroupRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorItem[] VoiceConnectorItems { get; set; }
	}
	
	/// <summary>
	/// The Amazon Chime Voice Connector group configuration, including associated Amazon Chime Voice Connectors. You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VoiceConnectorGroup
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VoiceConnectorGroupId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorItem[] VoiceConnectorItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VoiceConnectorAwsRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-east-1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-2 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVoiceConnectorRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateVoiceConnectorRequestAwsRegion AwsRegion { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool RequireEncryption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateVoiceConnectorRequestAwsRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-east-1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-2 = 1,
	}
	
	/// <summary>
	/// The Amazon Chime Voice Connector configuration, including outbound host name and encryption settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VoiceConnector
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VoiceConnectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorAwsRegion AwsRegion { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutboundHostName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequireEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VoiceConnectorAwsRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-east-1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-2 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVoiceConnectorTerminationCredentialsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SensitiveString[] Usernames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociatePhoneNumbersFromVoiceConnectorGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public E164PhoneNumber[] E164PhoneNumbers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociatePhoneNumbersFromVoiceConnectorRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public E164PhoneNumber[] E164PhoneNumbers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateSigninDelegateGroupsFromAccountRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public String[] GroupNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EmailStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sent = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Conflict = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Forbidden = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFound = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreconditionFailed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceLimitExceeded = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceFailure = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccessDenied = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceUnavailable = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Throttled = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unauthorized = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unprocessable = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnectorGroupAssociationsExist = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PhoneNumberAssociationsExist = 13,
	}
	
	/// <summary>
	/// The configuration that allows a bot to receive outgoing events. Can be either an HTTPS endpoint or a Lambda function ARN.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutboundEventsHTTPSEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LambdaFunctionArn { get; set; }
	}
	
	/// <summary>
	/// The Amazon Chime Voice Connector settings. Includes any Amazon S3 buckets designated for storing call detail records.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VoiceConnectorSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CdrBucket { get; set; }
	}
	
	/// <summary>
	/// A phone number used for Amazon Chime Business Calling or an Amazon Chime Voice Connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PhoneNumber
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberId { get; set; }
		
		/// <summary>
		/// Pattern: ^\+?[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string E164PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberProductType ProductType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberStatus Status { get; set; }
		
		/// <summary>
		/// The phone number capabilities for Amazon Chime Business Calling phone numbers, such as enabled inbound and outbound calling and text messaging.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberCapabilities Capabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberAssociation[] Associations { get; set; }
		
		/// <summary>
		/// Pattern: ^$|^[a-zA-Z0-9 ]{2,15}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CallingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberCallingNameStatus CallingNameStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeletionTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Local = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TollFree = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BusinessCalling = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnector = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AcquireInProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AcquireFailed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unassigned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Assigned = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseInProgress = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteInProgress = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseFailed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteFailed = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberCallingNameStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unassigned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateInProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateSucceeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateFailed = 3,
	}
	
	/// <summary>
	/// The retention settings for an Amazon Chime Enterprise account that determine how long to retain items such as chat room messages and chat conversation messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RetentionSettings
	{
		
		/// <summary>
		/// The retention settings that determine how long to retain chat room messages for an Amazon Chime Enterprise account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RoomRetentionSettings RoomRetentionSettings { get; set; }
		
		/// <summary>
		/// The retention settings that determine how long to retain chat conversation messages for an Amazon Chime Enterprise account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConversationRetentionSettings ConversationRetentionSettings { get; set; }
	}
	
	/// <summary>
	/// Settings associated with an Amazon Chime user, including inbound and outbound calling and text messaging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserSettings
	{
		
		/// <summary>
		/// Settings that allow management of telephony permissions for an Amazon Chime user, such as inbound and outbound calling and text messaging.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TelephonySettings Telephony { get; set; }
	}
	
	/// <summary>
	/// The logging configuration associated with an Amazon Chime Voice Connector. Specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoggingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableSIPLogs { get; set; }
	}
	
	/// <summary>
	/// Origination settings enable your SIP hosts to receive inbound calls using your Amazon Chime Voice Connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Origination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OriginationRoute[] Routes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	/// <summary>
	/// The proxy configuration for an Amazon Chime Voice Connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Proxy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultSessionExpiryMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// Pattern: ^\+?[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FallBackPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] PhoneNumberCountries { get; set; }
	}
	
	/// <summary>
	/// The streaming configuration associated with an Amazon Chime Voice Connector. Specifies whether media streaming is enabled for sending to Amazon Kinesis, and shows the retention period for the Amazon Kinesis data, in hours.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StreamingConfiguration
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int DataRetentionInHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public StreamingNotificationTarget[] StreamingNotificationTargets { get; set; }
	}
	
	/// <summary>
	/// The termination health details, including the source IP address and timestamp of the last successful SIP <code>OPTIONS</code> message from your SIP infrastructure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TerminationHealth
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
	}
	
	/// <summary>
	/// Termination settings enable your SIP hosts to make outbound calls using your Amazon Chime Voice Connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Termination
	{
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> CpsLimit { get; set; }
		
		/// <summary>
		/// Pattern: ^\+?[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DefaultPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CallingRegion[] CallingRegions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] CidrAllowedList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InviteStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	/// <summary>
	/// Invitation object returned after emailing users to invite them to join the Amazon Chime <code>Team</code> account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Invite
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InviteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InviteStatus Status { get; set; }
		
		/// <summary>
		/// Pattern: .+@.+\..+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InviteEmailStatus EmailStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InviteStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accepted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InviteEmailStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sent = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InviteUsersRequest
	{
		
		/// <summary>
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public EmailAddress[] UserEmailList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InviteUsersRequestUserType UserType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InviteUsersRequestUserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrivateUser = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SharedDevice = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AcquireInProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AcquireFailed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unassigned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Assigned = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseInProgress = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteInProgress = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseFailed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteFailed = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberAssociationName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccountId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserId = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnectorId = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnectorGroupId = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProxySessionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Closed = 2,
	}
	
	/// <summary>
	/// A set of endpoints used by clients to connect to the media service group for a Amazon Chime SDK meeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MediaPlacement
	{
		
		/// <summary>
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096)]
		public string AudioHostUrl { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096)]
		public string AudioFallbackUrl { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096)]
		public string ScreenDataUrl { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096)]
		public string ScreenSharingUrl { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096)]
		public string ScreenViewingUrl { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096)]
		public string SignalingUrl { get; set; }
		
		/// <summary>
		/// Max length: 4096
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4096)]
		public string TurnControlUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MemberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bot = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Webhook = 2,
	}
	
	/// <summary>
	/// The member details, such as email address, name, member ID, and member type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Member
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemberMemberType MemberType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FullName { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MemberMemberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bot = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Webhook = 2,
	}
	
	/// <summary>
	/// The list of errors returned when a member action results in an error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MemberError
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MemberErrorErrorCode ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MemberErrorErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Conflict = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Forbidden = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFound = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreconditionFailed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceLimitExceeded = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceFailure = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccessDenied = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceUnavailable = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Throttled = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unauthorized = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unprocessable = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnectorGroupAssociationsExist = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PhoneNumberAssociationsExist = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NotificationTarget
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EventBridge = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrderedPhoneNumberStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Acquired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	/// <summary>
	/// A phone number for which an order has been placed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrderedPhoneNumber
	{
		
		/// <summary>
		/// Pattern: ^\+?[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string E164PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderedPhoneNumberStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrderedPhoneNumberStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Acquired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OriginationRouteProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 1,
	}
	
	/// <summary>
	/// Origination routes define call distribution properties for your SIP hosts to receive inbound calls using your Amazon Chime Voice Connector. Limit: Ten origination routes for each Amazon Chime Voice Connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OriginationRoute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Host { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OriginationRouteProtocol Protocol { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OriginationRouteProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 1,
	}
	
	/// <summary>
	/// The phone number and proxy phone number for a participant in an Amazon Chime Voice Connector proxy session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Participant
	{
		
		/// <summary>
		/// Pattern: ^\+?[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// Pattern: ^\+?[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProxyPhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Local = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TollFree = 1,
	}
	
	/// <summary>
	/// The phone number capabilities for Amazon Chime Business Calling phone numbers, such as enabled inbound and outbound calling and text messaging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PhoneNumberCapabilities
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> InboundCall { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OutboundCall { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> InboundSMS { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OutboundSMS { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> InboundMMS { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OutboundMMS { get; set; }
	}
	
	/// <summary>
	/// The phone number associations, such as Amazon Chime account ID, Amazon Chime user ID, Amazon Chime Voice Connector ID, or Amazon Chime Voice Connector group ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PhoneNumberAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberAssociationName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AssociatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberAssociationName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccountId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserId = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnectorId = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnectorGroupId = 3,
	}
	
	/// <summary>
	/// If the phone number action fails for one or more of the phone numbers in the request, a list of the phone numbers is returned, along with error codes and error messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PhoneNumberError
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberErrorErrorCode ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberErrorErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Conflict = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Forbidden = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFound = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreconditionFailed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceLimitExceeded = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceFailure = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccessDenied = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceUnavailable = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Throttled = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unauthorized = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unprocessable = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnectorGroupAssociationsExist = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PhoneNumberAssociationsExist = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PhoneNumberOrderStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Successful = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Partial = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutEventsConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OutboundEventsHTTPSEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LambdaFunctionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRetentionSettingsRequest
	{
		
		/// <summary>
		/// The retention settings for an Amazon Chime Enterprise account that determine how long to retain items such as chat room messages and chat conversation messages.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RetentionSettings RetentionSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorLoggingConfigurationRequest
	{
		
		/// <summary>
		/// The logging configuration associated with an Amazon Chime Voice Connector. Specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoggingConfiguration LoggingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorOriginationRequest
	{
		
		/// <summary>
		/// Origination settings enable your SIP hosts to receive inbound calls using your Amazon Chime Voice Connector.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Origination Origination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorProxyRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DefaultSessionExpiryMinutes { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Country[] PhoneNumberPoolCountries { get; set; }
		
		/// <summary>
		/// Pattern: ^\+?[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FallBackPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorStreamingConfigurationRequest
	{
		
		/// <summary>
		/// The streaming configuration associated with an Amazon Chime Voice Connector. Specifies whether media streaming is enabled for sending to Amazon Kinesis, and shows the retention period for the Amazon Kinesis data, in hours.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StreamingConfiguration StreamingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorTerminationCredentialsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Credential[] Credentials { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorTerminationRequest
	{
		
		/// <summary>
		/// Termination settings enable your SIP hosts to make outbound calls using your Amazon Chime Voice Connector.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Termination Termination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegistrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unregistered = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Registered = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 2,
	}
	
	/// <summary>
	/// The targeted recipient for a streaming configuration notification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StreamingNotificationTarget
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StreamingNotificationTargetNotificationTarget NotificationTarget { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StreamingNotificationTargetNotificationTarget
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EventBridge = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagAttendeeRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagMeetingRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^arn[\/\:\-\_\.a-zA-Z0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagAttendeeRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public TagKey[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagMeetingRequest
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagKey[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^arn[\/\:\-\_\.a-zA-Z0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagKey[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAccountRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAccountSettingsRequest
	{
		
		/// <summary>
		/// Settings related to the Amazon Chime account. This includes settings that start or stop remote control of shared screens, or start or stop the dial-out option in the Amazon Chime web application. For more information about these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page</a> in the <i>Amazon Chime Administration Guide</i>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountSettings AccountSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateBotRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateGlobalSettingsRequest
	{
		
		/// <summary>
		/// The Amazon Chime Business Calling settings for the administrator's AWS account. Includes any Amazon S3 buckets designated for storing call detail records.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BusinessCallingSettings BusinessCalling { get; set; }
		
		/// <summary>
		/// The Amazon Chime Voice Connector settings. Includes any Amazon S3 buckets designated for storing call detail records.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorSettings VoiceConnector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePhoneNumberRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePhoneNumberRequestProductType ProductType { get; set; }
		
		/// <summary>
		/// Pattern: ^$|^[a-zA-Z0-9 ]{2,15}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CallingName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdatePhoneNumberRequestProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BusinessCalling = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnector = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePhoneNumberSettingsRequest
	{
		
		/// <summary>
		/// Pattern: ^$|^[a-zA-Z0-9 ]{2,15}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallingName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateProxySessionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Capability[] Capabilities { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ExpiryMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRoomMembershipRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateRoomMembershipRequestRole Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateRoomMembershipRequestRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Administrator = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Member = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRoomRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateUserRequestLicenseType LicenseType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateUserRequestUserType UserType { get; set; }
		
		/// <summary>
		/// The Alexa for Business metadata associated with an Amazon Chime user, used to integrate Alexa for Business with a device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AlexaForBusinessMetadata AlexaForBusinessMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateUserRequestLicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Plus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pro = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProTrial = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateUserRequestUserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrivateUser = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SharedDevice = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserSettingsRequest
	{
		
		/// <summary>
		/// Settings associated with an Amazon Chime user, including inbound and outbound calling and text messaging.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UserSettings UserSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVoiceConnectorGroupRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorItem[] VoiceConnectorItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVoiceConnectorRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool RequireEncryption { get; set; }
	}
	
	/// <summary>
	/// The list of errors returned when errors are encountered during the <a>BatchSuspendUser</a>, <a>BatchUnsuspendUser</a>, or <a>BatchUpdateUser</a> actions. This includes user IDs, error codes, and error messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserError
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserErrorErrorCode ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserErrorErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Conflict = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Forbidden = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFound = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreconditionFailed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceLimitExceeded = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceFailure = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccessDenied = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceUnavailable = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Throttled = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unauthorized = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unprocessable = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnectorGroupAssociationsExist = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PhoneNumberAssociationsExist = 13,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Associates a phone number with the specified Amazon Chime user.
		/// AssociatePhoneNumberWithUser /accounts/{accountId}/users/{userId}#operation=associate-phone-number
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="userId">The user ID.</param>
		/// <returns>Success</returns>
		public async Task<AssociatePhoneNumberWithUserResponse> AssociatePhoneNumberWithUserAsync(string accountId, string userId, string operation, AssociatePhoneNumberWithUserBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/users/"+ (userId==null? "" : Uri.EscapeDataString(userId))+"#operation=associate-phone-number&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AssociatePhoneNumberWithUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates phone numbers with the specified Amazon Chime Voice Connector.
		/// AssociatePhoneNumbersWithVoiceConnector /voice-connectors/{voiceConnectorId}#operation=associate-phone-numbers
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<AssociatePhoneNumbersWithVoiceConnectorResponse> AssociatePhoneNumbersWithVoiceConnectorAsync(string voiceConnectorId, string operation, AssociatePhoneNumbersWithVoiceConnectorBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"#operation=associate-phone-numbers&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AssociatePhoneNumbersWithVoiceConnectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates phone numbers with the specified Amazon Chime Voice Connector group.
		/// AssociatePhoneNumbersWithVoiceConnectorGroup /voice-connector-groups/{voiceConnectorGroupId}#operation=associate-phone-numbers
		/// </summary>
		/// <param name="voiceConnectorGroupId">The Amazon Chime Voice Connector group ID.</param>
		/// <returns>Success</returns>
		public async Task<AssociatePhoneNumbersWithVoiceConnectorGroupResponse> AssociatePhoneNumbersWithVoiceConnectorGroupAsync(string voiceConnectorGroupId, string operation, AssociatePhoneNumbersWithVoiceConnectorGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connector-groups/"+ (voiceConnectorGroupId==null? "" : Uri.EscapeDataString(voiceConnectorGroupId))+"#operation=associate-phone-numbers&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AssociatePhoneNumbersWithVoiceConnectorGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates the specified sign-in delegate groups with the specified Amazon Chime account.
		/// AssociateSigninDelegateGroupsWithAccount /accounts/{accountId}#operation=associate-signin-delegate-groups
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <returns>Success</returns>
		public async Task<AssociateSigninDelegateGroupsWithAccountResponse> AssociateSigninDelegateGroupsWithAccountAsync(string accountId, string operation, AssociateSigninDelegateGroupsWithAccountBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"#operation=associate-signin-delegate-groups&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AssociateSigninDelegateGroupsWithAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates up to 100 new attendees for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// BatchCreateAttendee /meetings/{meetingId}/attendees#operation=batch-create
		/// </summary>
		/// <param name="meetingId">The Amazon Chime SDK meeting ID.</param>
		public async Task BatchCreateAttendeeAsync(string meetingId, string operation, BatchCreateAttendeeBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/meetings/"+ (meetingId==null? "" : Uri.EscapeDataString(meetingId))+"/attendees#operation=batch-create&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds up to 50 members to a chat room in an Amazon Chime Enterprise account. Members can be either users or bots. The member role designates whether the member is a chat room administrator or a general chat room member.
		/// BatchCreateRoomMembership /accounts/{accountId}/rooms/{roomId}/memberships#operation=batch-create
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="roomId">The room ID.</param>
		public async Task BatchCreateRoomMembershipAsync(string accountId, string roomId, string operation, BatchCreateRoomMembershipBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/rooms/"+ (roomId==null? "" : Uri.EscapeDataString(roomId))+"/memberships#operation=batch-create&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Moves phone numbers into the <b>Deletion queue</b>. Phone numbers must be disassociated from any users or Amazon Chime Voice Connectors before they can be deleted.</p> <p>Phone numbers remain in the <b>Deletion queue</b> for 7 days before they are deleted permanently.</p>
		/// BatchDeletePhoneNumber /phone-numbers#operation=batch-delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDeletePhoneNumberResponse> BatchDeletePhoneNumberAsync(string operation, BatchDeletePhoneNumberBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/phone-numbers#operation=batch-delete?operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchDeletePhoneNumberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Suspends up to 50 users from a <code>Team</code> or <code>EnterpriseLWA</code> Amazon Chime account. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the <i>Amazon Chime Administration Guide</i>.</p> <p>Users suspended from a <code>Team</code> account are disassociated from the account, but they can continue to use Amazon Chime as free users. To remove the suspension from suspended <code>Team</code> account users, invite them to the <code>Team</code> account again. You can use the <a>InviteUsers</a> action to do so.</p> <p>Users suspended from an <code>EnterpriseLWA</code> account are immediately signed out of Amazon Chime and can no longer sign in. To remove the suspension from suspended <code>EnterpriseLWA</code> account users, use the <a>BatchUnsuspendUser</a> action. </p> <p>To sign out users without suspending them, use the <a>LogoutUser</a> action.</p>
		/// BatchSuspendUser /accounts/{accountId}/users#operation=suspend
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <returns>Success</returns>
		public async Task<BatchSuspendUserResponse> BatchSuspendUserAsync(string accountId, string operation, BatchSuspendUserBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/users#operation=suspend&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchSuspendUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the suspension from up to 50 previously suspended users for the specified Amazon Chime <code>EnterpriseLWA</code> account. Only users on <code>EnterpriseLWA</code> accounts can be unsuspended using this action. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the <i>Amazon Chime Administration Guide</i>.</p> <p>Previously suspended users who are unsuspended using this action are returned to <code>Registered</code> status. Users who are not previously suspended are ignored.</p>
		/// BatchUnsuspendUser /accounts/{accountId}/users#operation=unsuspend
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <returns>Success</returns>
		public async Task<BatchUnsuspendUserResponse> BatchUnsuspendUserAsync(string accountId, string operation, BatchUnsuspendUserBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/users#operation=unsuspend&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchUnsuspendUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates phone number product types or calling names. You can update one attribute at a time for each <code>UpdatePhoneNumberRequestItem</code>. For example, you can update either the product type or the calling name.</p> <p>For product types, choose from Amazon Chime Business Calling and Amazon Chime Voice Connector. For toll-free numbers, you must use the Amazon Chime Voice Connector product type.</p> <p>Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.</p>
		/// BatchUpdatePhoneNumber /phone-numbers#operation=batch-update
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchUpdatePhoneNumberResponse> BatchUpdatePhoneNumberAsync(string operation, BatchUpdatePhoneNumberBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/phone-numbers#operation=batch-update?operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchUpdatePhoneNumberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates user details within the <a>UpdateUserRequestItem</a> object for up to 20 users for the specified Amazon Chime account. Currently, only <code>LicenseType</code> updates are supported for this action.
		/// BatchUpdateUser /accounts/{accountId}/users
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <returns>Success</returns>
		public async Task<BatchUpdateUserResponse> BatchUpdateUserAsync(string accountId, BatchUpdateUserBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/users";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchUpdateUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the users that belong to the specified Amazon Chime account. You can specify an email address to list only the user that the email address belongs to.
		/// ListUsers /accounts/{accountId}/users
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="user_email">Optional. The user email address used to filter results. Maximum 1.</param>
		/// <param name="user_type">The user type.</param>
		/// <param name="max_results">The maximum number of results to return in a single call. Defaults to 100.</param>
		/// <param name="next_token">The token to use to retrieve the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListUsersResponse> ListUsersAsync(string accountId, string user_email, UpdateUserRequestItemUserType user_type, int max_results, string next_token, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/users&user_email=" + (user_email==null? "" : Uri.EscapeDataString(user_email))+"&user_type=" + user_type+"&max_results="+max_results+"&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListUsersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an Amazon Chime account under the administrator's AWS account. Only <code>Team</code> account types are currently supported for this action. For more information about different account types, see <a href="https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html">Managing Your Amazon Chime Accounts</a> in the <i>Amazon Chime Administration Guide</i>.
		/// CreateAccount /accounts
		/// </summary>
		public async Task CreateAccountAsync(CreateAccountBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the Amazon Chime accounts under the administrator's AWS account. You can filter accounts by account name prefix. To find out which Amazon Chime account a user belongs to, you can filter by the user's email address, which returns one account result.
		/// ListAccounts /accounts
		/// </summary>
		/// <param name="name">Amazon Chime account name prefix with which to filter results.</param>
		/// <param name="user_email">User email address with which to filter results.</param>
		/// <param name="next_token">The token to use to retrieve the next page of results.</param>
		/// <param name="max_results">The maximum number of results to return in a single call. Defaults to 100.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAccountsResponse> ListAccountsAsync(string name, string user_email, string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts?name=" + (name==null? "" : Uri.EscapeDataString(name))+"&user_email=" + (user_email==null? "" : Uri.EscapeDataString(user_email))+"&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListAccountsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new attendee for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// CreateAttendee /meetings/{meetingId}/attendees
		/// </summary>
		/// <param name="meetingId">The Amazon Chime SDK meeting ID.</param>
		public async Task CreateAttendeeAsync(string meetingId, CreateAttendeeBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/meetings/"+ (meetingId==null? "" : Uri.EscapeDataString(meetingId))+"/attendees";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the attendees for the specified Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// ListAttendees /meetings/{meetingId}/attendees
		/// </summary>
		/// <param name="meetingId">The Amazon Chime SDK meeting ID.</param>
		/// <param name="next_token">The token to use to retrieve the next page of results.</param>
		/// <param name="max_results">The maximum number of results to return in a single call.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAttendeesResponse> ListAttendeesAsync(string meetingId, string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/meetings/"+ (meetingId==null? "" : Uri.EscapeDataString(meetingId))+"/attendees&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListAttendeesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a bot for an Amazon Chime Enterprise account.
		/// CreateBot /accounts/{accountId}/bots
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		public async Task CreateBotAsync(string accountId, CreateBotBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/bots";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the bots associated with the administrator's Amazon Chime Enterprise account ID.
		/// ListBots /accounts/{accountId}/bots
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="max_results">The maximum number of results to return in a single call. The default is 10.</param>
		/// <param name="next_token">The token to use to retrieve the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBotsResponse> ListBotsAsync(string accountId, int max_results, string next_token, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/bots&max_results="+max_results+"&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListBotsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Amazon Chime SDK meeting in the specified media Region with no initial attendees. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// CreateMeeting /meetings
		/// </summary>
		public async Task CreateMeetingAsync(CreateMeetingBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/meetings";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists up to 100 active Amazon Chime SDK meetings. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// ListMeetings /meetings
		/// </summary>
		/// <param name="next_token">The token to use to retrieve the next page of results.</param>
		/// <param name="max_results">The maximum number of results to return in a single call.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMeetingsResponse> ListMeetingsAsync(string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/meetings?next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListMeetingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an order for phone numbers to be provisioned. Choose from Amazon Chime Business Calling and Amazon Chime Voice Connector product types. For toll-free numbers, you must use the Amazon Chime Voice Connector product type.
		/// CreatePhoneNumberOrder /phone-number-orders
		/// </summary>
		public async Task CreatePhoneNumberOrderAsync(CreatePhoneNumberOrderBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/phone-number-orders";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the phone number orders for the administrator's Amazon Chime account.
		/// ListPhoneNumberOrders /phone-number-orders
		/// </summary>
		/// <param name="next_token">The token to use to retrieve the next page of results.</param>
		/// <param name="max_results">The maximum number of results to return in a single call.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPhoneNumberOrdersResponse> ListPhoneNumberOrdersAsync(string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/phone-number-orders?next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPhoneNumberOrdersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a proxy session on the specified Amazon Chime Voice Connector for the specified participant phone numbers.
		/// CreateProxySession /voice-connectors/{voiceConnectorId}/proxy-sessions
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime voice connector ID.</param>
		public async Task CreateProxySessionAsync(string voiceConnectorId, CreateProxySessionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/proxy-sessions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the proxy sessions for the specified Amazon Chime Voice Connector.
		/// ListProxySessions /voice-connectors/{voiceConnectorId}/proxy-sessions
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime voice connector ID.</param>
		/// <param name="status">The proxy session status.</param>
		/// <param name="next_token">The token to use to retrieve the next page of results.</param>
		/// <param name="max_results">The maximum number of results to return in a single call.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListProxySessionsResponse> ListProxySessionsAsync(string voiceConnectorId, ProxySessionStatus status, string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/proxy-sessions&status=" + status+"&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListProxySessionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a chat room for the specified Amazon Chime Enterprise account.
		/// CreateRoom /accounts/{accountId}/rooms
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		public async Task CreateRoomAsync(string accountId, CreateRoomBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/rooms";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the room details for the specified Amazon Chime Enterprise account. Optionally, filter the results by a member ID (user ID or bot ID) to see a list of rooms that the member belongs to.
		/// ListRooms /accounts/{accountId}/rooms
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="member_id">The member ID (user ID or bot ID).</param>
		/// <param name="max_results">The maximum number of results to return in a single call.</param>
		/// <param name="next_token">The token to use to retrieve the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRoomsResponse> ListRoomsAsync(string accountId, string member_id, int max_results, string next_token, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/rooms&member_id=" + (member_id==null? "" : Uri.EscapeDataString(member_id))+"&max_results="+max_results+"&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListRoomsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a member to a chat room in an Amazon Chime Enterprise account. A member can be either a user or a bot. The member role designates whether the member is a chat room administrator or a general chat room member.
		/// CreateRoomMembership /accounts/{accountId}/rooms/{roomId}/memberships
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="roomId">The room ID.</param>
		public async Task CreateRoomMembershipAsync(string accountId, string roomId, CreateRoomMembershipBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/rooms/"+ (roomId==null? "" : Uri.EscapeDataString(roomId))+"/memberships";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the membership details for the specified room in an Amazon Chime Enterprise account, such as the members' IDs, email addresses, and names.
		/// ListRoomMemberships /accounts/{accountId}/rooms/{roomId}/memberships
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="roomId">The room ID.</param>
		/// <param name="max_results">The maximum number of results to return in a single call.</param>
		/// <param name="next_token">The token to use to retrieve the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRoomMembershipsResponse> ListRoomMembershipsAsync(string accountId, string roomId, int max_results, string next_token, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/rooms/"+ (roomId==null? "" : Uri.EscapeDataString(roomId))+"/memberships&max_results="+max_results+"&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListRoomMembershipsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a user under the specified Amazon Chime account.
		/// CreateUser /accounts/{accountId}/users#operation=create
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		public async Task CreateUserAsync(string accountId, string operation, CreateUserBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/users#operation=create&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon Chime Voice Connector under the administrator's AWS account. You can choose to create an Amazon Chime Voice Connector in a specific AWS Region.</p> <p>Enabling <a>CreateVoiceConnectorRequest$RequireEncryption</a> configures your Amazon Chime Voice Connector to use TLS transport for SIP signaling and Secure RTP (SRTP) for media. Inbound calls use TLS transport, and unencrypted outbound calls are blocked.</p>
		/// CreateVoiceConnector /voice-connectors
		/// </summary>
		public async Task CreateVoiceConnectorAsync(CreateVoiceConnectorBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the Amazon Chime Voice Connectors for the administrator's AWS account.
		/// ListVoiceConnectors /voice-connectors
		/// </summary>
		/// <param name="next_token">The token to use to retrieve the next page of results.</param>
		/// <param name="max_results">The maximum number of results to return in a single call.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListVoiceConnectorsResponse> ListVoiceConnectorsAsync(string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors?next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListVoiceConnectorsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon Chime Voice Connector group under the administrator's AWS account. You can associate Amazon Chime Voice Connectors with the Amazon Chime Voice Connector group by including <code>VoiceConnectorItems</code> in the request.</p> <p>You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.</p>
		/// CreateVoiceConnectorGroup /voice-connector-groups
		/// </summary>
		public async Task CreateVoiceConnectorGroupAsync(CreateVoiceConnectorGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connector-groups";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the Amazon Chime Voice Connector groups for the administrator's AWS account.
		/// ListVoiceConnectorGroups /voice-connector-groups
		/// </summary>
		/// <param name="next_token">The token to use to retrieve the next page of results.</param>
		/// <param name="max_results">The maximum number of results to return in a single call.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListVoiceConnectorGroupsResponse> ListVoiceConnectorGroupsAsync(string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connector-groups?next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&max_results="+max_results+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListVoiceConnectorGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified Amazon Chime account. You must suspend all users before deleting a <code>Team</code> account. You can use the <a>BatchSuspendUser</a> action to do so.</p> <p>For <code>EnterpriseLWA</code> and <code>EnterpriseAD</code> accounts, you must release the claimed domains for your Amazon Chime account before deletion. As soon as you release the domain, all users under that account are suspended.</p> <p>Deleted accounts appear in your <code>Disabled</code> accounts list for 90 days. To restore a deleted account from your <code>Disabled</code> accounts list, you must contact AWS Support.</p> <p>After 90 days, deleted accounts are permanently removed from your <code>Disabled</code> accounts list.</p>
		/// DeleteAccount /accounts/{accountId}
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		public async Task DeleteAccountAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details for the specified Amazon Chime account, such as account type and supported licenses.
		/// GetAccount /accounts/{accountId}
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <returns>Success</returns>
		public async Task<GetAccountResponse> GetAccountAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates account details for the specified Amazon Chime account. Currently, only account name updates are supported for this action.
		/// UpdateAccount /accounts/{accountId}
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateAccountResponse> UpdateAccountAsync(string accountId, UpdateAccountBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their <code>JoinToken</code>. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// DeleteAttendee /meetings/{meetingId}/attendees/{attendeeId}
		/// </summary>
		/// <param name="meetingId">The Amazon Chime SDK meeting ID.</param>
		/// <param name="attendeeId">The Amazon Chime SDK attendee ID.</param>
		public async Task DeleteAttendeeAsync(string meetingId, string attendeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/meetings/"+ (meetingId==null? "" : Uri.EscapeDataString(meetingId))+"/attendees/"+ (attendeeId==null? "" : Uri.EscapeDataString(attendeeId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// GetAttendee /meetings/{meetingId}/attendees/{attendeeId}
		/// </summary>
		/// <param name="meetingId">The Amazon Chime SDK meeting ID.</param>
		/// <param name="attendeeId">The Amazon Chime SDK attendee ID.</param>
		/// <returns>Success</returns>
		public async Task<GetAttendeeResponse> GetAttendeeAsync(string meetingId, string attendeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/meetings/"+ (meetingId==null? "" : Uri.EscapeDataString(meetingId))+"/attendees/"+ (attendeeId==null? "" : Uri.EscapeDataString(attendeeId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAttendeeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the events configuration that allows a bot to receive outgoing events.
		/// DeleteEventsConfiguration /accounts/{accountId}/bots/{botId}/events-configuration
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="botId">The bot ID.</param>
		public async Task DeleteEventsConfigurationAsync(string accountId, string botId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/bots/"+ (botId==null? "" : Uri.EscapeDataString(botId))+"/events-configuration";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details for an events configuration that allows a bot to receive outgoing events, such as an HTTPS endpoint or Lambda function ARN.
		/// GetEventsConfiguration /accounts/{accountId}/bots/{botId}/events-configuration
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="botId">The bot ID.</param>
		/// <returns>Success</returns>
		public async Task<GetEventsConfigurationResponse> GetEventsConfigurationAsync(string accountId, string botId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/bots/"+ (botId==null? "" : Uri.EscapeDataString(botId))+"/events-configuration";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetEventsConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an events configuration that allows a bot to receive outgoing events sent by Amazon Chime. Choose either an HTTPS endpoint or a Lambda function ARN. For more information, see <a>Bot</a>.
		/// PutEventsConfiguration /accounts/{accountId}/bots/{botId}/events-configuration
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="botId">The bot ID.</param>
		public async Task PutEventsConfigurationAsync(string accountId, string botId, PutEventsConfigurationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/bots/"+ (botId==null? "" : Uri.EscapeDataString(botId))+"/events-configuration";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Amazon Chime SDK meeting. When a meeting is deleted, its attendees are also deleted and clients can no longer join it. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// DeleteMeeting /meetings/{meetingId}
		/// </summary>
		/// <param name="meetingId">The Amazon Chime SDK meeting ID.</param>
		public async Task DeleteMeetingAsync(string meetingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/meetings/"+ (meetingId==null? "" : Uri.EscapeDataString(meetingId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more information about the Amazon Chime SDK, see <a href="https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>.
		/// GetMeeting /meetings/{meetingId}
		/// </summary>
		/// <param name="meetingId">The Amazon Chime SDK meeting ID.</param>
		/// <returns>Success</returns>
		public async Task<GetMeetingResponse> GetMeetingAsync(string meetingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/meetings/"+ (meetingId==null? "" : Uri.EscapeDataString(meetingId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetMeetingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Moves the specified phone number into the <b>Deletion queue</b>. A phone number must be disassociated from any users or Amazon Chime Voice Connectors before it can be deleted.</p> <p>Deleted phone numbers remain in the <b>Deletion queue</b> for 7 days before they are deleted permanently.</p>
		/// DeletePhoneNumber /phone-numbers/{phoneNumberId}
		/// </summary>
		/// <param name="phoneNumberId">The phone number ID.</param>
		public async Task DeletePhoneNumberAsync(string phoneNumberId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/phone-numbers/"+ (phoneNumberId==null? "" : Uri.EscapeDataString(phoneNumberId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details for the specified phone number ID, such as associations, capabilities, and product type.
		/// GetPhoneNumber /phone-numbers/{phoneNumberId}
		/// </summary>
		/// <param name="phoneNumberId">The phone number ID.</param>
		/// <returns>Success</returns>
		public async Task<GetPhoneNumberResponse> GetPhoneNumberAsync(string phoneNumberId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/phone-numbers/"+ (phoneNumberId==null? "" : Uri.EscapeDataString(phoneNumberId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetPhoneNumberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates phone number details, such as product type or calling name, for the specified phone number ID. You can update one phone number detail at a time. For example, you can update either the product type or the calling name in one action.</p> <p>For toll-free numbers, you must use the Amazon Chime Voice Connector product type.</p> <p>Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.</p>
		/// UpdatePhoneNumber /phone-numbers/{phoneNumberId}
		/// </summary>
		/// <param name="phoneNumberId">The phone number ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdatePhoneNumberResponse> UpdatePhoneNumberAsync(string phoneNumberId, UpdatePhoneNumberBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/phone-numbers/"+ (phoneNumberId==null? "" : Uri.EscapeDataString(phoneNumberId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdatePhoneNumberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified proxy session from the specified Amazon Chime Voice Connector.
		/// DeleteProxySession /voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime voice connector ID.</param>
		/// <param name="proxySessionId">The proxy session ID.</param>
		public async Task DeleteProxySessionAsync(string voiceConnectorId, string proxySessionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/proxy-sessions/"+ (proxySessionId==null? "" : Uri.EscapeDataString(proxySessionId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified proxy session details for the specified Amazon Chime Voice Connector.
		/// GetProxySession /voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime voice connector ID.</param>
		/// <param name="proxySessionId">The proxy session ID.</param>
		/// <returns>Success</returns>
		public async Task<GetProxySessionResponse> GetProxySessionAsync(string voiceConnectorId, string proxySessionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/proxy-sessions/"+ (proxySessionId==null? "" : Uri.EscapeDataString(proxySessionId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetProxySessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified proxy session details, such as voice or SMS capabilities.
		/// UpdateProxySession /voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime voice connector ID.</param>
		/// <param name="proxySessionId">The proxy session ID.</param>
		public async Task UpdateProxySessionAsync(string voiceConnectorId, string proxySessionId, UpdateProxySessionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/proxy-sessions/"+ (proxySessionId==null? "" : Uri.EscapeDataString(proxySessionId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a chat room in an Amazon Chime Enterprise account.
		/// DeleteRoom /accounts/{accountId}/rooms/{roomId}
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="roomId">The chat room ID.</param>
		public async Task DeleteRoomAsync(string accountId, string roomId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/rooms/"+ (roomId==null? "" : Uri.EscapeDataString(roomId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves room details, such as the room name, for a room in an Amazon Chime Enterprise account.
		/// GetRoom /accounts/{accountId}/rooms/{roomId}
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="roomId">The room ID.</param>
		/// <returns>Success</returns>
		public async Task<GetRoomResponse> GetRoomAsync(string accountId, string roomId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/rooms/"+ (roomId==null? "" : Uri.EscapeDataString(roomId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRoomResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates room details, such as the room name, for a room in an Amazon Chime Enterprise account.
		/// UpdateRoom /accounts/{accountId}/rooms/{roomId}
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="roomId">The room ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateRoomResponse> UpdateRoomAsync(string accountId, string roomId, UpdateRoomBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/rooms/"+ (roomId==null? "" : Uri.EscapeDataString(roomId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateRoomResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a member from a chat room in an Amazon Chime Enterprise account.
		/// DeleteRoomMembership /accounts/{accountId}/rooms/{roomId}/memberships/{memberId}
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="roomId">The room ID.</param>
		/// <param name="memberId">The member ID (user ID or bot ID).</param>
		public async Task DeleteRoomMembershipAsync(string accountId, string roomId, string memberId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/rooms/"+ (roomId==null? "" : Uri.EscapeDataString(roomId))+"/memberships/"+ (memberId==null? "" : Uri.EscapeDataString(memberId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates room membership details, such as the member role, for a room in an Amazon Chime Enterprise account. The member role designates whether the member is a chat room administrator or a general chat room member. The member role can be updated only for user IDs.
		/// UpdateRoomMembership /accounts/{accountId}/rooms/{roomId}/memberships/{memberId}
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="roomId">The room ID.</param>
		/// <param name="memberId">The member ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateRoomMembershipResponse> UpdateRoomMembershipAsync(string accountId, string roomId, string memberId, UpdateRoomMembershipBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/rooms/"+ (roomId==null? "" : Uri.EscapeDataString(roomId))+"/memberships/"+ (memberId==null? "" : Uri.EscapeDataString(memberId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateRoomMembershipResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Amazon Chime Voice Connector. Any phone numbers associated with the Amazon Chime Voice Connector must be disassociated from it before it can be deleted.
		/// DeleteVoiceConnector /voice-connectors/{voiceConnectorId}
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		public async Task DeleteVoiceConnectorAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details for the specified Amazon Chime Voice Connector, such as timestamps, name, outbound host, and encryption requirements.
		/// GetVoiceConnector /voice-connectors/{voiceConnectorId}
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorResponse> GetVoiceConnectorAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetVoiceConnectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates details for the specified Amazon Chime Voice Connector.
		/// UpdateVoiceConnector /voice-connectors/{voiceConnectorId}
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateVoiceConnectorResponse> UpdateVoiceConnectorAsync(string voiceConnectorId, UpdateVoiceConnectorBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateVoiceConnectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Amazon Chime Voice Connector group. Any <code>VoiceConnectorItems</code> and phone numbers associated with the group must be removed before it can be deleted.
		/// DeleteVoiceConnectorGroup /voice-connector-groups/{voiceConnectorGroupId}
		/// </summary>
		/// <param name="voiceConnectorGroupId">The Amazon Chime Voice Connector group ID.</param>
		public async Task DeleteVoiceConnectorGroupAsync(string voiceConnectorGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connector-groups/"+ (voiceConnectorGroupId==null? "" : Uri.EscapeDataString(voiceConnectorGroupId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details for the specified Amazon Chime Voice Connector group, such as timestamps, name, and associated <code>VoiceConnectorItems</code>.
		/// GetVoiceConnectorGroup /voice-connector-groups/{voiceConnectorGroupId}
		/// </summary>
		/// <param name="voiceConnectorGroupId">The Amazon Chime Voice Connector group ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorGroupResponse> GetVoiceConnectorGroupAsync(string voiceConnectorGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connector-groups/"+ (voiceConnectorGroupId==null? "" : Uri.EscapeDataString(voiceConnectorGroupId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetVoiceConnectorGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates details for the specified Amazon Chime Voice Connector group, such as the name and Amazon Chime Voice Connector priority ranking.
		/// UpdateVoiceConnectorGroup /voice-connector-groups/{voiceConnectorGroupId}
		/// </summary>
		/// <param name="voiceConnectorGroupId">The Amazon Chime Voice Connector group ID.</param>
		public async Task UpdateVoiceConnectorGroupAsync(string voiceConnectorGroupId, UpdateVoiceConnectorGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connector-groups/"+ (voiceConnectorGroupId==null? "" : Uri.EscapeDataString(voiceConnectorGroupId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the origination settings for the specified Amazon Chime Voice Connector.
		/// DeleteVoiceConnectorOrigination /voice-connectors/{voiceConnectorId}/origination
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		public async Task DeleteVoiceConnectorOriginationAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/origination";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves origination setting details for the specified Amazon Chime Voice Connector.
		/// GetVoiceConnectorOrigination /voice-connectors/{voiceConnectorId}/origination
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorOriginationResponse> GetVoiceConnectorOriginationAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/origination";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetVoiceConnectorOriginationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds origination settings for the specified Amazon Chime Voice Connector.
		/// PutVoiceConnectorOrigination /voice-connectors/{voiceConnectorId}/origination
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<PutVoiceConnectorOriginationResponse> PutVoiceConnectorOriginationAsync(string voiceConnectorId, PutVoiceConnectorOriginationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/origination";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutVoiceConnectorOriginationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the proxy configuration from the specified Amazon Chime Voice Connector.
		/// DeleteVoiceConnectorProxy /voice-connectors/{voiceConnectorId}/programmable-numbers/proxy
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		public async Task DeleteVoiceConnectorProxyAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/programmable-numbers/proxy";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the proxy configuration details for the specified Amazon Chime Voice Connector.
		/// GetVoiceConnectorProxy /voice-connectors/{voiceConnectorId}/programmable-numbers/proxy
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime voice connector ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorProxyResponse> GetVoiceConnectorProxyAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/programmable-numbers/proxy";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetVoiceConnectorProxyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Puts the specified proxy configuration to the specified Amazon Chime Voice Connector.
		/// PutVoiceConnectorProxy /voice-connectors/{voiceConnectorId}/programmable-numbers/proxy
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime voice connector ID.</param>
		/// <returns>Success</returns>
		public async Task<PutVoiceConnectorProxyResponse> PutVoiceConnectorProxyAsync(string voiceConnectorId, PutVoiceConnectorProxyBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/programmable-numbers/proxy";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutVoiceConnectorProxyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the streaming configuration for the specified Amazon Chime Voice Connector.
		/// DeleteVoiceConnectorStreamingConfiguration /voice-connectors/{voiceConnectorId}/streaming-configuration
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		public async Task DeleteVoiceConnectorStreamingConfigurationAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/streaming-configuration";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the streaming configuration details for the specified Amazon Chime Voice Connector. Shows whether media streaming is enabled for sending to Amazon Kinesis. It also shows the retention period, in hours, for the Amazon Kinesis data.
		/// GetVoiceConnectorStreamingConfiguration /voice-connectors/{voiceConnectorId}/streaming-configuration
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorStreamingConfigurationResponse> GetVoiceConnectorStreamingConfigurationAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/streaming-configuration";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetVoiceConnectorStreamingConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a streaming configuration for the specified Amazon Chime Voice Connector. The streaming configuration specifies whether media streaming is enabled for sending to Amazon Kinesis. It also sets the retention period, in hours, for the Amazon Kinesis data.
		/// PutVoiceConnectorStreamingConfiguration /voice-connectors/{voiceConnectorId}/streaming-configuration
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<PutVoiceConnectorStreamingConfigurationResponse> PutVoiceConnectorStreamingConfigurationAsync(string voiceConnectorId, PutVoiceConnectorStreamingConfigurationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/streaming-configuration";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutVoiceConnectorStreamingConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the termination settings for the specified Amazon Chime Voice Connector.
		/// DeleteVoiceConnectorTermination /voice-connectors/{voiceConnectorId}/termination
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		public async Task DeleteVoiceConnectorTerminationAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/termination";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves termination setting details for the specified Amazon Chime Voice Connector.
		/// GetVoiceConnectorTermination /voice-connectors/{voiceConnectorId}/termination
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorTerminationResponse> GetVoiceConnectorTerminationAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/termination";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetVoiceConnectorTerminationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds termination settings for the specified Amazon Chime Voice Connector.
		/// PutVoiceConnectorTermination /voice-connectors/{voiceConnectorId}/termination
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<PutVoiceConnectorTerminationResponse> PutVoiceConnectorTerminationAsync(string voiceConnectorId, PutVoiceConnectorTerminationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/termination";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutVoiceConnectorTerminationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified SIP credentials used by your equipment to authenticate during call termination.
		/// DeleteVoiceConnectorTerminationCredentials /voice-connectors/{voiceConnectorId}/termination/credentials#operation=delete
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		public async Task DeleteVoiceConnectorTerminationCredentialsAsync(string voiceConnectorId, string operation, DeleteVoiceConnectorTerminationCredentialsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/termination/credentials#operation=delete&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates the primary provisioned phone number from the specified Amazon Chime user.
		/// DisassociatePhoneNumberFromUser /accounts/{accountId}/users/{userId}#operation=disassociate-phone-number
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="userId">The user ID.</param>
		/// <returns>Success</returns>
		public async Task<DisassociatePhoneNumberFromUserResponse> DisassociatePhoneNumberFromUserAsync(string accountId, string userId, string operation, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/users/"+ (userId==null? "" : Uri.EscapeDataString(userId))+"#operation=disassociate-phone-number&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisassociatePhoneNumberFromUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector.
		/// DisassociatePhoneNumbersFromVoiceConnector /voice-connectors/{voiceConnectorId}#operation=disassociate-phone-numbers
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<DisassociatePhoneNumbersFromVoiceConnectorResponse> DisassociatePhoneNumbersFromVoiceConnectorAsync(string voiceConnectorId, string operation, DisassociatePhoneNumbersFromVoiceConnectorBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"#operation=disassociate-phone-numbers&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisassociatePhoneNumbersFromVoiceConnectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector group.
		/// DisassociatePhoneNumbersFromVoiceConnectorGroup /voice-connector-groups/{voiceConnectorGroupId}#operation=disassociate-phone-numbers
		/// </summary>
		/// <param name="voiceConnectorGroupId">The Amazon Chime Voice Connector group ID.</param>
		/// <returns>Success</returns>
		public async Task<DisassociatePhoneNumbersFromVoiceConnectorGroupResponse> DisassociatePhoneNumbersFromVoiceConnectorGroupAsync(string voiceConnectorGroupId, string operation, DisassociatePhoneNumbersFromVoiceConnectorGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connector-groups/"+ (voiceConnectorGroupId==null? "" : Uri.EscapeDataString(voiceConnectorGroupId))+"#operation=disassociate-phone-numbers&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisassociatePhoneNumbersFromVoiceConnectorGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates the specified sign-in delegate groups from the specified Amazon Chime account.
		/// DisassociateSigninDelegateGroupsFromAccount /accounts/{accountId}#operation=disassociate-signin-delegate-groups
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <returns>Success</returns>
		public async Task<DisassociateSigninDelegateGroupsFromAccountResponse> DisassociateSigninDelegateGroupsFromAccountAsync(string accountId, string operation, DisassociateSigninDelegateGroupsFromAccountBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"#operation=disassociate-signin-delegate-groups&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisassociateSigninDelegateGroupsFromAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves account settings for the specified Amazon Chime account ID, such as remote control and dial out settings. For more information about these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page</a> in the <i>Amazon Chime Administration Guide</i>.
		/// GetAccountSettings /accounts/{accountId}/settings
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <returns>Success</returns>
		public async Task<GetAccountSettingsResponse> GetAccountSettingsAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/settings";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAccountSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the settings for the specified Amazon Chime account. You can update settings for remote control of shared screens, or for the dial-out option. For more information about these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page</a> in the <i>Amazon Chime Administration Guide</i>.
		/// UpdateAccountSettings /accounts/{accountId}/settings
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		public async Task UpdateAccountSettingsAsync(string accountId, UpdateAccountSettingsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/settings";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves details for the specified bot, such as bot email address, bot type, status, and display name.
		/// GetBot /accounts/{accountId}/bots/{botId}
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="botId">The bot ID.</param>
		/// <returns>Success</returns>
		public async Task<GetBotResponse> GetBotAsync(string accountId, string botId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/bots/"+ (botId==null? "" : Uri.EscapeDataString(botId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetBotResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the status of the specified bot, such as starting or stopping the bot from running in your Amazon Chime Enterprise account.
		/// UpdateBot /accounts/{accountId}/bots/{botId}
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="botId">The bot ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateBotResponse> UpdateBotAsync(string accountId, string botId, UpdateBotBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/bots/"+ (botId==null? "" : Uri.EscapeDataString(botId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateBotResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
		/// GetGlobalSettings /settings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetGlobalSettingsResponse> GetGlobalSettingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/settings";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetGlobalSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
		/// UpdateGlobalSettings /settings
		/// </summary>
		public async Task UpdateGlobalSettingsAsync(UpdateGlobalSettingsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/settings";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves details for the specified phone number order, such as order creation timestamp, phone numbers in E.164 format, product type, and order status.
		/// GetPhoneNumberOrder /phone-number-orders/{phoneNumberOrderId}
		/// </summary>
		/// <param name="phoneNumberOrderId">The ID for the phone number order.</param>
		/// <returns>Success</returns>
		public async Task<GetPhoneNumberOrderResponse> GetPhoneNumberOrderAsync(string phoneNumberOrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/phone-number-orders/"+ (phoneNumberOrderId==null? "" : Uri.EscapeDataString(phoneNumberOrderId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetPhoneNumberOrderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the phone number settings for the administrator's AWS account, such as the default outbound calling name.
		/// GetPhoneNumberSettings /settings/phone-number
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPhoneNumberSettingsResponse> GetPhoneNumberSettingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/settings/phone-number";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetPhoneNumberSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the phone number settings for the administrator's AWS account, such as the default outbound calling name. You can update the default outbound calling name once every seven days. Outbound calling names can take up to 72 hours to update.
		/// UpdatePhoneNumberSettings /settings/phone-number
		/// </summary>
		public async Task UpdatePhoneNumberSettingsAsync(UpdatePhoneNumberSettingsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/settings/phone-number";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the retention settings for the specified Amazon Chime Enterprise account. For more information about retention settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/chat-retention.html">Managing Chat Retention Policies</a> in the <i>Amazon Chime Administration Guide</i>.
		/// GetRetentionSettings /accounts/{accountId}/retention-settings
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <returns>Success</returns>
		public async Task<GetRetentionSettingsResponse> GetRetentionSettingsAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/retention-settings";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRetentionSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Puts retention settings for the specified Amazon Chime Enterprise account. We recommend using AWS CloudTrail to monitor usage of this API for your account. For more information, see <a href="https://docs.aws.amazon.com/chime/latest/ag/cloudtrail.html">Logging Amazon Chime API Calls with AWS CloudTrail</a> in the <i>Amazon Chime Administration Guide</i>.</p> <p>To turn off existing retention settings, remove the number of days from the corresponding <b>RetentionDays</b> field in the <b>RetentionSettings</b> object. For more information about retention settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/chat-retention.html">Managing Chat Retention Policies</a> in the <i>Amazon Chime Administration Guide</i>.</p>
		/// PutRetentionSettings /accounts/{accountId}/retention-settings
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		public async Task PutRetentionSettingsAsync(string accountId, PutRetentionSettingsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/retention-settings";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves details for the specified user ID, such as primary email address, license type, and personal meeting PIN.</p> <p>To retrieve user details with an email address instead of a user ID, use the <a>ListUsers</a> action, and then filter by email address.</p>
		/// GetUser /accounts/{accountId}/users/{userId}
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="userId">The user ID.</param>
		/// <returns>Success</returns>
		public async Task<GetUserResponse> GetUserAsync(string accountId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/users/"+ (userId==null? "" : Uri.EscapeDataString(userId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates user details for a specified user ID. Currently, only <code>LicenseType</code> updates are supported for this action.
		/// UpdateUser /accounts/{accountId}/users/{userId}
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="userId">The user ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateUserResponse> UpdateUserAsync(string accountId, string userId, UpdateUserBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/users/"+ (userId==null? "" : Uri.EscapeDataString(userId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves settings for the specified user ID, such as any associated phone number settings.
		/// GetUserSettings /accounts/{accountId}/users/{userId}/settings
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="userId">The user ID.</param>
		/// <returns>Success</returns>
		public async Task<GetUserSettingsResponse> GetUserSettingsAsync(string accountId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/users/"+ (userId==null? "" : Uri.EscapeDataString(userId))+"/settings";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetUserSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the settings for the specified user, such as phone number settings.
		/// UpdateUserSettings /accounts/{accountId}/users/{userId}/settings
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="userId">The user ID.</param>
		public async Task UpdateUserSettingsAsync(string accountId, string userId, UpdateUserSettingsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/users/"+ (userId==null? "" : Uri.EscapeDataString(userId))+"/settings";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the logging configuration details for the specified Amazon Chime Voice Connector. Shows whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
		/// GetVoiceConnectorLoggingConfiguration /voice-connectors/{voiceConnectorId}/logging-configuration
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorLoggingConfigurationResponse> GetVoiceConnectorLoggingConfigurationAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/logging-configuration";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetVoiceConnectorLoggingConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
		/// PutVoiceConnectorLoggingConfiguration /voice-connectors/{voiceConnectorId}/logging-configuration
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<PutVoiceConnectorLoggingConfigurationResponse> PutVoiceConnectorLoggingConfigurationAsync(string voiceConnectorId, PutVoiceConnectorLoggingConfigurationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/logging-configuration";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutVoiceConnectorLoggingConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the last time a SIP <code>OPTIONS</code> ping was received from your SIP infrastructure for the specified Amazon Chime Voice Connector.
		/// GetVoiceConnectorTerminationHealth /voice-connectors/{voiceConnectorId}/termination/health
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorTerminationHealthResponse> GetVoiceConnectorTerminationHealthAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/termination/health";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetVoiceConnectorTerminationHealthResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sends email to a maximum of 50 users, inviting them to the specified Amazon Chime <code>Team</code> account. Only <code>Team</code> account types are currently supported for this action.
		/// InviteUsers /accounts/{accountId}/users#operation=add
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		public async Task InviteUsersAsync(string accountId, string operation, InviteUsersBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/users#operation=add&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the tags applied to an Amazon Chime SDK attendee resource.
		/// ListAttendeeTags /meetings/{meetingId}/attendees/{attendeeId}/tags
		/// </summary>
		/// <param name="meetingId">The Amazon Chime SDK meeting ID.</param>
		/// <param name="attendeeId">The Amazon Chime SDK attendee ID.</param>
		/// <returns>Success</returns>
		public async Task<ListAttendeeTagsResponse> ListAttendeeTagsAsync(string meetingId, string attendeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/meetings/"+ (meetingId==null? "" : Uri.EscapeDataString(meetingId))+"/attendees/"+ (attendeeId==null? "" : Uri.EscapeDataString(attendeeId))+"/tags";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListAttendeeTagsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags applied to an Amazon Chime SDK meeting resource.
		/// ListMeetingTags /meetings/{meetingId}/tags
		/// </summary>
		/// <param name="meetingId">The Amazon Chime SDK meeting ID.</param>
		/// <returns>Success</returns>
		public async Task<ListMeetingTagsResponse> ListMeetingTagsAsync(string meetingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/meetings/"+ (meetingId==null? "" : Uri.EscapeDataString(meetingId))+"/tags";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListMeetingTagsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the phone numbers for the specified Amazon Chime account, Amazon Chime user, Amazon Chime Voice Connector, or Amazon Chime Voice Connector group.
		/// ListPhoneNumbers /phone-numbers
		/// </summary>
		/// <param name="status">The phone number status.</param>
		/// <param name="product_type">The phone number product type.</param>
		/// <param name="filter_name">The filter to use to limit the number of results.</param>
		/// <param name="filter_value">The value to use for the filter.</param>
		/// <param name="max_results">The maximum number of results to return in a single call.</param>
		/// <param name="next_token">The token to use to retrieve the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPhoneNumbersResponse> ListPhoneNumbersAsync(PhoneNumberStatus status, UpdatePhoneNumberRequestItemProductType product_type, PhoneNumberAssociationName filter_name, string filter_value, int max_results, string next_token, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/phone-numbers?status=" + status+"&product_type=" + product_type+"&filter_name=" + filter_name+"&filter_value=" + (filter_value==null? "" : Uri.EscapeDataString(filter_value))+"&max_results="+max_results+"&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPhoneNumbersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags applied to an Amazon Chime SDK meeting resource.
		/// ListTagsForResource /tags#arn
		/// </summary>
		/// <param name="arn">The resource ARN.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags#arn?arn=" + (arn==null? "" : Uri.EscapeDataString(arn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the SIP credentials for the specified Amazon Chime Voice Connector.
		/// ListVoiceConnectorTerminationCredentials /voice-connectors/{voiceConnectorId}/termination/credentials
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<ListVoiceConnectorTerminationCredentialsResponse> ListVoiceConnectorTerminationCredentialsAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/termination/credentials";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListVoiceConnectorTerminationCredentialsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Logs out the specified user from all of the devices they are currently logged into.
		/// LogoutUser /accounts/{accountId}/users/{userId}#operation=logout
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="userId">The user ID.</param>
		public async Task LogoutUserAsync(string accountId, string userId, string operation, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/users/"+ (userId==null? "" : Uri.EscapeDataString(userId))+"#operation=logout&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds termination SIP credentials for the specified Amazon Chime Voice Connector.
		/// PutVoiceConnectorTerminationCredentials /voice-connectors/{voiceConnectorId}/termination/credentials#operation=put
		/// </summary>
		/// <param name="voiceConnectorId">The Amazon Chime Voice Connector ID.</param>
		public async Task PutVoiceConnectorTerminationCredentialsAsync(string voiceConnectorId, string operation, PutVoiceConnectorTerminationCredentialsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/voice-connectors/"+ (voiceConnectorId==null? "" : Uri.EscapeDataString(voiceConnectorId))+"/termination/credentials#operation=put&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Redacts the specified message from the specified Amazon Chime conversation.
		/// RedactConversationMessage /accounts/{accountId}/conversations/{conversationId}/messages/{messageId}#operation=redact
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="conversationId">The conversation ID.</param>
		/// <param name="messageId">The message ID.</param>
		/// <returns>Success</returns>
		public async Task<RedactConversationMessageResponse> RedactConversationMessageAsync(string accountId, string conversationId, string messageId, string operation, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/conversations/"+ (conversationId==null? "" : Uri.EscapeDataString(conversationId))+"/messages/"+ (messageId==null? "" : Uri.EscapeDataString(messageId))+"#operation=redact&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RedactConversationMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Redacts the specified message from the specified Amazon Chime chat room.
		/// RedactRoomMessage /accounts/{accountId}/rooms/{roomId}/messages/{messageId}#operation=redact
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="roomId">The room ID.</param>
		/// <param name="messageId">The message ID.</param>
		/// <returns>Success</returns>
		public async Task<RedactRoomMessageResponse> RedactRoomMessageAsync(string accountId, string roomId, string messageId, string operation, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/rooms/"+ (roomId==null? "" : Uri.EscapeDataString(roomId))+"/messages/"+ (messageId==null? "" : Uri.EscapeDataString(messageId))+"#operation=redact&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RedactRoomMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerates the security token for a bot.
		/// RegenerateSecurityToken /accounts/{accountId}/bots/{botId}#operation=regenerate-security-token
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="botId">The bot ID.</param>
		/// <returns>Success</returns>
		public async Task<RegenerateSecurityTokenResponse> RegenerateSecurityTokenAsync(string accountId, string botId, string operation, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/bots/"+ (botId==null? "" : Uri.EscapeDataString(botId))+"#operation=regenerate-security-token&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RegenerateSecurityTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets the personal meeting PIN for the specified user on an Amazon Chime account. Returns the <a>User</a> object with the updated personal meeting PIN.
		/// ResetPersonalPIN /accounts/{accountId}/users/{userId}#operation=reset-personal-pin
		/// </summary>
		/// <param name="accountId">The Amazon Chime account ID.</param>
		/// <param name="userId">The user ID.</param>
		/// <returns>Success</returns>
		public async Task<ResetPersonalPINResponse> ResetPersonalPINAsync(string accountId, string userId, string operation, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/accounts/"+ (accountId==null? "" : Uri.EscapeDataString(accountId))+"/users/"+ (userId==null? "" : Uri.EscapeDataString(userId))+"#operation=reset-personal-pin&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ResetPersonalPINResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Moves a phone number from the <b>Deletion queue</b> back into the phone number <b>Inventory</b>.
		/// RestorePhoneNumber /phone-numbers/{phoneNumberId}#operation=restore
		/// </summary>
		/// <param name="phoneNumberId">The phone number.</param>
		/// <returns>Success</returns>
		public async Task<RestorePhoneNumberResponse> RestorePhoneNumberAsync(string phoneNumberId, string operation, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/phone-numbers/"+ (phoneNumberId==null? "" : Uri.EscapeDataString(phoneNumberId))+"#operation=restore&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RestorePhoneNumberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches phone numbers that can be ordered.
		/// SearchAvailablePhoneNumbers /search#type=phone-numbers
		/// </summary>
		/// <param name="area_code">The area code used to filter results.</param>
		/// <param name="city">The city used to filter results.</param>
		/// <param name="country">The country used to filter results.</param>
		/// <param name="state">The state used to filter results.</param>
		/// <param name="toll_free_prefix">The toll-free prefix that you use to filter results.</param>
		/// <param name="max_results">The maximum number of results to return in a single call.</param>
		/// <param name="next_token">The token to use to retrieve the next page of results.</param>
		/// <returns>Success</returns>
		public async Task<SearchAvailablePhoneNumbersResponse> SearchAvailablePhoneNumbersAsync(string area_code, string city, string country, string state, string toll_free_prefix, int max_results, string next_token, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/search#type=phone-numbers?area_code=" + (area_code==null? "" : Uri.EscapeDataString(area_code))+"&city=" + (city==null? "" : Uri.EscapeDataString(city))+"&country=" + (country==null? "" : Uri.EscapeDataString(country))+"&state=" + (state==null? "" : Uri.EscapeDataString(state))+"&toll_free_prefix=" + (toll_free_prefix==null? "" : Uri.EscapeDataString(toll_free_prefix))+"&max_results="+max_results+"&next_token=" + (next_token==null? "" : Uri.EscapeDataString(next_token))+"&type=" + (type==null? "" : Uri.EscapeDataString(type));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SearchAvailablePhoneNumbersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies the specified tags to the specified Amazon Chime SDK attendee.
		/// TagAttendee /meetings/{meetingId}/attendees/{attendeeId}/tags#operation=add
		/// </summary>
		/// <param name="meetingId">The Amazon Chime SDK meeting ID.</param>
		/// <param name="attendeeId">The Amazon Chime SDK attendee ID.</param>
		public async Task TagAttendeeAsync(string meetingId, string attendeeId, string operation, TagAttendeeBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/meetings/"+ (meetingId==null? "" : Uri.EscapeDataString(meetingId))+"/attendees/"+ (attendeeId==null? "" : Uri.EscapeDataString(attendeeId))+"/tags#operation=add&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Applies the specified tags to the specified Amazon Chime SDK meeting.
		/// TagMeeting /meetings/{meetingId}/tags#operation=add
		/// </summary>
		/// <param name="meetingId">The Amazon Chime SDK meeting ID.</param>
		public async Task TagMeetingAsync(string meetingId, string operation, TagMeetingBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/meetings/"+ (meetingId==null? "" : Uri.EscapeDataString(meetingId))+"/tags#operation=add&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Applies the specified tags to the specified Amazon Chime SDK meeting resource.
		/// TagResource /tags#operation=tag-resource
		/// </summary>
		public async Task TagResourceAsync(string operation, TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags#operation=tag-resource?operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Untags the specified tags from the specified Amazon Chime SDK attendee.
		/// UntagAttendee /meetings/{meetingId}/attendees/{attendeeId}/tags#operation=delete
		/// </summary>
		/// <param name="meetingId">The Amazon Chime SDK meeting ID.</param>
		/// <param name="attendeeId">The Amazon Chime SDK attendee ID.</param>
		public async Task UntagAttendeeAsync(string meetingId, string attendeeId, string operation, UntagAttendeeBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/meetings/"+ (meetingId==null? "" : Uri.EscapeDataString(meetingId))+"/attendees/"+ (attendeeId==null? "" : Uri.EscapeDataString(attendeeId))+"/tags#operation=delete&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Untags the specified tags from the specified Amazon Chime SDK meeting.
		/// UntagMeeting /meetings/{meetingId}/tags#operation=delete
		/// </summary>
		/// <param name="meetingId">The Amazon Chime SDK meeting ID.</param>
		public async Task UntagMeetingAsync(string meetingId, string operation, UntagMeetingBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/meetings/"+ (meetingId==null? "" : Uri.EscapeDataString(meetingId))+"/tags#operation=delete&operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Untags the specified tags from the specified Amazon Chime SDK meeting resource.
		/// UntagResource /tags#operation=untag-resource
		/// </summary>
		public async Task UntagResourceAsync(string operation, UntagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags#operation=untag-resource?operation=" + (operation==null? "" : Uri.EscapeDataString(operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociatePhoneNumberWithUserBody
	{
		
		/// <summary>
		/// The phone number, in E.164 format.
		/// Pattern: ^\+?[1-9]\d{1,14}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string E164PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociatePhoneNumbersWithVoiceConnectorBody
	{
		
		/// <summary>
		/// List of phone numbers, in E.164 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public E164PhoneNumber[] E164PhoneNumbers { get; set; }
		
		/// <summary>
		/// If true, associates the provided phone numbers with the provided Amazon Chime Voice Connector and removes any previously existing associations. If false, does not associate any phone numbers that have previously existing associations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceAssociate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociatePhoneNumbersWithVoiceConnectorGroupBody
	{
		
		/// <summary>
		/// List of phone numbers, in E.164 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public E164PhoneNumber[] E164PhoneNumbers { get; set; }
		
		/// <summary>
		/// If true, associates the provided phone numbers with the provided Amazon Chime Voice Connector Group and removes any previously existing associations. If false, does not associate any phone numbers that have previously existing associations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceAssociate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateSigninDelegateGroupsWithAccountBody
	{
		
		/// <summary>
		/// The sign-in delegate groups.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SigninDelegateGroup[] SigninDelegateGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchCreateAttendeeBody
	{
		
		/// <summary>
		/// The request containing the attendees to create.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateAttendeeRequestItem[] Attendees { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchCreateRoomMembershipBody
	{
		
		/// <summary>
		/// The list of membership items.
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public MembershipItem[] MembershipItemList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchDeletePhoneNumberBody
	{
		
		/// <summary>
		/// List of phone number IDs.
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public String[] PhoneNumberIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchSuspendUserBody
	{
		
		/// <summary>
		/// The request containing the user IDs to suspend.
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public NonEmptyString[] UserIdList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchUnsuspendUserBody
	{
		
		/// <summary>
		/// The request containing the user IDs to unsuspend.
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public NonEmptyString[] UserIdList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchUpdatePhoneNumberBody
	{
		
		/// <summary>
		/// The request containing the phone number IDs and product types or calling names to update.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdatePhoneNumberRequestItem[] UpdatePhoneNumberRequestItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchUpdateUserBody
	{
		
		/// <summary>
		/// The request containing the user IDs and details to update.
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public UpdateUserRequestItem[] UpdateUserRequestItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAccountBody
	{
		
		/// <summary>
		/// The name of the Amazon Chime account.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAttendeeBody
	{
		
		/// <summary>
		/// The Amazon Chime SDK external user ID. Links the attendee to an identity managed by a builder application.
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=2)]
		public string ExternalUserId { get; set; }
		
		/// <summary>
		/// The tag key-value pairs.
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBotBody
	{
		
		/// <summary>
		/// The bot display name.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The domain of the Amazon Chime Enterprise account.
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMeetingBody
	{
		
		/// <summary>
		/// The unique identifier for the client request. Use a different token for different meetings.
		/// Max length: 64
		/// Min length: 2
		/// Pattern: [-_a-zA-Z0-9]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=2)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The external meeting ID.
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=2)]
		public string ExternalMeetingId { get; set; }
		
		/// <summary>
		/// Reserved.
		/// Max length: 64
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=2)]
		public string MeetingHostId { get; set; }
		
		/// <summary>
		/// The Region in which to create the meeting. Available values: <code>ap-northeast-1</code>, <code>ap-southeast-1</code>, <code>ap-southeast-2</code>, <code>ca-central-1</code>, <code>eu-central-1</code>, <code>eu-north-1</code>, <code>eu-west-1</code>, <code>eu-west-2</code>, <code>eu-west-3</code>, <code>sa-east-1</code>, <code>us-east-1</code>, <code>us-east-2</code>, <code>us-west-1</code>, <code>us-west-2</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MediaRegion { get; set; }
		
		/// <summary>
		/// The tag key-value pairs.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The configuration for resource targets to receive notifications when Amazon Chime SDK meeting and attendee events occur.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NotificationsConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePhoneNumberOrderBody
	{
		
		/// <summary>
		/// The phone number product type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreatePhoneNumberOrderBodyProductType ProductType { get; set; }
		
		/// <summary>
		/// List of phone numbers, in E.164 format.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public E164PhoneNumber[] E164PhoneNumbers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreatePhoneNumberOrderBodyProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BusinessCalling = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnector = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProxySessionBody
	{
		
		/// <summary>
		/// The participant phone numbers.
		/// Minimum items: 2
		/// Maximum items: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public E164PhoneNumber[] ParticipantPhoneNumbers { get; set; }
		
		/// <summary>
		/// The name of the proxy session.
		/// Pattern: ^$|^[a-zA-Z0-9 ]{0,30}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of minutes allowed for the proxy session.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ExpiryMinutes { get; set; }
		
		/// <summary>
		/// The proxy session capabilities.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Capability[] Capabilities { get; set; }
		
		/// <summary>
		/// The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateProxySessionBodyNumberSelectionBehavior NumberSelectionBehavior { get; set; }
		
		/// <summary>
		/// The preference for matching the country or area code of the proxy phone number with that of the first participant.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateProxySessionBodyGeoMatchLevel GeoMatchLevel { get; set; }
		
		/// <summary>
		/// The country and area code for a proxy phone number in a proxy phone session.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GeoMatchParams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateProxySessionBodyNumberSelectionBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreferSticky = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AvoidSticky = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateProxySessionBodyGeoMatchLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Country = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AreaCode = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRoomBody
	{
		
		/// <summary>
		/// The room name.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The idempotency token for the request.
		/// Max length: 64
		/// Min length: 2
		/// Pattern: [-_a-zA-Z0-9]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=2)]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRoomMembershipBody
	{
		
		/// <summary>
		/// The Amazon Chime member ID (user ID or bot ID).
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MemberId { get; set; }
		
		/// <summary>
		/// The role of the member.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateRoomMembershipBodyRole Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateRoomMembershipBodyRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Administrator = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Member = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUserBody
	{
		
		/// <summary>
		/// The user name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
		
		/// <summary>
		/// The user's email address.
		/// Pattern: .+@.+\..+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The user type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateUserBodyUserType UserType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateUserBodyUserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrivateUser = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SharedDevice = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVoiceConnectorBody
	{
		
		/// <summary>
		/// The name of the Amazon Chime Voice Connector.
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The AWS Region in which the Amazon Chime Voice Connector is created. Default value: <code>us-east-1</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateVoiceConnectorBodyAwsRegion AwsRegion { get; set; }
		
		/// <summary>
		/// When enabled, requires encryption for the Amazon Chime Voice Connector.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool RequireEncryption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateVoiceConnectorBodyAwsRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-east-1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-2 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVoiceConnectorGroupBody
	{
		
		/// <summary>
		/// The name of the Amazon Chime Voice Connector group.
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The Amazon Chime Voice Connectors to route inbound calls to.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorItem[] VoiceConnectorItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAccountBody
	{
		
		/// <summary>
		/// The new name for the specified Amazon Chime account.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutEventsConfigurationBody
	{
		
		/// <summary>
		/// HTTPS endpoint that allows the bot to receive outgoing events.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OutboundEventsHTTPSEndpoint { get; set; }
		
		/// <summary>
		/// Lambda function ARN that allows the bot to receive outgoing events.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LambdaFunctionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePhoneNumberBody
	{
		
		/// <summary>
		/// The product type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdatePhoneNumberBodyProductType ProductType { get; set; }
		
		/// <summary>
		/// The outbound calling name associated with the phone number.
		/// Pattern: ^$|^[a-zA-Z0-9 ]{2,15}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CallingName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdatePhoneNumberBodyProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BusinessCalling = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnector = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateProxySessionBody
	{
		
		/// <summary>
		/// The proxy session capabilities.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Capability[] Capabilities { get; set; }
		
		/// <summary>
		/// The number of minutes allowed for the proxy session.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ExpiryMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRoomBody
	{
		
		/// <summary>
		/// The room name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRoomMembershipBody
	{
		
		/// <summary>
		/// The role of the member.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateRoomMembershipBodyRole Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateRoomMembershipBodyRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Administrator = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Member = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVoiceConnectorBody
	{
		
		/// <summary>
		/// The name of the Amazon Chime Voice Connector.
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// When enabled, requires encryption for the Amazon Chime Voice Connector.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool RequireEncryption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVoiceConnectorGroupBody
	{
		
		/// <summary>
		/// The name of the Amazon Chime Voice Connector group.
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The <code>VoiceConnectorItems</code> to associate with the group.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorItem[] VoiceConnectorItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorOriginationBody
	{
		
		/// <summary>
		/// Origination settings enable your SIP hosts to receive inbound calls using your Amazon Chime Voice Connector.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Origination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorProxyBody
	{
		
		/// <summary>
		/// The default number of minutes allowed for proxy sessions.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DefaultSessionExpiryMinutes { get; set; }
		
		/// <summary>
		/// The countries for proxy phone numbers to be selected from.
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Country[] PhoneNumberPoolCountries { get; set; }
		
		/// <summary>
		/// The phone number to route calls to after a proxy session expires.
		/// Pattern: ^\+?[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FallBackPhoneNumber { get; set; }
		
		/// <summary>
		/// When true, stops proxy sessions from being created on the specified Amazon Chime Voice Connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorStreamingConfigurationBody
	{
		
		/// <summary>
		/// The streaming configuration associated with an Amazon Chime Voice Connector. Specifies whether media streaming is enabled for sending to Amazon Kinesis, and shows the retention period for the Amazon Kinesis data, in hours.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StreamingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorTerminationBody
	{
		
		/// <summary>
		/// Termination settings enable your SIP hosts to make outbound calls using your Amazon Chime Voice Connector.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Termination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVoiceConnectorTerminationCredentialsBody
	{
		
		/// <summary>
		/// The RFC2617 compliant username associated with the SIP credentials, in US-ASCII format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SensitiveString[] Usernames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociatePhoneNumbersFromVoiceConnectorBody
	{
		
		/// <summary>
		/// List of phone numbers, in E.164 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public E164PhoneNumber[] E164PhoneNumbers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociatePhoneNumbersFromVoiceConnectorGroupBody
	{
		
		/// <summary>
		/// List of phone numbers, in E.164 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public E164PhoneNumber[] E164PhoneNumbers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateSigninDelegateGroupsFromAccountBody
	{
		
		/// <summary>
		/// The sign-in delegate group names.
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public String[] GroupNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAccountSettingsBody
	{
		
		/// <summary>
		/// Settings related to the Amazon Chime account. This includes settings that start or stop remote control of shared screens, or start or stop the dial-out option in the Amazon Chime web application. For more information about these settings, see <a href="https://docs.aws.amazon.com/chime/latest/ag/policies.html">Use the Policies Page</a> in the <i>Amazon Chime Administration Guide</i>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateBotBody
	{
		
		/// <summary>
		/// When true, stops the specified bot from running in your account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateGlobalSettingsBody
	{
		
		/// <summary>
		/// The Amazon Chime Business Calling settings for the administrator's AWS account. Includes any Amazon S3 buckets designated for storing call detail records.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BusinessCalling { get; set; }
		
		/// <summary>
		/// The Amazon Chime Voice Connector settings. Includes any Amazon S3 buckets designated for storing call detail records.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VoiceConnector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePhoneNumberSettingsBody
	{
		
		/// <summary>
		/// The default outbound calling name for the account.
		/// Pattern: ^$|^[a-zA-Z0-9 ]{2,15}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallingName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRetentionSettingsBody
	{
		
		/// <summary>
		/// The retention settings for an Amazon Chime Enterprise account that determine how long to retain items such as chat room messages and chat conversation messages.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RetentionSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserBody
	{
		
		/// <summary>
		/// The user license type to update. This must be a supported license type for the Amazon Chime account that the user belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateUserBodyLicenseType LicenseType { get; set; }
		
		/// <summary>
		/// The user type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateUserBodyUserType UserType { get; set; }
		
		/// <summary>
		/// The Alexa for Business metadata associated with an Amazon Chime user, used to integrate Alexa for Business with a device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AlexaForBusinessMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateUserBodyLicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Basic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Plus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pro = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProTrial = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateUserBodyUserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrivateUser = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SharedDevice = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserSettingsBody
	{
		
		/// <summary>
		/// Settings associated with an Amazon Chime user, including inbound and outbound calling and text messaging.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorLoggingConfigurationBody
	{
		
		/// <summary>
		/// The logging configuration associated with an Amazon Chime Voice Connector. Specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoggingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InviteUsersBody
	{
		
		/// <summary>
		/// The user email addresses to which to send the email invitation.
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public EmailAddress[] UserEmailList { get; set; }
		
		/// <summary>
		/// The user type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InviteUsersBodyUserType UserType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InviteUsersBodyUserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PrivateUser = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SharedDevice = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutVoiceConnectorTerminationCredentialsBody
	{
		
		/// <summary>
		/// The termination SIP credentials.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Credential[] Credentials { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagAttendeeBody
	{
		
		/// <summary>
		/// The tag key-value pairs.
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagMeetingBody
	{
		
		/// <summary>
		/// The tag key-value pairs.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		/// The resource ARN.
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^arn[\/\:\-\_\.a-zA-Z0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// The tag key-value pairs.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagAttendeeBody
	{
		
		/// <summary>
		/// The tag keys.
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public TagKey[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagMeetingBody
	{
		
		/// <summary>
		/// The tag keys.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagKey[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceBody
	{
		
		/// <summary>
		/// The resource ARN.
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^arn[\/\:\-\_\.a-zA-Z0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// The tag keys.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public TagKey[] TagKeys { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
